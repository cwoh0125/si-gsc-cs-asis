package kr.co.cs.daemon;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import oracle.sql.STRUCT;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionMapping;
import org.springframework.beans.factory.parsing.ParseState;

import com.ibatis.sqlmap.client.SqlMapClient;
import com.tobesoft.xplatform.data.DataSet;
import com.tobesoft.xplatform.data.DataSetList;
import com.tobesoft.xplatform.data.DataTypes;
import com.tobesoft.xplatform.data.PlatformData;
import com.tobesoft.xplatform.data.VariableList;
import com.tobesoft.xplatform.tx.HttpPlatformResponse;
import com.tobesoft.xplatform.tx.PlatformType;

import kr.co.cs.common.publicutil.FtpUtil;
import kr.co.cs.common.publicutil.SFTPUtil;
import kr.co.cs.common.config.Const;
import kr.co.cs.common.publicutil.ComUtil;
import kr.co.cs.persistence.dao.CommonDao;
import kr.co.cs.presentation.xcommon.XbaseAction;

/**
 * @author Administrator
 * 
 * 기타 통계배치 데몬 
 * - 접촉이력 일별집계
 * - 상담사인원 일별집계
 * 
 */
public class EtcStaApp_real extends XbaseAction {

	private String strDlmtCrLf   	= "\n";
	// parsing 구분 및 계행	
	private String strWithDLmt = "|^";
	private String strWithCrLf = "|#$";
	private String pWorkDay = ComUtil.getCurDateTime("yyyyMMdd");
	
	/*
	 * 생성자
	 * was기동시에 시작되게..
	 * */
	public EtcStaApp_real() {
		startEtcSta(true);
	}
	
	private final static Logger extlogger = LogManager.getLogger("process.ext");
	
	private CommonDao commonDao = null;

	public void setCommonDao(CommonDao commonDao) {
		this.commonDao = commonDao;  
	}
	
	public void StartEtcStaDaemon(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {		
		System.out.println("StartEtcStaDaemon()::called!");
		startEtcSta();
	}
	
	public void StopEtcStaDaemon(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		HashMap<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("val", "N");
		paramMap.put("cd", "DM_ETCSTARUN");
		commonDao.update("Common.Set_DaemonState", paramMap);
	}
		
	public void EtcStaState(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		Map<Thread, StackTraceElement[]> map = Thread.getAllStackTraces();
		Iterator<Thread> ir = map.keySet().iterator();

		String alive = "N";
		while(ir.hasNext()) {
			Thread th = ir.next();
			if(th.getName().indexOf("EtcStaDaemonThread")>=0) {
				System.out.println("Alive");
				alive = "Y";
			}
		}
		
		HttpPlatformResponse platformResponse = new HttpPlatformResponse(response, PlatformType.CONTENT_TYPE_XML, "UTF-8");
		VariableList outvlist = new VariableList();
		outvlist.add("EtcStaStatusMsg", alive);		
		PlatformData output = new PlatformData();
		output.setVariableList(outvlist);
System.out.println("EtcStaDaemonThread alive state=[" + alive + "]");

		platformResponse.setData(output);
		platformResponse.sendData();
	}
		
	private void startEtcSta() throws Exception {
		System.out.println("-->startEtcSta()::called!");
		
		HashMap<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("val", "Y");
		paramMap.put("cd", "DM_ETCSTARUN");
		commonDao.update("Common.Set_DaemonState", paramMap);
		
		startEtcSta(true);
	}
 
	private void startEtcSta(Boolean a) {		
		System.out.println("--->startEtcSta(true)::called!");
		
		try {
			String server_name = InetAddress.getLocalHost().getHostName().trim();
			System.out.println("server_name===>"+server_name);
			if(!("___WKH-BT-N".equals(server_name) ||
					"___wkh-bt-n".equals(server_name) ||
			   //"CRMDEV".equals(server_name) ||  //개발계에는 요거 
				 "co7a-2f4ace09f0".equals(server_name) ||		//개발자PC명 입력하면됨
				 Const.WAS1NAME.equals(server_name) ||
				 Const.WAS2NAME.equals(server_name))) 
			{
				System.out.println(new Date() + " : ETCSTA DAEMON STOP ::::: STOPING AS SERVER IS NOT PROD ........");
				extlogger.debug("[ETCSTA DAEMON STOP ::::: STOPING AS SERVER IS NOT PROD ........]");
				System.out.println("[ETCSTA DAEMON STOP ::::: STOPING AS SERVER IS NOT PROD ........]");
				return;
			}
		} catch (UnknownHostException e1) {			
			return;
		}
		
		////System.out.println(new Date() + " : ETCSTA DAEMON GO ::::: GO GO GO........");
		extlogger.debug("[ETCSTA DAEMON GO ::::: GO GO GO ........]");

		Map<Thread, StackTraceElement[]> map = Thread.getAllStackTraces();
		Iterator<Thread> ir = map.keySet().iterator();

		while(ir.hasNext()) {
			Thread th = ir.next();
			if(th.getName().indexOf("EtcStaDaemonThread")>=0) { 
				//th.interrupt();
				return;
			}
		}
 
		Thread etcStaThread = new Thread() {
			public void run() {
				
				HashMap<String, String> runmap = new HashMap<String, String>();
				runmap.put("cd", "DM_ETCSTARUN");
				String bb = null;
				
				SimpleDateFormat sdfDtm = new SimpleDateFormat("HHmm");
				Calendar calDay = Calendar.getInstance();
				String strCurTime = sdfDtm.format( calDay.getTime() );
				
				int tloop = 0;
				int execloop = 0;
				
				while(true) {
					try {
					  Thread.sleep(60000); // 1 분					
						tloop++;
						execloop++;
						
						//현재시각체크
						calDay = Calendar.getInstance();
						strCurTime = sdfDtm.format( calDay.getTime() );
					} catch(Exception e) {}				 
					try {
						if(tloop==2) { //디비체크는2분에 한번타게끔..
							tloop = 0;
							bb = commonDao.selectString("Common.Get_DaemonRunning", runmap);			
						//	extlogger.debug("[ETC STA DAEMON STOP ::::: START........]");
					  	//	EtcStaByMonth("", "2", "");              
							if("N".equals(bb)) {
								extlogger.debug("[ETC STA DAEMON STOP ::::: STOP STOP STOP........]");
								execloop = 0; //loop 초기화 (아래 안타게..)
								break;
							}
						}   
					} catch(Exception e) {}

					try {
						//System.out.println("execloop count :: "+execloop);
						if(execloop== 10) { //10분에 한번 호출..						
							execloop = 0;
							if( "182".equals(strCurTime.substring(0, 3)) ) {	//일별배치는 18시20분대에 최초실행하고 23시30분에 다시한번 실행
								EtcStaByDay("", "1", "1");							
							}
							
							if( "233".equals(strCurTime.substring(0, 3)) ) {	//23시30분대에 실행
								EtcStaByDay("", "1", "1");
								EtcStaByMonth("", "1", "1");
							}
							
							if( "223".equals(strCurTime.substring(0, 3)) ) {	//테스트 19시00분 확인 후 22시30분대로 수정 
								 EtcStaByMonth("", "2", "");                                     //개인정보 삭제 월말 배치 추가 20170331								
							}						
							if( "232".equals(strCurTime.substring(0, 3)) ) {	// 23시 20분대에 실행 파트 이력정보 매월말
								PartHistByMonth("", "1");
							}							
							
							if( "003".equals(strCurTime.substring(0, 3)) ) {	// 00시 30분대에 실행 매주 월요일날 실행
								LpMasterMigInsert("");
								LpMasterInfoUpdate("");
							}
							
							if( "010".equals(strCurTime.substring(0, 3)) ) {	// 01시 00분대에 실행 접촉이력 상세 코드 매월 말
								BizDvCdMig("");							             
							}				
							//분리 보관 배치 
							
							//1. 삭제 대상 파일 업로드 20시 00분에 실행
							
							//2. 삭제 대상 파일 다운로드 21시 00분에 실행
							
							//3. 삭제 대상 파일 전송 22시 00분에 실행
							
							
						}
						
					} catch(Exception e) {}
				}
			}
		};
		
		etcStaThread.setName("EtcStaDaemonThread");		
		etcStaThread.setDaemon(true);
		etcStaThread.start();
	}
	
	/*
	 * 강제로 통계작업 시킨다.
	 * */
	public void ForceWork(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		//System.out.println("ForceWork::called");
		
		String sTime = request.getParameter("sTime");
		if(sTime==null || "".equals(sTime) || "null".equals(sTime)) {
			sTime = ComUtil.getCurDateTime("yyyyMMdd");
		}

		String sChkContHist  = request.getParameter("CONTHIST"); //실행여부
		String sChkYnUsrHist = request.getParameter("USRHIST");  //실행여부
		String sChkUsrSttc   = request.getParameter("USRSTTC");  //실행여부
		String sChkGrpSttc   = request.getParameter("GRPSTTC");  //실행여부
		
		//일별작업
		EtcStaByDay(sTime, sChkContHist, sChkYnUsrHist);
		
		//월별작업
		EtcStaByMonth(sTime, sChkUsrSttc, sChkGrpSttc);
		
		//LP MASTER 통계 테이블 강제작업 2013.02
		//LpMasterMigInsert("");
		//LP MASTER 통계 테이블 강제작업 2013.02
		//LpMasterInfoUpdate("");
		 
		//BizDvCdMig("");
	}

	//일별작업
	private void EtcStaByDay(String pWorkDay, String pChkContHist, String pChkUsrHist) {
		
		//System.out.println("EtcStaByDay::called");
		
		if(pWorkDay==null || "".equals(pWorkDay) || "null".equals(pWorkDay))
		{
			pWorkDay = ComUtil.getCurDateTime("yyyyMMdd");
		}
		
		if("1".equals(pChkContHist))
			ContactHistDay(pWorkDay);	//접촉이력 일별집계
		
		if("1".equals(pChkUsrHist))
			UserHistDay(pWorkDay);		//상담사인원 일별집계

	}
	

	//월별작업
	private void EtcStaByMonth(String pWorkDay, String pChkUsrSttc, String pChkGrpSttc) {
		
		System.out.println("EtcStaByMonth::called::"+pWorkDay);

		if(pWorkDay==null || "".equals(pWorkDay) || "null".equals(pWorkDay))
		{
			//자동실행일경우에만 들어옴
			pWorkDay = ComUtil.getCurDateTime("yyyyMMdd");
			
			//월의 마지막일자 계산
			Calendar calDay = Calendar.getInstance();
			int iLastDay = calDay.getActualMaximum(calDay.DAY_OF_MONTH);
			String sMonthLastDay = pWorkDay.substring(0,6)+Integer.toString(iLastDay);
			
			//월의 마지막일이 아니면 실행안함
			extlogger.debug("-->pWorkDay::" + pWorkDay);
			extlogger.debug("-->sMonthLastDay::" + sMonthLastDay);
		
			if( !pWorkDay.equals(sMonthLastDay) )
				return;  
	  	    }
 
		//강제작업요청시 또는 월의 마지막일자일 경우 실행
		if("1".equals(pChkUsrSttc)){
			AsesUserSttcMM(pWorkDay);	//월평가 상담원 월별집계
		}
		if("1".equals(pChkGrpSttc)){
			AsesGrpSttcMM(pWorkDay);	//월평가 그룹 월별집계
		}
		if("2".equals(pChkUsrSttc)){			
			PrivacyMtrDel(pWorkDay);	//월 개인정보 삭제< SP_BT_PRIV_EXEC  20160408>		  
		}
	}
	
		
	//SP_BT_PRIV_EXEC    20160408 개인정보 삭제 
	private void PrivacyMtrDel(String pWorkDay) {		
		
		try {
			extlogger.debug("Prc_BT_PRIVACY_MTR_DEL::  START !!"+pWorkDay);			
			String sqlmapid = "ETC_STA.Prc_BT_PRIVACY_MTR_DEL";
			HashMap map = new HashMap();
			map.put("I_WORK_DT", pWorkDay);
			map.put("I_USER_ID", "SYSTEM"); 
			commonDao.selectString(sqlmapid, map);
		} catch (Exception e) {System.out.println("e====>"+e);}
	}
	
	
	//파트이력월별등록
	private void PartHistByMonth(String pWorkDay, String pChkCnslrPartIns) {
		
		//System.out.println("EtcStaByMonth::called");

		if(pWorkDay==null || "".equals(pWorkDay) || "null".equals(pWorkDay))
		{
			//자동실행일경우에만 들어옴
			pWorkDay = ComUtil.getCurDateTime("yyyyMMdd");
			
			//월의 마지막일자 계산
			Calendar calDay = Calendar.getInstance();
			int iLastDay = calDay.getActualMaximum(calDay.DAY_OF_MONTH);
			String sMonthLastDay = pWorkDay.substring(0,6)+Integer.toString(iLastDay);
			//월의 마지막일이 아니면 실행안함
			//System.out.println("-->pWorkDay::" + pWorkDay);
			//System.out.println("-->sMonthLastDay::" + sMonthLastDay);
			if( !pWorkDay.equals(sMonthLastDay) )
				return;
		}

		if("1".equals(pChkCnslrPartIns))
			PartHistInsrt();
	}		
	
	//접촉이력 일별집계생성
	private void ContactHistDay(String pWorkDay) {
		try {
			//System.out.println("-->ContactHistDay::start");

			String sqlmapid = "ETC_STA.Prc_CONTACT_HIST_DAY_SELECT";
			HashMap map = new HashMap();
			map.put("I_WORK_DAY", pWorkDay); //작업일자
			commonDao.selectString(sqlmapid, map);
	
			//System.out.println("ContactHistDay::end");
		} catch (Exception e) {}
	}

	//상담사인원 일별집계생성
	private void UserHistDay(String pWorkDay) {
		try {
			//System.out.println("UserHistDay::start");
			String sqlmapid = "ETC_STA.Prc_USER_HIST_DAY_SELECT";
			HashMap map = new HashMap();
			map.put("I_WORK_DAY", pWorkDay); //작업일자
			commonDao.selectString(sqlmapid, map);
	
			//System.out.println("UserHistDay::called end");
		} catch (Exception e) {}
	}

	//월평가 상담원 월별집계생성
	private void AsesUserSttcMM(String pWorkDay) {
		try {
			//System.out.println("AsesUserSttcMM::start");
			String sWorkYm = pWorkDay.substring(0, 6); //작업년월

			String sqlmapid = "ETC_STA.Prc_CNSLR_STTC_MM_SELECT";
			HashMap map = new HashMap();
			map.put("I_WORK_YM", sWorkYm); //작업년월
			commonDao.selectString(sqlmapid, map);
	
			//System.out.println("AsesUserSttcMM::end");
		} catch (Exception e) {}
	}

	//월평가 그룹 월별집계생성
	private void AsesGrpSttcMM(String pWorkDay) {
		try {
			//System.out.println("AsesGrpSttcMM::start");
			String sWorkYm = pWorkDay.substring(0, 6); //작업년월

			String sqlmapid = "ETC_STA.Prc_GRP_STTC_MM_SELECT";
			HashMap map = new HashMap();
			map.put("I_WORK_YM", sWorkYm); //작업년월
			commonDao.selectString(sqlmapid, map);
	
			//System.out.println("AsesGrpSttcMM::end");
		} catch (Exception e) {}
	}
	
	// 파트이력등록(QA통계에서 사용)
	private void PartHistInsrt() {
		try {
			//System.out.println("-->ContactHistDay::start");
			Calendar calDay = Calendar.getInstance();
			
			// 월말에 다음월의 파트정보를 등록한다.
			calDay.add(calDay.MONTH, 1);
			int YY = calDay.get(calDay.YEAR);
			int MM = calDay.get(calDay.MONTH)+1;
			String NextMon = Integer.toString(MM);
			
			if(NextMon.length() == 1){
				NextMon = "0" + NextMon;				
			}
			
			String pRegYm = Integer.toString(YY) + NextMon;
			String sqlmapid = "ETC_STA.Prc_PART_HIST_MONTH_INSERT";
			HashMap map = new HashMap();
			map.put("I_WORK_YM", pRegYm); //작업일자
			commonDao.insert(sqlmapid, map);
			
			//System.out.println("PartHistByMonth::end");
	
		} catch (Exception e) {}		
	}
	
	//LP MASTER 통계자료 2013.02
	private void LpMasterMigInsert(String pWorkDay) {
		
		if(pWorkDay==null || "".equals(pWorkDay) || "null".equals(pWorkDay))
		{

			pWorkDay = ComUtil.getCurDateTime("yyyyMMdd");
			
			String year = pWorkDay.substring(0,4);
			String month = pWorkDay.substring(4,6);
			String day = pWorkDay.substring(6,8);
			if("01".equals(day)){
				month = Integer.toString(Integer.parseInt(month)-1);
				if(month.length() == 1){
					month = "0" + month;
				}
				if("00".equals(month)){
					year = Integer.toString(Integer.parseInt(year)-1);
					month = "12";
				}
				if("01".equals(month)||"03".equals(month)||"05".equals(month)||"07".equals(month)||"08".equals(month)||"10".equals(month)||"12".equals(month)){
					day = "31";
				}else if("02".equals(month)){
					if(IsLeapYear() == "true"){
						day = "29";
					}else{
						day = "28";
					}
				}else{
					day = "30";
				}
			}else{
				day = Integer.toString(Integer.parseInt(day)-1);
				if(day.length() == 1){
					day = "0" + day;
				}
			}
			
		pWorkDay = year + month + day;
		}
		
		try {
			System.out.println("-->LpMasterMigInsert::start");
			String sqlmapid = "ETC_STA.Prc_LP_MASTER_MIG_SELECT";
			HashMap map = new HashMap();
			map.put("I_WORK_DAY", pWorkDay); 
			commonDao.selectString(sqlmapid, map);
		} catch (Exception e) {}
		
	}
	
	//LP MASTER 등록완료 데이터 삭제 2013.02
	//매주 월요일 삭제
	private void LpMasterInfoUpdate(String pWorkDay) {
		
		if(pWorkDay==null || "".equals(pWorkDay) || "null".equals(pWorkDay))
		{
			SimpleDateFormat formatter = new SimpleDateFormat ("yyyyMMdd");
			Calendar calDay = Calendar.getInstance();
			
			int weekDay = calDay.get(Calendar.DAY_OF_WEEK);
			int monthDay = calDay.get(Calendar.DAY_OF_MONTH);
			
			calDay.set(Calendar.DAY_OF_MONTH, monthDay-7);
			pWorkDay = formatter.format(calDay.getTime());
			if(weekDay != 2){
				return;
			}
		}
		
		try {
			System.out.println("-->LpMasterInfoUpdate::start");
			String sqlmapid = "ETC_STA.Prc_LP_MASTER_DATA_DEL";
			HashMap map = new HashMap();
			map.put("I_WORK_DAY", pWorkDay); 
			commonDao.selectString(sqlmapid, map);
		} catch (Exception e) {}
	}
	
	//윤년여부 구하기 2013.08
	public String IsLeapYear(){
		Date date = new Date();
		int year = date.getYear();
		if(year%4 == 0){
			if((year%100) != 0 || (year%400) == 0){
				return "true";
			}else{
				return "fasle";
			}
		}else{
			return "false";
		}
	}
	
	//접촉이력 업무상세코드 통계데이터 MIG 2013.12
	private void BizDvCdMig(String pWorkDay) {
		
		if(pWorkDay==null || "".equals(pWorkDay) || "null".equals(pWorkDay))
		{
			pWorkDay = ComUtil.getCurDateTime("yyyyMMdd");
			
			String year = pWorkDay.substring(0,4);
			String month = pWorkDay.substring(4,6);
			String day = pWorkDay.substring(6,8);
			if("01".equals(day)){
				month = Integer.toString(Integer.parseInt(month)-1);
				if(month.length() == 1){
					month = "0" + month;
				}
				if("00".equals(month)){
					year = Integer.toString(Integer.parseInt(year)-1);
					month = "12";
				}
				if("01".equals(month)||"03".equals(month)||"05".equals(month)||"07".equals(month)||"08".equals(month)||"10".equals(month)||"12".equals(month)){
					day = "31";
				}else if("02".equals(month)){
					if(IsLeapYear() == "true"){
						day = "29";
					}else{
						day = "28";
					}
				}else{
					day = "30";
				}
			}else{
				day = Integer.toString(Integer.parseInt(day)-1);
				if(day.length() == 1){
					day = "0" + day;
				}
			}
			
			pWorkDay = year + month + day;
		}
		
		try {
			extlogger.debug("-->BizDvCdMig::start");
			System.out.println("-->BizDvCdMig::start");
			String sqlmapid = "STA150.Prc_Biz_Dv_Cd_Mig";
			HashMap map = new HashMap();
			map.put("I_WORK_DAY", pWorkDay); 
			commonDao.selectString(sqlmapid, map);
			extlogger.debug(map.get("O_RESULT"));
			extlogger.debug("-->BizDvCdMig::end");
		} catch (Exception e) {
		}
	}
	/*
	 * 강제로 biz_dv_mig 작업 시킨다.
	 * */
	public void ForceWork_BizDv(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		String date = request.getParameter("date");
		if(date==null || "".equals(date) || "null".equals(date)) {
			date = ComUtil.getCurDateTime("yyyyMMdd");
		}
		
		BizDvCdMig(date);
	}
	
	

	// ----------------------------------------------------------------------------
	// 33.  GSC 탈회고객 대상정보 수신
	// 최초 작성일 : 2017-05
	// 최종 수정일 : 
	// ----------------------------------------------------------------------------
	// T_GC_RTCS_IF_M 에서 work_day로 대상자를 TBL_WITHDRAW_CUST 저장
	// ----------------------------------------------------------------------------
	public void procBatch33(String pWorkDay) throws Exception {
		if(pWorkDay==null || "".equals(pWorkDay) || "null".equals(pWorkDay))
		{
			pWorkDay = ComUtil.getCurDateTime("yyyyMMdd");		
		}
		
		try {
			extlogger.debug("-->procBatch33::start");
			System.out.println("-->procBatch33::start");
			String sqlmapid = "ETC_STA.DPXGZA";
			HashMap map = new HashMap();
			map.put("I_WORK_DAY", pWorkDay); 
			commonDao.selectString(sqlmapid, map);
			extlogger.debug(map.get("O_RESULT"));
			extlogger.debug("-->procBatch33::end");
		} catch (Exception e) {
		}	
			
	}

	
	// ----------------------------------------------------------------------------
	// 34.  GSC 탈회고객 분리보관 대상 정보 처리 ( 파일 생성 및 데이터 삭제 )
	// 최초 작성일 : 2017-05
	// 최종 수정일 : 
	// ----------------------------------------------------------------------------
	// DB 에 업로드된 고객번호를 기반으로 대상 정보를 추출 하여 생성하고, 데이터를 삭제 한다. 
	// ----------------------------------------------------------------------------
	//public void procBatch34(String pWorkDay) throws Exception {
	public void procBatch34(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		String rtnJobSeq = ""; // 작업순번
		String strErrCd = ""; // 오류코드
		String strErrMsg = ""; // 오류메시지
		
		boolean bDnload = false;
		
		int i_tot_cnt 	= 0; 	//
		int i_err_cnt 	= 0;
		int i_scss_cnt 	= 0;
		System.out.println("procBatch34 START");
		extlogger.debug( "procBatch34 START");
		
		try{
			// 배치작업개시로그		
				
			// -------------------------------------------------------------
			// DB 개인정보 삭제 대상 테이블 정보 조회
			// -------------------------------------------------------------
		
			String sqlmapid = "ETC_STA.DPXGZA0";	//테이블 목록 조회
			HashMap map = new HashMap();
			
			//대상 테이블 목록을 조회 한다.
			commonDao.selectString(sqlmapid, map);
			
			List list1 = (ArrayList)map.get("O_RESULT"); // 
			
			//i_tot_cnt = list1.size();
			//대상 테이블 별 SP 생성
			
			extlogger.debug( "[DPXGZA0] Target Table Select = ["+list1.size()+"]");
			
			if(list1.size() > 0){
				
				HashMap<String, String> mapRow1 = null;
				HashMap<String, String> mapRow2 = null;
				HashMap<String, String> mapRow3 = null;
				
				String tbName = "";
				String owner = "";
				for(int i=0; i<list1.size(); i++){
					
					mapRow1 = (HashMap<String, String>) list1.get(i);
					
					tbName = mapRow1.get("TABLE_NAME");
					owner = mapRow1.get("OWNER");
					
					//대상 컬럼 목록을 조회 한다.
					sqlmapid = "ETC_STA.DPXGZA1";			//대상 컬럼 목록조회
					
					//writeLogFile(pBatchId, "owner = [" +owner+"]");
					
					if (owner.equals("GSIB")) {
						i_tot_cnt++;
						
						HashMap map2 = new HashMap();
						HashMap map3 = new HashMap();
					
						map2.put("I_OWNER", owner);
						map2.put("I_TABLE_NAME", tbName);
						
						commonDao.selectString(sqlmapid, map2);
						
						ArrayList list2 = (ArrayList)map2.get("O_RESULT"); //
						
						extlogger.debug( "Table column select = [" +list2.size()+"]");
						
						StringBuffer strSql1 = new StringBuffer();
						StringBuffer strSql2 = new StringBuffer();
						
						strSql2.append(" SELECT ");
						for(int j=0; j<list2.size(); j++){
							
							mapRow2 = (HashMap<String, String>) list2.get(j);
							strSql1.append(mapRow2.get("COLUMN_NAME"));
							strSql1.append(strWithDLmt);
							
							strSql2.append(mapRow2.get("COLUMN_NAME"));
							if(j < list2.size()-1){
								strSql2.append(" , ");
							}		
						}
						
						strSql1.append(strWithCrLf);
						
						strSql2.append(strDlmtCrLf);
						strSql2.append("FROM  ");						
						strSql2.append(tbName + " A ");
						strSql2.append(strDlmtCrLf);
						strSql2.append(", TBL_WITHDRAW_CUST B ");
						strSql2.append(strDlmtCrLf);
	                  
						//컬럼이름이 다르다.					
						if(tbName.equals("TBL_PRIME_CNCL_HIST") || tbName.equals( "TBL_SMT_CALLBACK")){						
							strSql2.append(" WHERE A.INTG_CUST_NO = B.G_CUST_NO");						
						}else{									
							strSql2.append(" WHERE A.CUST_ID = B.G_CUST_NO");
						}
						strSql2.append(strDlmtCrLf);
						strSql2.append("   AND B.WORK_DT = '"+pWorkDay+"'");
						
						//writeLogFile(pBatchId, "strSql1 : " + strSql1.toString());
						//writeLogFile(pBatchId, "strSql2 : " + strSql2.toString());
						
						//대상 테이블 데이터 조회 
						System.out.println( " strSql1.toString()=>"+strSql1.toString());
						System.out.println( " strSql2.toString()=>"+strSql2.toString());
						sqlmapid = "ETC_STA.DPXGZA3_"+tbName;						
						map2.put("I_SQL", strSql2.toString());						
						commonDao.selectString(sqlmapid, map2);						
						String rstCd = (String)map2.get("O_RTN_CD");
						
						//extlogger.debug( "ETC_STA.DPXGZA3 rstCd= ["+rstCd+"]");
						//System.out.println("ETC_STA.DPXGZA3 rstCd=  ["+rstCd+"]");
						if(rstCd.equals("0")){
							ArrayList list3 = (ArrayList)map2.get("O_RESULT"); //
							
							for(int k =0 ; k < list3.size() ; k++){
							System.out.println(list3.get(k));
							}
						
							//출력 디렉터리 생성 
							String filePath = Const.WITH_GSIB_DOWN+pWorkDay+  File.separator;
							System.out.println("filePath=>"+filePath);
							File dir = new File(filePath);
							if (!dir.isDirectory()) {
								//디렉터리 생성 
								//System.out.println("dir.mkdir()"+dir);
								dir.mkdir();					
							}							
							
							
							//파일 생성							
							createWithFile(list2, list3, strSql1.toString(),tbName,pWorkDay,filePath);
							
							i_scss_cnt++;
						}
					}
					
				}
			}
			
			extlogger.debug("strErrCd : " + strErrCd);
			extlogger.debug("strErrMsg : " + strErrMsg);
			
		}catch(SQLException sqe){
			strErrMsg = "Exception Error!:" + sqe.getMessage();
			sqe.printStackTrace();
			System.out.println(strErrMsg);
			extlogger.debug(strErrMsg);
			i_err_cnt++;
		}catch(Exception e){
			strErrMsg = "Exception Error!:" + e.getMessage();
			e.printStackTrace();
			System.out.println(strErrMsg);
			extlogger.debug( strErrMsg);
			i_err_cnt++;
		}finally {
		
			// 배치작업종료로그출력
			extlogger.debug("procBatch34 END");
		}
			
	}
	
	// ----------------------------------------------------------------------------
	// 35. GSC 탈회고객 분리보관 대상 정보 송신 
	// 최초 작성일 : 2017-05
	// 최종 수정일 : 
	// ----------------------------------------------------------------------------
	// 분리보관 대상 데이터를 전송 한다.
	// ----------------------------------------------------------------------------
	public void procBatch35(String pBatchId, String pWorkDay) throws Exception {
		String rtnJobSeq = ""; // 작업순번
		String strErrCd = ""; // 오류코드
		String strErrMsg = ""; // 오류메시지
		
		boolean bDnload = false;
		
		int i_tot_cnt 	= 0; 	//
		int i_err_cnt 	= 0;
		int i_scss_cnt 	= 0;
		
		extlogger.debug("procBatch35 START");
		
		try{
			// 배치작업개시로그			
				
			// -------------------------------------------------------------
			// 작성파일 목록 조회
			// -------------------------------------------------------------
			/*
			String sqlmapid = "ETC_STA.DPXGB00";
			HashMap map = new HashMap();
			map.put("I_WORK_DT", pWorkDay);
			map.put("I_USER_ID", pBatchId); // 등록자ID
			commonDao.selectString(sqlmapid, map);
			strErrCd  = (String) map.get("O_RESULT1"); 	// 결과 코드
			strErrMsg = (String) map.get("O_RESULT2");	// 결과 메세지
			
			extlogger.debug( "strErrCd : " + strErrCd);
			extlogger.debug("strErrMsg : " + strErrMsg);
		}catch(SQLException sqe){
			strErrMsg = "Exception Error!:" + sqe.getMessage();
			sqe.printStackTrace();
			System.out.println(strErrMsg);
		   extlogger.debug(strErrMsg);
			i_err_cnt++;	
			*/
		}catch(Exception e){
			strErrMsg = "Exception Error!:" + e.getMessage();
			e.printStackTrace();
			System.out.println(strErrMsg);
			extlogger.debug(strErrMsg);
			i_err_cnt++;
		}finally {
			// 
			// 배치작업종료로그출력
			extlogger.debug("procBatch35 END");
		}
			
	}
	
	// ----------------------------------------------------------------------------
	// 99. GSC 탈회회원 처리를 위한 SP 생성
	// 최초 작성일 : 2017-04
	// 최종 수정일 : 
	// ----------------------------------------------------------------------------
	// GSC 탈회회원 처리를 위한 SP 를 생성한다.
	// ----------------------------------------------------------------------------
	public void procBatch99(String pBatchId, String pWorkDay) throws Exception {
		
		String rtnJobSeq = ""; // 작업순번
		String strErrCd = "";  // 결과코드
		String strErrMsg = ""; // 결과메시지
		
		int i_tot_cnt 	= 0; 	//
		int i_err_cnt 	= 0;
		int i_scss_cnt 	= 0;
		
		extlogger.debug("procBatch99 START");
		
		try{
			
			
			// -------------------------------------------------------------
			// SP 생성 대상 테이블 정보 조회 
			// -------------------------------------------------------------
			String sqlmapid = "ETC_STA.DPXGZA0";
			HashMap map = new HashMap();
			commonDao.selectString(sqlmapid, map);

			List list1 = (ArrayList)map.get("O_RESULT"); // 
			
			i_tot_cnt = list1.size();
			//대상 테이블 별 SP 생성
			
			extlogger.debug("[DPXGZA0] Target Table Select = ["+list1.size()+"]");
			
			
			if(list1.size() > 0){
				
				HashMap<String, String> mapRow1 = null;
				HashMap<String, String> mapRow2 = null;
				
				String tbName = "";
				for(int i=0; i<list1.size(); i++){
					
					mapRow1 = (HashMap<String, String>) list1.get(i);
					
					tbName = mapRow1.get("TABLE_NAME");
					
					sqlmapid = "ETC_STA.DPXGZA1";
					
					HashMap map2 = new HashMap();
					map2.put("I_OWNER", mapRow1.get("OWNER"));
					map2.put("I_TABLE_NAME", tbName);
					
					commonDao.selectString(sqlmapid, map2);
					
					ArrayList list2 = (ArrayList)map2.get("O_RESULT"); //
					
					
					for(int j=0; j<list2.size(); j++){
						
						mapRow2 = (HashMap<String, String>) list2.get(j);
						
						createSPFile(list2,tbName);
					}
					
					i_scss_cnt++;
					
				}
			}

			
		}catch(SQLException sqe){
			strErrMsg = "Exception Error!:" + sqe.getMessage();
			sqe.printStackTrace();
			System.out.println(strErrMsg);
			extlogger.debug(strErrMsg);
			i_err_cnt++;
			
		}catch(Exception e){
			strErrMsg = "Exception Error!:" + e.getMessage();
			e.printStackTrace();
			System.out.println(strErrMsg);
			extlogger.debug(strErrMsg);
			i_err_cnt++;
			
		}finally {			
			// 배치작업종료로그출력
			extlogger.debug("procBatch99 END");
		}
		
	}
	

	/**
	 * SP CREATE FUNCTION
	 * 
	 * @param tblList
	 * @throws Exception
	 */
	private void createSPFile(ArrayList tblList, String Filename) throws Exception {
		
		StringBuffer sbSPfile = new StringBuffer();
		
		try{
			
			PrintStream pStrmSPFile = new PrintStream(new FileOutputStream(Const.GSC_SP_PATH+"SP_"+Filename+".prc", false));
			
			HashMap<String, String> mapRow = null;
			
			sbSPfile.append(" CREATE OR REPLACE PROCEDURE SP_"+ Filename + " (");
			sbSPfile.append(strDlmtCrLf);
			
			for(int i=0; i<tblList.size(); i++){
				
				mapRow = (HashMap<String, String>) tblList.get(i);
				sbSPfile.append(" I_"+ mapRow.get("COLUMN_NAME")  +" IN VARCHAR2 ,");
				sbSPfile.append(strDlmtCrLf);
			}
			
			sbSPfile.append(" O_RESULT OUT VARCHAR2");
			sbSPfile.append(strDlmtCrLf);
			sbSPfile.append(" )");
			sbSPfile.append(strDlmtCrLf);
			sbSPfile.append(" IS");
			sbSPfile.append(strDlmtCrLf);
			
			sbSPfile.append(" BEGIN");
			sbSPfile.append(strDlmtCrLf);
			
			sbSPfile.append(" INSERT INTO "+ Filename + " (");
			sbSPfile.append(strDlmtCrLf);
			
			for(int i=0; i<tblList.size(); i++){
				mapRow = (HashMap<String, String>) tblList.get(i);
				
				sbSPfile.append("  "+mapRow.get("COLUMN_NAME"));
				
				if(i<tblList.size()-1){
					sbSPfile.append(","+strDlmtCrLf);
				}else{
					sbSPfile.append(strDlmtCrLf);
				}
			}
			
			sbSPfile.append(" ) VALUES  (");
			sbSPfile.append(strDlmtCrLf);
			
			for(int i=0; i<tblList.size(); i++){
				mapRow = (HashMap<String, String>) tblList.get(i);
				
				sbSPfile.append("I_"+mapRow.get("COLUMN_NAME"));
				
				if(i<tblList.size()-1){
					sbSPfile.append(","+strDlmtCrLf);
				}else{
					sbSPfile.append(strDlmtCrLf);
				}
			}
			sbSPfile.append(" ); ");
			sbSPfile.append(strDlmtCrLf);
			
			
			sbSPfile.append(" END;");
			sbSPfile.append(strDlmtCrLf);
			sbSPfile.append(" /");
			sbSPfile.append(strDlmtCrLf);			
			
			
		}catch(Exception e){
			
		}		
	}
	/**
	 * 탈회대상 정보 파일 생성 Function
	 * 
	 * @param tblList , Filename
	 * @throws Exception
	 */
	private void createWithFile(ArrayList tblList, ArrayList datalList, String strSql1, String Filename, String pworkString,String FilefilePath) throws Exception {
		
		StringBuffer sbSPfile = new StringBuffer();
		
		//extlogger.debug("createWithFile Start");
		System.out.println("createWithFile Start");
		System.out.println("dir=>"+FilefilePath);
		System.out.println("Filename=>"+"SP_"+Filename+"."+pworkString);
		Filename = "SP_"+Filename+"."+pworkString;
		System.out.println(Filename);
		try{
			//////////
			//테이블별 파일 생성 
			HashMap<String, String> mapRow = null;
			HashMap<String, String> mapRow1 = null;

			// 파일생성
			File dirFile = new File(FilefilePath+Filename);		
			if (!dirFile.exists())
				dirFile.createNewFile();			
			
			PrintWriter prtWtr = new PrintWriter(new FileWriter(dirFile));
			
			//헤더 파일출력(컬럼 이름)
			String strText = "";			
			
	       for(int i=0; i<datalList.size(); i++){				
				mapRow = (HashMap<String, String>) datalList.get(i);
				System.out.println("mapRow"+mapRow.toString());		
				
				for(int j=0; j<tblList.size(); j++){					
					mapRow1 = (HashMap<String, String>) tblList.get(j);						
					sbSPfile.append(String.valueOf((mapRow.get(mapRow1.get("COLUMN_NAME")))));					
					sbSPfile.append(strWithDLmt);
				}		
			
				System.out.println("sbSPfile====>"+sbSPfile);
				sbSPfile.append(strWithCrLf);			
			}			
			prtWtr.println(sbSPfile);				
			prtWtr.close();					
		}catch(Exception e){
			extlogger.debug("createWithFile Error = ["+ e.toString() + " ]");
		}		
	}	
}
	/*
	//분리 보관 대상자 업로드
	public void BatchWork_WITHDRAW_Upload(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		extlogger.debug("-->BatchWork::start");	
		
			String rtnJobSeq = ""; // 작업순번
			String strErrCd = ""; // 오류코드
			String strErrMsg = ""; // 오류메시지
			int i_tot_cnt = 0; // 총처리건수
			int i_err_cnt = 0; // 오류건수
			int i_scss_cnt = 0; // 성공건수
			
			String pWorkDay = ComUtil.getCurDateTime("yyyyMMdd");  //배치 날짜						
			//			DPXGZA2 고객 정보 업로드 	
			try{	
              //출력 dir설정
				String filePath = Const.DOWN_PATH +  File.separator;
				File dir = new File(filePath+pWorkDay);
				if (!dir.isDirectory()) {
					dir.mkdir();					
				}
			 //파일 생성
				String fileName = "SP_SEPARATION.20170526";
				File dirFile = new File(filePath+pWorkDay + fileName);
				if (!dirFile.exists()){
					dirFile.createNewFile();
				}
				
				extlogger.debug("cmsFtpDir + fileName = " + filePath + fileName);

			
				 // ------------------------------------
				// 파일 cmsftp로 전송
				// ------------------------------------
				String FTP_IP;
				String FTP_ID;
				String FTP_PWD;
				String FTP_ROOT;
				int FTP_PORT = 0;
	
				// cmsftp접속계정
				if (ComUtil.isProd()) // 운영계
				{
					FTP_IP = Const.TEST_SFTP_IP;
					FTP_ID = Const.TEST_SFTP_ID;
					FTP_PWD = Const.TEST_SFTP_PWD;
					FTP_ROOT = Const.TEST_SFTP_SEND;
				} else // 개발계
				{
					FTP_IP = Const.TEST_SFTP_IP;
					FTP_ID = Const.TEST_SFTP_ID;
					FTP_PWD = Const.TEST_SFTP_PWD;
					FTP_ROOT = Const.TEST_SFTP_SEND;
					FTP_PORT = Const.TEST_SFTP_PORT;
				}
				//sftp 연결
				//strErrMsg = "FTP . IP=>[" + FTP_IP + "], ID=>[" + FTP_ID + "], PWD=>[" + FTP_PWD + "], ROOT=>[" + FTP_PWD + "], PORT=>[" + String.valueOf(FTP_ROOT) + "]";
				
				extlogger.debug("re : "+FTP_ROOT+"<---->send:"+filePath + fileName);
				
				SFTPUtil sftpUtil = new SFTPUtil();				
				sftpUtil.init(FTP_IP, FTP_ID, FTP_PWD, FTP_PORT);
				boolean bUpload = sftpUtil.upload(FTP_ROOT, filePath + fileName);
				sftpUtil.disconnection();
				
				extlogger.debug( "Send File result=>>[" + bUpload + "]");
				
			}catch(Exception e){
				strErrMsg = "Exception Error!:" + e.getMessage();
				e.printStackTrace();
				System.out.println(strErrMsg);
				extlogger.debug( "strErrMsg=====>"+strErrMsg);
			}finally {				
		}
}

	//분기 보관 삭제 대상 생성 및 전송
	public void BatchWork_WITHDRAW_Send(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		extlogger.debug("-->BatchWork_WITHDRAW_Send::start");	
		System.out.println("--->BatchWork_WITHDRAW_Send::start");		
			String rtnJobSeq = ""; // 작업순번
			String strErrCd = ""; // 오류코드
			String strErrMsg = ""; // 오류메시지
			int i_tot_cnt = 0; // 총처리건수
			int i_err_cnt = 0; // 오류건수
			int i_scss_cnt = 0; // 성공건수	
			
			
			String pWorkDay = ComUtil.getCurDateTime("yyyyMMdd");  //배치 날짜						
			String USE_YN = "Y";
					
			try{			
              //삭제 대상 테이블			
				String sqlmapid = "ETC_STA.DPXGZA0";	
				HashMap map = new HashMap();
				map.put("I_USE_YN",USE_YN); // 센터코드
				commonDao.selectString(sqlmapid,map);
				//System.out.println("I_USE_YN=>"+map.get("I_USE_YN"));
								
			 //쿼리 결과(삭제 테이블)
				ArrayList arrayLst = (ArrayList) map.get("O_RESULT");
				HashMap<String, String> mapRow = null;				
				//extlogger.debug("arrayLst.size()=>"+arrayLst.size());
				//System.out.println("arrayLst.size()=>"+arrayLst.size());
				// 센터별 월정산정보 수신파일 업로드(대리점수수료TB)
				
				// --------------------------------------------
				// TM결과가 있을경우 파일생성 및 전송
				// --------------------------------------------
				// 출력디렉토리설정				
				String filePath = Const.DOWN_PATH+pWorkDay+ File.separator;
				File dir = new File(filePath);
				
				System.out.println(filePath+pWorkDay+"/");
				System.out.println(dir);
				if (!dir.isDirectory())
					dir.mkdir();				

				// 전송파일명작성 --> R+제휴사코드(4)+CR+YYMM(4)+SEQ(3)
				// String fileName = "R" + pCoCd + "CR" + pWorkDay.substring(2, 6) +
				// strFileSeq;

				
				
				for (int i = 0; i < arrayLst.size(); i++) {					
					mapRow = (HashMap<String, String>) arrayLst.get(i);					
					//System.out.println(mapRow.get("TABLE_NAME"));
					//System.out.println(mapRow.get("OWNER"));
					
					String sqlmapid1 = "ETC_STA.DPXGZA1";	 //삭제 테이블별 삭제 대상 정보를 가지고 온다.
					HashMap map1 = new HashMap();
					map1.put("I_OWNER",mapRow.get("OWNER")); // GSIB
					map1.put("I_TABLE_NAME",mapRow.get("TABLE_NAME")); // 삭제 테이블 이름
					commonDao.selectString(sqlmapid1,map1);	
					
					ArrayList arrayLst1 = (ArrayList) map1.get("O_RESULT");
					HashMap<String, String> mapRow1 = null;		
					
					//테이블별 파일 생성 
					String fileName = "SP_"+mapRow.get("TABLE_NAME")+"."+pWorkDay;

					// 파일생성
					File dirFile = new File(filePath+ fileName);
					System.out.println("dir=>"+dir);
					System.out.println("dirFile=>"+dirFile);
					if (!dirFile.exists())
						dirFile.createNewFile();			
					
					PrintWriter prtWtr = new PrintWriter(new FileWriter(dirFile));
					
					//헤더 파일출력(컬럼 이름)
					String strText = "";				
					prtWtr.println(strText);		
					
					//컬럼명 
					for (int j = 0; j < arrayLst1.size(); j++) {
						mapRow1 =  (HashMap<String, String>) arrayLst1.get(j);
						strText = strText + mapRow1.get("COLUMN_NAME")+"|^"; // 
						if(j ==  (arrayLst1.size()-1)){
							strText = strText + mapRow1.get("COLUMN_NAME")+"|#$"; //
						}
					}
					
				 String  i_sql = "SELECT * FROM " +mapRow.get("TABLE_NAME") ;
					System.out.println("I_SQL=>"+i_sql);
					//DATA 컬럼 데이터 
					String sqlmapid2 = "ETC_STA.DPXGZA3";	 //삭제 테이블별 삭제 대상 정보를 가지고 온다.
					HashMap map2 = new HashMap();
					map2.put("I_SQL",i_sql); // GSIB						
					
					commonDao.selectString(sqlmapid2,map2);	
					
								
					ArrayList arrayLst2 = (ArrayList) map2.get("O_RESULT");
					HashMap<String, String> mapRow2 = null;		
					for(int k = 0; k < arrayLst2.size(); k++){
						mapRow2 = (HashMap<String, String>) arrayLst2.get(i);					
						System.out.println("mapRow2=>"+mapRow2);
					}				
					
					
					String strBuf = new String(strText.getBytes("euc-kr"), "8859_1"); //
					prtWtr.println(strBuf);			
					System.out.println("strText==>"+strText);					
				prtWtr.close();				
				}
	
				
			}catch(Exception e){
				strErrMsg = "Exception Error!:" + e.getMessage();
				e.printStackTrace();
				System.out.println(strErrMsg);
				extlogger.debug( "strErrMsg=====>"+strErrMsg);
			}finally {				
			}			
	}
	//분기 보관 삭제
	public void BatchWork_WITHDRAW_Del(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		extlogger.debug("-->BatchWork::start");	
		
			String rtnJobSeq = ""; // 작업순번
			String strErrCd = ""; // 오류코드
			String strErrMsg = ""; // 오류메시지
			int i_tot_cnt = 0; // 총처리건수
			int i_err_cnt = 0; // 오류건수
			int i_scss_cnt = 0; // 성공건수
			
			
			
			String pWorkDay = ComUtil.getCurDateTime("yyyyMMdd");  //배치 날짜						
				
			try{	
              //출력 dir설정
				String filePath = Const.DOWN_PATH +  File.separator;
				File dir = new File(filePath);
				if (!dir.isDirectory()) {
					dir.mkdir();					
				}
			 //파일 생성
				String fileName = "SP_SEPARATION.20170526";
				File dirFile = new File(filePath + fileName);
				if (!dirFile.exists()){
					dirFile.createNewFile();
				}
				
				extlogger.debug("cmsFtpDir + fileName = " + filePath + fileName);

			
				 // ------------------------------------
				// 파일 cmsftp로 전송
				// ------------------------------------
				String FTP_IP;
				String FTP_ID;
				String FTP_PWD;
				String FTP_ROOT;
				int FTP_PORT = 0;
	
				// cmsftp접속계정
				if (ComUtil.isProd()) // 운영계
				{
					FTP_IP = Const.TEST_SFTP_IP;
					FTP_ID = Const.TEST_SFTP_ID;
					FTP_PWD = Const.TEST_SFTP_PWD;
					FTP_ROOT = Const.TEST_SFTP_SEND;
				} else // 개발계
				{
					FTP_IP = Const.TEST_SFTP_IP;
					FTP_ID = Const.TEST_SFTP_ID;
					FTP_PWD = Const.TEST_SFTP_PWD;
					FTP_ROOT = Const.TEST_SFTP_SEND;
					FTP_PORT = Const.TEST_SFTP_PORT;
				}
				//sftp 연결
				//strErrMsg = "FTP . IP=>[" + FTP_IP + "], ID=>[" + FTP_ID + "], PWD=>[" + FTP_PWD + "], ROOT=>[" + FTP_PWD + "], PORT=>[" + String.valueOf(FTP_ROOT) + "]";
				
				extlogger.debug("re : "+FTP_ROOT+"<---->send:"+filePath + fileName);
				
				SFTPUtil sftpUtil = new SFTPUtil();				
				sftpUtil.init(FTP_IP, FTP_ID, FTP_PWD, FTP_PORT);
				boolean bUpload = sftpUtil.upload(FTP_ROOT, filePath + fileName);
				sftpUtil.disconnection();
				
				extlogger.debug( "Send File result=>>[" + bUpload + "]");
				
			}catch(Exception e){
				strErrMsg = "Exception Error!:" + e.getMessage();
				e.printStackTrace();
				System.out.println(strErrMsg);
				extlogger.debug( "strErrMsg=====>"+strErrMsg);
			}finally {				
			}
	}
public String setSpace(String pStr, int pSize) {
		for (int i = 0; i < pSize; i++) {
			pStr = pStr + "";
		}

		return pStr;
	}*/

