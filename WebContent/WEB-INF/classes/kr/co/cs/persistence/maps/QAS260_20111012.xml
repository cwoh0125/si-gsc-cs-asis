<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="QAS260">
	
	<!-- QA통계 - 목표대비달성도 -->

	<!-- 목표대비달성도 - 이달의 목표점수 -->
	<select id="GetGOALLIST_SELECT" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
		WITH T AS 
		(   
			SELECT A.ASES_YM
                 , A.GRP_CD
                 , A.LRGCLAS_CD
                 , A.MEDCLAS_CD
                 , A.SMLCLAS_CD
                 , A.FIXD_COL
                 , A.ASCR
                 , A.CNSLR_ID 
                 , A.ASGN_SCOR1 
                 , A.SQN
                 , A.CNSLR_ID_CNT
                 , A.SUB_SCOR
                 <!-- 상담사별 평균값 합계(엑셀파일 계산식과 맞추기 위해 추가 -->
                 , A.CNSL_AVG_SUM
             FROM(
                     SELECT C.ASES_YM
                       , A.GRP_CD
                       , B.LRGCLAS_CD
                       , B.MEDCLAS_CD
                       , B.SMLCLAS_CD
                       , A.FIXD_COL
                       , SUM(B.ASCR) OVER(PARTITION BY A.FIXD_COL,D.GRP_CD,C.ASES_YM) AS ASCR
                       , COUNT(DISTINCT B.CNSLR_ID) OVER(PARTITION BY D.GRP_CD,C.ASES_YM) AS CNSLR_ID_CNT
                       , COUNT(B.SQN) OVER(PARTITION BY A.FIXD_COL,D.GRP_CD,C.ASES_YM) AS SQN
                       , B.CNSLR_ID 
                       , A.ASGN_SCOR1
                       , GSIB.FUN_GET_LRGCLAS_SCOR(A.GRP_CD,A.SEQ_NO,B.LRGCLAS_CD) AS SUB_SCOR
                       , E.CNSL_AVG_SUM
                       
                     FROM TBL_QA_ASES_INFO_SMLCLAS A 
                       INNER JOIN TBL_QA_ASES_DTLS B
                          ON (A.GRP_CD = B.GRP_CD
                              AND A.BIZ_BASC_CD = B.BIZ_BASC_CD
                              AND A.SEQ_NO = B.SEQ_NO
                              AND A.LRGCLAS_CD = B.LRGCLAS_CD                       
                              AND A.MEDCLAS_CD = B.MEDCLAS_CD
                              AND A.SMLCLAS_CD = B.SMLCLAS_CD) 
                       INNER JOIN TBL_QA_ASES C 
                          ON (B.GRP_CD = C.GRP_CD 
                               AND B.BIZ_BASC_CD = C.BIZ_BASC_CD 
                               AND B.SEQ_NO = C.SEQ_NO 
                               AND B.ASES_DTM = C.ASES_DTM 
                               AND B.SQN = C.SQN 
                               AND B.CNSLR_ID = C.CNSLR_ID) 
                       INNER JOIN TBL_CNSLR_PART_HIST D
						  ON (C.ASES_YM = D.REG_YM AND C.CNSLR_ID = D.CNSLR_ID AND A.GRP_CD = D.GRP_CD)                       
                          
                     <!-- 평균계산방식을 엑셀과 맞추기 위해 추가함. -->     
                       LEFT OUTER JOIN (
                            SELECT
                                 E.ASES_YM
                                ,E.FIXD_COL
                                ,E.GRP_CD
                                ,SUM(E.CNSL_AVG) AS CNSL_AVG_SUM
                            FROM
                                (
                                     SELECT
                                         DISTINCT bb.CNSLR_ID
                                       , cc.ASES_YM
                                       , aa.GRP_CD
                                       , aa.FIXD_COL                                    
                                       , SUM(bb.ASCR) OVER(PARTITION BY aa.FIXD_COL,dd.GRP_CD,cc.ASES_YM,bb.CNSLR_ID)
                                       / COUNT(bb.SQN) OVER(PARTITION BY aa.FIXD_COL,dd.GRP_CD,cc.ASES_YM,bb.CNSLR_ID) AS CNSL_AVG

                                     FROM TBL_QA_ASES_INFO_SMLCLAS aa 
                                       INNER JOIN TBL_QA_ASES_DTLS bb
                                          ON (aa.GRP_CD = bb.GRP_CD
                                              AND aa.BIZ_BASC_CD = bb.BIZ_BASC_CD
                                              AND aa.SEQ_NO = bb.SEQ_NO
                                              AND aa.LRGCLAS_CD = bb.LRGCLAS_CD                       
                                              AND aa.MEDCLAS_CD = bb.MEDCLAS_CD
                                              AND aa.SMLCLAS_CD = bb.SMLCLAS_CD) 
                                       INNER JOIN TBL_QA_ASES cc 
                                          ON (bb.GRP_CD = bb.GRP_CD 
                                               AND bb.BIZ_BASC_CD = cc.BIZ_BASC_CD 
                                               AND bb.SEQ_NO = cc.SEQ_NO 
                                               AND bb.ASES_DTM = cc.ASES_DTM 
                                               AND bb.SQN = cc.SQN 
                                               AND bb.CNSLR_ID = cc.CNSLR_ID) 
                                       INNER JOIN TBL_CNSLR_PART_HIST dd
                                          ON (cc.ASES_YM = dd.REG_YM AND cc.CNSLR_ID = dd.CNSLR_ID AND aa.GRP_CD = dd.GRP_CD)                                          
                                     WHERE
                                     	 <!--   
                                     	 NVL(cc.SELF_CHCK_YN,'N') = 'N'
                                     	 -->
                                         NVL(cc.DEL_YN,'N') = 'N'
                                     AND NVL(bb.DEL_YN,'N') = 'N' 
                                     AND bb.ASCR IS NOT NULL
                                     AND bb.CNSLR_ID != cc.ASES_ID                                     
									<dynamic>	 
										<isNotEmpty prepend="AND" property="grp_cd">
											dd.GRP_CD = #grp_cd#
										</isNotEmpty>
										<isNotEmpty prepend="AND" property="part_cd">
											dd.PART_CD = #part_cd#
										</isNotEmpty>
										<isNotEmpty prepend="AND" property="cnslr_id">
											bb.CNSLR_ID = #cnslr_id#
										</isNotEmpty>
										<isNotEmpty prepend="AND" property="ases_ym">
											cc.ASES_YM = #ases_ym#
										</isNotEmpty>
										<isNotEmpty prepend="AND" property="tst_ases_yn">
											cc.TST_ASES_YN = #tst_ases_yn#
										</isNotEmpty>										
									</dynamic>
                                ) E                    
                          GROUP BY E.ASES_YM,E.GRP_CD,E.FIXD_COL 
                         ) E                         
                          ON  C.ASES_YM			= E.ASES_YM 
                                AND A.FIXD_COL 	= E.FIXD_COL                    
                                AND B.GRP_CD 	= E.GRP_CD                                                      
									
                          
                     WHERE
                     	 <!--   
                     	 NVL(C.SELF_CHCK_YN,'N') = 'N'
                     	 -->
                         NVL(C.DEL_YN,'N') = 'N'
                     AND NVL(B.DEL_YN,'N') = 'N' 
                     AND B.ASCR IS NOT NULL
                     AND B.CNSLR_ID != C.ASES_ID
                     <dynamic>	 
						<isNotEmpty prepend="AND" property="grp_cd">
							D.GRP_CD = #grp_cd#
						</isNotEmpty>
						<isNotEmpty prepend="AND" property="part_cd">
							D.PART_CD = #part_cd#
						</isNotEmpty>
						<isNotEmpty prepend="AND" property="cnslr_id">
							B.CNSLR_ID = #cnslr_id#
						</isNotEmpty>
						<isNotEmpty prepend="AND" property="ases_ym">
							C.ASES_YM =  #ases_ym#
						</isNotEmpty>
						<isNotEmpty prepend="AND" property="tst_ases_yn">
							C.TST_ASES_YN = #tst_ases_yn#
						</isNotEmpty>						
					</dynamic>
              )A 		
		)	
			  
		SELECT A.BRANCH 
		    , A.GUBUN
		    , A.COL_A1   
		    , A.COL_A2   
		    , A.COL_A3   
		    , A.COL_A4   
		    , A.COL_A5   
		    , A.COL_A6   
		    , A.COL_A7   
		    , A.COL_A8   
		    , A.COL_A9   
		    , A.COL_A10  
		    , A.COL_A11  
		    , A.COL_B1   
		    , A.COL_B2   
		    , A.COL_B3   
		    , A.COL_B4   
		    , A.COL_B5   
		    , A.COL_B6   
		    , A.COL_B7   
		    , A.COL_B8   
		    , A.COL_B9   
		    , A.COL_B10  
		    , A.COL_B11  
		    , A.COL_C1   
		    , A.COL_C2   
		    , A.COL_C3   
		    , A.COL_C4   
		    , A.COL_C5   
		    , A.COL_C6   
		    , A.COL_C7   
		    , A.COL_C8   
		    , A.COL_C9   
		    , A.COL_C10  
		    , A.COL_C11  
		    , A.COL_D11  
		FROM (
		  		   
			    SELECT  
			        '이달의 목표'    AS BRANCH 
			       ,'점수'              AS GUBUN      
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'A1' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT,1),1),0) END)  END  AS COL_A1
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'A2' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT,1),1),0) END)  END  AS COL_A2
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'A3' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT,1),1),0) END)  END  AS COL_A3
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'A4' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT,1),1),0) END)  END  AS COL_A4
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'A5' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT,1),1),0) END)  END  AS COL_A5
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'A6' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT,1),1),0) END)  END  AS COL_A6
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'A7' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT,1),1),0) END)  END  AS COL_A7
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'A8' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT,1),1),0) END)  END  AS COL_A8
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'A9' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT,1),1),0) END)  END  AS COL_A9
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'A10' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT,1),1),0) END)  END  AS COL_A10
			            
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL_GBN = 'A' THEN NVL(TRUNC(ROUND(A.MID_SUM_FIXD_COL/A.CNSLR_CNT,1),1),0) END)  END  AS COL_A11			            
			            
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'B1' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT,1),1),0) END)  END  AS COL_B1
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'B2' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT,1),1),0) END)  END  AS COL_B2
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'B3' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT,1),1),0) END)  END  AS COL_B3
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'B4' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT,1),1),0) END)  END  AS COL_B4
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'B5' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT,1),1),0) END)  END  AS COL_B5
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'B6' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT,1),1),0) END)  END  AS COL_B6
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'B7' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT,1),1),0) END)  END  AS COL_B7
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'B8' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT,1),1),0) END)  END  AS COL_B8
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'B9' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT,1),1),0) END)  END  AS COL_B9
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'B10' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT,1),1),0) END)  END  AS COL_B10
			            
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL_GBN = 'B' THEN NVL(TRUNC(ROUND(A.MID_SUM_FIXD_COL/A.CNSLR_CNT,1),1),0) END)  END  AS COL_B11			            
			            
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'C1' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT,1),1),0) END)  END  AS COL_C1
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'C2' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT,1),1),0) END)  END  AS COL_C2
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'C3' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT,1),1),0) END)  END  AS COL_C3
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'C4' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT,1),1),0) END)  END  AS COL_C4
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'C5' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT,1),1),0) END)  END  AS COL_C5
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'C6' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT,1),1),0) END)  END  AS COL_C6
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'C7' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT,1),1),0) END)  END  AS COL_C7
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'C8' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT,1),1),0) END)  END  AS COL_C8
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'C9' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT,1),1),0) END)  END  AS COL_C9
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'C10' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT,1),1),0) END)  END  AS COL_C10
			            
			        ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL_GBN = 'C' THEN NVL(TRUNC(ROUND(A.MID_SUM_FIXD_COL/A.CNSLR_CNT,1),1),0) END)  END  AS COL_C11
			            
			        ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(NVL(TRUNC(ROUND(A.SUM_TOT/A.CNSLR_CNT,1),1),0)) END AS COL_D11			        
			    FROM
			        (		        
							SELECT 
				                 P.ASES_YM
				                ,P.FIXD_COL
				                ,SUBSTR(P.FIXD_COL,1,1) AS FIXD_COL_GBN
				                ,SUM(P.GOAL_SCOR) OVER (PARTITION BY P.ASES_YM)  AS SUM_TOT    
				                ,SUM(P.GOAL_SCOR) OVER (PARTITION BY P.ASES_YM,P.FIXD_COL)  AS SUM_BY_FIXD_COL
				                ,COUNT(P.CNSLR_ID) OVER (PARTITION BY P.ASES_YM,P.FIXD_COL) AS CNSLR_CNT
				                ,SUM(P.GOAL_SCOR) OVER (PARTITION BY P.ASES_YM,SUBSTR(P.FIXD_COL,1,1))  AS MID_SUM_FIXD_COL
				                ,S.ASGN_SCOR1
				            FROM TBL_QA_CNSLR_EXEC_PLAN_DTLS P        
				                    INNER JOIN
				                   (
				                		SELECT B.LRGCLAS_CDNM
				                		     , C.MEDCLAS_CDNM
				                		     , D.SMLCLAS_CDNM
				                		     , D.ASES_BASC
				                		     , D.ASGN_SCOR1 
				                		     , D.GRP_CD
				                		     , D.BIZ_BASC_CD
				                		     , D.SEQ_NO
				                		     , D.LRGCLAS_CD
				                		     , D.MEDCLAS_CD
				                		     , D.SMLCLAS_CD
				                		     , D.FIXD_COL 
				                		  FROM TBL_QA_ASES_INFO_GRP A
				                		       INNER JOIN TBL_QA_ASES_INFO_LRGCLAS B
				                		               ON (    A.GRP_CD = B.GRP_CD
				                		                   AND A.BIZ_BASC_CD = B.BIZ_BASC_CD
				                		                   AND A.SEQ_NO = B.SEQ_NO)
				                		       INNER JOIN TBL_QA_ASES_INFO_MEDCLAS C
				                		               ON (    B.GRP_CD = C.GRP_CD
				                		                   AND B.BIZ_BASC_CD = C.BIZ_BASC_CD
				                		                   AND B.SEQ_NO = C.SEQ_NO
				                		                   AND B.LRGCLAS_CD = C.LRGCLAS_CD) 
				                		       INNER JOIN TBL_QA_ASES_INFO_SMLCLAS D
				                		               ON (    C.GRP_CD = D.GRP_CD
				                		                   AND C.BIZ_BASC_CD = D.BIZ_BASC_CD
				                		                   AND C.SEQ_NO = D.SEQ_NO
				                		                   AND C.LRGCLAS_CD = D.LRGCLAS_CD
				                		                   AND C.MEDCLAS_CD = D.MEDCLAS_CD) 
				                		 WHERE A.GRP_CD = #grp_cd#
				                		   AND A.BIZ_BASC_CD = 'I'
				                		   AND A.QA_USAG_DV_CD = '1'
				                		   AND (A.DEL_YN IS NULL OR A.DEL_YN = 'N')
				                		   AND (A.USE_YN IS NULL OR A.USE_YN = 'Y')
				                		   AND (B.DEL_YN IS NULL OR B.DEL_YN = 'N')
				                		   AND (C.DEL_YN IS NULL OR C.DEL_YN = 'N')      
				                		   AND (D.DEL_YN IS NULL OR D.DEL_YN = 'N')
				                		   AND D.FIXD_COL IS NOT NULL
				                		ORDER BY B.SEQ, C.SEQ, D.SEQ	               
				                   ) S
				                   ON P.FIXD_COL = S.FIXD_COL 
				                    
				            WHERE P.ASES_YM = #ases_ym#
                     		<dynamic>					            
								<isNotEmpty prepend="AND" property="cnslr_id">
									P.CNSLR_ID =  #cnslr_id#
								</isNotEmpty>
							</dynamic>				            			
			        ) A        
			        GROUP BY A.ASES_YM
			        
				UNION ALL				
				SELECT  
			        '이달의 목표'    AS BRANCH 
			       ,'달성도(%)'              AS GUBUN      
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'A1' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT*100/A.ASGN_SCOR1,1),1),0) END)  END  AS COL_A1
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'A2' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT*100/A.ASGN_SCOR1,1),1),0) END)  END  AS COL_A2
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'A3' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT*100/A.ASGN_SCOR1,1),1),0) END)  END  AS COL_A3
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'A4' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT*100/A.ASGN_SCOR1,1),1),0) END)  END  AS COL_A4
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'A5' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT*100/A.ASGN_SCOR1,1),1),0) END)  END  AS COL_A5
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'A6' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT*100/A.ASGN_SCOR1,1),1),0) END)  END  AS COL_A6
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'A7' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT*100/A.ASGN_SCOR1,1),1),0) END)  END  AS COL_A7
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'A8' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT*100/A.ASGN_SCOR1,1),1),0) END)  END  AS COL_A8
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'A9' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT*100/A.ASGN_SCOR1,1),1),0) END)  END  AS COL_A9
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'A10' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT*100/A.ASGN_SCOR1,1),1),0) END)  END  AS COL_A10
			            
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL_GBN = 'A' THEN NVL(TRUNC(ROUND(A.MID_SUM_FIXD_COL/A.CNSLR_CNT*100/A.MID_SUM_SCOR,1),1),0) END)  END  AS COL_A11			            
			            
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'B1' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT*100/A.ASGN_SCOR1,1),1),0) END)  END  AS COL_B1
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'B2' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT*100/A.ASGN_SCOR1,1),1),0) END)  END  AS COL_B2
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'B3' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT*100/A.ASGN_SCOR1,1),1),0) END)  END  AS COL_B3
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'B4' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT*100/A.ASGN_SCOR1,1),1),0) END)  END  AS COL_B4
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'B5' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT*100/A.ASGN_SCOR1,1),1),0) END)  END  AS COL_B5
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'B6' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT*100/A.ASGN_SCOR1,1),1),0) END)  END  AS COL_B6
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'B7' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT*100/A.ASGN_SCOR1,1),1),0) END)  END  AS COL_B7
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'B8' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT*100/A.ASGN_SCOR1,1),1),0) END)  END  AS COL_B8
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'B9' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT*100/A.ASGN_SCOR1,1),1),0) END)  END  AS COL_B9
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'B10' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT*100/A.ASGN_SCOR1,1),1),0) END)  END  AS COL_B10
			            
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL_GBN = 'B' THEN NVL(TRUNC(ROUND(A.MID_SUM_FIXD_COL/A.CNSLR_CNT*100/A.MID_SUM_SCOR,1),1),0) END)  END  AS COL_B11			            
			            
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'C1' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT*100/A.ASGN_SCOR1,1),1),0) END)  END  AS COL_C1
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'C2' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT*100/A.ASGN_SCOR1,1),1),0) END)  END  AS COL_C2
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'C3' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT*100/A.ASGN_SCOR1,1),1),0) END)  END  AS COL_C3
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'C4' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT*100/A.ASGN_SCOR1,1),1),0) END)  END  AS COL_C4
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'C5' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT*100/A.ASGN_SCOR1,1),1),0) END)  END  AS COL_C5
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'C6' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT*100/A.ASGN_SCOR1,1),1),0) END)  END  AS COL_C6
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'C7' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT*100/A.ASGN_SCOR1,1),1),0) END)  END  AS COL_C7
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'C8' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT*100/A.ASGN_SCOR1,1),1),0) END)  END  AS COL_C8
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'C9' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT*100/A.ASGN_SCOR1,1),1),0) END)  END  AS COL_C9
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL = 'C10' THEN NVL(TRUNC(ROUND(A.SUM_BY_FIXD_COL/A.CNSLR_CNT*100/A.ASGN_SCOR1,1),1),0) END)  END  AS COL_C10
			            
			       ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(CASE WHEN A.FIXD_COL_GBN = 'C' THEN NVL(TRUNC(ROUND(A.MID_SUM_FIXD_COL/A.CNSLR_CNT*100/A.MID_SUM_SCOR,1),1),0) END)  END  AS COL_C11
			            
			        ,CASE WHEN MAX(A.CNSLR_CNT) = 0 THEN 0
			            ELSE MAX(NVL(TRUNC(ROUND(A.SUM_TOT/A.CNSLR_CNT,1),1),0)) END AS COL_D11			        
			    FROM
			        (
				  			SELECT 
				                 P.ASES_YM
				                ,P.FIXD_COL
				                ,SUBSTR(P.FIXD_COL,1,1) AS FIXD_COL_GBN
				                ,SUM(P.GOAL_SCOR) OVER (PARTITION BY P.ASES_YM)  AS SUM_TOT    
				                ,SUM(P.GOAL_SCOR) OVER (PARTITION BY P.ASES_YM,P.FIXD_COL)  AS SUM_BY_FIXD_COL
				                ,COUNT(P.CNSLR_ID) OVER (PARTITION BY P.ASES_YM,P.FIXD_COL) AS CNSLR_CNT
				                ,SUM(P.GOAL_SCOR) OVER (PARTITION BY P.ASES_YM,SUBSTR(P.FIXD_COL,1,1))  AS MID_SUM_FIXD_COL
				                ,S.ASGN_SCOR1 
				                ,S.MID_SUM_SCOR 
				            FROM TBL_QA_CNSLR_EXEC_PLAN_DTLS P        
				                    INNER JOIN
				                   (
				                		SELECT B.LRGCLAS_CDNM
				                		     , C.MEDCLAS_CDNM
				                		     , D.SMLCLAS_CDNM
				                		     , D.ASES_BASC
				                		     , D.ASGN_SCOR1 
				                		     , D.GRP_CD
				                		     , D.BIZ_BASC_CD
				                		     , D.SEQ_NO
				                		     , D.LRGCLAS_CD
				                		     , D.MEDCLAS_CD
				                		     , D.SMLCLAS_CD
				                		     , D.FIXD_COL
				                		     , SUM(D.ASGN_SCOR1) OVER (PARTITION BY SUBSTR(D.FIXD_COL,1,1)) AS MID_SUM_SCOR
				                		  FROM TBL_QA_ASES_INFO_GRP A
				                		       INNER JOIN TBL_QA_ASES_INFO_LRGCLAS B
				                		               ON (    A.GRP_CD = B.GRP_CD
				                		                   AND A.BIZ_BASC_CD = B.BIZ_BASC_CD
				                		                   AND A.SEQ_NO = B.SEQ_NO)
				                		       INNER JOIN TBL_QA_ASES_INFO_MEDCLAS C
				                		               ON (    B.GRP_CD = C.GRP_CD
				                		                   AND B.BIZ_BASC_CD = C.BIZ_BASC_CD
				                		                   AND B.SEQ_NO = C.SEQ_NO
				                		                   AND B.LRGCLAS_CD = C.LRGCLAS_CD) 
				                		       INNER JOIN TBL_QA_ASES_INFO_SMLCLAS D
				                		               ON (    C.GRP_CD = D.GRP_CD
				                		                   AND C.BIZ_BASC_CD = D.BIZ_BASC_CD
				                		                   AND C.SEQ_NO = D.SEQ_NO
				                		                   AND C.LRGCLAS_CD = D.LRGCLAS_CD
				                		                   AND C.MEDCLAS_CD = D.MEDCLAS_CD) 
				                		 WHERE A.GRP_CD = #grp_cd#
				                		   AND A.BIZ_BASC_CD = 'I'
				                		   AND A.QA_USAG_DV_CD = '1'
				                		   AND (A.DEL_YN IS NULL OR A.DEL_YN = 'N')
				                		   AND (A.USE_YN IS NULL OR A.USE_YN = 'Y')
				                		   AND (B.DEL_YN IS NULL OR B.DEL_YN = 'N')
				                		   AND (C.DEL_YN IS NULL OR C.DEL_YN = 'N')      
				                		   AND (D.DEL_YN IS NULL OR D.DEL_YN = 'N')
				                		   AND D.FIXD_COL IS NOT NULL
				                		ORDER BY B.SEQ, C.SEQ, D.SEQ	               
				                   ) S
				                   ON P.FIXD_COL = S.FIXD_COL 
				                    
				            WHERE P.ASES_YM = #ases_ym#
							<dynamic>					            
								<isNotEmpty prepend="AND" property="cnslr_id">
									P.CNSLR_ID = ## = #cnslr_id#
								</isNotEmpty>
							</dynamic>
			        ) A        
			        GROUP BY A.ASES_YM					
		<!--     
		        SELECT '이달의 목표점수' AS BRANCH 
		            , '점수' AS GUBUN 
		            , A.COL_A1   
		            , A.COL_A2
		            , A.COL_A3
		            , A.COL_A4
		            , A.COL_A5
		            , A.COL_A6
		            , A.COL_A7
		            , A.COL_A8
		            , A.COL_A9
		            , A.COL_A10
		            , A.COL_A11 
		            , A.COL_B1   
		            , A.COL_B2
		            , A.COL_B3
		            , A.COL_B4
		            , A.COL_B5
		            , A.COL_B6
		            , A.COL_B7
		            , A.COL_B8
		            , A.COL_B9
		            , A.COL_B10
		            , A.COL_B11 
		            , A.COL_C1   
		            , A.COL_C2
		            , A.COL_C3
		            , A.COL_C4
		            , A.COL_C5
		            , A.COL_C6
		            , A.COL_C7
		            , A.COL_C8
		            , A.COL_C9
		            , A.COL_C10
		            , A.COL_C11
		            , A.COL_A11 + A.COL_B11 + A.COL_C11 AS COL_D11
		        FROM (
		                SELECT A.ASES_YM
		                    , A.COL_A1   
		                    , A.COL_A2
		                    , A.COL_A3
		                    , A.COL_A4
		                    , A.COL_A5
		                    , A.COL_A6
		                    , A.COL_A7
		                    , A.COL_A8
		                    , A.COL_A9
		                    , A.COL_A10
		                    , A.COL_A1 + A.COL_A2 + A.COL_A3 + A.COL_A4 + A.COL_A5 + A.COL_A6 + A.COL_A7 + A.COL_A8 + A.COL_A9 + A.COL_A10 AS COL_A11 
		                    , A.COL_B1   
		                    , A.COL_B2
		                    , A.COL_B3
		                    , A.COL_B4
		                    , A.COL_B5
		                    , A.COL_B6
		                    , A.COL_B7
		                    , A.COL_B8
		                    , A.COL_B9
		                    , A.COL_B10
		                    , A.COL_B1 + A.COL_B2 + A.COL_B3 + A.COL_B4 + A.COL_B5 + A.COL_B6 + A.COL_B7 + A.COL_B8 + A.COL_B9 + A.COL_B10 AS COL_B11 
		                    , A.COL_C1   
		                    , A.COL_C2
		                    , A.COL_C3
		                    , A.COL_C4
		                    , A.COL_C5
		                    , A.COL_C6
		                    , A.COL_C7
		                    , A.COL_C8
		                    , A.COL_C9
		                    , A.COL_C10
		                    , A.COL_C1 + A.COL_C2 + A.COL_C3 + A.COL_C4 + A.COL_C5 + A.COL_C6 + A.COL_C7 + A.COL_C8 + A.COL_C9 + A.COL_C10 AS COL_C11  
		                FROM (  SELECT  A.ASES_YM 
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A1' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_A1  
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A2' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_A2  
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A3' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_A3  
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A4' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_A4  
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A5' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_A5  
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A6' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_A6     
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A7' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_A7     
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A8' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_A8     
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A9' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_A9     
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A10' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_A10   
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B1' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_B1  
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B2' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_B2  
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B3' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_B3  
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B4' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_B4  
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B5' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_B5  
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B6' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_B6     
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B7' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_B7     
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B8' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_B8     
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B9' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_B9     
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B10' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_B10 
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C1' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_C1  
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C2' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_C2  
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C3' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_C3  
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C4' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_C4  
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C5' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_C5  
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C6' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_C6     
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C7' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_C7     
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C8' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_C8     
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C9' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_C9     
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C10' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_C10   
		                        FROM(  
		                                SELECT A.ASES_YM
		                                    , A.GRP_CD
		                                    , A.LRGCLAS_CD
		                                    , A.MEDCLAS_CD
		                                    , A.SMLCLAS_CD
		                                    , A.FIXD_COL
		                                    , A.ASCR
		                                    , A.GOAL_SCOR
		                                    , A.CNSLR_ID_CNT
		                                    , A.SQN
		                                    , A.CNSLR_ID 
		                                    , A.ASGN_SCOR1
		                                FROM(    SELECT C.ASES_YM
		                                          , A.GRP_CD
		                                          , B.LRGCLAS_CD
		                                          , B.MEDCLAS_CD
		                                          , B.SMLCLAS_CD
		                                          , A.FIXD_COL
		                                          , SUM(B.ASCR) OVER(PARTITION BY A.FIXD_COL,F.GRP_CD,E.ASES_YM) AS ASCR
		                                          , SUM(E.GOAL_SCOR) OVER(PARTITION BY A.FIXD_COL,F.GRP_CD,E.ASES_YM) AS GOAL_SCOR
		                                          , COUNT(DISTINCT B.CNSLR_ID) OVER(PARTITION BY F.GRP_CD,E.ASES_YM) AS CNSLR_ID_CNT
		                                          , COUNT(B.SQN) OVER(PARTITION BY A.FIXD_COL,F.GRP_CD,E.ASES_YM) AS SQN
		                                          , B.CNSLR_ID 
		                                          , A.ASGN_SCOR1
		                                        FROM TBL_QA_ASES_INFO_SMLCLAS A 
		                                          INNER JOIN TBL_QA_ASES_DTLS B
		                                             ON (A.GRP_CD = B.GRP_CD
		                                                 AND A.BIZ_BASC_CD = B.BIZ_BASC_CD
		                                                 AND A.SEQ_NO = B.SEQ_NO
		                                                 AND A.LRGCLAS_CD = B.LRGCLAS_CD                       
		                                                 AND A.MEDCLAS_CD = B.MEDCLAS_CD
		                                                 AND A.SMLCLAS_CD = B.SMLCLAS_CD) 
		                                         INNER JOIN TBL_QA_ASES C 
		                                             ON (B.GRP_CD = C.GRP_CD 
		                                                  AND B.BIZ_BASC_CD = C.BIZ_BASC_CD 
		                                                  AND B.SEQ_NO = C.SEQ_NO
		                                                  AND B.ASES_DTM = C.ASES_DTM 
		                                                  AND B.SQN = C.SQN 
		                                                  AND B.CNSLR_ID = C.CNSLR_ID) 
		                                         INNER JOIN TBL_QA_CNSLR_EXEC_PLAN D
		                                            ON (C.ASES_YM = D.ASES_YM AND C.CNSLR_ID = D.CNSLR_ID)
		                                         INNER JOIN TBL_QA_CNSLR_EXEC_PLAN_DTLS E
		                                            ON (D.ASES_YM = E.ASES_YM AND D.CNSLR_ID = E.CNSLR_ID AND A.FIXD_COL = E.FIXD_COL)
		                                         INNER JOIN TBL_USR F
		                                            ON (E.CNSLR_ID = F.USR_ID AND A.GRP_CD = F.GRP_CD)
		                                         WHERE NVL(C.SELF_CHCK_YN,'N') = 'N'
		                                        AND C.TST_ASES_YN = 'Y' 
		                                        AND NVL(C.DEL_YN,'N') = 'N'
		                                        AND NVL(B.DEL_YN,'N') = 'N' 
		                                        AND B.ASCR IS NOT NULL
		                                        AND NVL(F.USE_YN,'Y') = 'Y'
		                                        AND B.CNSLR_ID != C.ASES_ID
		                                        <dynamic>	 
													<isNotEmpty prepend="AND" property="grp_cd">
															F.GRP_CD = #grp_cd#
														</isNotEmpty>
														<isNotEmpty prepend="AND" property="part_cd">
															F.PART_CD = #part_cd#
														</isNotEmpty>
														<isNotEmpty prepend="AND" property="cnslr_id">
															E.CNSLR_ID = #cnslr_id#
														</isNotEmpty>
														<isNotEmpty prepend="AND" property="ases_ym">
															E.ASES_YM = #ases_ym#
														</isNotEmpty>
														<isNotEmpty prepend="AND" property="tst_ases_yn">
															C.TST_ASES_YN = #tst_ases_yn#
														</isNotEmpty>														
												</dynamic>
		                                    )A
		                         )A
		                         GROUP BY A.ASES_YM 
		            )A
		        )A
		        
		        
		        UNION ALL
		        SELECT '이달의 목표점수' AS BRANCH 
		            , '달성도(%)' AS GUBUN
		            , A.COL_A1   
		            , A.COL_A2
		            , A.COL_A3
		            , A.COL_A4
		            , A.COL_A5
		            , A.COL_A6
		            , A.COL_A7
		            , A.COL_A8
		            , A.COL_A9
		            , A.COL_A10
		            , A.COL_A11 
		            , A.COL_B1   
		            , A.COL_B2
		            , A.COL_B3
		            , A.COL_B4
		            , A.COL_B5
		            , A.COL_B6
		            , A.COL_B7
		            , A.COL_B8
		            , A.COL_B9
		            , A.COL_B10
		            , A.COL_B11 
		            , A.COL_C1   
		            , A.COL_C2
		            , A.COL_C3
		            , A.COL_C4
		            , A.COL_C5
		            , A.COL_C6
		            , A.COL_C7
		            , A.COL_C8
		            , A.COL_C9
		            , A.COL_C10
		            , A.COL_C11
		            , A.COL_D11
		        FROM (
		                SELECT A.ASES_YM
		                    , A.COL_A1   
		                    , A.COL_A2
		                    , A.COL_A3
		                    , A.COL_A4
		                    , A.COL_A5
		                    , A.COL_A6
		                    , A.COL_A7
		                    , A.COL_A8
		                    , A.COL_A9
		                    , A.COL_A10
		                    , A.COL_A11 
		                    , A.COL_B1   
		                    , A.COL_B2
		                    , A.COL_B3
		                    , A.COL_B4
		                    , A.COL_B5
		                    , A.COL_B6
		                    , A.COL_B7
		                    , A.COL_B8
		                    , A.COL_B9
		                    , A.COL_B10
		                    , A.COL_B11 
		                    , A.COL_C1   
		                    , A.COL_C2
		                    , A.COL_C3
		                    , A.COL_C4
		                    , A.COL_C5
		                    , A.COL_C6
		                    , A.COL_C7
		                    , A.COL_C8
		                    , A.COL_C9
		                    , A.COL_C10
		                    , A.COL_C11 
		                    , A.COL_D11
		                FROM (  SELECT A.ASES_YM
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A1' THEN A.GOAL_SCOR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_A1
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A2' THEN A.GOAL_SCOR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_A2
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A3' THEN A.GOAL_SCOR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_A3
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A4' THEN A.GOAL_SCOR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_A4
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A5' THEN A.GOAL_SCOR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_A5
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A6' THEN A.GOAL_SCOR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_A6
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A7' THEN A.GOAL_SCOR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_A7
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A8' THEN A.GOAL_SCOR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_A8
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A9' THEN A.GOAL_SCOR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_A9
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A10' THEN A.GOAL_SCOR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_A10
		                            , NVL(TRUNC(ROUND(A.COL_A11/MAX(CASE WHEN A.LRGCLAS_CD = '1' THEN NULLIF(A.SUB_SCOR,'0')END)*100,1),1),0) AS COL_A11 
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B1' THEN A.GOAL_SCOR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_B1
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B2' THEN A.GOAL_SCOR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_B2
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B3' THEN A.GOAL_SCOR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_B3
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B4' THEN A.GOAL_SCOR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_B4
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B5' THEN A.GOAL_SCOR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_B5
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B6' THEN A.GOAL_SCOR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_B6
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B7' THEN A.GOAL_SCOR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_B7
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B8' THEN A.GOAL_SCOR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_B8
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B9' THEN A.GOAL_SCOR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_B9
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B10' THEN A.GOAL_SCOR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)   AS COL_B10
		                            , NVL(TRUNC(ROUND(A.COL_B11/MAX(CASE WHEN A.LRGCLAS_CD = '2' THEN NULLIF(A.SUB_SCOR,'0')END)*100,1),1),0) AS COL_B11 
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C1' THEN A.GOAL_SCOR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_C1
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C2' THEN A.GOAL_SCOR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_C2
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C3' THEN A.GOAL_SCOR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_C3
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C4' THEN A.GOAL_SCOR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_C4
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C5' THEN A.GOAL_SCOR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_C5
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C6' THEN A.GOAL_SCOR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_C6
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C7' THEN A.GOAL_SCOR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_C7
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C8' THEN A.GOAL_SCOR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_C8
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C9' THEN A.GOAL_SCOR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_C9
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C10' THEN A.GOAL_SCOR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_C10 
		                            , NVL(TRUNC(ROUND(A.COL_C11/MAX(CASE WHEN A.LRGCLAS_CD = '3' THEN NULLIF(A.SUB_SCOR,'0')END)*100,1),1),0) AS COL_C11 
		                            , NVL(TRUNC(ROUND(A.COL_D11/MAX(NULLIF(A.TOT_SCOR,'0'))*100,1),1),0) AS COL_D11  
		                        FROM(   
		                                SELECT A.ASES_YM
		                                    , A.GRP_CD
		                                    , A.LRGCLAS_CD
		                                    , A.MEDCLAS_CD
		                                    , A.SMLCLAS_CD
		                                    , A.FIXD_COL
		                                    , A.ASCR
		                                    , A.GOAL_SCOR
		                                    , A.CNSLR_ID_CNT
		                                    , A.SQN
		                                    , A.CNSLR_ID 
		                                    , A.ASGN_SCOR1
		                                    , A.SUB_SCOR
		                                    , B.COL_A11
		                                    , B.COL_B11
		                                    , B.COL_C11
		                                    , B.COL_D11  
		                                    , C.TOT_SCOR
		                                FROM(    SELECT C.ASES_YM
		                                          , A.GRP_CD
		                                          , B.LRGCLAS_CD
		                                          , B.MEDCLAS_CD
		                                          , B.SMLCLAS_CD
		                                          , A.FIXD_COL
		                                          , SUM(B.ASCR) OVER(PARTITION BY A.FIXD_COL,F.GRP_CD,E.ASES_YM) AS ASCR
		                                          , SUM(E.GOAL_SCOR) OVER(PARTITION BY A.FIXD_COL,F.GRP_CD,E.ASES_YM) AS GOAL_SCOR
		                                          , COUNT(DISTINCT B.CNSLR_ID) OVER(PARTITION BY F.GRP_CD,E.ASES_YM) AS CNSLR_ID_CNT
		                                          , COUNT(B.SQN) OVER(PARTITION BY A.FIXD_COL,F.GRP_CD,E.ASES_YM) AS SQN
		                                          , B.CNSLR_ID 
		                                          , A.ASGN_SCOR1
		                                          , GSIB.FUN_GET_LRGCLAS_SCOR(A.GRP_CD,A.SEQ_NO,B.LRGCLAS_CD) AS SUB_SCOR
		                                        FROM TBL_QA_ASES_INFO_SMLCLAS A 
		                                          INNER JOIN TBL_QA_ASES_DTLS B
		                                             ON (A.GRP_CD = B.GRP_CD
		                                                 AND A.BIZ_BASC_CD = B.BIZ_BASC_CD
		                                                 AND A.SEQ_NO = B.SEQ_NO
		                                                 AND A.LRGCLAS_CD = B.LRGCLAS_CD                       
		                                                 AND A.MEDCLAS_CD = B.MEDCLAS_CD
		                                                 AND A.SMLCLAS_CD = B.SMLCLAS_CD) 
		                                         INNER JOIN TBL_QA_ASES C 
		                                             ON (B.GRP_CD = C.GRP_CD 
		                                                  AND B.BIZ_BASC_CD = C.BIZ_BASC_CD 
		                                                  AND B.SEQ_NO = C.SEQ_NO
		                                                  AND B.ASES_DTM = C.ASES_DTM 
		                                                  AND B.SQN = C.SQN 
		                                                  AND B.CNSLR_ID = C.CNSLR_ID) 
		                                         INNER JOIN TBL_QA_CNSLR_EXEC_PLAN D
		                                            ON (C.ASES_YM = D.ASES_YM AND C.CNSLR_ID = D.CNSLR_ID)
		                                         INNER JOIN TBL_QA_CNSLR_EXEC_PLAN_DTLS E
		                                            ON (D.ASES_YM = E.ASES_YM AND D.CNSLR_ID = E.CNSLR_ID AND A.FIXD_COL = E.FIXD_COL)
		                                         INNER JOIN TBL_USR F
		                                            ON (E.CNSLR_ID = F.USR_ID AND A.GRP_CD = F.GRP_CD)
		                                         WHERE NVL(C.SELF_CHCK_YN,'N') = 'N'
		                                         AND C.TST_ASES_YN = 'Y' 
		                                         AND NVL(C.DEL_YN,'N') = 'N'
		                                         AND NVL(B.DEL_YN,'N') = 'N' 
		                                         AND B.ASCR IS NOT NULL
		                                         AND NVL(F.USE_YN,'Y') = 'Y'
		                                         AND B.CNSLR_ID != C.ASES_ID
		                                         <dynamic>	 
													<isNotEmpty prepend="AND" property="grp_cd">
														F.GRP_CD = #grp_cd#
													</isNotEmpty>
													<isNotEmpty prepend="AND" property="part_cd">
														F.PART_CD = #part_cd#
													</isNotEmpty>
													<isNotEmpty prepend="AND" property="cnslr_id">
														E.CNSLR_ID = #cnslr_id#
													</isNotEmpty>
													<isNotEmpty prepend="AND" property="ases_ym">
														E.ASES_YM = #ases_ym#
													</isNotEmpty>
													<isNotEmpty prepend="AND" property="tst_ases_yn">
														C.TST_ASES_YN = #tst_ases_yn#
													</isNotEmpty>													
												</dynamic>
		                                )A FULL OUTER JOIN (
		                                                        SELECT A.ASES_YM
		                                                            , A.COL_A11 
		                                                            , A.COL_B11 
		                                                            , A.COL_C11
		                                                            , A.COL_D11
		                                                        FROM (    
		                                                                SELECT A.ASES_YM
		                                                                    , A.COL_A11 
		                                                                    , A.COL_B11 
		                                                                    , A.COL_C11
		                                                                    , A.COL_A11 + A.COL_B11 + A.COL_C11 AS COL_D11
		                                                                FROM (
		                                                                        SELECT A.ASES_YM
		                                                                            , A.COL_A1   
		                                                                            , A.COL_A2
		                                                                            , A.COL_A3
		                                                                            , A.COL_A4
		                                                                            , A.COL_A5
		                                                                            , A.COL_A6
		                                                                            , A.COL_A7
		                                                                            , A.COL_A8
		                                                                            , A.COL_A9
		                                                                            , A.COL_A10
		                                                                            , A.COL_A1 + A.COL_A2 + A.COL_A3 + A.COL_A4 + A.COL_A5 + A.COL_A6 + A.COL_A7 + A.COL_A8 + A.COL_A9 + A.COL_A10 AS COL_A11 
		                                                                            , A.COL_B1   
		                                                                            , A.COL_B2
		                                                                            , A.COL_B3
		                                                                            , A.COL_B4
		                                                                            , A.COL_B5
		                                                                            , A.COL_B6
		                                                                            , A.COL_B7
		                                                                            , A.COL_B8
		                                                                            , A.COL_B9
		                                                                            , A.COL_B10
		                                                                            , A.COL_B1 + A.COL_B2 + A.COL_B3 + A.COL_B4 + A.COL_B5 + A.COL_B6 + A.COL_B7 + A.COL_B8 + A.COL_B9 + A.COL_B10 AS COL_B11 
		                                                                            , A.COL_C1   
		                                                                            , A.COL_C2
		                                                                            , A.COL_C3
		                                                                            , A.COL_C4
		                                                                            , A.COL_C5
		                                                                            , A.COL_C6
		                                                                            , A.COL_C7
		                                                                            , A.COL_C8
		                                                                            , A.COL_C9
		                                                                            , A.COL_C10
		                                                                            , A.COL_C1 + A.COL_C2 + A.COL_C3 + A.COL_C4 + A.COL_C5 + A.COL_C6 + A.COL_C7 + A.COL_C8 + A.COL_C9 + A.COL_C10 AS COL_C11  
		                                                                        FROM (  
		                                                                        		SELECT A.ASES_YM  
		                                                                                    , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A1' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_A1  
		                                                                                    , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A2' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_A2  
		                                                                                    , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A3' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_A3  
		                                                                                    , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A4' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_A4  
		                                                                                    , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A5' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_A5  
		                                                                                    , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A6' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_A6     
		                                                                                    , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A7' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_A7     
		                                                                                    , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A8' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_A8     
		                                                                                    , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A9' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_A9     
		                                                                                    , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A10' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_A10   
		                                                                                    , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B1' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_B1  
		                                                                                    , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B2' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_B2  
		                                                                                    , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B3' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_B3  
		                                                                                    , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B4' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_B4  
		                                                                                    , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B5' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_B5  
		                                                                                    , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B6' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_B6     
		                                                                                    , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B7' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_B7     
		                                                                                    , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B8' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_B8     
		                                                                                    , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B9' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_B9     
		                                                                                    , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B10' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_B10 
		                                                                                    , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C1' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_C1  
		                                                                                    , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C2' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_C2  
		                                                                                    , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C3' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_C3  
		                                                                                    , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C4' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_C4  
		                                                                                    , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C5' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_C5  
		                                                                                    , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C6' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_C6     
		                                                                                    , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C7' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_C7     
		                                                                                    , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C8' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_C8     
		                                                                                    , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C9' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_C9     
		                                                                                    , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C10' THEN A.GOAL_SCOR/A.SQN ELSE 0 END),1),1),0)    AS COL_C10   
		                                                                                FROM(  
		                                                                                		SELECT A.ASES_YM
		                                                                                            , A.GRP_CD
		                                                                                            , A.LRGCLAS_CD
		                                                                                            , A.MEDCLAS_CD
		                                                                                            , A.SMLCLAS_CD
		                                                                                            , A.FIXD_COL
		                                                                                            , A.ASCR
		                                                                                            , A.GOAL_SCOR
		                                                                                            , A.CNSLR_ID_CNT
		                                                                                            , A.SQN
		                                                                                            , A.CNSLR_ID 
		                                                                                            , A.ASGN_SCOR1
		                                                                                        FROM(    
		                                                                                        		SELECT C.ASES_YM
		                                                                                                  , A.GRP_CD
		                                                                                                  , B.LRGCLAS_CD
		                                                                                                  , B.MEDCLAS_CD
		                                                                                                  , B.SMLCLAS_CD
		                                                                                                  , A.FIXD_COL
		                                                                                                  , SUM(B.ASCR) OVER(PARTITION BY A.FIXD_COL,F.GRP_CD,E.ASES_YM) AS ASCR
		                                                                                                  , SUM(E.GOAL_SCOR) OVER(PARTITION BY A.FIXD_COL,F.GRP_CD,E.ASES_YM) AS GOAL_SCOR
		                                                                                                  , COUNT(DISTINCT B.CNSLR_ID) OVER(PARTITION BY F.GRP_CD,E.ASES_YM) AS CNSLR_ID_CNT
		                                                                                                  , COUNT(B.SQN) OVER(PARTITION BY A.FIXD_COL,F.GRP_CD,E.ASES_YM) AS SQN
		                                                                                                  , B.CNSLR_ID 
		                                                                                                  , A.ASGN_SCOR1
		                                                                                                FROM TBL_QA_ASES_INFO_SMLCLAS A 
		                                                                                                  INNER JOIN TBL_QA_ASES_DTLS B
		                                                                                                     ON (A.GRP_CD = B.GRP_CD
		                                                                                                         AND A.BIZ_BASC_CD = B.BIZ_BASC_CD
		                                                                                                         AND A.SEQ_NO = B.SEQ_NO
		                                                                                                         AND A.LRGCLAS_CD = B.LRGCLAS_CD                       
		                                                                                                         AND A.MEDCLAS_CD = B.MEDCLAS_CD
		                                                                                                         AND A.SMLCLAS_CD = B.SMLCLAS_CD) 
		                                                                                                 INNER JOIN TBL_QA_ASES C 
		                                                                                                     ON (B.GRP_CD = C.GRP_CD 
		                                                                                                          AND B.BIZ_BASC_CD = C.BIZ_BASC_CD 
		                                                                                                          AND B.SEQ_NO = C.SEQ_NO
		                                                                                                          AND B.ASES_DTM = C.ASES_DTM 
		                                                                                                          AND B.SQN = C.SQN 
		                                                                                                          AND B.CNSLR_ID = C.CNSLR_ID) 
		                                                                                                 INNER JOIN TBL_QA_CNSLR_EXEC_PLAN D
		                                                                                                    ON (C.ASES_YM = D.ASES_YM AND C.CNSLR_ID = D.CNSLR_ID)
		                                                                                                 INNER JOIN TBL_QA_CNSLR_EXEC_PLAN_DTLS E
		                                                                                                    ON (D.ASES_YM = E.ASES_YM AND D.CNSLR_ID = E.CNSLR_ID AND A.FIXD_COL = E.FIXD_COL)
		                                                                                                 INNER JOIN TBL_USR F
		                                                                                                    ON (E.CNSLR_ID = F.USR_ID AND A.GRP_CD = F.GRP_CD)
		                                                                                                 WHERE NVL(C.SELF_CHCK_YN,'N') = 'N'
		                                                                                                AND C.TST_ASES_YN = 'Y' 
		                                                                                                AND NVL(C.DEL_YN,'N') = 'N'
		                                                                                                AND NVL(B.DEL_YN,'N') = 'N' 
		                                                                                                AND B.ASCR IS NOT NULL
		                                                                                                AND NVL(F.USE_YN,'Y') = 'Y'
		                                                                                                AND B.CNSLR_ID != C.ASES_ID
		                                                                                                <dynamic>	 
																											<isNotEmpty prepend="AND" property="grp_cd">
																													F.GRP_CD = #grp_cd#
																												</isNotEmpty>
																												<isNotEmpty prepend="AND" property="part_cd">
																													F.PART_CD = #part_cd#
																												</isNotEmpty>
																												<isNotEmpty prepend="AND" property="cnslr_id">
																													E.CNSLR_ID = #cnslr_id#
																												</isNotEmpty>
																												<isNotEmpty prepend="AND" property="ases_ym">
																													E.ASES_YM = #ases_ym#
																												</isNotEmpty>
																												<isNotEmpty prepend="AND" property="tst_ases_yn">
																													C.TST_ASES_YN = #tst_ases_yn#
																												</isNotEmpty>																												
																										</dynamic>
		                                                                                            )A
		                                                                                 )A
		                                                                                 GROUP BY A.ASES_YM 
		                                                                    )A
		                                                                )A
		                                                        )A        
		                                )B
		                                ON (A.ASES_YM = B.ASES_YM)
		                                CROSS JOIN (
		                                                SELECT TO_CHAR(SUM(D.ASGN_SCOR1)) AS TOT_SCOR
		                                                FROM TBL_QA_ASES_INFO_GRP A
		                                                INNER JOIN TBL_QA_ASES_INFO_LRGCLAS B
		                                                ON (A.GRP_CD = B.GRP_CD AND A.BIZ_BASC_CD = B.BIZ_BASC_CD AND A.SEQ_NO = B.SEQ_NO)
		                                                INNER JOIN TBL_QA_ASES_INFO_MEDCLAS C
		                                                ON (B.GRP_CD = C.GRP_CD  AND B.BIZ_BASC_CD = C.BIZ_BASC_CD AND B.SEQ_NO = C.SEQ_NO AND B.LRGCLAS_CD = C.LRGCLAS_CD) 
		                                                INNER JOIN TBL_QA_ASES_INFO_SMLCLAS D
		                                                ON (C.GRP_CD = D.GRP_CD AND C.BIZ_BASC_CD = D.BIZ_BASC_CD AND C.SEQ_NO = D.SEQ_NO AND C.LRGCLAS_CD = D.LRGCLAS_CD AND C.MEDCLAS_CD = D.MEDCLAS_CD) 
		                                                WHERE A.QA_USAG_DV_CD = '1'
		                                                AND B.BIZ_BASC_CD = 'I' 
		                                                AND NVL(A.DEL_YN,'N') = 'N'
		                                                AND NVL(A.USE_YN,'Y') = 'Y'
		                                                AND NVL(B.DEL_YN,'N') = 'N'   
		                                                AND NVL(C.DEL_YN,'N') = 'N'      
		                                                AND NVL(D.DEL_YN,'N') = 'N'
		                                                <dynamic>	 
															<isNotEmpty prepend="AND" property="grp_cd">
																A.GRP_CD = #grp_cd#
															</isNotEmpty>
														</dynamic>
		                                )C
		                                                    
		                        )A        
		                        GROUP BY A.ASES_YM,A.COL_A11,A.COL_B11,A.COL_B11,A.COL_C11,A.COL_D11               
		                )A
		        )A
		        -->
		        
				<!-- 이달의 실적 -->  
				UNION ALL		        
 				SELECT A.BRANCH
		            , A.GUBUN
		            , A.COL_A1   
		            , A.COL_A2
		            , A.COL_A3
		            , A.COL_A4
		            , A.COL_A5
		            , A.COL_A6
		            , A.COL_A7
		            , A.COL_A8
		            , A.COL_A9
		            , A.COL_A10
		            , A.COL_A11 
		            , A.COL_B1   
		            , A.COL_B2
		            , A.COL_B3
		            , A.COL_B4
		            , A.COL_B5
		            , A.COL_B6
		            , A.COL_B7
		            , A.COL_B8
		            , A.COL_B9
		            , A.COL_B10
		            , A.COL_B11 
		            , A.COL_C1   
		            , A.COL_C2
		            , A.COL_C3
		            , A.COL_C4
		            , A.COL_C5
		            , A.COL_C6
		            , A.COL_C7
		            , A.COL_C8
		            , A.COL_C9
		            , A.COL_C10
		            , A.COL_C11 
		            , TRUNC(ROUND((A.COL_A11_T + A.COL_B11_T + A.COL_C11_T),1),1) AS COL_D11  
		        FROM ( 
						SELECT A.BRANCH
				            , A.GUBUN
				            , TRUNC(ROUND(A.COL_A1,1),1) AS COL_A1
				            , TRUNC(ROUND(A.COL_A2,1),1) AS COL_A2
				            , TRUNC(ROUND(A.COL_A3,1),1) AS COL_A3
                            , TRUNC(ROUND(A.COL_A4,1),1) AS COL_A4
                            , TRUNC(ROUND(A.COL_A5,1),1) AS COL_A5
                            , TRUNC(ROUND(A.COL_A6,1),1) AS COL_A6
                            , TRUNC(ROUND(A.COL_A7,1),1) AS COL_A7
                            , TRUNC(ROUND(A.COL_A8,1),1) AS COL_A8
                            , TRUNC(ROUND(A.COL_A9,1),1) AS COL_A9
                            , TRUNC(ROUND(A.COL_A10,1),1) AS COL_A10
				            , A.COL_A1 + A.COL_A2 + A.COL_A3 + A.COL_A4 + A.COL_A5 + A.COL_A6 + A.COL_A7 + A.COL_A8 + A.COL_A9 + A.COL_A10 AS COL_A11_T
				            , TRUNC(ROUND((A.COL_A1 + A.COL_A2 + A.COL_A3 + A.COL_A4 + A.COL_A5 + A.COL_A6 + A.COL_A7 + A.COL_A8 + A.COL_A9 + A.COL_A10),1),1) AS COL_A11
				            
				            , TRUNC(ROUND(A.COL_B1,1),1) AS COL_B1				            
				            , TRUNC(ROUND(A.COL_B2,1),1) AS COL_B2
				            , TRUNC(ROUND(A.COL_B3,1),1) AS COL_B3
				            , TRUNC(ROUND(A.COL_B4,1),1) AS COL_B4
				            , TRUNC(ROUND(A.COL_B5,1),1) AS COL_B5
				            , TRUNC(ROUND(A.COL_B6,1),1) AS COL_B6
				            , TRUNC(ROUND(A.COL_B7,1),1) AS COL_B7
				            , TRUNC(ROUND(A.COL_B8,1),1) AS COL_B8
				            , TRUNC(ROUND(A.COL_B9,1),1) AS COL_B9
				            , TRUNC(ROUND(A.COL_B10,1),1) AS COL_B10
				            , A.COL_B1 + A.COL_B2 + A.COL_B3 + A.COL_B4 + A.COL_B5 + A.COL_B6 + A.COL_B7 + A.COL_B8 + A.COL_B9 + A.COL_B10 AS COL_B11_T
				            , TRUNC(ROUND((A.COL_B1 + A.COL_B2 + A.COL_B3 + A.COL_B4 + A.COL_B5 + A.COL_B6 + A.COL_B7 + A.COL_B8 + A.COL_B9 + A.COL_B10),1),1) AS COL_B11
				            
				            , TRUNC(ROUND(A.COL_C1,1),1) AS COL_C1
				            , TRUNC(ROUND(A.COL_C2,1),1) AS COL_C2
				            , TRUNC(ROUND(A.COL_C3,1),1) AS COL_C3
				            , TRUNC(ROUND(A.COL_C4,1),1) AS COL_C4
				            , TRUNC(ROUND(A.COL_C5,1),1) AS COL_C5
				            , TRUNC(ROUND(A.COL_C6,1),1) AS COL_C6
				            , TRUNC(ROUND(A.COL_C7,1),1) AS COL_C7
				            , TRUNC(ROUND(A.COL_C8,1),1) AS COL_C8
				            , TRUNC(ROUND(A.COL_C9,1),1) AS COL_C9
				            , TRUNC(ROUND(A.COL_C10,1),1) AS COL_C10
				            , A.COL_C1 + A.COL_C2 + A.COL_C3 + A.COL_C4 + A.COL_C5 + A.COL_C6 + A.COL_C7 + A.COL_C8 + A.COL_C9 + A.COL_C10 AS COL_C11_T				            
				            , TRUNC(ROUND((A.COL_C1 + A.COL_C2 + A.COL_C3 + A.COL_C4 + A.COL_C5 + A.COL_C6 + A.COL_C7 + A.COL_C8 + A.COL_C9 + A.COL_C10),1),1) AS COL_C11 
				        FROM (  	
				        		SELECT
				        			'이달의 실적' AS BRANCH 
		            				, '점수' AS GUBUN   
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'A1' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0)     END     AS COL_A1
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'A2' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0)     END     AS COL_A2
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'A3' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0)     END     AS COL_A3
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'A4' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0)     END     AS COL_A4
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'A5' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0)     END     AS COL_A5
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0				                            
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'A6' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0)     END     AS COL_A6
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'A7' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0)     END     AS COL_A7
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'A8' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0)     END     AS COL_A8
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'A9' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0)     END     AS COL_A9
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'A10' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0)    END     AS COL_A10
				                    
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0				                    				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'B1' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0)     END     AS COL_B1
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'B2' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0)     END     AS COL_B2
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'B3' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0)     END     AS COL_B3
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'B4' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0)     END     AS COL_B4
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'B5' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0)     END     AS COL_B5
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'B6' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0)     END     AS COL_B6
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'B7' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0)     END     AS COL_B7
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'B8' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0)     END     AS COL_B8
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'B9' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0)     END     AS COL_B9
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'B10' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0)    END     AS COL_B10
				                    
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'C1' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0)     END     AS COL_C1
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'C2' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0)     END     AS COL_C2
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'C3' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0)     END     AS COL_C3
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'C4' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0)     END     AS COL_C4
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'C5' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0)     END     AS COL_C5
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'C6' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0)     END     AS COL_C6
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'C7' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0)     END     AS COL_C7
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'C8' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0)     END     AS COL_C8
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'C9' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0)     END     AS COL_C9
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'C10' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0)    END     AS COL_C10   
				                FROM(  
				                        SELECT * FROM T                     
				                 )A
				                 GROUP BY A.ASES_YM
				        )A
				)A			
				<!-- 실적 끝 -->
				
				<!-- 달성도 -->

		        UNION ALL
		        SELECT A.BRANCH
		            , A.GUBUN
		            , A.COL_A1   
		            , A.COL_A2
		            , A.COL_A3
		            , A.COL_A4
		            , A.COL_A5
		            , A.COL_A6
		            , A.COL_A7
		            , A.COL_A8
		            , A.COL_A9
		            , A.COL_A10
		            , A.COL_A11 
		            , A.COL_B1   
		            , A.COL_B2
		            , A.COL_B3
		            , A.COL_B4
		            , A.COL_B5
		            , A.COL_B6
		            , A.COL_B7
		            , A.COL_B8
		            , A.COL_B9
		            , A.COL_B10
		            , A.COL_B11 
		            , A.COL_C1   
		            , A.COL_C2
		            , A.COL_C3
		            , A.COL_C4
		            , A.COL_C5
		            , A.COL_C6
		            , A.COL_C7
		            , A.COL_C8
		            , A.COL_C9
		            , A.COL_C10
		            , A.COL_C11 
		            , TRUNC(ROUND((A.COL_A11_T + A.COL_B11_T + A.COL_C11_T)* 100/100,1),1) AS COL_D11
		        FROM (
		                SELECT
		                      A.BRANCH
				            , A.GUBUN
				            , TRUNC(ROUND(A.COL_A1,1),1) AS COL_A1
				            , TRUNC(ROUND(A.COL_A2,1),1) AS COL_A2
				            , TRUNC(ROUND(A.COL_A3,1),1) AS COL_A3
                            , TRUNC(ROUND(A.COL_A4,1),1) AS COL_A4
                            , TRUNC(ROUND(A.COL_A5,1),1) AS COL_A5
                            , TRUNC(ROUND(A.COL_A6,1),1) AS COL_A6
                            , TRUNC(ROUND(A.COL_A7,1),1) AS COL_A7
                            , TRUNC(ROUND(A.COL_A8,1),1) AS COL_A8
                            , TRUNC(ROUND(A.COL_A9,1),1) AS COL_A9
                            , TRUNC(ROUND(A.COL_A10,1),1) AS COL_A10
				            , A.COL_A_SCR1 + A.COL_A_SCR2 + A.COL_A_SCR3 + A.COL_A_SCR4 + A.COL_A_SCR5 + A.COL_A_SCR6 + A.COL_A_SCR7 + A.COL_A_SCR8 + A.COL_A_SCR9 + A.COL_A_SCR10 AS COL_A11_T                            
				            , CASE WHEN A.SUB_SCOR_A = 0 THEN 0 
				                    ELSE TRUNC(ROUND((A.COL_A_SCR1 + A.COL_A_SCR2 + A.COL_A_SCR3 + A.COL_A_SCR4 + A.COL_A_SCR5 + A.COL_A_SCR6 + A.COL_A_SCR7 + A.COL_A_SCR8 + A.COL_A_SCR9 + A.COL_A_SCR10)*100/A.SUB_SCOR_A,1),1) END AS COL_A11
				                                        		                    
				            , TRUNC(ROUND(A.COL_B1,1),1) AS COL_B1				            
				            , TRUNC(ROUND(A.COL_B2,1),1) AS COL_B2
				            , TRUNC(ROUND(A.COL_B3,1),1) AS COL_B3
				            , TRUNC(ROUND(A.COL_B4,1),1) AS COL_B4
				            , TRUNC(ROUND(A.COL_B5,1),1) AS COL_B5
				            , TRUNC(ROUND(A.COL_B6,1),1) AS COL_B6
				            , TRUNC(ROUND(A.COL_B7,1),1) AS COL_B7
				            , TRUNC(ROUND(A.COL_B8,1),1) AS COL_B8
				            , TRUNC(ROUND(A.COL_B9,1),1) AS COL_B9
				            , TRUNC(ROUND(A.COL_B10,1),1) AS COL_B10
				            , A.COL_B_SCR1 + A.COL_B_SCR2 + A.COL_B_SCR3 + A.COL_B_SCR4 + A.COL_B_SCR5 + A.COL_B_SCR6 + A.COL_B_SCR7 + A.COL_B_SCR8 + A.COL_B_SCR9 + A.COL_B_SCR10 AS COL_B11_T
				            , CASE WHEN A.SUB_SCOR_B = 0 THEN 0
				                    ELSE TRUNC(ROUND((A.COL_B_SCR1 + A.COL_B_SCR2 + A.COL_B_SCR3 + A.COL_B_SCR4 + A.COL_B_SCR5 + A.COL_B_SCR6 + A.COL_B_SCR7 + A.COL_B_SCR8 + A.COL_B_SCR9 + A.COL_B_SCR10)*100/A.SUB_SCOR_B,1),1) END AS COL_B11
				            
				            , TRUNC(ROUND(A.COL_C1,1),1) AS COL_C1
				            , TRUNC(ROUND(A.COL_C2,1),1) AS COL_C2
				            , TRUNC(ROUND(A.COL_C3,1),1) AS COL_C3
				            , TRUNC(ROUND(A.COL_C4,1),1) AS COL_C4
				            , TRUNC(ROUND(A.COL_C5,1),1) AS COL_C5
				            , TRUNC(ROUND(A.COL_C6,1),1) AS COL_C6
				            , TRUNC(ROUND(A.COL_C7,1),1) AS COL_C7
				            , TRUNC(ROUND(A.COL_C8,1),1) AS COL_C8
				            , TRUNC(ROUND(A.COL_C9,1),1) AS COL_C9
				            , TRUNC(ROUND(A.COL_C10,1),1) AS COL_C10
				            , A.COL_C_SCR1 + A.COL_C_SCR2 + A.COL_C_SCR3 + A.COL_C_SCR4 + A.COL_C_SCR5 + A.COL_C_SCR6 + A.COL_C_SCR7 + A.COL_C_SCR8 + A.COL_C_SCR9 + A.COL_C_SCR10 AS COL_C11_T				            
				            , CASE WHEN A.SUB_SCOR_C = 0 THEN 0
				                    ELSE TRUNC(ROUND((A.COL_C_SCR1 + A.COL_C_SCR2 + A.COL_C_SCR3 + A.COL_C_SCR4 + A.COL_C_SCR5 + A.COL_C_SCR6 + A.COL_C_SCR7 + A.COL_C_SCR8 + A.COL_C_SCR9 + A.COL_C_SCR10)*100/A.SUB_SCOR_C,1),1) END AS COL_C11
				            
		                FROM(
				                SELECT 	'이달의 실적' AS BRANCH 
		                			, '달성도(%)' AS GUBUN 
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0
				                           WHEN MAX(A.ASGN_SCOR1) = '0' THEN 0				                     
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'A1' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT * 100/NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),0) END   AS COL_A1
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0
				                           WHEN MAX(A.ASGN_SCOR1) = '0' THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'A2' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT * 100/NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),0) END   AS COL_A2
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0
				                           WHEN MAX(A.ASGN_SCOR1) = '0' THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'A3' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT * 100/NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),0) END   AS COL_A3
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0
				                           WHEN MAX(A.ASGN_SCOR1) = '0' THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'A4' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT * 100/NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),0) END   AS COL_A4
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0
				                           WHEN MAX(A.ASGN_SCOR1) = '0' THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'A5' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT * 100/NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),0) END   AS COL_A5
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0
				                           WHEN MAX(A.ASGN_SCOR1) = '0' THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'A6' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT * 100/NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),0) END   AS COL_A6
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0
				                           WHEN MAX(A.ASGN_SCOR1) = '0' THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'A7' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT * 100/NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),0) END   AS COL_A7
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0
				                           WHEN MAX(A.ASGN_SCOR1) = '0' THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'A8' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT * 100/NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),0) END   AS COL_A8
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0
				                           WHEN MAX(A.ASGN_SCOR1) = '0' THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'A9' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT * 100/NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),0) END   AS COL_A9
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0
				                           WHEN MAX(A.ASGN_SCOR1) = '0' THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'A10' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT * 100/NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),0) END   AS COL_A10
				                    
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0
				                           WHEN MAX(A.ASGN_SCOR1) = '0' THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'B1' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT * 100/NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),0) END   AS COL_B1
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0
				                           WHEN MAX(A.ASGN_SCOR1) = '0' THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'B2' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT * 100/NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),0) END   AS COL_B2
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0
				                           WHEN MAX(A.ASGN_SCOR1) = '0' THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'B3' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT * 100/NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),0) END   AS COL_B3
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0
				                           WHEN MAX(A.ASGN_SCOR1) = '0' THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'B4' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT * 100/NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),0) END   AS COL_B4
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0
				                           WHEN MAX(A.ASGN_SCOR1) = '0' THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'B5' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT * 100/NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),0) END   AS COL_B5
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0
				                           WHEN MAX(A.ASGN_SCOR1) = '0' THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'B6' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT * 100/NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),0) END   AS COL_B6
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0
				                           WHEN MAX(A.ASGN_SCOR1) = '0' THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'B7' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT * 100/NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),0) END   AS COL_B7
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0
				                           WHEN MAX(A.ASGN_SCOR1) = '0' THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'B8' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT * 100/NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),0) END   AS COL_B8
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0
				                           WHEN MAX(A.ASGN_SCOR1) = '0' THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'B9' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT * 100/NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),0) END   AS COL_B9
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0
				                           WHEN MAX(A.ASGN_SCOR1) = '0' THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'B10' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT * 100/NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),0) END   AS COL_B10
				                    
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0
				                           WHEN MAX(A.ASGN_SCOR1) = '0' THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'C1' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT * 100/NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),0) END   AS COL_C1
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0
				                           WHEN MAX(A.ASGN_SCOR1) = '0' THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'C2' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT * 100/NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),0) END   AS COL_C2
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0
				                           WHEN MAX(A.ASGN_SCOR1) = '0' THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'C3' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT * 100/NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),0) END   AS COL_C3
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0
				                           WHEN MAX(A.ASGN_SCOR1) = '0' THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'C4' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT * 100/NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),0) END   AS COL_C4
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0
				                           WHEN MAX(A.ASGN_SCOR1) = '0' THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'C5' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT * 100/NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),0) END   AS COL_C5
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0
				                           WHEN MAX(A.ASGN_SCOR1) = '0' THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'C6' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT * 100/NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),0) END   AS COL_C6
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0
				                           WHEN MAX(A.ASGN_SCOR1) = '0' THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'C7' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT * 100/NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),0) END   AS COL_C7
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0
				                           WHEN MAX(A.ASGN_SCOR1) = '0' THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'C8' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT * 100/NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),0) END   AS COL_C8
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0
				                           WHEN MAX(A.ASGN_SCOR1) = '0' THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'C9' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT * 100/NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),0) END   AS COL_C9
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0
				                           WHEN MAX(A.ASGN_SCOR1) = '0' THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'C10' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT * 100/NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),0) END    AS COL_C10				                    

				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'A1' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0) END           AS COL_A_SCR1
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'A2' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0) END           AS COL_A_SCR2
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'A3' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0) END           AS COL_A_SCR3
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'A4' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0) END           AS COL_A_SCR4
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'A5' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0) END           AS COL_A_SCR5
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'A6' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0) END           AS COL_A_SCR6
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'A7' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0) END           AS COL_A_SCR7
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'A8' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0) END           AS COL_A_SCR8
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'A9' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0) END           AS COL_A_SCR9
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'A10' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0) END          AS COL_A_SCR10
				                    
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'B1' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0) END           AS COL_B_SCR1
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'B2' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0) END           AS COL_B_SCR2
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'B3' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0) END           AS COL_B_SCR3
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'B4' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0) END           AS COL_B_SCR4
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'B5' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0) END           AS COL_B_SCR5
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'B6' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0) END           AS COL_B_SCR6
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'B7' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0) END           AS COL_B_SCR7
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'B8' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0) END           AS COL_B_SCR8
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'B9' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0) END           AS COL_B_SCR9
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'B10' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0) END          AS COL_B_SCR10

				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'C1' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0) END           AS COL_C_SCR1
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'C2' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0) END           AS COL_C_SCR2
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'C3' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0) END           AS COL_C_SCR3
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'C4' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0) END           AS COL_C_SCR4
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'C5' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0) END           AS COL_C_SCR5
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'C6' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0) END           AS COL_C_SCR6
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'C7' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0) END           AS COL_C_SCR7
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'C8' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0) END           AS COL_C_SCR8
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'C9' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0) END           AS COL_C_SCR9
				                    , CASE WHEN MAX(A.CNSLR_ID_CNT) = 0 THEN 0				                    
				                            ELSE NVL(MAX(CASE WHEN A.FIXD_COL = 'C10' THEN A.CNSL_AVG_SUM/A.CNSLR_ID_CNT END),0) END          AS COL_C_SCR10	
				                    
				                    , NVL(MAX(CASE WHEN A.FIXD_COL LIKE '%A%' THEN A.SUB_SCOR END),1)            AS SUB_SCOR_A
				                    , NVL(MAX(CASE WHEN A.FIXD_COL LIKE '%B%' THEN A.SUB_SCOR END),1)            AS SUB_SCOR_B
				                    , NVL(MAX(CASE WHEN A.FIXD_COL LIKE '%C%' THEN A.SUB_SCOR END),1)            AS SUB_SCOR_C

				                FROM(  
				                        SELECT * FROM T                     
				                 )A
				                 GROUP BY A.ASES_YM		                		                
		                    )A        
		        	 )A	        	 
		        	 <!-- 달성도 끝 -->		        
		        
		        <!-- 
		        UNION ALL
		        SELECT '이달의 실적' AS BRANCH 
		            , '점수' AS GUBUN 
		            , A.COL_A1   
		            , A.COL_A2
		            , A.COL_A3
		            , A.COL_A4
		            , A.COL_A5
		            , A.COL_A6
		            , A.COL_A7
		            , A.COL_A8
		            , A.COL_A9
		            , A.COL_A10
		            , A.COL_A11 
		            , A.COL_B1   
		            , A.COL_B2
		            , A.COL_B3
		            , A.COL_B4
		            , A.COL_B5
		            , A.COL_B6
		            , A.COL_B7
		            , A.COL_B8
		            , A.COL_B9
		            , A.COL_B10
		            , A.COL_B11 
		            , A.COL_C1   
		            , A.COL_C2
		            , A.COL_C3
		            , A.COL_C4
		            , A.COL_C5
		            , A.COL_C6
		            , A.COL_C7
		            , A.COL_C8
		            , A.COL_C9
		            , A.COL_C10
		            , A.COL_C11
		            , A.COL_A11 + A.COL_B11 + A.COL_C11 AS COL_D11
		        FROM (
		                SELECT A.ASES_YM
		                    , A.COL_A1   
		                    , A.COL_A2
		                    , A.COL_A3
		                    , A.COL_A4
		                    , A.COL_A5
		                    , A.COL_A6
		                    , A.COL_A7
		                    , A.COL_A8
		                    , A.COL_A9
		                    , A.COL_A10
		                    , A.COL_A1 + A.COL_A2 + A.COL_A3 + A.COL_A4 + A.COL_A5 + A.COL_A6 + A.COL_A7 + A.COL_A8 + A.COL_A9 + A.COL_A10 AS COL_A11 
		                    , A.COL_B1   
		                    , A.COL_B2
		                    , A.COL_B3
		                    , A.COL_B4
		                    , A.COL_B5
		                    , A.COL_B6
		                    , A.COL_B7
		                    , A.COL_B8
		                    , A.COL_B9
		                    , A.COL_B10
		                    , A.COL_B1 + A.COL_B2 + A.COL_B3 + A.COL_B4 + A.COL_B5 + A.COL_B6 + A.COL_B7 + A.COL_B8 + A.COL_B9 + A.COL_B10 AS COL_B11 
		                    , A.COL_C1   
		                    , A.COL_C2
		                    , A.COL_C3
		                    , A.COL_C4
		                    , A.COL_C5
		                    , A.COL_C6
		                    , A.COL_C7
		                    , A.COL_C8
		                    , A.COL_C9
		                    , A.COL_C10
		                    , A.COL_C1 + A.COL_C2 + A.COL_C3 + A.COL_C4 + A.COL_C5 + A.COL_C6 + A.COL_C7 + A.COL_C8 + A.COL_C9 + A.COL_C10 AS COL_C11   
		                FROM (  
		                		SELECT A.ASES_YM  
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A1' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_A1  
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A2' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_A2  
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A3' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_A3  
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A4' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_A4  
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A5' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_A5  
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A6' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_A6     
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A7' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_A7     
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A8' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_A8     
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A9' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_A9     
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A10' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_A10   
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B1' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_B1  
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B2' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_B2  
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B3' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_B3  
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B4' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_B4  
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B5' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_B5  
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B6' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_B6     
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B7' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_B7     
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B8' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_B8     
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B9' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_B9     
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B10' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_B10 
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C1' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_C1  
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C2' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_C2  
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C3' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_C3  
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C4' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_C4  
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C5' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_C5  
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C6' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_C6     
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C7' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_C7     
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C8' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_C8     
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C9' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_C9     
		                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C10' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_C10   
		                        FROM(  
		                                SELECT A.ASES_YM
		                                    , A.GRP_CD
		                                    , A.LRGCLAS_CD
		                                    , A.MEDCLAS_CD
		                                    , A.SMLCLAS_CD
		                                    , A.FIXD_COL
		                                    , A.ASCR
		                                    , A.CNSLR_ID 
		                                    , A.ASGN_SCOR1 
		                                    , A.SQN
		                                    , A.CNSLR_ID_CNT
		                                    , A.SUB_SCOR
		                                FROM(
		                                        SELECT C.ASES_YM
		                                          , A.GRP_CD
		                                          , B.LRGCLAS_CD
		                                          , B.MEDCLAS_CD
		                                          , B.SMLCLAS_CD
		                                          , A.FIXD_COL
		                                          , SUM(B.ASCR) OVER(PARTITION BY A.FIXD_COL,D.GRP_CD,C.ASES_YM) AS ASCR
		                                          , COUNT(DISTINCT B.CNSLR_ID) OVER(PARTITION BY D.GRP_CD,C.ASES_YM) AS CNSLR_ID_CNT
		                                          , COUNT(B.SQN) OVER(PARTITION BY A.FIXD_COL,D.GRP_CD,C.ASES_YM) AS SQN
		                                          , B.CNSLR_ID 
		                                          , A.ASGN_SCOR1
		                                          , GSIB.FUN_GET_LRGCLAS_SCOR(A.GRP_CD,A.SEQ_NO,B.LRGCLAS_CD) AS SUB_SCOR
		                                        FROM TBL_QA_ASES_INFO_SMLCLAS A 
		                                          INNER JOIN TBL_QA_ASES_DTLS B
		                                             ON (A.GRP_CD = B.GRP_CD
		                                                 AND A.BIZ_BASC_CD = B.BIZ_BASC_CD
		                                                 AND A.SEQ_NO = B.SEQ_NO
		                                                 AND A.LRGCLAS_CD = B.LRGCLAS_CD                       
		                                                 AND A.MEDCLAS_CD = B.MEDCLAS_CD
		                                                 AND A.SMLCLAS_CD = B.SMLCLAS_CD) 
		                                          INNER JOIN TBL_QA_ASES C 
		                                             ON (B.GRP_CD = C.GRP_CD 
		                                                  AND B.BIZ_BASC_CD = C.BIZ_BASC_CD 
		                                                  AND B.SEQ_NO = C.SEQ_NO 
		                                                  AND B.ASES_DTM = C.ASES_DTM 
		                                                  AND B.SQN = C.SQN 
		                                                  AND B.CNSLR_ID = C.CNSLR_ID) 
		                                          INNER JOIN TBL_USR D
		                                             ON (C.CNSLR_ID = D.USR_ID AND A.GRP_CD = D.GRP_CD)
		                                        WHERE NVL(C.SELF_CHCK_YN,'N') = 'N'
		                                        AND C.TST_ASES_YN = 'Y' 
		                                        AND NVL(C.DEL_YN,'N') = 'N'
		                                        AND NVL(B.DEL_YN,'N') = 'N' 
		                                        AND B.ASCR IS NOT NULL
		                                        AND NVL(D.USE_YN,'Y') = 'Y'
		                                        AND B.CNSLR_ID != C.ASES_ID
		                                        <dynamic>	 
													<isNotEmpty prepend="AND" property="grp_cd">
														D.GRP_CD = #grp_cd#
													</isNotEmpty>
													<isNotEmpty prepend="AND" property="part_cd">
														D.PART_CD = #part_cd#
													</isNotEmpty>
													<isNotEmpty prepend="AND" property="cnslr_id">
														B.CNSLR_ID = #cnslr_id#
													</isNotEmpty>
													<isNotEmpty prepend="AND" property="ases_ym">
														C.ASES_YM = #ases_ym#
													</isNotEmpty>
												</dynamic>
		                                 )A 
		                              )A
		                              GROUP BY A.ASES_YM
		                    )A
		            )A
		            
 							            
		            UNION ALL
		            SELECT '이달의 실적' AS BRANCH 
		                , '달성도(%)' AS GUBUN 
		                , A.COL_A1   
		                , A.COL_A2
		                , A.COL_A3
		                , A.COL_A4
		                , A.COL_A5
		                , A.COL_A6
		                , A.COL_A7
		                , A.COL_A8
		                , A.COL_A9
		                , A.COL_A10
		                , A.COL_A11 
		                , A.COL_B1   
		                , A.COL_B2
		                , A.COL_B3
		                , A.COL_B4
		                , A.COL_B5
		                , A.COL_B6
		                , A.COL_B7
		                , A.COL_B8
		                , A.COL_B9
		                , A.COL_B10
		                , A.COL_B11 
		                , A.COL_C1   
		                , A.COL_C2
		                , A.COL_C3
		                , A.COL_C4
		                , A.COL_C5
		                , A.COL_C6
		                , A.COL_C7
		                , A.COL_C8
		                , A.COL_C9
		                , A.COL_C10
		                , A.COL_C11 
		                , A.COL_D11
		            FROM (  
		            		SELECT A.ASES_YM    
		                        , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A1' THEN A.ASCR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_A1
		                        , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A2' THEN A.ASCR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_A2
		                        , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A3' THEN A.ASCR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_A3
		                        , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A4' THEN A.ASCR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_A4
		                        , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A5' THEN A.ASCR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_A5
		                        , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A6' THEN A.ASCR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_A6
		                        , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A7' THEN A.ASCR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_A7
		                        , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A8' THEN A.ASCR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_A8
		                        , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A9' THEN A.ASCR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_A9
		                        , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A10' THEN A.ASCR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_A10
		                        , NVL(TRUNC(ROUND(MAX(A.COL_A11)/MAX(CASE WHEN A.LRGCLAS_CD = '1' THEN NULLIF(A.SUB_SCOR,'0')END)*100,1),1),0) AS COL_A11 
		                        , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B1' THEN A.ASCR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_B1
		                        , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B2' THEN A.ASCR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_B2
		                        , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B3' THEN A.ASCR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_B3
		                        , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B4' THEN A.ASCR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_B4
		                        , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B5' THEN A.ASCR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_B5
		                        , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B6' THEN A.ASCR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_B6
		                        , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B7' THEN A.ASCR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_B7
		                        , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B8' THEN A.ASCR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_B8
		                        , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B9' THEN A.ASCR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_B9
		                        , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B10' THEN A.ASCR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)   AS COL_B10
		                        , NVL(TRUNC(ROUND(MAX(A.COL_B11)/MAX(CASE WHEN A.LRGCLAS_CD = '2' THEN NULLIF(A.SUB_SCOR,'0')END)*100,1),1),0) AS COL_B11 
		                        , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C1' THEN A.ASCR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_C1
		                        , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C2' THEN A.ASCR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_C2
		                        , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C3' THEN A.ASCR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_C3
		                        , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C4' THEN A.ASCR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_C4
		                        , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C5' THEN A.ASCR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_C5
		                        , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C6' THEN A.ASCR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_C6
		                        , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C7' THEN A.ASCR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_C7
		                        , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C8' THEN A.ASCR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_C8
		                        , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C9' THEN A.ASCR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_C9
		                        , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = '10' THEN A.ASCR/A.SQN * 100 / NULLIF(A.ASGN_SCOR1,'0') ELSE 0 END),1),1),0)    AS COL_C10 
		                        , NVL(TRUNC(ROUND(MAX(A.COL_C11)/MAX(CASE WHEN A.LRGCLAS_CD = '3' THEN NULLIF(A.SUB_SCOR,'0')END)*100,1),1),0) AS COL_C11 
		                        , NVL(TRUNC(ROUND(MAX(A.COL_D11)/MAX(NULLIF(A.TOT_SCOR,'0'))*100,1),1),0) AS COL_D11  
		                    FROM(   
		                           SELECT A.ASES_YM
		                            , A.GRP_CD
		                            , A.LRGCLAS_CD
		                            , A.MEDCLAS_CD
		                            , A.SMLCLAS_CD
		                            , A.FIXD_COL
		                            , A.ASCR
		                            , A.CNSLR_ID 
		                            , A.ASGN_SCOR1 
		                            , A.SQN
		                            , A.CNSLR_ID_CNT
		                            , A.SUB_SCOR
		                            , B.COL_A11
		                            , B.COL_B11
		                            , B.COL_C11
		                            , B.COL_D11  
		                            , C.TOT_SCOR                          
		                        FROM(
		                                SELECT C.ASES_YM
		                                  , A.GRP_CD
		                                  , B.LRGCLAS_CD
		                                  , B.MEDCLAS_CD
		                                  , B.SMLCLAS_CD
		                                  , A.FIXD_COL
		                                  , SUM(B.ASCR) OVER(PARTITION BY A.FIXD_COL,D.GRP_CD,C.ASES_YM) AS ASCR
		                                  , COUNT(DISTINCT B.CNSLR_ID) OVER(PARTITION BY D.GRP_CD,C.ASES_YM) AS CNSLR_ID_CNT
		                                  , COUNT(B.SQN) OVER(PARTITION BY A.FIXD_COL,D.GRP_CD,C.ASES_YM) AS SQN
		                                  , B.CNSLR_ID 
		                                  , A.ASGN_SCOR1
		                                  , GSIB.FUN_GET_LRGCLAS_SCOR(A.GRP_CD,A.SEQ_NO,B.LRGCLAS_CD) AS SUB_SCOR
		                                FROM TBL_QA_ASES_INFO_SMLCLAS A 
		                                  INNER JOIN TBL_QA_ASES_DTLS B
		                                     ON (A.GRP_CD = B.GRP_CD
		                                         AND A.BIZ_BASC_CD = B.BIZ_BASC_CD
		                                         AND A.SEQ_NO = B.SEQ_NO
		                                         AND A.LRGCLAS_CD = B.LRGCLAS_CD                       
		                                         AND A.MEDCLAS_CD = B.MEDCLAS_CD
		                                         AND A.SMLCLAS_CD = B.SMLCLAS_CD) 
		                                  INNER JOIN TBL_QA_ASES C 
		                                     ON (B.GRP_CD = C.GRP_CD 
		                                          AND B.BIZ_BASC_CD = C.BIZ_BASC_CD 
		                                          AND B.SEQ_NO = C.SEQ_NO 
		                                          AND B.ASES_DTM = C.ASES_DTM 
		                                          AND B.SQN = C.SQN 
		                                          AND B.CNSLR_ID = C.CNSLR_ID) 
		                                  INNER JOIN TBL_USR D
		                                     ON (C.CNSLR_ID = D.USR_ID AND A.GRP_CD = D.GRP_CD)
		                                WHERE NVL(C.SELF_CHCK_YN,'N') = 'N'
		                                AND C.TST_ASES_YN = 'Y' 
		                                AND NVL(C.DEL_YN,'N') = 'N'
		                                AND NVL(B.DEL_YN,'N') = 'N' 
		                                AND B.ASCR IS NOT NULL
		                                AND NVL(D.USE_YN,'Y') = 'Y'
		                                AND B.CNSLR_ID != C.ASES_ID
		                                <dynamic>	 
											<isNotEmpty prepend="AND" property="grp_cd">
												D.GRP_CD = #grp_cd#
											</isNotEmpty>
											<isNotEmpty prepend="AND" property="part_cd">
												D.PART_CD = #part_cd#
											</isNotEmpty>
											<isNotEmpty prepend="AND" property="cnslr_id">
												B.CNSLR_ID = #cnslr_id#
											</isNotEmpty>
											<isNotEmpty prepend="AND" property="ases_ym">
												C.ASES_YM = #ases_ym#
											</isNotEmpty>
										</dynamic>
		                         )A  FULL OUTER JOIN (
		                                                SELECT A.ASES_YM
		                                                    , A.COL_A11 
		                                                    , A.COL_B11 
		                                                    , A.COL_C11
		                                                    , A.COL_D11
		                                                FROM (    
		                                                        SELECT A.ASES_YM
		                                                            , A.COL_A1   
		                                                            , A.COL_A2
		                                                            , A.COL_A3
		                                                            , A.COL_A4
		                                                            , A.COL_A5
		                                                            , A.COL_A6
		                                                            , A.COL_A7
		                                                            , A.COL_A8
		                                                            , A.COL_A9
		                                                            , A.COL_A10
		                                                            , A.COL_A11 
		                                                            , A.COL_B1   
		                                                            , A.COL_B2
		                                                            , A.COL_B3
		                                                            , A.COL_B4
		                                                            , A.COL_B5
		                                                            , A.COL_B6
		                                                            , A.COL_B7
		                                                            , A.COL_B8
		                                                            , A.COL_B9
		                                                            , A.COL_B10
		                                                            , A.COL_B11 
		                                                            , A.COL_C1   
		                                                            , A.COL_C2
		                                                            , A.COL_C3
		                                                            , A.COL_C4
		                                                            , A.COL_C5
		                                                            , A.COL_C6
		                                                            , A.COL_C7
		                                                            , A.COL_C8
		                                                            , A.COL_C9
		                                                            , A.COL_C10
		                                                            , A.COL_C11
		                                                            , A.COL_A11 + A.COL_B11 + A.COL_C11 AS COL_D11
		                                                        FROM (
		                                                                SELECT A.ASES_YM
		                                                                    , A.COL_A1   
		                                                                    , A.COL_A2
		                                                                    , A.COL_A3
		                                                                    , A.COL_A4
		                                                                    , A.COL_A5
		                                                                    , A.COL_A6
		                                                                    , A.COL_A7
		                                                                    , A.COL_A8
		                                                                    , A.COL_A9
		                                                                    , A.COL_A10
		                                                                    , A.COL_A1 + A.COL_A2 + A.COL_A3 + A.COL_A4 + A.COL_A5 + A.COL_A6 + A.COL_A7 + A.COL_A8 + A.COL_A9 + A.COL_A10 AS COL_A11 
		                                                                    , A.COL_B1   
		                                                                    , A.COL_B2
		                                                                    , A.COL_B3
		                                                                    , A.COL_B4
		                                                                    , A.COL_B5
		                                                                    , A.COL_B6
		                                                                    , A.COL_B7
		                                                                    , A.COL_B8
		                                                                    , A.COL_B9
		                                                                    , A.COL_B10
		                                                                    , A.COL_B1 + A.COL_B2 + A.COL_B3 + A.COL_B4 + A.COL_B5 + A.COL_B6 + A.COL_B7 + A.COL_B8 + A.COL_B9 + A.COL_B10 AS COL_B11 
		                                                                    , A.COL_C1   
		                                                                    , A.COL_C2
		                                                                    , A.COL_C3
		                                                                    , A.COL_C4
		                                                                    , A.COL_C5
		                                                                    , A.COL_C6
		                                                                    , A.COL_C7
		                                                                    , A.COL_C8
		                                                                    , A.COL_C9
		                                                                    , A.COL_C10
		                                                                    , A.COL_C1 + A.COL_C2 + A.COL_C3 + A.COL_C4 + A.COL_C5 + A.COL_C6 + A.COL_C7 + A.COL_C8 + A.COL_C9 + A.COL_C10 AS COL_C11   
		                                                                FROM (  SELECT A.ASES_YM  
		                                                                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A1' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_A1  
		                                                                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A2' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_A2  
		                                                                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A3' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_A3  
		                                                                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A4' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_A4  
		                                                                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A5' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_A5  
		                                                                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A6' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_A6     
		                                                                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A7' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_A7     
		                                                                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A8' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_A8     
		                                                                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A9' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_A9     
		                                                                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A10' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_A10   
		                                                                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B1' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_B1  
		                                                                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B2' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_B2  
		                                                                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B3' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_B3  
		                                                                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B4' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_B4  
		                                                                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B5' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_B5  
		                                                                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B6' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_B6     
		                                                                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B7' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_B7     
		                                                                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B8' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_B8     
		                                                                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B9' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_B9     
		                                                                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B10' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_B10 
		                                                                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C1' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_C1  
		                                                                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C2' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_C2  
		                                                                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C3' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_C3  
		                                                                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C4' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_C4  
		                                                                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C5' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_C5  
		                                                                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C6' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_C6     
		                                                                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C7' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_C7     
		                                                                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C8' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_C8     
		                                                                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C9' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_C9     
		                                                                            , NVL(TRUNC(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C10' THEN A.ASCR/A.SQN  ELSE 0 END),1),1),0)    AS COL_C10   
		                                                                        FROM(  
		                                                                                SELECT A.ASES_YM
		                                                                                    , A.GRP_CD
		                                                                                    , A.LRGCLAS_CD
		                                                                                    , A.MEDCLAS_CD
		                                                                                    , A.SMLCLAS_CD
		                                                                                    , A.FIXD_COL
		                                                                                    , A.ASCR
		                                                                                    , A.CNSLR_ID 
		                                                                                    , A.ASGN_SCOR1 
		                                                                                    , A.SQN
		                                                                                    , A.CNSLR_ID_CNT
		                                                                                    , A.SUB_SCOR
		                                                                                FROM(
		                                                                                        SELECT C.ASES_YM
		                                                                                          , A.GRP_CD
		                                                                                          , B.LRGCLAS_CD
		                                                                                          , B.MEDCLAS_CD
		                                                                                          , B.SMLCLAS_CD
		                                                                                          , A.FIXD_COL
		                                                                                          , SUM(B.ASCR) OVER(PARTITION BY A.FIXD_COL,D.GRP_CD,C.ASES_YM) AS ASCR
		                                                                                          , COUNT(DISTINCT B.CNSLR_ID) OVER(PARTITION BY D.GRP_CD,C.ASES_YM) AS CNSLR_ID_CNT
		                                                                                          , COUNT(B.SQN) OVER(PARTITION BY A.FIXD_COL,D.GRP_CD,C.ASES_YM) AS SQN
		                                                                                          , B.CNSLR_ID 
		                                                                                          , A.ASGN_SCOR1
		                                                                                          , GSIB.FUN_GET_LRGCLAS_SCOR(A.GRP_CD,A.SEQ_NO,B.LRGCLAS_CD) AS SUB_SCOR
		                                                                                        FROM TBL_QA_ASES_INFO_SMLCLAS A 
		                                                                                          INNER JOIN TBL_QA_ASES_DTLS B
		                                                                                             ON (A.GRP_CD = B.GRP_CD
		                                                                                                 AND A.BIZ_BASC_CD = B.BIZ_BASC_CD
		                                                                                                 AND A.SEQ_NO = B.SEQ_NO
		                                                                                                 AND A.LRGCLAS_CD = B.LRGCLAS_CD                       
		                                                                                                 AND A.MEDCLAS_CD = B.MEDCLAS_CD
		                                                                                                 AND A.SMLCLAS_CD = B.SMLCLAS_CD) 
		                                                                                          INNER JOIN TBL_QA_ASES C 
		                                                                                             ON (B.GRP_CD = C.GRP_CD 
		                                                                                                  AND B.BIZ_BASC_CD = C.BIZ_BASC_CD 
		                                                                                                  AND B.SEQ_NO = C.SEQ_NO 
		                                                                                                  AND B.ASES_DTM = C.ASES_DTM 
		                                                                                                  AND B.SQN = C.SQN 
		                                                                                                  AND B.CNSLR_ID = C.CNSLR_ID) 
		                                                                                          INNER JOIN TBL_USR D
		                                                                                             ON (C.CNSLR_ID = D.USR_ID AND A.GRP_CD = D.GRP_CD)
		                                                                                        WHERE NVL(C.SELF_CHCK_YN,'N') = 'N'
		                                                                                        AND C.TST_ASES_YN = 'Y' 
		                                                                                        AND NVL(C.DEL_YN,'N') = 'N'
		                                                                                        AND NVL(B.DEL_YN,'N') = 'N' 
		                                                                                        AND B.ASCR IS NOT NULL
		                                                                                        AND NVL(D.USE_YN,'Y') = 'Y'
		                                                                                        AND B.CNSLR_ID != C.ASES_ID
		                                                                                        <dynamic>	 
																									<isNotEmpty prepend="AND" property="grp_cd">
																										D.GRP_CD = #grp_cd#
																									</isNotEmpty>
																									<isNotEmpty prepend="AND" property="part_cd">
																										D.PART_CD = #part_cd#
																									</isNotEmpty>
																									<isNotEmpty prepend="AND" property="cnslr_id">
																										B.CNSLR_ID = #cnslr_id#
																									</isNotEmpty>
																									<isNotEmpty prepend="AND" property="ases_ym">
																										C.ASES_YM = #ases_ym#
																									</isNotEmpty>
																								</dynamic>
		                                                                                 )A 
		                                                                              )A
		                                                                              GROUP BY A.ASES_YM
		                                                                    )A
		                                                            )A
		                                                )A                   
		                         )B
		                         ON (A.ASES_YM = B.ASES_YM)
		                         CROSS JOIN (
		                                        SELECT TO_CHAR(SUM(D.ASGN_SCOR1)) AS TOT_SCOR
		                                        FROM TBL_QA_ASES_INFO_GRP A
		                                        INNER JOIN TBL_QA_ASES_INFO_LRGCLAS B
		                                        ON (A.GRP_CD = B.GRP_CD AND A.BIZ_BASC_CD = B.BIZ_BASC_CD AND A.SEQ_NO = B.SEQ_NO)
		                                        INNER JOIN TBL_QA_ASES_INFO_MEDCLAS C
		                                        ON (B.GRP_CD = C.GRP_CD  AND B.BIZ_BASC_CD = C.BIZ_BASC_CD AND B.SEQ_NO = C.SEQ_NO AND B.LRGCLAS_CD = C.LRGCLAS_CD) 
		                                        INNER JOIN TBL_QA_ASES_INFO_SMLCLAS D
		                                        ON (C.GRP_CD = D.GRP_CD AND C.BIZ_BASC_CD = D.BIZ_BASC_CD AND C.SEQ_NO = D.SEQ_NO AND C.LRGCLAS_CD = D.LRGCLAS_CD AND C.MEDCLAS_CD = D.MEDCLAS_CD) 
		                                        WHERE A.QA_USAG_DV_CD = '1'
		                                        AND B.BIZ_BASC_CD = 'I' 
		                                        AND NVL(A.DEL_YN,'N') = 'N'
		                                        AND NVL(A.USE_YN,'Y') = 'Y'
		                                        AND NVL(B.DEL_YN,'N') = 'N'   
		                                        AND NVL(C.DEL_YN,'N') = 'N'      
		                                        AND NVL(D.DEL_YN,'N') = 'N'
		                                        <dynamic>	 
													<isNotEmpty prepend="AND" property="grp_cd">
														A.GRP_CD = #grp_cd#
													</isNotEmpty>
												</dynamic>
		                                        
		                         )C
		                       )A        
		                       GROUP BY A.ASES_YM             
		            )A
					-->		            
		)A
		ORDER BY A.BRANCH, A.GUBUN DESC
	</select>
</sqlMap>
