<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="QAS240">
	
	<!-- QA통계 - 개인별 세부 항목 달성도 현황 -->

	<!-- 개인별 세부 항목 달성도 현황(년간세부항목현황) -->
	<select id="GetCNSLR_ID_DETAIL_SELECT" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
		SELECT A.MEDCLAS_CDNM
		    , A.FIXD_COL
		    , A.ASES_YM_0
		    , A.ASES_YM_1
		    , A.ASES_YM_2
		    , A.ASES_YM_3
		    , A.ASES_YM_4
		    , A.ASES_YM_5
		    , A.ASES_YM_6
		    , A.ASES_YM_7
		    , A.ASES_YM_8
		    , A.ASES_YM_9
		    , A.ASES_YM_10
		    , A.ASES_YM_11 
		    , A.ASES_YM_12
		FROM (
	
		        SELECT
		                 A.MEDCLAS_CDNM
		                ,A.FIXD_COL
		                ,TRUNC(ROUND((ASES_YM_1 + ASES_YM_2 + ASES_YM_3 + ASES_YM_4 + ASES_YM_5 + ASES_YM_6 
		                + ASES_YM_7 + ASES_YM_8 + ASES_YM_9 + ASES_YM_10 +ASES_YM_11 + ASES_YM_12)/A.CNT,1),1) AS ASES_YM_0         
		                ,TRUNC(ROUND(A.ASES_YM_1,1),1) AS ASES_YM_1
		                ,TRUNC(ROUND(A.ASES_YM_2,1),1) AS ASES_YM_2
		                ,TRUNC(ROUND(A.ASES_YM_3,1),1) AS ASES_YM_3
		                ,TRUNC(ROUND(A.ASES_YM_4,1),1) AS ASES_YM_4
		                ,TRUNC(ROUND(A.ASES_YM_5,1),1) AS ASES_YM_5
		                ,TRUNC(ROUND(A.ASES_YM_6,1),1) AS ASES_YM_6
		                ,TRUNC(ROUND(A.ASES_YM_7,1),1) AS ASES_YM_7
		                ,TRUNC(ROUND(A.ASES_YM_8,1),1) AS ASES_YM_8
		                ,TRUNC(ROUND(A.ASES_YM_9,1),1) AS ASES_YM_9
		                ,TRUNC(ROUND(A.ASES_YM_10,1),1) AS ASES_YM_10
		                ,TRUNC(ROUND(A.ASES_YM_11,1),1) AS ASES_YM_11
		                ,TRUNC(ROUND(A.ASES_YM_12,1),1) AS ASES_YM_12                                                                                                                                                                                
		        FROM
		                       (
						        SELECT
						             A.MEDCLAS_CDNM
						            ,A.FIXD_COL 
						            ,NVL(MAX(CASE WHEN A.ASES_MM = '01' THEN A.MM_achiv_rate END),0) AS ASES_YM_1
						            ,NVL(MAX(CASE WHEN A.ASES_MM = '02' THEN A.MM_achiv_rate END),0) AS ASES_YM_2
						            ,NVL(MAX(CASE WHEN A.ASES_MM = '03' THEN A.MM_achiv_rate END),0) AS ASES_YM_3
						            ,NVL(MAX(CASE WHEN A.ASES_MM = '04' THEN A.MM_achiv_rate END),0) AS ASES_YM_4
						            ,NVL(MAX(CASE WHEN A.ASES_MM = '05' THEN A.MM_achiv_rate END),0) AS ASES_YM_5
						            ,NVL(MAX(CASE WHEN A.ASES_MM = '06' THEN A.MM_achiv_rate END),0) AS ASES_YM_6
						            ,NVL(MAX(CASE WHEN A.ASES_MM = '07' THEN A.MM_achiv_rate END),0) AS ASES_YM_7
						            ,NVL(MAX(CASE WHEN A.ASES_MM = '08' THEN A.MM_achiv_rate END),0) AS ASES_YM_8
						            ,NVL(MAX(CASE WHEN A.ASES_MM = '09' THEN A.MM_achiv_rate END),0) AS ASES_YM_9
						            ,NVL(MAX(CASE WHEN A.ASES_MM = '10' THEN A.MM_achiv_rate END),0) AS ASES_YM_10
						            ,NVL(MAX(CASE WHEN A.ASES_MM = '11' THEN A.MM_achiv_rate END),0) AS ASES_YM_11
						            ,NVL(MAX(CASE WHEN A.ASES_MM = '12' THEN A.MM_achiv_rate END),0) AS ASES_YM_12				            				            				            				            				            				            				            				            				            				            				            
						            ,COUNT(A.MM_achiv_rate) AS CNT
						            FROM
						            (						            
						                SELECT
						                E.ASES_YM                               
						                ,E.FIXD_COL
						                ,E.MEDCLAS_CDNM
						                ,SUBSTR(E.ASES_YM,1,4) AS ASES_YY
						                ,SUBSTR(E.ASES_YM,5,2) AS ASES_MM				                
						                ,E.GRP_CD	
						                ,CASE WHEN COUNT(E.CNSLR_ID) = 0 THEN 0
						                      WHEN MAX(E.ASGN_SCOR1) = 0 THEN 0 
						                        ELSE SUM(E.CNSL_AVG)/COUNT(E.CNSLR_ID)/MAX(E.ASGN_SCOR1)*100 END AS MM_achiv_rate	
						                FROM
						                (
						                    SELECT
						                    DISTINCT bb.CNSLR_ID
						                    , cc.ASES_YM
						                    , aa.GRP_CD
						                    , aa.FIXD_COL                                    
						                    , SUM(bb.ASCR) OVER(PARTITION BY aa.FIXD_COL,dd.GRP_CD,cc.ASES_YM,bb.CNSLR_ID)
						                    / COUNT(bb.SQN) OVER(PARTITION BY aa.FIXD_COL,dd.GRP_CD,cc.ASES_YM,bb.CNSLR_ID) AS CNSL_AVG	
						                    , GSIB.FUN_GET_MEDCLAS_CDNM(aa.GRP_CD,aa.SEQ_NO,bb.LRGCLAS_CD,bb.MEDCLAS_CD) AS MEDCLAS_CDNM
						                    , aa.ASGN_SCOR1			                    
						                    
						                    FROM TBL_QA_ASES_INFO_SMLCLAS aa 
						                        INNER JOIN TBL_QA_ASES_DTLS bb
						                        ON (aa.GRP_CD = bb.GRP_CD
						                            AND aa.BIZ_BASC_CD = bb.BIZ_BASC_CD
						                            AND aa.SEQ_NO = bb.SEQ_NO
						                            AND aa.LRGCLAS_CD = bb.LRGCLAS_CD                       
						                            AND aa.MEDCLAS_CD = bb.MEDCLAS_CD
						                            AND aa.SMLCLAS_CD = bb.SMLCLAS_CD)
						                            INNER JOIN TBL_QA_ASES cc 
						                        ON (bb.GRP_CD = bb.GRP_CD 
						                            AND bb.BIZ_BASC_CD = cc.BIZ_BASC_CD 
						                            AND bb.SEQ_NO = cc.SEQ_NO 
						                            AND bb.ASES_DTM = cc.ASES_DTM 
						                            AND bb.SQN = cc.SQN 
						                            AND bb.CNSLR_ID = cc.CNSLR_ID) 
						                            INNER JOIN TBL_CNSLR_PART_HIST dd
						                        ON (cc.ASES_YM = dd.REG_YM AND cc.CNSLR_ID = dd.CNSLR_ID AND aa.GRP_CD = dd.GRP_CD)
						                        
						                    WHERE 
						                    		<!--  
						                     		NVL(cc.SELF_CHCK_YN,'N') = 'N'
						                     		-->
						                            NVL(cc.DEL_YN,'N') = 'N'
						                        AND NVL(bb.DEL_YN,'N') = 'N' 
						                        AND bb.ASCR IS NOT NULL
						                        AND bb.CNSLR_ID != cc.ASES_ID
						                        
		                                        <dynamic>	 
													<isNotEmpty prepend="AND" property="grp_cd">
														dd.GRP_CD = #grp_cd#
													</isNotEmpty>
													<isNotEmpty prepend="AND" property="part_cd">
														dd.PART_CD = #part_cd#
													</isNotEmpty>
													<isNotEmpty prepend="AND" property="cnslr_id">
														bb.CNSLR_ID = #cnslr_id#
													</isNotEmpty>
													<isNotEmpty prepend="AND" property="ases_ym">
														SUBSTR(cc.ASES_YM,1,4) = #ases_ym#
													</isNotEmpty>
													<isNotEmpty prepend="AND" property="tst_ases_yn">
														cc.TST_ASES_YN = #tst_ases_yn#
													</isNotEmpty>													
												</dynamic>
		
						            ) E                    
						            GROUP BY E.ASES_YM,E.GRP_CD,E.FIXD_COL, E.MEDCLAS_CDNM 
					        ) A
					        GROUP BY A.FIXD_COL, A.MEDCLAS_CDNM
				    ) A		
		
		<!--  2011-03-23 변경 -->  
		<!--   
		        SELECT A.MEDCLAS_CDNM
		            , A.FIXD_COL
		            , NVL(TRUNC(ROUND(A.AVG_ASCR/NULLIF(A.MM_CNT,0),2),1),0) AS ASES_YM_0
		            , MAX(ASES_YM_1) AS ASES_YM_1
		            , MAX(ASES_YM_2) AS ASES_YM_2
		            , MAX(ASES_YM_3) AS ASES_YM_3
		            , MAX(ASES_YM_4) AS ASES_YM_4
		            , MAX(ASES_YM_5) AS ASES_YM_5
		            , MAX(ASES_YM_6) AS ASES_YM_6
		            , MAX(ASES_YM_7) AS ASES_YM_7
		            , MAX(ASES_YM_8) AS ASES_YM_8
		            , MAX(ASES_YM_9) AS ASES_YM_9
		            , MAX(ASES_YM_10) AS ASES_YM_10
		            , MAX(ASES_YM_11) AS ASES_YM_11 
		            , MAX(ASES_YM_12) AS ASES_YM_12
		        FROM (
		                SELECT A.MEDCLAS_CDNM
		                    , A.FIXD_COL
		                    , (MAX(ASES_YM_1)+MAX(ASES_YM_2)+MAX(ASES_YM_3)+MAX(ASES_YM_4)+MAX(ASES_YM_5)+MAX(ASES_YM_6)
		                      +MAX(ASES_YM_7)+MAX(ASES_YM_8)+MAX(ASES_YM_9)+MAX(ASES_YM_10)+MAX(ASES_YM_11)+MAX(ASES_YM_12)) AS AVG_ASCR
		                    , CASE WHEN MAX(ASES_YM_1) > 0 THEN COUNT(1) ELSE 0 END + 
		                        CASE WHEN MAX(ASES_YM_2) >  0 THEN COUNT(1) ELSE 0 END + 
		                            CASE WHEN MAX(ASES_YM_3) > 0 THEN COUNT(1) ELSE 0 END + 
		                                CASE WHEN MAX(ASES_YM_4) >  0 THEN COUNT(1) ELSE 0 END + 
		                                    CASE WHEN MAX(ASES_YM_5) >  0 THEN COUNT(1) ELSE 0 END + 
		                                        CASE WHEN MAX(ASES_YM_6) >  0 THEN COUNT(1) ELSE 0 END + 
		                                            CASE WHEN MAX(ASES_YM_7) >  0 THEN COUNT(1) ELSE 0 END + 
		                                                CASE WHEN MAX(ASES_YM_8) >  0 THEN COUNT(1) ELSE 0 END + 
		                                                    CASE WHEN MAX(ASES_YM_8) >  0 THEN COUNT(1) ELSE 0 END + 
		                                                        CASE WHEN MAX(ASES_YM_10) >  0 THEN COUNT(1) ELSE 0 END + 
		                                                            CASE WHEN MAX(ASES_YM_11) > 0 THEN COUNT(1) ELSE 0 END + 
		                                                                CASE WHEN MAX(ASES_YM_12) >  0 THEN COUNT(1) ELSE 0 END AS MM_CNT
		                    , TRUNC(ROUND(MAX(ASES_YM_1),1),1) AS ASES_YM_1
		                    , TRUNC(ROUND(MAX(ASES_YM_2),1),1) AS ASES_YM_2
		                    , TRUNC(ROUND(MAX(ASES_YM_3),1),1) AS ASES_YM_3
		                    , TRUNC(ROUND(MAX(ASES_YM_4),1),1) AS ASES_YM_4
		                    , TRUNC(ROUND(MAX(ASES_YM_5),1),1) AS ASES_YM_5
		                    , TRUNC(ROUND(MAX(ASES_YM_6),1),1) AS ASES_YM_6
		                    , TRUNC(ROUND(MAX(ASES_YM_7),1),1) AS ASES_YM_7
		                    , TRUNC(ROUND(MAX(ASES_YM_8),1),1) AS ASES_YM_8
		                    , TRUNC(ROUND(MAX(ASES_YM_9),1),1) AS ASES_YM_9
		                    , TRUNC(ROUND(MAX(ASES_YM_10),1),1) AS ASES_YM_10
		                    , TRUNC(ROUND(MAX(ASES_YM_11),1),1) AS ASES_YM_11 
		                    , TRUNC(ROUND(MAX(ASES_YM_12),1),1) AS ASES_YM_12
		                FROM (    
		                        SELECT A.MEDCLAS_CDNM
		                            , A.FIXD_COL
		                            , NVL(MAX(CASE WHEN A.ASES_YM = '01' THEN NULLIF(A.ASCR, 0)/A.SQN/NULLIF(ASGN_SCOR1,'0')*100 ELSE 0 END),0) AS ASES_YM_1
		                            , NVL(MAX(CASE WHEN A.ASES_YM = '02' THEN NULLIF(A.ASCR, 0)/A.SQN/NULLIF(ASGN_SCOR1,'0')*100 ELSE 0 END),0) AS ASES_YM_2
		                            , NVL(MAX(CASE WHEN A.ASES_YM = '03' THEN NULLIF(A.ASCR, 0)/A.SQN/NULLIF(ASGN_SCOR1,'0')*100 ELSE 0 END),0) AS ASES_YM_3
		                            , NVL(MAX(CASE WHEN A.ASES_YM = '04' THEN NULLIF(A.ASCR, 0)/A.SQN/NULLIF(ASGN_SCOR1,'0')*100 ELSE 0 END),0) AS ASES_YM_4
		                            , NVL(MAX(CASE WHEN A.ASES_YM = '05' THEN NULLIF(A.ASCR, 0)/A.SQN/NULLIF(ASGN_SCOR1,'0')*100 ELSE 0 END),0) AS ASES_YM_5
		                            , NVL(MAX(CASE WHEN A.ASES_YM = '06' THEN NULLIF(A.ASCR, 0)/A.SQN/NULLIF(ASGN_SCOR1,'0')*100 ELSE 0 END),0) AS ASES_YM_6
		                            , NVL(MAX(CASE WHEN A.ASES_YM = '07' THEN NULLIF(A.ASCR, 0)/A.SQN/NULLIF(ASGN_SCOR1,'0')*100 ELSE 0 END),0) AS ASES_YM_7
		                            , NVL(MAX(CASE WHEN A.ASES_YM = '08' THEN NULLIF(A.ASCR, 0)/A.SQN/NULLIF(ASGN_SCOR1,'0')*100 ELSE 0 END),0) AS ASES_YM_8
		                            , NVL(MAX(CASE WHEN A.ASES_YM = '09' THEN NULLIF(A.ASCR, 0)/A.SQN/NULLIF(ASGN_SCOR1,'0')*100 ELSE 0 END),0) AS ASES_YM_9
		                            , NVL(MAX(CASE WHEN A.ASES_YM = '10' THEN NULLIF(A.ASCR, 0)/A.SQN/NULLIF(ASGN_SCOR1,'0')*100 ELSE 0 END),0) AS ASES_YM_10
		                            , NVL(MAX(CASE WHEN A.ASES_YM = '11' THEN NULLIF(A.ASCR, 0)/A.SQN/NULLIF(ASGN_SCOR1,'0')*100 ELSE 0 END),0) AS ASES_YM_11
		                            , NVL(MAX(CASE WHEN A.ASES_YM = '12' THEN NULLIF(A.ASCR, 0)/A.SQN/NULLIF(ASGN_SCOR1,'0')*100 ELSE 0 END),0) AS ASES_YM_12
		                        FROM ( 
		                                SELECT A.ASES_YM
		                                    , A.GRP_CD
		                                    , A.BIZ_BASC_CD
		                                    , A.SEQ_NO
		                                    , A.LRGCLAS_CD
		                                    , A.MEDCLAS_CD
		                                    , A.SMLCLAS_CD
		                                    , B.FIXD_COL
		                                    , A.ASCR
		                                    , B.MEDCLAS_CDNM
		                                    , A.CNSLR_ID_CNT
		                                    , A.SQN
		                                    , A.CNSLR_ID 
		                                    , A.ASGN_SCOR1
		                                FROM (  SELECT  SUBSTR(C.ASES_YM,5,2) AS ASES_YM
		                                            , A.GRP_CD
		                                            , A.BIZ_BASC_CD
		                                            , A.SEQ_NO
		                                            , B.LRGCLAS_CD
		                                            , B.MEDCLAS_CD
		                                            , B.SMLCLAS_CD
		                                            , A.FIXD_COL
		                                            , GSIB.FUN_GET_MEDCLAS_CDNM(A.GRP_CD,A.SEQ_NO,B.LRGCLAS_CD,B.MEDCLAS_CD) AS MEDCLAS_CDNM
		                                            , SUM(B.ASCR) OVER(PARTITION BY A.FIXD_COL,D.GRP_CD,C.ASES_YM) AS ASCR
		                                            , COUNT(DISTINCT B.CNSLR_ID) OVER(PARTITION BY D.GRP_CD,C.ASES_YM) AS CNSLR_ID_CNT
		                                            , COUNT(B.SQN) OVER(PARTITION BY A.FIXD_COL,D.GRP_CD,C.ASES_YM) AS SQN 
		                                            , B.CNSLR_ID 
		                                            , A.ASGN_SCOR1
		                                        FROM TBL_QA_ASES_INFO_SMLCLAS A 
		                                        INNER JOIN TBL_QA_ASES_DTLS B
		                                                 ON (A.GRP_CD = B.GRP_CD
		                                                     AND A.BIZ_BASC_CD = B.BIZ_BASC_CD
		                                                     AND A.SEQ_NO = B.SEQ_NO
		                                                     AND A.LRGCLAS_CD = B.LRGCLAS_CD                       
		                                                     AND A.MEDCLAS_CD = B.MEDCLAS_CD
		                                                     AND A.SMLCLAS_CD = B.SMLCLAS_CD) 
		                                        INNER JOIN TBL_QA_ASES C 
		                                                 ON (B.GRP_CD = C.GRP_CD 
		                                                      AND B.BIZ_BASC_CD = C.BIZ_BASC_CD 
		                                                      AND B.SEQ_NO = C.SEQ_NO 
		                                              AND B.ASES_DTM = C.ASES_DTM 
		                                              AND B.SQN = C.SQN 
		                                              AND B.CNSLR_ID = C.CNSLR_ID) 
		                                          INNER JOIN TBL_CNSLR_PART_HIST D
                             						 ON (C.ASES_YM = D.REG_YM AND C.CNSLR_ID = D.CNSLR_ID AND A.GRP_CD = D.GRP_CD)		                                             
		                                        WHERE NVL(C.SELF_CHCK_YN,'N') = 'N'
		                                        AND NVL(C.DEL_YN,'N') = 'N'
		                                        AND NVL(B.DEL_YN,'N') = 'N' 
		                                        AND B.ASCR IS NOT NULL
		                                        AND B.CNSLR_ID != C.ASES_ID
		                                        <dynamic>	 
													<isNotEmpty prepend="AND" property="grp_cd">
														D.GRP_CD = #grp_cd#
													</isNotEmpty>
													<isNotEmpty prepend="AND" property="part_cd">
														D.PART_CD = #part_cd#
													</isNotEmpty>
													<isNotEmpty prepend="AND" property="cnslr_id">
														B.CNSLR_ID = #cnslr_id#
													</isNotEmpty>
													<isNotEmpty prepend="AND" property="ases_ym">
														SUBSTR(C.ASES_YM,1,4) = #ases_ym#
													</isNotEmpty>
													<isNotEmpty prepend="AND" property="tst_ases_yn">
														C.TST_ASES_YN = #tst_ases_yn#
													</isNotEmpty>													
												</dynamic>
		                                )A INNER JOIN (
		                                                       SELECT A.GRP_CD
		                                                            , A.BIZ_BASC_CD
		                                                            , A.SEQ_NO
		                                                            , B.LRGCLAS_CD
		                                                            , C.MEDCLAS_CD
		                                                            , D.SMLCLAS_CD
		                                                            , C.MEDCLAS_CDNM AS MEDCLAS_CDNM
		                                                            , D.FIXD_COL
		                                                        FROM TBL_QA_ASES_INFO_GRP A
		                                                        INNER JOIN TBL_QA_ASES_INFO_LRGCLAS B
		                                                        ON (A.GRP_CD = B.GRP_CD AND A.BIZ_BASC_CD = B.BIZ_BASC_CD AND A.SEQ_NO = B.SEQ_NO)
		                                                        INNER JOIN TBL_QA_ASES_INFO_MEDCLAS C
		                                                        ON (B.GRP_CD = C.GRP_CD  AND B.BIZ_BASC_CD = C.BIZ_BASC_CD AND B.SEQ_NO = C.SEQ_NO AND B.LRGCLAS_CD = C.LRGCLAS_CD) 
		                                                        INNER JOIN TBL_QA_ASES_INFO_SMLCLAS D
		                                                        ON (C.GRP_CD = D.GRP_CD AND C.BIZ_BASC_CD = D.BIZ_BASC_CD AND C.SEQ_NO = D.SEQ_NO AND C.LRGCLAS_CD = D.LRGCLAS_CD AND C.MEDCLAS_CD = D.MEDCLAS_CD) 
		                                                        WHERE A.QA_USAG_DV_CD = '1'
		                                                        AND B.BIZ_BASC_CD = 'I'
		                                                        <dynamic>	 
																	<isNotEmpty prepend="AND" property="grp_cd">
																		A.GRP_CD = #grp_cd#
																	</isNotEmpty>
																</dynamic>
		                                                        AND NVL(A.DEL_YN,'N') = 'N'
		                                                        AND NVL(A.USE_YN,'Y') = 'Y'
		                                                        AND NVL(B.DEL_YN,'N') = 'N'   
		                                                        AND NVL(C.DEL_YN,'N') = 'N'      
		                                                        AND NVL(D.DEL_YN,'N') = 'N'
		                                                        AND D.FIXD_COL IS NOT NULL
		                                )B
		                                ON (A.GRP_CD = B.GRP_CD 
		                                    AND A.BIZ_BASC_CD = B.BIZ_BASC_CD 
		                                    AND A.SEQ_NO = B.SEQ_NO 
		                                    AND A.LRGCLAS_CD = B.LRGCLAS_CD 
		                                    AND A.MEDCLAS_CD = B.MEDCLAS_CD 
		                                    AND A.SMLCLAS_CD = B.SMLCLAS_CD
		                                    AND A.FIXD_COL = B.FIXD_COL)
		                        )A        
		                        GROUP BY A.FIXD_COL,A.MEDCLAS_CDNM   
		            )A        
		            GROUP BY A.FIXD_COL,A.MEDCLAS_CDNM
		        )A
		        GROUP BY A.MEDCLAS_CDNM,A.FIXD_COL,A.AVG_ASCR,A.MM_CNT
		        -->
		        
		        UNION ALL
				SELECT 
				    '총점' AS MEDCLAS_CDNM
				    , ''    AS FIXD_COL                    
				    ,TRUNC(ROUND((MAX(A.ASES_YM_1)+MAX(A.ASES_YM_2)+MAX(A.ASES_YM_3)+MAX(A.ASES_YM_4)+MAX(A.ASES_YM_5)+MAX(A.ASES_YM_6)
				    +MAX(A.ASES_YM_7)+MAX(A.ASES_YM_8)+MAX(A.ASES_YM_9)+MAX(A.ASES_YM_10)+MAX(A.ASES_YM_11)+MAX(A.ASES_YM_12))/COUNT(A.ASES_YY),1),1) AS ASES_YM_0
				    ,TRUNC(ROUND(MAX(A.ASES_YM_1),1),1) AS ASES_YM_1
				    ,TRUNC(ROUND(MAX(A.ASES_YM_2),1),1) AS ASES_YM_2
				    ,TRUNC(ROUND(MAX(A.ASES_YM_3),1),1) AS ASES_YM_3
				    ,TRUNC(ROUND(MAX(A.ASES_YM_4),1),1) AS ASES_YM_4
				    ,TRUNC(ROUND(MAX(A.ASES_YM_5),1),1) AS ASES_YM_5
				    ,TRUNC(ROUND(MAX(A.ASES_YM_6),1),1) AS ASES_YM_6
				    ,TRUNC(ROUND(MAX(A.ASES_YM_7),1),1) AS ASES_YM_7
				    ,TRUNC(ROUND(MAX(A.ASES_YM_8),1),1) AS ASES_YM_8
				    ,TRUNC(ROUND(MAX(A.ASES_YM_9),1),1) AS ASES_YM_9
				    ,TRUNC(ROUND(MAX(A.ASES_YM_10),1),1) AS ASES_YM_10
				    ,TRUNC(ROUND(MAX(A.ASES_YM_11),1),1) AS ASES_YM_11
				    ,TRUNC(ROUND(MAX(A.ASES_YM_12),1),1) AS ASES_YM_12
				FROM
				     
				    (
				        SELECT 
				            MAX(ASES_YY) AS ASES_YY
				            ,A.ASES_YM
				            ,A.ASES_MM
				            ,CASE WHEN COUNT(A.ASES_MM) = 0 THEN 0                    
				            ELSE NVL(CASE WHEN A.ASES_MM = '01' THEN SUM(A.CNSL_AVG_SUM)/COUNT(A.ASES_MM) END,0) END AS ASES_YM_1
				            ,CASE WHEN COUNT(A.ASES_MM) = 0 THEN 0                    
				            ELSE NVL(CASE WHEN A.ASES_MM = '02' THEN SUM(A.CNSL_AVG_SUM)/COUNT(A.ASES_MM) END,0) END AS ASES_YM_2
				            ,CASE WHEN COUNT(A.ASES_MM) = 0 THEN 0                    
				            ELSE NVL(CASE WHEN A.ASES_MM = '03' THEN SUM(A.CNSL_AVG_SUM)/COUNT(A.ASES_MM) END,0) END AS ASES_YM_3
				            ,CASE WHEN COUNT(A.ASES_MM) = 0 THEN 0                    
				            ELSE NVL(CASE WHEN A.ASES_MM = '04' THEN SUM(A.CNSL_AVG_SUM)/COUNT(A.ASES_MM) END,0) END AS ASES_YM_4
				            ,CASE WHEN COUNT(A.ASES_MM) = 0 THEN 0                    
				            ELSE NVL(CASE WHEN A.ASES_MM = '05' THEN SUM(A.CNSL_AVG_SUM)/COUNT(A.ASES_MM) END,0) END AS ASES_YM_5
				            ,CASE WHEN COUNT(A.ASES_MM) = 0 THEN 0                    
				            ELSE NVL(CASE WHEN A.ASES_MM = '06' THEN SUM(A.CNSL_AVG_SUM)/COUNT(A.ASES_MM) END,0) END AS ASES_YM_6
				            ,CASE WHEN COUNT(A.ASES_MM) = 0 THEN 0                    
				            ELSE NVL(CASE WHEN A.ASES_MM = '07' THEN SUM(A.CNSL_AVG_SUM)/COUNT(A.ASES_MM) END,0) END AS ASES_YM_7
				            ,CASE WHEN COUNT(A.ASES_MM) = 0 THEN 0                    
				            ELSE NVL(CASE WHEN A.ASES_MM = '08' THEN SUM(A.CNSL_AVG_SUM)/COUNT(A.ASES_MM) END,0) END AS ASES_YM_8
				            ,CASE WHEN COUNT(A.ASES_MM) = 0 THEN 0                    
				            ELSE NVL(CASE WHEN A.ASES_MM = '09' THEN SUM(A.CNSL_AVG_SUM)/COUNT(A.ASES_MM) END,0) END AS ASES_YM_9
				            ,CASE WHEN COUNT(A.ASES_MM) = 0 THEN 0                    
				            ELSE NVL(CASE WHEN A.ASES_MM = '10' THEN SUM(A.CNSL_AVG_SUM)/COUNT(A.ASES_MM) END,0) END AS ASES_YM_10
				            ,CASE WHEN COUNT(A.ASES_MM) = 0 THEN 0                    
				            ELSE NVL(CASE WHEN A.ASES_MM = '11' THEN SUM(A.CNSL_AVG_SUM)/COUNT(A.ASES_MM) END,0) END AS ASES_YM_11
				            ,CASE WHEN COUNT(A.ASES_MM) = 0 THEN 0                    
				            ELSE NVL(CASE WHEN A.ASES_MM = '12' THEN SUM(A.CNSL_AVG_SUM)/COUNT(A.ASES_MM) END,0) END AS ASES_YM_12
				            
				            FROM
				            (
				                SELECT
				                E.ASES_YM
				                ,SUBSTR(E.ASES_YM,1,4) AS ASES_YY
				                ,SUBSTR(E.ASES_YM,5,2) AS ASES_MM
				                ,FUN_GET_USRNM(E.CNSLR_ID)
				                ,E.CNSLR_ID
				                ,E.GRP_CD
				                ,SUM(E.CNSL_AVG) AS CNSL_AVG_SUM
				                
				                FROM
				                (
				                    SELECT
				                    DISTINCT bb.CNSLR_ID
				                    , cc.ASES_YM
				                    , aa.GRP_CD
				                    , aa.FIXD_COL                                    
				                    , SUM(bb.ASCR) OVER(PARTITION BY aa.FIXD_COL,dd.GRP_CD,cc.ASES_YM,bb.CNSLR_ID)
				                    / COUNT(bb.SQN) OVER(PARTITION BY aa.FIXD_COL,dd.GRP_CD,cc.ASES_YM,bb.CNSLR_ID) AS CNSL_AVG
				                    
				                    FROM TBL_QA_ASES_INFO_SMLCLAS aa 
				                        INNER JOIN TBL_QA_ASES_DTLS bb
				                        ON (aa.GRP_CD = bb.GRP_CD
				                            AND aa.BIZ_BASC_CD = bb.BIZ_BASC_CD
				                            AND aa.SEQ_NO = bb.SEQ_NO
				                            AND aa.LRGCLAS_CD = bb.LRGCLAS_CD                       
				                            AND aa.MEDCLAS_CD = bb.MEDCLAS_CD
				                            AND aa.SMLCLAS_CD = bb.SMLCLAS_CD)
				                            INNER JOIN TBL_QA_ASES cc 
				                        ON (bb.GRP_CD = bb.GRP_CD 
				                            AND bb.BIZ_BASC_CD = cc.BIZ_BASC_CD 
				                            AND bb.SEQ_NO = cc.SEQ_NO 
				                            AND bb.ASES_DTM = cc.ASES_DTM 
				                            AND bb.SQN = cc.SQN 
				                            AND bb.CNSLR_ID = cc.CNSLR_ID) 
				                            INNER JOIN TBL_CNSLR_PART_HIST dd
				                        ON (cc.ASES_YM = dd.REG_YM AND cc.CNSLR_ID = dd.CNSLR_ID AND aa.GRP_CD = dd.GRP_CD)
				                        
				                    WHERE 
				                    		<!--  
				                    		NVL(cc.SELF_CHCK_YN,'N') = 'N'
				                    		-->				                    		
				                            NVL(cc.DEL_YN,'N') = 'N'
				                        AND NVL(bb.DEL_YN,'N') = 'N' 
				                        AND bb.ASCR IS NOT NULL
				                        AND bb.CNSLR_ID != cc.ASES_ID
				                        
                                        <dynamic>	 
											<isNotEmpty prepend="AND" property="grp_cd">
												dd.GRP_CD = #grp_cd#
											</isNotEmpty>
											<isNotEmpty prepend="AND" property="part_cd">
												dd.PART_CD = #part_cd#
											</isNotEmpty>
											<isNotEmpty prepend="AND" property="cnslr_id">
												bb.CNSLR_ID = #cnslr_id#
											</isNotEmpty>
											<isNotEmpty prepend="AND" property="ases_ym">
												SUBSTR(cc.ASES_YM,1,4) = #ases_ym#
											</isNotEmpty>
											<isNotEmpty prepend="AND" property="tst_ases_yn">
												cc.TST_ASES_YN = #tst_ases_yn#
											</isNotEmpty>													
										</dynamic>
				            ) E                    
				            GROUP BY E.ASES_YM,E.GRP_CD,E.CNSLR_ID 
				        ) A
				        GROUP BY A.ASES_YM,A.ASES_MM
				    ) A 
				    GROUP BY A.ASES_YY

		)A
		ORDER BY A.FIXD_COL
	</select>
</sqlMap>
