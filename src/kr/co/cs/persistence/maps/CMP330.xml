<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="CMP330">
 	
	<!-- 불만처리율 조회 (불만유형별)-->
 	<select id="Get_CMP_SELECT" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
	SELECT
	     Q1.HGRK_DEPT_CD        						AS HGRK_DEPT_CD
	    ,CASE WHEN Q1.HGRK_DEPT_CD IS NULL THEN '전체부문' 
	    	ELSE MAX(Q1.HGRK_DEPT_CDNM) END 			AS HGRK_DEPT_CDNM
	    ,Q1.DEPT_CD             						AS DEPT_CD
	    ,CASE WHEN Q1.HGRK_DEPT_CD IS NULL THEN '부문평균' 
	          WHEN Q1.DEPT_CD IS NULL THEN '전체평균' 
	        ELSE MAX(Q1.DEPT_CDNM) END  				AS DSPSR_CHRG_DEPT
	    
	    ,SUM(Q2.DATA1) AS DATA1
	    ,SUM(Q2.DATA2) AS DATA2
	    ,SUM(Q2.DATA3) AS DATA3
	    ,SUM(Q2.DATA4) AS DATA4
	    ,SUM(Q2.DATA5) AS DATA5
	    ,SUM(Q2.DATA6) AS DATA6
	    ,SUM(Q2.DATA7) AS DATA7
	    ,SUM(Q2.DATA8) AS DATA8
	    ,SUM(Q2.DATA9) AS DATA9
	    ,SUM(Q2.DATA10) AS DATA10
	    ,SUM(Q2.DATA11) AS DATA11
	    ,SUM(Q2.DATA12) AS DATA12
	    ,SUM(Q2.DATA13) AS DATA13
	    ,SUM(Q2.DATA14) AS DATA14
	    ,SUM(Q2.DATA15) AS DATA15
	    ,SUM(Q2.DATA16) AS DATA16
	    ,SUM(Q2.DATA17) AS DATA17
	    ,SUM(Q2.DATA18) AS DATA18
	    ,SUM(Q2.DATA19) AS DATA19
	    ,SUM(Q2.DATA20) AS DATA20
	    ,SUM(Q2.DATA21) AS DATA21
	    ,SUM(Q2.DATA22) AS DATA22
	    ,SUM(Q2.DATA23) AS DATA23
	    ,SUM(Q2.DATA24) AS DATA24
	    ,SUM(Q2.DATA25) AS DATA25
	    ,SUM(Q2.DATA26) AS RSUM
	    
	FROM 	
	    (   
	        SELECT 	HGRK_DEPT_CD,HGRK_DEPT_CDNM,DEPT_CD,DEPT_CDNM
	        FROM 	TBL_HR_DEPT_CD       
	        WHERE 	1=1
	       		<dynamic>
	       			<isEmpty prepend="AND" property="hgrk_dept_cd">
						HGRK_DEPT_CD IN ('E00054','E00056','T21000','E00053','E00042','E00044','JD1000','E00048')	       				
	       			</isEmpty>
				  	<isNotEmpty prepend="AND" property="hgrk_dept_cd">				<!-- 부문/본부 -->
					    HGRK_DEPT_CD = #hgrk_dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dept_cd">					<!-- 처리팀 -->
					    DEPT_CD = #dept_cd#
				  	</isNotEmpty>	       		
				</dynamic>   
	        
	        UNION ALL
	        
	        SELECT 	HGRK_DEPT_CD,HGRK_DEPT_CDNM,'Z' || MAX(DEPT_CD) AS DEPT_CD ,'부문평균' AS DEPT_CDNM
	        FROM 	TBL_HR_DEPT_CD       
	        WHERE 	1=1
	       		<dynamic>
	       			<isEmpty prepend="AND" property="hgrk_dept_cd">
						HGRK_DEPT_CD IN ('E00054','E00056','T21000','E00053','E00042','E00044','JD1000','E00048')	       				
	       			</isEmpty>
				  	<isNotEmpty prepend="AND" property="hgrk_dept_cd">				<!-- 부문/본부 -->
					    HGRK_DEPT_CD = #hgrk_dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dept_cd">					<!-- 처리팀 -->
					    DEPT_CD = #dept_cd#
				  	</isNotEmpty>	       		
				</dynamic>   
	        GROUP BY HGRK_DEPT_CD, HGRK_DEPT_CDNM	        
       	<dynamic>
       		<isEmpty property="hgrk_dept_cd">		        
	        UNION ALL
	        	        
	        SELECT 
	             'ZZZZY'    	AS HGRK_DEPT_CD  
	            ,'기타부문' 		AS HGRK_DEPT_CDNM
	            ,'ZZZZY'    	AS DEPT_CD
	            ,'기타'     		AS DEPT_CDNM
	        FROM DUAL
      		</isEmpty>				        
		</dynamic>
			 	        
	        UNION ALL	        
	        
	        SELECT 
	             'ZZZZZ'    	AS HGRK_DEPT_CD  
	            ,'전체부문' 		AS HGRK_DEPT_CDNM
	            ,'ZZZZZ'    	AS DEPT_CD
	            ,'전체평균'     		AS DEPT_CDNM
	        FROM DUAL   
	    ) Q1
	    
	    LEFT JOIN
	    
	    ( 	
	    	<!--  각 부문, 팀별 처리율 -->
			SELECT 	 
	   			 G.HGRK_DEPT_CDNM as HGRK_DEPT_CDNM
	   			,G.DEPT_CDNM as DSPSR_CHRG_DEPT
	   			,G.DEPT_CD as DEPT_CD
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CA' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CA' AND A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CA' THEN 1 ELSE 0 END) * 100,1)
                 ELSE NULL END AS DATA1
                 
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CB' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CB' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CB' THEN 1 ELSE 0 END) * 100,1)  
                 ELSE NULL END AS DATA2
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CC' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CC' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CC' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA3
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CD' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CD' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CD' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA4
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CE' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CE' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CE' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA5
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CF' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CF' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CF' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA6
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CG' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CG' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CG' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA7
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CH' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CH' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CH' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA8
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CI' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CI' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CI' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA9
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CJ' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CJ' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CJ' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA10
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CK' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CK' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CK' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA11
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CL' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CL' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CL' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA12
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CM' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CM' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CM' THEN 1 ELSE 0 END) * 100,1)
                 ELSE NULL END AS DATA13
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CN' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CN' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CN' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA14
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CO' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CO' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CO' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA15
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CP' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CP' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CP' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA16
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CQ' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CQ' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CQ' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA17
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CR' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CR' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CR' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA18
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DA' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='DA' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='DA' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA19
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DB' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='DB' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='DB' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA20                                                                                          
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DC' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='DC' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='DC' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA21
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DD' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='DD' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='DD' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA22
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DE' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='DE' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='DE' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA23
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DF' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='DF' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='DF' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA24
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DG' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='DG' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='DG' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA25
                ,CASE WHEN SUM(CASE WHEN A.ACPN_DTM IS NOT NULL THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN A.ACPN_DTM IS NOT NULL THEN 1 ELSE 0 END) * 100,1)                      
                 ELSE NULL END AS DATA26
	
	        FROM TBL_DSFT_ACPN_PROC A						<!-- 불만 접수 처리 -->	       		   
			        LEFT JOIN TBL_HC_HIST C
			               ON A.DSFT_ACPN_SEQ_NO = C.DSFT_ACPN_SEQ_NO		  
			        LEFT JOIN TBL_CRPN_CUST_BASE D
			       		   ON A.ORGN_PTR_ST_CD = D.CUST_ID        	    	  
			        LEFT JOIN TBL_USR B
			       		   ON A.DSPSR_ID = B.USR_ID 
			        LEFT JOIN TBL_HR_EMP_CD F
			       		   ON A.DSPSR_ID = F.EMP_NO
			        LEFT JOIN TBL_HR_DEPT_CD G 
			       		   ON F.BLNG_DEPT_CD = G.DEPT_CD
			        LEFT JOIN TBL_SAP_CD H	
			       		   ON (A.ORGN_ENTR_DV_CD = H.CD_ID AND H.CD_CLAS_CD = '1')	
			        LEFT JOIN TBL_DSFT_TAXN_TYP_CD I
			       		   ON A.DSFT_TAXN_TYP_CD = I.DSFT_TAXN_TYP_CD
			       		   
			WHERE G.HGRK_DEPT_CD IN ('E00054','E00056','T21000','E00053','E00042','E00044','JD1000','E00048')
				AND (A.DEL_YN = 'N' OR A.DEL_YN IS NULL)
				and (A.DSPSR_YN_OB_CNTR='N' or A.DSPSR_YN_OB_CNTR is null )
	       		<dynamic>
	       			<!-- 년도별 -->   				    	
		    	    <isEqual property="cmb_gubun" compareValue="1">              
		                and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'                                                                  
		            </isEqual>
		            <!--  -->
		            <isEqual property="cmb_gubun" compareValue="2">
		            	<isEmpty property="cmb_half">
		            		and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'
		            	</isEmpty>              
		                <isEqual property="cmb_half" compareValue="1">
		                	and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0632000000'                                                                  
						</isEqual>	 
						<isEqual property="cmb_half" compareValue="2">
							and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '1232000000'
						</isEqual>	 
		            </isEqual>	 
		            <isEqual property="cmb_gubun" compareValue="3"> 
		            	<isEmpty>
							and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'	            	
		            	</isEmpty>    
		           		<isEqual property="cmb_qua" compareValue="1">
		           			and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0332000000'   
		           	  	</isEqual>
		           	  	<isEqual property="cmb_qua" compareValue="2">
		           	   		and A.ACPN_DTM between #time_key# || '0400000000' and #time_key# || '0632000000'   
		           	  	</isEqual>	 
		           	  	<isEqual property="cmb_qua" compareValue="3">
		           	   		and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '0932000000'   
		           	  	</isEqual>	 
	           	  		<isEqual property="cmb_qua" compareValue="4">
		           	   		and A.ACPN_DTM between #time_key# || '1000000000' and #time_key# || '1232000000'   
		           	  	</isEqual>	 	 
	            	</isEqual>	 				            
		    	 	<isEqual property="cmb_gubun" compareValue="4">              
		            	and A.ACPN_DTM between #time_key# || '00000000' and #time_key# || '32000000'                                                                  
		         	</isEqual>	
		    	 	<isEqual property="cmb_gubun" compareValue="5">              
		                and A.ACPN_DTM between #time_key# || '000000' and #time_key# || '240000'                                                                  
		         	</isEqual>
				
					<!-- 불만유형이 전체일 때는 두가지 경우 존재(전체, 품질&혼유)		-->				
					<isEmpty property="dsft_typ_cd">
						<isEqual property="dsft_typ_tot_gbn" compareValue="2">
							AND A.DSFT_TYP_CD IN ('CA','CK')
						</isEqual>
					</isEmpty>
				  	<isNotEmpty prepend="AND" property="dsft_typ_cd">				<!-- 불만유형		-->
				    	A.DSFT_TYP_CD = #dsft_typ_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dsft_taxn_typ_cd">			<!-- 불만세부유형		-->
				    	A.DSFT_TAXN_TYP_CD = #dsft_taxn_typ_cd#
				  	</isNotEmpty>
			  		<isNotEmpty prepend="AND" property="orgn_ptr_st_cd">			<!-- 불만발생업체코드(가맹점SAP코드) -->
					    A.ORGN_PTR_ST_CD = #orgn_ptr_st_cd#
				  	</isNotEmpty>
				    <isNotEmpty prepend="AND" property="conn_chnl_kind_cd">			<!-- 접촉채널	-->
					    A.CONN_CHNL_KIND_CD = #conn_chnl_kind_cd#
				    </isNotEmpty>			  	
				  	<isNotEmpty prepend="AND" property="hgrk_dept_cd">				<!-- 부문/본부 -->
					    G.HGRK_DEPT_CD = #hgrk_dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dept_cd">					<!-- 처리팀 -->
					    G.DEPT_CD = #dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dspsr_id_nm">				<!-- 처리자명 		-->
					    (B.USR_NM LIKE '%'|| #dspsr_id_nm# ||'%' OR F.EMP_NM LIKE '%'|| #dspsr_id_nm# ||'%')
				  	</isNotEmpty>
			 		<isEqual property="hc_yn" compareValue="Y"> 					<!-- 해피콜여부  -->
			 			AND A.HC_YN = 'Y'
			 		</isEqual>
				 	<isEqual property="hc_yn" compareValue="N"> 					<!-- 해피콜여부  -->
				 		AND (A.HC_YN = 'N' OR A.HC_YN IS NULL)
				 	</isEqual>
				  	<isNotEmpty prepend="AND" property="attd_sft_cd">				<!-- 태도만족도 		-->
				  		(A.HC_YN = 'Y' AND C.ATTD_SFT_CD = #attd_sft_cd#)
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="rslt_sft_cd">				<!-- 결과만족도 		-->
				  		(A.HC_YN = 'Y' AND C.RSLT_SFT_CD = #rslt_sft_cd#)
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="hc_uabl_rsn_cd">			<!-- 해피콜불가사유		-->
				  		A.HC_UABL_RSN_CD = #hc_uabl_rsn_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="prdct_cd">					<!-- 불만제품 		-->
					    A.PRDCT_CD = #prdct_cd#
				  	</isNotEmpty>			  				 	
				  	<isNotEmpty prepend="AND" property="prblm_penom_cd">			<!-- 현상 		-->
					    A.PRBLM_PENOM_CD = #prblm_penom_cd#
				  	</isNotEmpty>
			 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="1">  	<!-- 시료품질 점검결과		-->
			 			AND	A.VHCL_QLIT_DSFT_CAUS_CD_CUST IS NOT NULL
			 	  	</isEqual>
			 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="2">   	<!-- 시료품질 점검결과		-->
			 	  		AND	A.VHCL_QLIT_DSFT_CAUS_CD_PTR_ST IS NOT NULL
			 	  	</isEqual>
				  	<isNotEmpty prepend="AND" property="vhcl_biztr_qlit_dsft_typ_cd">			<!-- 품질불만유형 		-->
					    A.VHCL_BIZTR_QLIT_DSFT_TYP_CD = #vhcl_biztr_qlit_dsft_typ_cd#
				  	</isNotEmpty>
				 	<isEqual property="vhcl_biztr_yn" compareValue="Y"> 			<!-- Kixx 품질서비스차량 출동 -->
				 		AND A.VHCL_BIZTR_YN = 'Y'
				 	</isEqual>
				 	<isEqual property="vhcl_biztr_yn" compareValue="N"> 			<!-- Kixx 품질서비스차량 출동 -->
				 		AND (A.VHCL_BIZTR_YN = 'N' OR A.VHCL_BIZTR_YN IS NULL)
				 	</isEqual>		 	  	
				 	<isEqual property="rwrd_yn" compareValue="Y"> 					<!-- 보상여부 -->
				 		AND A.RWRD_YN = 'Y'
				 	</isEqual>
				 	<isEqual property="rwrd_yn" compareValue="N"> 					<!-- 보상여부 -->
				 		AND (A.RWRD_YN = 'N' OR A.RWRD_YN IS NULL)
				 	</isEqual>
				 	
				 	<isEqual property="cps_amt_gbn" compareValue="1"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 주유소 보상금 1만원 미만-->
				 			AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 주유소 보상금 1만원 ~ 10만원-->
				 			AND (A.PTR_ST_CPS_AMT <![CDATA[>=]]> 10000 AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 주유소 보상금 10만원 초과-->
				 			AND A.PTR_ST_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	<isEqual property="cps_amt_gbn" compareValue="2"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 회사 보상금 1만원 미만-->
				 			AND A.CO_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 회사 보상금 1만원 ~ 10만원-->
				 			AND (A.CO_CPS_AMT <![CDATA[>=]]> 10000 AND A.CO_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 회사 보상금 10만원 초과-->
				 			AND A.CO_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	<isEqual property="cps_amt_gbn" compareValue="3"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 총 보상금 1만원 미만-->
				 			AND A.TOT_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 총 보상금 1만원 ~ 10만원-->
				 			AND (A.TOT_CPS_AMT <![CDATA[>=]]> 10000 AND A.TOT_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 총 보상금 10만원 초과-->
				 			AND A.TOT_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	
					<!--처리자구분에 체크항목이 하나도 없는 경우, 전체데이터가 조회된다.-->
				 	<isEqual property="cmp_handler" compareValue="1">   
				 		AND	A.DSPSR_YN_CNSLR = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="2">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="3">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="4">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="5">   
				 		AND	A.DSPSR_YN_DSFT_CHRG = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="6">   
				 		AND	A.DSPSR_YN_PART_HD = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="7">   
				 		AND	(A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
	       		</dynamic>  
		
			GROUP BY G.HGRK_DEPT_CDNM,G.HGRK_DEPT_CD, G.DEPT_CD,G.DEPT_CDNM
			
			UNION ALL
			
			SELECT 	 
	   			 G.HGRK_DEPT_CDNM as HGRK_DEPT_CDNM
	   			,'부문평균' as DSPSR_CHRG_DEPT
	   			,'Z' || MAX(G.DEPT_CD) as DEPT_CD
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CA' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CA' AND A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CA' THEN 1 ELSE 0 END) * 100,1)
                 ELSE NULL END AS DATA1
                 
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CB' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CB' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CB' THEN 1 ELSE 0 END) * 100,1)  
                 ELSE NULL END AS DATA2
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CC' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CC' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CC' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA3
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CD' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CD' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CD' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA4
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CE' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CE' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CE' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA5
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CF' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CF' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CF' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA6
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CG' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CG' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CG' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA7
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CH' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CH' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CH' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA8
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CI' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CI' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CI' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA9
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CJ' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CJ' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CJ' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA10
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CK' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CK' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CK' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA11
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CL' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CL' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CL' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA12
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CM' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CM' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CM' THEN 1 ELSE 0 END) * 100,1)
                 ELSE NULL END AS DATA13
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CN' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CN' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CN' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA14
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CO' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CO' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CO' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA15
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CP' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CP' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CP' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA16
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CQ' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CQ' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CQ' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA17
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CR' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CR' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CR' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA18
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DA' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='DA' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='DA' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA19
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DB' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='DB' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='DB' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA20                                                                                          
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DC' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='DC' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='DC' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA21
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DD' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='DD' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='DD' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA22
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DE' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='DE' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='DE' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA23
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DF' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='DF' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='DF' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA24
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DG' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='DG' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='DG' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA25
                ,CASE WHEN SUM(CASE WHEN A.ACPN_DTM IS NOT NULL THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN A.ACPN_DTM IS NOT NULL THEN 1 ELSE 0 END) * 100,1)                      
                 ELSE NULL END AS DATA26			
			
	        FROM TBL_DSFT_ACPN_PROC A						<!-- 불만 접수 처리 -->	       		   
			        LEFT JOIN TBL_HC_HIST C
			               ON A.DSFT_ACPN_SEQ_NO = C.DSFT_ACPN_SEQ_NO		  
			        LEFT JOIN TBL_CRPN_CUST_BASE D
			       		   ON A.ORGN_PTR_ST_CD = D.CUST_ID        	    	  
			        LEFT JOIN TBL_USR B
			       		   ON A.DSPSR_ID = B.USR_ID 
			        LEFT JOIN TBL_HR_EMP_CD F
			       		   ON A.DSPSR_ID = F.EMP_NO
			        LEFT JOIN TBL_HR_DEPT_CD G 
			       		   ON F.BLNG_DEPT_CD = G.DEPT_CD
			        LEFT JOIN TBL_SAP_CD H	
			       		   ON (A.ORGN_ENTR_DV_CD = H.CD_ID AND H.CD_CLAS_CD = '1')	
			        LEFT JOIN TBL_DSFT_TAXN_TYP_CD I
			       		   ON A.DSFT_TAXN_TYP_CD = I.DSFT_TAXN_TYP_CD
			       		   
			WHERE G.HGRK_DEPT_CD IN ('E00054','E00056','T21000','E00053','E00042','E00044','JD1000','E00048')
				AND (A.DEL_YN = 'N' OR A.DEL_YN IS NULL)
				and (A.DSPSR_YN_OB_CNTR='N' or A.DSPSR_YN_OB_CNTR is null )
	       		<dynamic>
	       			<!-- 년도별 -->   				    	
		    	    <isEqual property="cmb_gubun" compareValue="1">              
		                and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'                                                                  
		            </isEqual>
		            <!--  -->
		            <isEqual property="cmb_gubun" compareValue="2">
		            	<isEmpty property="cmb_half">
		            		and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'
		            	</isEmpty>              
		                <isEqual property="cmb_half" compareValue="1">
		                	and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0632000000'                                                                  
						</isEqual>	 
						<isEqual property="cmb_half" compareValue="2">
							and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '1232000000'
						</isEqual>	 
		            </isEqual>	 
		            <isEqual property="cmb_gubun" compareValue="3"> 
		            	<isEmpty>
							and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'	            	
		            	</isEmpty>    
		           		<isEqual property="cmb_qua" compareValue="1">
		           			and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0332000000'   
		           	  	</isEqual>
		           	  	<isEqual property="cmb_qua" compareValue="2">
		           	   		and A.ACPN_DTM between #time_key# || '0400000000' and #time_key# || '0632000000'   
		           	  	</isEqual>	 
		           	  	<isEqual property="cmb_qua" compareValue="3">
		           	   		and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '0932000000'   
		           	  	</isEqual>	 
	           	  		<isEqual property="cmb_qua" compareValue="4">
		           	   		and A.ACPN_DTM between #time_key# || '1000000000' and #time_key# || '1232000000'   
		           	  	</isEqual>	 	 
	            	</isEqual>	 				            
		    	 	<isEqual property="cmb_gubun" compareValue="4">              
		            	and A.ACPN_DTM between #time_key# || '00000000' and #time_key# || '32000000'                                                                  
		         	</isEqual>	
		    	 	<isEqual property="cmb_gubun" compareValue="5">              
		                and A.ACPN_DTM between #time_key# || '000000' and #time_key# || '240000'                                                                  
		         	</isEqual>
				
					<!-- 불만유형이 전체일 때는 두가지 경우 존재(전체, 품질&혼유)		-->				
					<isEmpty property="dsft_typ_cd">
						<isEqual property="dsft_typ_tot_gbn" compareValue="2">
							AND A.DSFT_TYP_CD IN ('CA','CK')
						</isEqual>
					</isEmpty>					
				  	<isNotEmpty prepend="AND" property="dsft_typ_cd">				<!-- 불만유형		-->
				    	A.DSFT_TYP_CD = #dsft_typ_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dsft_taxn_typ_cd">			<!-- 불만세부유형		-->
				    	A.DSFT_TAXN_TYP_CD = #dsft_taxn_typ_cd#
				  	</isNotEmpty>
			  		<isNotEmpty prepend="AND" property="orgn_ptr_st_cd">			<!-- 불만발생업체코드(가맹점SAP코드) -->
					    A.ORGN_PTR_ST_CD = #orgn_ptr_st_cd#
				  	</isNotEmpty>
				    <isNotEmpty prepend="AND" property="conn_chnl_kind_cd">			<!-- 접촉채널	-->
					    A.CONN_CHNL_KIND_CD = #conn_chnl_kind_cd#
				    </isNotEmpty>			  	
				  	<isNotEmpty prepend="AND" property="hgrk_dept_cd">				<!-- 부문/본부 -->
					    G.HGRK_DEPT_CD = #hgrk_dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dept_cd">					<!-- 처리팀 -->
					    G.DEPT_CD = #dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dspsr_id_nm">				<!-- 처리자명 		-->
					    (B.USR_NM LIKE '%'|| #dspsr_id_nm# ||'%' OR F.EMP_NM LIKE '%'|| #dspsr_id_nm# ||'%')
				  	</isNotEmpty>
			 		<isEqual property="hc_yn" compareValue="Y"> 					<!-- 해피콜여부  -->
			 			AND A.HC_YN = 'Y'
			 		</isEqual>
				 	<isEqual property="hc_yn" compareValue="N"> 					<!-- 해피콜여부  -->
				 		AND (A.HC_YN = 'N' OR A.HC_YN IS NULL)
				 	</isEqual>
				  	<isNotEmpty prepend="AND" property="attd_sft_cd">				<!-- 태도만족도 		-->
				  		(A.HC_YN = 'Y' AND C.ATTD_SFT_CD = #attd_sft_cd#)
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="rslt_sft_cd">				<!-- 결과만족도 		-->
				  		(A.HC_YN = 'Y' AND C.RSLT_SFT_CD = #rslt_sft_cd#)
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="hc_uabl_rsn_cd">			<!-- 해피콜불가사유		-->
				  		A.HC_UABL_RSN_CD = #hc_uabl_rsn_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="prdct_cd">					<!-- 불만제품 		-->
					    A.PRDCT_CD = #prdct_cd#
				  	</isNotEmpty>			  				 	
				  	<isNotEmpty prepend="AND" property="prblm_penom_cd">			<!-- 현상 		-->
					    A.PRBLM_PENOM_CD = #prblm_penom_cd#
				  	</isNotEmpty>
			 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="1">  	<!-- 시료품질 점검결과		-->
			 			AND	A.VHCL_QLIT_DSFT_CAUS_CD_CUST IS NOT NULL
			 	  	</isEqual>
			 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="2">   	<!-- 시료품질 점검결과		-->
			 	  		AND	A.VHCL_QLIT_DSFT_CAUS_CD_PTR_ST IS NOT NULL
			 	  	</isEqual>
				  	<isNotEmpty prepend="AND" property="vhcl_biztr_qlit_dsft_typ_cd">			<!-- 품질불만유형 		-->
					    A.VHCL_BIZTR_QLIT_DSFT_TYP_CD = #vhcl_biztr_qlit_dsft_typ_cd#
				  	</isNotEmpty>
				 	<isEqual property="vhcl_biztr_yn" compareValue="Y"> 			<!-- Kixx 품질서비스차량 출동 -->
				 		AND A.VHCL_BIZTR_YN = 'Y'
				 	</isEqual>
				 	<isEqual property="vhcl_biztr_yn" compareValue="N"> 			<!-- Kixx 품질서비스차량 출동 -->
				 		AND (A.VHCL_BIZTR_YN = 'N' OR A.VHCL_BIZTR_YN IS NULL)
				 	</isEqual>		 	  	
				 	<isEqual property="rwrd_yn" compareValue="Y"> 					<!-- 보상여부 -->
				 		AND A.RWRD_YN = 'Y'
				 	</isEqual>
				 	<isEqual property="rwrd_yn" compareValue="N"> 					<!-- 보상여부 -->
				 		AND (A.RWRD_YN = 'N' OR A.RWRD_YN IS NULL)
				 	</isEqual>
				 	
				 	<isEqual property="cps_amt_gbn" compareValue="1"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 주유소 보상금 1만원 미만-->
				 			AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 주유소 보상금 1만원 ~ 10만원-->
				 			AND (A.PTR_ST_CPS_AMT <![CDATA[>=]]> 10000 AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 주유소 보상금 10만원 초과-->
				 			AND A.PTR_ST_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	<isEqual property="cps_amt_gbn" compareValue="2"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 회사 보상금 1만원 미만-->
				 			AND A.CO_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 회사 보상금 1만원 ~ 10만원-->
				 			AND (A.CO_CPS_AMT <![CDATA[>=]]> 10000 AND A.CO_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 회사 보상금 10만원 초과-->
				 			AND A.CO_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	<isEqual property="cps_amt_gbn" compareValue="3"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 총 보상금 1만원 미만-->
				 			AND A.TOT_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 총 보상금 1만원 ~ 10만원-->
				 			AND (A.TOT_CPS_AMT <![CDATA[>=]]> 10000 AND A.TOT_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 총 보상금 10만원 초과-->
				 			AND A.TOT_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	
					<!--처리자구분에 체크항목이 하나도 없는 경우, 전체데이터가 조회된다.-->
				 	<isEqual property="cmp_handler" compareValue="1">   
				 		AND	A.DSPSR_YN_CNSLR = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="2">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="3">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="4">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="5">   
				 		AND	A.DSPSR_YN_DSFT_CHRG = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="6">   
				 		AND	A.DSPSR_YN_PART_HD = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="7">   
				 		AND	(A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
	       		</dynamic>
	       		
			GROUP BY G.HGRK_DEPT_CDNM,G.HGRK_DEPT_CD	       		
	       					
			UNION ALL
			
			<!--  기타부문, 기타 평균 -->
	        SELECT 	 
				 '기타부문' 		AS HGRK_DEPT_CDNM
				,'기타' 			AS DSPSR_CHRG_DEPT
				,'ZZZZY' 		AS DEPT_CD	
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CA' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CA' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CA' THEN 1 ELSE 0 END) * 100,1)
                 ELSE NULL END AS DATA1
                 
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CB' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CB' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CB' THEN 1 ELSE 0 END) * 100,1)  
                 ELSE NULL END AS DATA2
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CC' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CC' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CC' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA3
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CD' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CD' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CD' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA4
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CE' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CE' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CE' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA5
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CF' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CF' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CF' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA6
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CG' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CG' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CG' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA7
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CH' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CH' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CH' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA8
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CI' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CI' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CI' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA9
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CJ' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CJ' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CJ' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA10
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CK' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CK' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CK' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA11
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CL' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CL' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CL' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA12
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CM' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CM' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CM' THEN 1 ELSE 0 END) * 100,1)
                 ELSE NULL END AS DATA13
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CN' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CN' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CN' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA14
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CO' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CO' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CO' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA15
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CP' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CP' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CP' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA16
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CQ' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CQ' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CQ' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA17
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CR' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CR' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CR' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA18
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DA' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='DA' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='DA' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA19
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DB' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='DB' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='DB' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA20                                                                                          
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DC' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='DC' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='DC' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA21
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DD' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='DD' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='DD' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA22
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DE' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='DE' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='DE' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA23
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DF' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='DF' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='DF' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA24
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DG' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='DG' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='DG' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA25
                ,CASE WHEN SUM(CASE WHEN A.ACPN_DTM IS NOT NULL THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN A.ACPN_DTM IS NOT NULL THEN 1 ELSE 0 END) * 100,1)                      
                 ELSE NULL END AS DATA26                                  
	
	        FROM TBL_DSFT_ACPN_PROC A						<!-- 불만 접수 처리 -->	       		   
			        LEFT JOIN TBL_HC_HIST C
			               ON A.DSFT_ACPN_SEQ_NO = C.DSFT_ACPN_SEQ_NO		  
			        LEFT JOIN TBL_CRPN_CUST_BASE D
			       		   ON A.ORGN_PTR_ST_CD = D.CUST_ID        	    	  
			        LEFT JOIN TBL_USR B
			       		   ON A.DSPSR_ID = B.USR_ID 
			        LEFT JOIN TBL_HR_EMP_CD F
			       		   ON A.DSPSR_ID = F.EMP_NO
			        LEFT JOIN TBL_HR_DEPT_CD G 
			       		   ON F.BLNG_DEPT_CD = G.DEPT_CD
			        LEFT JOIN TBL_SAP_CD H	
			       		   ON (A.ORGN_ENTR_DV_CD = H.CD_ID AND H.CD_CLAS_CD = '1')	
			        LEFT JOIN TBL_DSFT_TAXN_TYP_CD I
			       		   ON A.DSFT_TAXN_TYP_CD = I.DSFT_TAXN_TYP_CD
			       		   
			WHERE (G.HGRK_DEPT_CD IS NULL OR G.HGRK_DEPT_CD NOT IN ('E00054','E00056','T21000','E00053','E00042','E00044','JD1000','E00048'))
				AND (A.DEL_YN = 'N' OR A.DEL_YN IS NULL)	
						and (A.DSPSR_YN_OB_CNTR='N' or A.DSPSR_YN_OB_CNTR is null )	
	       		<dynamic>
	       			<!-- 년도별 -->   				    	
		    	    <isEqual property="cmb_gubun" compareValue="1">              
		                and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'                                                                  
		            </isEqual>
		            <!--  -->
		            <isEqual property="cmb_gubun" compareValue="2">
		            	<isEmpty property="cmb_half">
		            		and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'
		            	</isEmpty>              
		                <isEqual property="cmb_half" compareValue="1">
		                	and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0632000000'                                                                  
						</isEqual>	 
						<isEqual property="cmb_half" compareValue="2">
							and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '1232000000'
						</isEqual>	 
		            </isEqual>	 
		            <isEqual property="cmb_gubun" compareValue="3"> 
		            	<isEmpty>
							and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'	            	
		            	</isEmpty>    
		           		<isEqual property="cmb_qua" compareValue="1">
		           			and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0332000000'   
		           	  	</isEqual>
		           	  	<isEqual property="cmb_qua" compareValue="2">
		           	   		and A.ACPN_DTM between #time_key# || '0400000000' and #time_key# || '0632000000'   
		           	  	</isEqual>	 
		           	  	<isEqual property="cmb_qua" compareValue="3">
		           	   		and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '0932000000'   
		           	  	</isEqual>	 
	           	  		<isEqual property="cmb_qua" compareValue="4">
		           	   		and A.ACPN_DTM between #time_key# || '1000000000' and #time_key# || '1232000000'   
		           	  	</isEqual>	 	 
	            	</isEqual>	 				            
		    	 	<isEqual property="cmb_gubun" compareValue="4">              
		            	and A.ACPN_DTM between #time_key# || '00000000' and #time_key# || '32000000'                                                                  
		         	</isEqual>	
		    	 	<isEqual property="cmb_gubun" compareValue="5">              
		                and A.ACPN_DTM between #time_key# || '000000' and #time_key# || '240000'                                                                  
		         	</isEqual>
				
					<!-- 불만유형이 전체일 때는 두가지 경우 존재(전체, 품질&혼유)		-->				
					<isEmpty property="dsft_typ_cd">
						<isEqual property="dsft_typ_tot_gbn" compareValue="2">
							AND A.DSFT_TYP_CD IN ('CA','CK')
						</isEqual>
					</isEmpty>					
				  	<isNotEmpty prepend="AND" property="dsft_typ_cd">				<!-- 불만유형		-->
				    	A.DSFT_TYP_CD = #dsft_typ_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dsft_taxn_typ_cd">			<!-- 불만세부유형		-->
				    	A.DSFT_TAXN_TYP_CD = #dsft_taxn_typ_cd#
				  	</isNotEmpty>
			  		<isNotEmpty prepend="AND" property="orgn_ptr_st_cd">			<!-- 불만발생업체코드(가맹점SAP코드) -->
					    A.ORGN_PTR_ST_CD = #orgn_ptr_st_cd#
				  	</isNotEmpty>
				    <isNotEmpty prepend="AND" property="conn_chnl_kind_cd">			<!-- 접촉채널	-->
					    A.CONN_CHNL_KIND_CD = #conn_chnl_kind_cd#
				    </isNotEmpty>			  	
				  	<isNotEmpty prepend="AND" property="hgrk_dept_cd">				<!-- 부문/본부 -->
					    G.HGRK_DEPT_CD = #hgrk_dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dept_cd">					<!-- 처리팀 -->
					    G.DEPT_CD = #dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dspsr_id_nm">				<!-- 처리자명 		-->
					    (B.USR_NM LIKE '%'|| #dspsr_id_nm# ||'%' OR F.EMP_NM LIKE '%'|| #dspsr_id_nm# ||'%')
				  	</isNotEmpty>
			 		<isEqual property="hc_yn" compareValue="Y"> 					<!-- 해피콜여부  -->
			 			AND A.HC_YN = 'Y'
			 		</isEqual>
				 	<isEqual property="hc_yn" compareValue="N"> 					<!-- 해피콜여부  -->
				 		AND (A.HC_YN = 'N' OR A.HC_YN IS NULL)
				 	</isEqual>
				  	<isNotEmpty prepend="AND" property="attd_sft_cd">				<!-- 태도만족도 		-->
				  		(A.HC_YN = 'Y' AND C.ATTD_SFT_CD = #attd_sft_cd#)
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="rslt_sft_cd">				<!-- 결과만족도 		-->
				  		(A.HC_YN = 'Y' AND C.RSLT_SFT_CD = #rslt_sft_cd#)
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="hc_uabl_rsn_cd">			<!-- 해피콜불가사유		-->
				  		A.HC_UABL_RSN_CD = #hc_uabl_rsn_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="prdct_cd">					<!-- 불만제품 		-->
					    A.PRDCT_CD = #prdct_cd#
				  	</isNotEmpty>			  				 	
				  	<isNotEmpty prepend="AND" property="prblm_penom_cd">			<!-- 현상 		-->
					    A.PRBLM_PENOM_CD = #prblm_penom_cd#
				  	</isNotEmpty>
			 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="1">  	<!-- 시료품질 점검결과		-->
			 			AND	A.VHCL_QLIT_DSFT_CAUS_CD_CUST IS NOT NULL
			 	  	</isEqual>
			 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="2">   	<!-- 시료품질 점검결과		-->
			 	  		AND	A.VHCL_QLIT_DSFT_CAUS_CD_PTR_ST IS NOT NULL
			 	  	</isEqual>
				  	<isNotEmpty prepend="AND" property="vhcl_biztr_qlit_dsft_typ_cd">			<!-- 품질불만유형 		-->
					    A.VHCL_BIZTR_QLIT_DSFT_TYP_CD = #vhcl_biztr_qlit_dsft_typ_cd#
				  	</isNotEmpty>
				 	<isEqual property="vhcl_biztr_yn" compareValue="Y"> 			<!-- Kixx 품질서비스차량 출동 -->
				 		AND A.VHCL_BIZTR_YN = 'Y'
				 	</isEqual>
				 	<isEqual property="vhcl_biztr_yn" compareValue="N"> 			<!-- Kixx 품질서비스차량 출동 -->
				 		AND (A.VHCL_BIZTR_YN = 'N' OR A.VHCL_BIZTR_YN IS NULL)
				 	</isEqual>		 	  	
				 	<isEqual property="rwrd_yn" compareValue="Y"> 					<!-- 보상여부 -->
				 		AND A.RWRD_YN = 'Y'
				 	</isEqual>
				 	<isEqual property="rwrd_yn" compareValue="N"> 					<!-- 보상여부 -->
				 		AND (A.RWRD_YN = 'N' OR A.RWRD_YN IS NULL)
				 	</isEqual>
				 	
				 	<isEqual property="cps_amt_gbn" compareValue="1"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 주유소 보상금 1만원 미만-->
				 			AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 주유소 보상금 1만원 ~ 10만원-->
				 			AND (A.PTR_ST_CPS_AMT <![CDATA[>=]]> 10000 AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 주유소 보상금 10만원 초과-->
				 			AND A.PTR_ST_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	<isEqual property="cps_amt_gbn" compareValue="2"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 회사 보상금 1만원 미만-->
				 			AND A.CO_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 회사 보상금 1만원 ~ 10만원-->
				 			AND (A.CO_CPS_AMT <![CDATA[>=]]> 10000 AND A.CO_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 회사 보상금 10만원 초과-->
				 			AND A.CO_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	<isEqual property="cps_amt_gbn" compareValue="3"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 총 보상금 1만원 미만-->
				 			AND A.TOT_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 총 보상금 1만원 ~ 10만원-->
				 			AND (A.TOT_CPS_AMT <![CDATA[>=]]> 10000 AND A.TOT_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 총 보상금 10만원 초과-->
				 			AND A.TOT_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	
					<!--처리자구분에 체크항목이 하나도 없는 경우, 전체데이터가 조회된다.-->
				 	<isEqual property="cmp_handler" compareValue="1">   
				 		AND	A.DSPSR_YN_CNSLR = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="2">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="3">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="4">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="5">   
				 		AND	A.DSPSR_YN_DSFT_CHRG = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="6">   
				 		AND	A.DSPSR_YN_PART_HD = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="7">   
				 		AND	(A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
	       		</dynamic> 

			UNION ALL

			<!--  전체부문, 전체평균 -->
	        SELECT 	 
				 '전체부문' 		AS HGRK_DEPT_CDNM
				,'전체평균' 			AS DSPSR_CHRG_DEPT
				,'ZZZZZ' 		AS DEPT_CD	
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CA' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CA' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CA' THEN 1 ELSE 0 END) * 100,1)
                 ELSE NULL END AS DATA1
                 
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CB' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CB' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CB' THEN 1 ELSE 0 END) * 100,1)  
                 ELSE NULL END AS DATA2
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CC' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CC' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CC' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA3
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CD' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CD' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CD' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA4
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CE' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CE' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CE' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA5
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CF' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CF' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CF' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA6
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CG' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CG' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CG' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA7
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CH' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CH' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CH' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA8
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CI' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CI' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CI' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA9
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CJ' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CJ' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CJ' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA10
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CK' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CK' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CK' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA11
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CL' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CL' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CL' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA12
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CM' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CM' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CM' THEN 1 ELSE 0 END) * 100,1)
                 ELSE NULL END AS DATA13
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CN' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CN' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CN' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA14
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CO' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CO' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CO' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA15
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CP' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CP' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CP' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA16
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CQ' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CQ' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CQ' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA17
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CR' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='CR' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='CR' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA18
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DA' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='DA' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='DA' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA19
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DB' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='DB' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='DB' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA20                                                                                          
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DC' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='DC' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='DC' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA21
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DD' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='DD' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='DD' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA22
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DE' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='DE' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='DE' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA23
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DF' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='DF' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='DF' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA24
            	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DG' THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN I.DSFT_TYP_CD='DG' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN I.DSFT_TYP_CD='DG' THEN 1 ELSE 0 END) * 100,1) 
                 ELSE NULL END AS DATA25
                ,CASE WHEN SUM(CASE WHEN A.ACPN_DTM IS NOT NULL THEN 1 ELSE 0 END) > 0 THEN
                	ROUND(SUM(CASE WHEN A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END)/ 
                          SUM(CASE WHEN A.ACPN_DTM IS NOT NULL THEN 1 ELSE 0 END) * 100,1)                      
                 ELSE NULL END AS DATA26                                  
	
	        FROM TBL_DSFT_ACPN_PROC A						<!-- 불만 접수 처리 -->	       		   
			        LEFT JOIN TBL_HC_HIST C
			               ON A.DSFT_ACPN_SEQ_NO = C.DSFT_ACPN_SEQ_NO		  
			        LEFT JOIN TBL_CRPN_CUST_BASE D
			       		   ON A.ORGN_PTR_ST_CD = D.CUST_ID        	    	  
			        LEFT JOIN TBL_USR B
			       		   ON A.DSPSR_ID = B.USR_ID 
			        LEFT JOIN TBL_HR_EMP_CD F
			       		   ON A.DSPSR_ID = F.EMP_NO
			        LEFT JOIN TBL_HR_DEPT_CD G 
			       		   ON F.BLNG_DEPT_CD = G.DEPT_CD
			        LEFT JOIN TBL_SAP_CD H	
			       		   ON (A.ORGN_ENTR_DV_CD = H.CD_ID AND H.CD_CLAS_CD = '1')	
			        LEFT JOIN TBL_DSFT_TAXN_TYP_CD I
			       		   ON A.DSFT_TAXN_TYP_CD = I.DSFT_TAXN_TYP_CD
			       		   
			WHERE (A.DEL_YN = 'N' OR A.DEL_YN IS NULL)	
			and (A.DSPSR_YN_OB_CNTR='N' or A.DSPSR_YN_OB_CNTR is null )	
	       		<dynamic>
	       			<!-- 년도별 -->   				    	
		    	    <isEqual property="cmb_gubun" compareValue="1">              
		                and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'                                                                  
		            </isEqual>
		            <!--  -->
		            <isEqual property="cmb_gubun" compareValue="2">
		            	<isEmpty property="cmb_half">
		            		and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'
		            	</isEmpty>              
		                <isEqual property="cmb_half" compareValue="1">
		                	and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0632000000'                                                                  
						</isEqual>	 
						<isEqual property="cmb_half" compareValue="2">
							and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '1232000000'
						</isEqual>	 
		            </isEqual>	 
		            <isEqual property="cmb_gubun" compareValue="3"> 
		            	<isEmpty>
							and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'	            	
		            	</isEmpty>    
		           		<isEqual property="cmb_qua" compareValue="1">
		           			and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0332000000'   
		           	  	</isEqual>
		           	  	<isEqual property="cmb_qua" compareValue="2">
		           	   		and A.ACPN_DTM between #time_key# || '0400000000' and #time_key# || '0632000000'   
		           	  	</isEqual>	 
		           	  	<isEqual property="cmb_qua" compareValue="3">
		           	   		and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '0932000000'   
		           	  	</isEqual>	 
	           	  		<isEqual property="cmb_qua" compareValue="4">
		           	   		and A.ACPN_DTM between #time_key# || '1000000000' and #time_key# || '1232000000'   
		           	  	</isEqual>	 	 
	            	</isEqual>	 				            
		    	 	<isEqual property="cmb_gubun" compareValue="4">              
		            	and A.ACPN_DTM between #time_key# || '00000000' and #time_key# || '32000000'                                                                  
		         	</isEqual>	
		    	 	<isEqual property="cmb_gubun" compareValue="5">              
		                and A.ACPN_DTM between #time_key# || '000000' and #time_key# || '240000'                                                                  
		         	</isEqual>
				
					<!-- 불만유형이 전체일 때는 두가지 경우 존재(전체, 품질&혼유)		-->				
					<isEmpty property="dsft_typ_cd">
						<isEqual property="dsft_typ_tot_gbn" compareValue="2">
							AND A.DSFT_TYP_CD IN ('CA','CK')
						</isEqual>
					</isEmpty>					
				  	<isNotEmpty prepend="AND" property="dsft_typ_cd">				<!-- 불만유형		-->
				    	A.DSFT_TYP_CD = #dsft_typ_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dsft_taxn_typ_cd">			<!-- 불만세부유형		-->
				    	A.DSFT_TAXN_TYP_CD = #dsft_taxn_typ_cd#
				  	</isNotEmpty>
			  		<isNotEmpty prepend="AND" property="orgn_ptr_st_cd">			<!-- 불만발생업체코드(가맹점SAP코드) -->
					    A.ORGN_PTR_ST_CD = #orgn_ptr_st_cd#
				  	</isNotEmpty>
				    <isNotEmpty prepend="AND" property="conn_chnl_kind_cd">			<!-- 접촉채널	-->
					    A.CONN_CHNL_KIND_CD = #conn_chnl_kind_cd#
				    </isNotEmpty>			  	
				  	<isNotEmpty prepend="AND" property="hgrk_dept_cd">				<!-- 부문/본부 -->
					    G.HGRK_DEPT_CD = #hgrk_dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dept_cd">					<!-- 처리팀 -->
					    G.DEPT_CD = #dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dspsr_id_nm">				<!-- 처리자명 		-->
					    (B.USR_NM LIKE '%'|| #dspsr_id_nm# ||'%' OR F.EMP_NM LIKE '%'|| #dspsr_id_nm# ||'%')
				  	</isNotEmpty>
			 		<isEqual property="hc_yn" compareValue="Y"> 					<!-- 해피콜여부  -->
			 			AND A.HC_YN = 'Y'
			 		</isEqual>
				 	<isEqual property="hc_yn" compareValue="N"> 					<!-- 해피콜여부  -->
				 		AND (A.HC_YN = 'N' OR A.HC_YN IS NULL)
				 	</isEqual>
				  	<isNotEmpty prepend="AND" property="attd_sft_cd">				<!-- 태도만족도 		-->
				  		(A.HC_YN = 'Y' AND C.ATTD_SFT_CD = #attd_sft_cd#)
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="rslt_sft_cd">				<!-- 결과만족도 		-->
				  		(A.HC_YN = 'Y' AND C.RSLT_SFT_CD = #rslt_sft_cd#)
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="hc_uabl_rsn_cd">			<!-- 해피콜불가사유		-->
				  		A.HC_UABL_RSN_CD = #hc_uabl_rsn_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="prdct_cd">					<!-- 불만제품 		-->
					    A.PRDCT_CD = #prdct_cd#
				  	</isNotEmpty>			  				 	
				  	<isNotEmpty prepend="AND" property="prblm_penom_cd">			<!-- 현상 		-->
					    A.PRBLM_PENOM_CD = #prblm_penom_cd#
				  	</isNotEmpty>
			 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="1">  	<!-- 시료품질 점검결과		-->
			 			AND	A.VHCL_QLIT_DSFT_CAUS_CD_CUST IS NOT NULL
			 	  	</isEqual>
			 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="2">   	<!-- 시료품질 점검결과		-->
			 	  		AND	A.VHCL_QLIT_DSFT_CAUS_CD_PTR_ST IS NOT NULL
			 	  	</isEqual>
				  	<isNotEmpty prepend="AND" property="vhcl_biztr_qlit_dsft_typ_cd">			<!-- 품질불만유형 		-->
					    A.VHCL_BIZTR_QLIT_DSFT_TYP_CD = #vhcl_biztr_qlit_dsft_typ_cd#
				  	</isNotEmpty>
				 	<isEqual property="vhcl_biztr_yn" compareValue="Y"> 			<!-- Kixx 품질서비스차량 출동 -->
				 		AND A.VHCL_BIZTR_YN = 'Y'
				 	</isEqual>
				 	<isEqual property="vhcl_biztr_yn" compareValue="N"> 			<!-- Kixx 품질서비스차량 출동 -->
				 		AND (A.VHCL_BIZTR_YN = 'N' OR A.VHCL_BIZTR_YN IS NULL)
				 	</isEqual>		 	  	
				 	<isEqual property="rwrd_yn" compareValue="Y"> 					<!-- 보상여부 -->
				 		AND A.RWRD_YN = 'Y'
				 	</isEqual>
				 	<isEqual property="rwrd_yn" compareValue="N"> 					<!-- 보상여부 -->
				 		AND (A.RWRD_YN = 'N' OR A.RWRD_YN IS NULL)
				 	</isEqual>
				 	
				 	<isEqual property="cps_amt_gbn" compareValue="1"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 주유소 보상금 1만원 미만-->
				 			AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 주유소 보상금 1만원 ~ 10만원-->
				 			AND (A.PTR_ST_CPS_AMT <![CDATA[>=]]> 10000 AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 주유소 보상금 10만원 초과-->
				 			AND A.PTR_ST_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	<isEqual property="cps_amt_gbn" compareValue="2"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 회사 보상금 1만원 미만-->
				 			AND A.CO_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 회사 보상금 1만원 ~ 10만원-->
				 			AND (A.CO_CPS_AMT <![CDATA[>=]]> 10000 AND A.CO_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 회사 보상금 10만원 초과-->
				 			AND A.CO_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	<isEqual property="cps_amt_gbn" compareValue="3"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 총 보상금 1만원 미만-->
				 			AND A.TOT_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 총 보상금 1만원 ~ 10만원-->
				 			AND (A.TOT_CPS_AMT <![CDATA[>=]]> 10000 AND A.TOT_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 총 보상금 10만원 초과-->
				 			AND A.TOT_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	
					<!--처리자구분에 체크항목이 하나도 없는 경우, 전체데이터가 조회된다.-->
				 	<isEqual property="cmp_handler" compareValue="1">   
				 		AND	A.DSPSR_YN_CNSLR = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="2">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="3">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="4">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="5">   
				 		AND	A.DSPSR_YN_DSFT_CHRG = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="6">   
				 		AND	A.DSPSR_YN_PART_HD = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="7">   
				 		AND	(A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
	       		</dynamic>	
	
		) Q2
	
	ON Q1.DEPT_CD = Q2.DEPT_CD
	
	GROUP BY Q1.HGRK_DEPT_CD,Q1.DEPT_CD
	ORDER BY Q1.HGRK_DEPT_CD, Q1.DEPT_CD, MAX(Q1.DEPT_CDNM)
	
 	</select>
 	
	<!-- 불만처리율(조직별)-->
 	<select id="Get_CMP_BY_GRP_SELECT" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
	SELECT
	     A.DSPSR_CHRG_DEPT  AS DSPSR_CHRG_DEPT
	    ,A.ACPN1			AS ACPN1
	    ,A.PROC1			AS PROC1
	    ,CASE WHEN A.ACPN1 > 0 THEN ROUND(A.PROC1 / A.ACPN1 * 100, 1)
	     ELSE NULL END      AS RATE1
	     
	    ,A.ACPN2			AS ACPN2
	    ,A.PROC2			AS PROC2
	    ,CASE WHEN A.ACPN2 > 0 THEN ROUND(A.PROC2 / A.ACPN2 * 100, 1)
	     ELSE NULL END      AS RATE2
	         
	    ,A.ACPN3			AS ACPN3
	    ,A.PROC3			AS PROC3
	    ,CASE WHEN A.ACPN3 > 0 THEN ROUND(A.PROC3 / A.ACPN3 * 100, 1)
	     ELSE NULL END      AS RATE3
	              
	    ,(A.ACPN1 + A.ACPN2 + A.ACPN3)  AS QRTR_ACPN1
	    ,(A.PROC1 + A.PROC2 + A.PROC3)  AS QRTR_PROC1    
	    ,CASE WHEN (A.ACPN1 + A.ACPN2 + A.ACPN3) > 0 THEN ROUND((A.PROC1 + A.PROC2 + A.PROC3)/(A.ACPN1 + A.ACPN2 + A.ACPN3) * 100, 1)
	     ELSE NULL END      AS QRTR_RATE1
	         
	    ,A.ACPN4			AS ACPN4
	    ,A.PROC4			AS PROC4
	    ,CASE WHEN A.ACPN4 > 0 THEN ROUND(A.PROC4 / A.ACPN4 * 100, 1)
	     ELSE NULL END      AS RATE4
	         
	    ,A.ACPN5			AS ACPN5
	    ,A.PROC5			AS PROC5
	    ,CASE WHEN A.ACPN5 > 0 THEN ROUND(A.PROC5 / A.ACPN5 * 100, 1)
	     ELSE NULL END      AS RATE5
	         
	    ,A.ACPN6			AS ACPN6
	    ,A.PROC6			AS PROC6
	    ,CASE WHEN A.ACPN6 > 0 THEN ROUND(A.PROC6 / A.ACPN6 * 100, 1)
	     ELSE NULL END      AS RATE6
	     
	    ,(A.ACPN4 + A.ACPN5 + A.ACPN6)  AS QRTR_ACPN2
	    ,(A.PROC4 + A.PROC5 + A.PROC6)  AS QRTR_PROC2     
	    ,CASE WHEN (A.ACPN4 + A.ACPN5 + A.ACPN6) > 0 THEN ROUND((A.PROC4 + A.PROC5 + A.PROC6)/(A.ACPN4 + A.ACPN5 + A.ACPN6) * 100, 1)
	     ELSE NULL END      AS QRTR_RATE2
	
	    ,(A.ACPN1 + A.ACPN2 + A.ACPN3 + A.ACPN4 + A.ACPN5 + A.ACPN6) AS HALF_ACPN1
	    ,(A.PROC1 + A.PROC2 + A.PROC3 + A.PROC4 + A.PROC5 + A.PROC6) AS HALF_PROC1
	    ,CASE WHEN (A.ACPN1 + A.ACPN2 + A.ACPN3 + A.ACPN4 + A.ACPN5 + A.ACPN6) > 0 THEN 
	        ROUND((A.PROC1 + A.PROC2 + A.PROC3 + A.PROC4 + A.PROC5 + A.PROC6)/(A.ACPN1 + A.ACPN2 + A.ACPN3 + A.ACPN4 + A.ACPN5 + A.ACPN6) * 100, 1)
	     ELSE NULL END      AS HALF_RATE1
	         
	    ,A.ACPN7			AS ACPN7
	    ,A.PROC7			AS PROC7
	    ,CASE WHEN A.ACPN7 > 0 THEN ROUND(A.PROC7 / A.ACPN7 * 100, 1)
	     ELSE NULL END      AS RATE7
	         
	    ,A.ACPN8			AS ACPN8
	    ,A.PROC8			AS PROC8
	    ,CASE WHEN A.ACPN8 > 0 THEN ROUND(A.PROC8 / A.ACPN8 * 100, 1)
	     ELSE NULL END      AS RATE8
	        
	    ,A.ACPN9			AS ACPN9
	    ,A.PROC9			AS PROC9
	    ,CASE WHEN A.ACPN9 > 0 THEN ROUND(A.PROC9 / A.ACPN9 * 100, 1)
	     ELSE NULL END      AS RATE9
	     
	    ,(A.ACPN7 + A.ACPN8 + A.ACPN9)  AS QRTR_ACPN3
	    ,(A.PROC7 + A.PROC8 + A.PROC9)  AS QRTR_PROC3        
	    ,CASE WHEN (A.ACPN7 + A.ACPN8 + A.ACPN9) > 0 THEN ROUND((A.PROC7 + A.PROC8 + A.PROC9)/(A.ACPN7 + A.ACPN8 + A.ACPN9) * 100, 1)
	     ELSE NULL END      AS QRTR_RATE3     
	         
	    ,A.ACPN10			AS ACPN10
	    ,A.PROC10			AS PROC10
	    ,CASE WHEN A.ACPN10 > 0 THEN ROUND(A.PROC10 / A.ACPN10 * 100, 1)
	     ELSE NULL END      AS RATE10
	         
	    ,A.ACPN11			AS ACPN11
	    ,A.PROC11			AS PROC11
	    ,CASE WHEN A.ACPN11 > 0 THEN ROUND(A.PROC11 / A.ACPN11 * 100, 1)
	     ELSE NULL END      AS RATE11
	         
	    ,A.ACPN12			AS ACPN12
	    ,A.PROC12			AS PROC12
	    ,CASE WHEN A.ACPN12 > 0 THEN ROUND(A.PROC12 / A.ACPN12 * 100, 1)
	     ELSE NULL END      AS RATE12
	     
	    ,(A.ACPN10 + A.ACPN11 + A.ACPN12)  AS QRTR_ACPN4
	    ,(A.PROC10 + A.PROC11 + A.PROC12)  AS QRTR_PROC4     
	    ,CASE WHEN (A.ACPN10 + A.ACPN11 + A.ACPN12) > 0 THEN ROUND((A.PROC10 + A.PROC11 + A.PROC12)/(A.ACPN10 + A.ACPN11 + A.ACPN12) * 100, 1)
	     ELSE NULL END      AS QRTR_RATE4
	     
	    ,(A.ACPN7 + A.ACPN8 + A.ACPN9 + A.ACPN10 + A.ACPN11 + A.ACPN12) AS HALF_ACPN2
	    ,(A.PROC7 + A.PROC8 + A.PROC9 + A.PROC10 + A.PROC11 + A.PROC12) AS HALF_PROC2   
	    ,CASE WHEN (A.ACPN7 + A.ACPN8 + A.ACPN9 + A.ACPN10 + A.ACPN11 + A.ACPN12) > 0 THEN 
	        ROUND((A.PROC7 + A.PROC8 + A.PROC9 + A.PROC10 + A.PROC11 + A.PROC12)/(A.ACPN7 + A.ACPN8 + A.ACPN9 + A.ACPN10 + A.ACPN11 + A.ACPN12) * 100, 1)
	     ELSE NULL END      AS HALF_RATE2
	     
	    ,(A.ACPN1 + A.ACPN2 + A.ACPN3 + A.ACPN4 + A.ACPN5 + A.ACPN6 + A.ACPN7 + A.ACPN8 + A.ACPN9 + A.ACPN10 + A.ACPN11 + A.ACPN12) AS TOTL_ACPN
	    ,(A.PROC1 + A.PROC2 + A.PROC3 + A.PROC4 + A.PROC5 + A.PROC6 + A.PROC7 + A.PROC8 + A.PROC9 + A.PROC10 + A.PROC11 + A.PROC12) AS TOTL_PROC
	    ,CASE WHEN (A.ACPN1 + A.ACPN2 + A.ACPN3 + A.ACPN4 + A.ACPN5 + A.ACPN6 + A.ACPN7 + A.ACPN8 + A.ACPN9 + A.ACPN10 + A.ACPN11 + A.ACPN12) > 0 THEN 
	        ROUND((A.PROC1 + A.PROC2 + A.PROC3 + A.PROC4 + A.PROC5 + A.PROC6 + A.PROC7 + A.PROC8 + A.PROC9 + A.PROC10 + A.PROC11 + A.PROC12)
	        /(A.ACPN1 + A.ACPN2 + A.ACPN3 + A.ACPN4 + A.ACPN5 + A.ACPN6 + A.ACPN7 + A.ACPN8 + A.ACPN9 + A.ACPN10 + A.ACPN11 + A.ACPN12) * 100, 1)
	     ELSE NULL END      AS TOTL_RATE     
	FROM
	( 	
    	SELECT
		    NVL(A.DSPSR_CHRG_DEPT,'')	 AS DSPSR_CHRG_DEPT
		    ,A.ACPN1			AS ACPN1
		    ,A.PROC1			AS PROC1
		    ,A.ACPN2			AS ACPN2
		    ,A.PROC2			AS PROC2
		    ,A.ACPN3			AS ACPN3
		    ,A.PROC3			AS PROC3
		    ,A.ACPN4			AS ACPN4
		    ,A.PROC4			AS PROC4
		    ,A.ACPN5			AS ACPN5
		    ,A.PROC5			AS PROC5
		    ,A.ACPN6			AS ACPN6
		    ,A.PROC6			AS PROC6
		    ,A.ACPN7			AS ACPN7
		    ,A.PROC7			AS PROC7
		    ,A.ACPN8			AS ACPN8
		    ,A.PROC8			AS PROC8
		    ,A.ACPN9			AS ACPN9
		    ,A.PROC9			AS PROC9
		    ,A.ACPN10			AS ACPN10
		    ,A.PROC10			AS PROC10
		    ,A.ACPN11			AS ACPN11
		    ,A.PROC11			AS PROC11
		    ,A.ACPN12			AS ACPN12
		    ,A.PROC12			AS PROC12     
		FROM  	
				(
				 select 	 
		        	 A.DSPSR_CHRG_DEPT as DSPSR_CHRG_DEPT	
		        	,SUM(CASE WHEN A.ACPN_DTM IS NOT NULL AND SUBSTR(A.ACPN_DTM,5,2) = '01'  THEN 1 ELSE 0 END) AS ACPN1
                    ,SUM(CASE WHEN A.ACPN_DTM IS NOT NULL AND SUBSTR(A.ACPN_DTM,5,2) = '01' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS PROC1
		        	,SUM(CASE WHEN A.ACPN_DTM IS NOT NULL AND SUBSTR(A.ACPN_DTM,5,2) = '02'  THEN 1 ELSE 0 END) AS ACPN2
                    ,SUM(CASE WHEN A.ACPN_DTM IS NOT NULL AND SUBSTR(A.ACPN_DTM,5,2) = '02' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS PROC2                     
		        	,SUM(CASE WHEN A.ACPN_DTM IS NOT NULL AND SUBSTR(A.ACPN_DTM,5,2) = '03'  THEN 1 ELSE 0 END) AS ACPN3
                    ,SUM(CASE WHEN A.ACPN_DTM IS NOT NULL AND SUBSTR(A.ACPN_DTM,5,2) = '03' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS PROC3 
		        	,SUM(CASE WHEN A.ACPN_DTM IS NOT NULL AND SUBSTR(A.ACPN_DTM,5,2) = '04'  THEN 1 ELSE 0 END) AS ACPN4
                    ,SUM(CASE WHEN A.ACPN_DTM IS NOT NULL AND SUBSTR(A.ACPN_DTM,5,2) = '04' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS PROC4
		        	,SUM(CASE WHEN A.ACPN_DTM IS NOT NULL AND SUBSTR(A.ACPN_DTM,5,2) = '05'  THEN 1 ELSE 0 END) AS ACPN5
                    ,SUM(CASE WHEN A.ACPN_DTM IS NOT NULL AND SUBSTR(A.ACPN_DTM,5,2) = '05' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS PROC5
		        	,SUM(CASE WHEN A.ACPN_DTM IS NOT NULL AND SUBSTR(A.ACPN_DTM,5,2) = '06'  THEN 1 ELSE 0 END) AS ACPN6
                    ,SUM(CASE WHEN A.ACPN_DTM IS NOT NULL AND SUBSTR(A.ACPN_DTM,5,2) = '06' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS PROC6
		        	,SUM(CASE WHEN A.ACPN_DTM IS NOT NULL AND SUBSTR(A.ACPN_DTM,5,2) = '07'  THEN 1 ELSE 0 END) AS ACPN7
                    ,SUM(CASE WHEN A.ACPN_DTM IS NOT NULL AND SUBSTR(A.ACPN_DTM,5,2) = '07' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS PROC7
		        	,SUM(CASE WHEN A.ACPN_DTM IS NOT NULL AND SUBSTR(A.ACPN_DTM,5,2) = '08'  THEN 1 ELSE 0 END) AS ACPN8
                    ,SUM(CASE WHEN A.ACPN_DTM IS NOT NULL AND SUBSTR(A.ACPN_DTM,5,2) = '08' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS PROC8
		        	,SUM(CASE WHEN A.ACPN_DTM IS NOT NULL AND SUBSTR(A.ACPN_DTM,5,2) = '09'  THEN 1 ELSE 0 END) AS ACPN9
                    ,SUM(CASE WHEN A.ACPN_DTM IS NOT NULL AND SUBSTR(A.ACPN_DTM,5,2) = '09' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS PROC9
		        	,SUM(CASE WHEN A.ACPN_DTM IS NOT NULL AND SUBSTR(A.ACPN_DTM,5,2) = '10'  THEN 1 ELSE 0 END) AS ACPN10
                    ,SUM(CASE WHEN A.ACPN_DTM IS NOT NULL AND SUBSTR(A.ACPN_DTM,5,2) = '10' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS PROC10
		        	,SUM(CASE WHEN A.ACPN_DTM IS NOT NULL AND SUBSTR(A.ACPN_DTM,5,2) = '11'  THEN 1 ELSE 0 END) AS ACPN11
                    ,SUM(CASE WHEN A.ACPN_DTM IS NOT NULL AND SUBSTR(A.ACPN_DTM,5,2) = '11' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS PROC11
		        	,SUM(CASE WHEN A.ACPN_DTM IS NOT NULL AND SUBSTR(A.ACPN_DTM,5,2) = '12'  THEN 1 ELSE 0 END) AS ACPN12
                    ,SUM(CASE WHEN A.ACPN_DTM IS NOT NULL AND SUBSTR(A.ACPN_DTM,5,2) = '12' AND A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS PROC12

		
		        from TBL_DSFT_ACPN_PROC A						<!-- 불만 접수 처리 -->	       		   
				        LEFT JOIN TBL_HC_HIST C
				               ON A.DSFT_ACPN_SEQ_NO = C.DSFT_ACPN_SEQ_NO		  
				        LEFT JOIN TBL_CRPN_CUST_BASE D
				       		   ON A.ORGN_PTR_ST_CD = D.CUST_ID        	    	  
				        LEFT JOIN TBL_USR B
				       		   ON A.DSPSR_ID = B.USR_ID 
				        LEFT JOIN TBL_HR_EMP_CD F
				       		   ON A.DSPSR_ID = F.EMP_NO
				        LEFT JOIN TBL_HR_DEPT_CD G 
				       		   ON F.BLNG_DEPT_CD = G.DEPT_CD
				        LEFT JOIN TBL_SAP_CD H	
				       		   ON (A.ORGN_ENTR_DV_CD = H.CD_ID AND H.CD_CLAS_CD = '1')	
				        LEFT JOIN TBL_DSFT_TAXN_TYP_CD I
				       		   ON A.DSFT_TAXN_TYP_CD = I.DSFT_TAXN_TYP_CD
				       		   
				where <!-- A.PROC_DTM IS NOT NULL AND -->
					 (A.DEL_YN = 'N' OR A.DEL_YN IS NULL)	
					   and A.DSPSR_CHRG_DEPT is not null			
		       		<dynamic>
		       			<!-- 년도별 -->   				    	
			    	    <isEqual property="cmb_gubun" compareValue="1">              
			                and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'                                                                  
			            </isEqual>
			            <!--  -->
			            <isEqual property="cmb_gubun" compareValue="2">
			            	<isEmpty property="cmb_half">
			            		and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'
			            	</isEmpty>              
			                <isEqual property="cmb_half" compareValue="1">
			                	and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0632000000'                                                                  
							</isEqual>	 
							<isEqual property="cmb_half" compareValue="2">
								and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '1232000000'
							</isEqual>	 
			            </isEqual>	 
			            <isEqual property="cmb_gubun" compareValue="3"> 
			            	<isEmpty>
								and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'	            	
			            	</isEmpty>    
			           		<isEqual property="cmb_qua" compareValue="1">
			           			and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0332000000'   
			           	  	</isEqual>
			           	  	<isEqual property="cmb_qua" compareValue="2">
			           	   		and A.ACPN_DTM between #time_key# || '0400000000' and #time_key# || '0632000000'   
			           	  	</isEqual>	 
			           	  	<isEqual property="cmb_qua" compareValue="3">
			           	   		and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '0932000000'   
			           	  	</isEqual>	 
		           	  		<isEqual property="cmb_qua" compareValue="4">
			           	   		and A.ACPN_DTM between #time_key# || '1000000000' and #time_key# || '1232000000'   
			           	  	</isEqual>	 	 
		            	</isEqual>	 				            
			    	 	<isEqual property="cmb_gubun" compareValue="4">              
			            	and A.ACPN_DTM between #time_key# || '00000000' and #time_key# || '32000000'                                                                  
			         	</isEqual>	
			    	 	<isEqual property="cmb_gubun" compareValue="5">              
			                and A.ACPN_DTM between #time_key# || '000000' and #time_key# || '240000'                                                                  
			         	</isEqual>
					
						<!-- 불만유형이 전체일 때는 두가지 경우 존재(전체, 품질&혼유)		-->				
						<isEmpty property="dsft_typ_cd">
							<isEqual property="dsft_typ_tot_gbn" compareValue="2">
								AND A.DSFT_TYP_CD IN ('CA','CK')
							</isEqual>
						</isEmpty>						
					  	<isNotEmpty prepend="AND" property="dsft_typ_cd">				<!-- 불만유형		-->
					    	A.DSFT_TYP_CD = #dsft_typ_cd#
					  	</isNotEmpty>
					  	<isNotEmpty prepend="AND" property="dsft_taxn_typ_cd">			<!-- 불만세부유형		-->
					    	A.DSFT_TAXN_TYP_CD = #dsft_taxn_typ_cd#
					  	</isNotEmpty>
				  		<isNotEmpty prepend="AND" property="orgn_ptr_st_cd">			<!-- 불만발생업체코드(가맹점SAP코드) -->
						    A.ORGN_PTR_ST_CD = #orgn_ptr_st_cd#
					  	</isNotEmpty>
					    <isNotEmpty prepend="AND" property="conn_chnl_kind_cd">			<!-- 접촉채널	-->
						    A.CONN_CHNL_KIND_CD = #conn_chnl_kind_cd#
					    </isNotEmpty>			  	
					  	<isNotEmpty prepend="AND" property="hgrk_dept_cd">				<!-- 부문/본부 -->
						    G.HGRK_DEPT_CD = #hgrk_dept_cd#
					  	</isNotEmpty>
					  	<isNotEmpty prepend="AND" property="dept_cd">					<!-- 처리팀 -->
						    G.DEPT_CD = #dept_cd#
					  	</isNotEmpty>
					  	<isNotEmpty prepend="AND" property="dspsr_id_nm">				<!-- 처리자명 		-->
						    (B.USR_NM LIKE '%'|| #dspsr_id_nm# ||'%' OR F.EMP_NM LIKE '%'|| #dspsr_id_nm# ||'%')
					  	</isNotEmpty>
				 		<isEqual property="hc_yn" compareValue="Y"> 					<!-- 해피콜여부  -->
				 			AND A.HC_YN = 'Y'
				 		</isEqual>
					 	<isEqual property="hc_yn" compareValue="N"> 					<!-- 해피콜여부  -->
					 		AND (A.HC_YN = 'N' OR A.HC_YN IS NULL)
					 	</isEqual>
					  	<isNotEmpty prepend="AND" property="attd_sft_cd">				<!-- 태도만족도 		-->
					  		(A.HC_YN = 'Y' AND C.ATTD_SFT_CD = #attd_sft_cd#)
					  	</isNotEmpty>
					  	<isNotEmpty prepend="AND" property="rslt_sft_cd">				<!-- 결과만족도 		-->
					  		(A.HC_YN = 'Y' AND C.RSLT_SFT_CD = #rslt_sft_cd#)
					  	</isNotEmpty>
					  	<isNotEmpty prepend="AND" property="hc_uabl_rsn_cd">			<!-- 해피콜불가사유		-->
					  		A.HC_UABL_RSN_CD = #hc_uabl_rsn_cd#
					  	</isNotEmpty>
					  	<isNotEmpty prepend="AND" property="prdct_cd">					<!-- 불만제품 		-->
						    A.PRDCT_CD = #prdct_cd#
					  	</isNotEmpty>			  				 	
					  	<isNotEmpty prepend="AND" property="prblm_penom_cd">			<!-- 현상 		-->
						    A.PRBLM_PENOM_CD = #prblm_penom_cd#
					  	</isNotEmpty>
				 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="1">  	<!-- 시료품질 점검결과		-->
				 			AND	A.VHCL_QLIT_DSFT_CAUS_CD_CUST IS NOT NULL
				 	  	</isEqual>
				 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="2">   	<!-- 시료품질 점검결과		-->
				 	  		AND	A.VHCL_QLIT_DSFT_CAUS_CD_PTR_ST IS NOT NULL
				 	  	</isEqual>
					  	<isNotEmpty prepend="AND" property="vhcl_biztr_qlit_dsft_typ_cd">			<!-- 품질불만유형 		-->
						    A.VHCL_BIZTR_QLIT_DSFT_TYP_CD = #vhcl_biztr_qlit_dsft_typ_cd#
					  	</isNotEmpty>
					 	<isEqual property="vhcl_biztr_yn" compareValue="Y"> 			<!-- Kixx 품질서비스차량 출동 -->
					 		AND A.VHCL_BIZTR_YN = 'Y'
					 	</isEqual>
					 	<isEqual property="vhcl_biztr_yn" compareValue="N"> 			<!-- Kixx 품질서비스차량 출동 -->
					 		AND (A.VHCL_BIZTR_YN = 'N' OR A.VHCL_BIZTR_YN IS NULL)
					 	</isEqual>		 	  	
					 	<isEqual property="rwrd_yn" compareValue="Y"> 					<!-- 보상여부 -->
					 		AND A.RWRD_YN = 'Y'
					 	</isEqual>
					 	<isEqual property="rwrd_yn" compareValue="N"> 					<!-- 보상여부 -->
					 		AND (A.RWRD_YN = 'N' OR A.RWRD_YN IS NULL)
					 	</isEqual>
					 	
					 	<isEqual property="cps_amt_gbn" compareValue="1"> 				
					 		<isEqual property="cps_amt" compareValue="1">				<!-- 주유소 보상금 1만원 미만-->
					 			AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 10000
					 		</isEqual>
					 		<isEqual property="cps_amt" compareValue="2">				<!-- 주유소 보상금 1만원 ~ 10만원-->
					 			AND (A.PTR_ST_CPS_AMT <![CDATA[>=]]> 10000 AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 100000)
					 		</isEqual>
							<isEqual property="cps_amt" compareValue="3">				<!-- 주유소 보상금 10만원 초과-->
					 			AND A.PTR_ST_CPS_AMT <![CDATA[>]]> 100000
					 		</isEqual>
					 	</isEqual>
					 	<isEqual property="cps_amt_gbn" compareValue="2"> 				
					 		<isEqual property="cps_amt" compareValue="1">				<!-- 회사 보상금 1만원 미만-->
					 			AND A.CO_CPS_AMT <![CDATA[<]]> 10000
					 		</isEqual>
					 		<isEqual property="cps_amt" compareValue="2">				<!-- 회사 보상금 1만원 ~ 10만원-->
					 			AND (A.CO_CPS_AMT <![CDATA[>=]]> 10000 AND A.CO_CPS_AMT <![CDATA[<]]> 100000)
					 		</isEqual>
							<isEqual property="cps_amt" compareValue="3">				<!-- 회사 보상금 10만원 초과-->
					 			AND A.CO_CPS_AMT <![CDATA[>]]> 100000
					 		</isEqual>
					 	</isEqual>
					 	<isEqual property="cps_amt_gbn" compareValue="3"> 				
					 		<isEqual property="cps_amt" compareValue="1">				<!-- 총 보상금 1만원 미만-->
					 			AND A.TOT_CPS_AMT <![CDATA[<]]> 10000
					 		</isEqual>
					 		<isEqual property="cps_amt" compareValue="2">				<!-- 총 보상금 1만원 ~ 10만원-->
					 			AND (A.TOT_CPS_AMT <![CDATA[>=]]> 10000 AND A.TOT_CPS_AMT <![CDATA[<]]> 100000)
					 		</isEqual>
							<isEqual property="cps_amt" compareValue="3">				<!-- 총 보상금 10만원 초과-->
					 			AND A.TOT_CPS_AMT <![CDATA[>]]> 100000
					 		</isEqual>
					 	</isEqual>
					 	
						<!--처리자구분에 체크항목이 하나도 없는 경우, 전체데이터가 조회된다.-->
					 	<isEqual property="cmp_handler" compareValue="1">   
					 		AND	A.DSPSR_YN_CNSLR = 'Y'
					 	</isEqual>
					 	<isEqual property="cmp_handler" compareValue="2">   
					 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y')
					 	</isEqual>
					 	<isEqual property="cmp_handler" compareValue="3">   
					 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
					 	</isEqual>
					 	<isEqual property="cmp_handler" compareValue="4">   
					 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
					 	</isEqual>
					 	<isEqual property="cmp_handler" compareValue="5">   
					 		AND	A.DSPSR_YN_DSFT_CHRG = 'Y'
					 	</isEqual>
					 	<isEqual property="cmp_handler" compareValue="6">   
					 		AND	A.DSPSR_YN_PART_HD = 'Y'
					 	</isEqual>
					 	<isEqual property="cmp_handler" compareValue="7">   
					 		AND	(A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
					 	</isEqual>
		       		</dynamic>  
			
				group by A.DSPSR_CHRG_DEPT
			   	order by A.DSPSR_CHRG_DEPT	
			   	) A			   	
	)A	
 	</select> 	
 <!-- 불만조회 - 조직별(불만세부유형) -->
 	<select id="Get_CMP_SELECT3" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
	   select case when HGRK_DEPT_CDNM is not null then HGRK_DEPT_CDNM else '전체' end as HGRK_DEPT_CDNM,
		        HGRK_DEPT_CD,
		       		    case when DEPT_CDNM is not null then DEPT_CDNM else '소계' end as    DEPT_CDNM
		        
		        ,round(CASE WHEN CA01_CNT > 0 then CA01_DT / CA01_CNT * 100 else null end,1) as CA01
		        ,round(CASE WHEN CA02_CNT > 0 then CA02_DT / CA02_CNT * 100 else null end,1) as CA02
		        ,round(CASE WHEN CA03_CNT > 0 then CA03_DT / CA03_CNT * 100 else null end,1) as CA03
		        ,round(CASE WHEN CB01_CNT > 0 then CB01_DT / CB01_CNT * 100 else null end,1) as CB01
		        ,round(CASE WHEN CB02_CNT > 0 then CB02_DT / CB02_CNT * 100 else null end,1) as CB02
		        ,round(CASE WHEN CB03_CNT > 0 then CB03_DT / CB03_CNT * 100 else null end,1) as CB03
		        ,round(CASE WHEN CB04_CNT > 0 then CB04_DT / CB04_CNT * 100 else null end,1) as CB04
		        ,round(CASE WHEN CB05_CNT > 0 then CB05_DT / CB05_CNT * 100 else null end,1) as CB05
		        ,round(CASE WHEN CB06_CNT > 0 then CB06_DT / CB06_CNT * 100 else null end,1) as CB06
		        ,round(CASE WHEN CB07_CNT > 0 then CB07_DT / CB07_CNT * 100 else null end,1) as CB07
		        ,round(CASE WHEN CB08_CNT > 0 then CB08_DT / CB08_CNT * 100 else null end,1) as CB08
		        ,round(CASE WHEN CB09_CNT > 0 then CB09_DT / CB09_CNT * 100 else null end,1) as CB09
		        ,round(CASE WHEN CB10_CNT > 0 then CB10_DT / CB10_CNT * 100 else null end,1) as CB10
		        ,round(CASE WHEN CC01_CNT > 0 then CC01_DT / CC01_CNT * 100 else null end,1) as CC01
		        ,round(CASE WHEN CC02_CNT > 0 then CC02_DT / CC02_CNT * 100 else null end,1) as CC02
		        ,round(CASE WHEN CC03_CNT > 0 then CC03_DT / CC03_CNT * 100 else null end,1) as CC03
		        ,round(CASE WHEN CC04_CNT > 0 then CC04_DT / CC04_CNT * 100 else null end,1) as CC04
		        ,round(CASE WHEN CD01_CNT > 0 then CD01_DT / CD01_CNT * 100 else null end,1) as CD01
		        ,round(CASE WHEN CE01_CNT > 0 then CE01_DT / CE01_CNT * 100 else null end,1) as CE01
		        ,round(CASE WHEN CE02_CNT > 0 then CE02_DT / CE02_CNT * 100 else null end,1) as CE02
		        ,round(CASE WHEN CE03_CNT > 0 then CE03_DT / CE03_CNT * 100 else null end,1) as CE03
		        ,round(CASE WHEN CF01_CNT > 0 then CF01_DT / CF01_CNT * 100 else null end,1) as CF01
		        ,round(CASE WHEN CG01_CNT > 0 then CG01_DT / CG01_CNT * 100 else null end,1) as CG01
		        ,round(CASE WHEN CH01_CNT > 0 then CH01_DT / CH01_CNT * 100 else null end,1) as CH01
		        ,round(CASE WHEN CI01_CNT > 0 then CI01_DT / CI01_CNT * 100 else null end,1) as CI01
		        ,round(CASE WHEN CJ01_CNT > 0 then CJ01_DT / CJ01_CNT * 100 else null end,1) as CJ01
		        ,round(CASE WHEN CK01_CNT > 0 then CK01_DT / CK01_CNT * 100 else null end,1) as CK01
		        ,round(CASE WHEN CL01_CNT > 0 then CL01_DT / CL01_CNT * 100 else null end,1) as CL01
		        ,round(CASE WHEN CM01_CNT > 0 then CM01_DT / CM01_CNT * 100 else null end,1) as CM01
		        ,round(CASE WHEN CM02_CNT > 0 then CM02_DT / CM02_CNT * 100 else null end,1) as CM02
		        ,round(CASE WHEN CM03_CNT > 0 then CM03_DT / CM03_CNT * 100 else null end,1) as CM03
		        ,round(CASE WHEN CM04_CNT > 0 then CM04_DT / CM04_CNT * 100 else null end,1) as CM04
		        ,round(CASE WHEN CM05_CNT > 0 then CM05_DT / CM05_CNT * 100 else null end,1) as CM05
		        ,round(CASE WHEN CN01_CNT > 0 then CN01_DT / CN01_CNT * 100 else null end,1) as CN01
		        ,round(CASE WHEN CN02_CNT > 0 then CN02_DT / CN02_CNT * 100 else null end,1) as CN02
		        ,round(CASE WHEN CN03_CNT > 0 then CN03_DT / CN03_CNT * 100 else null end,1) as CN03
		        ,round(CASE WHEN CO01_CNT > 0 then CO01_DT / CO01_CNT * 100 else null end,1) as CO01
		        ,round(CASE WHEN CO02_CNT > 0 then CO02_DT / CO02_CNT * 100 else null end,1) as CO02
		        ,round(CASE WHEN CO03_CNT > 0 then CO03_DT / CO03_CNT * 100 else null end,1) as CO03
		        ,round(CASE WHEN CO04_CNT > 0 then CO04_DT / CO04_CNT * 100 else null end,1) as CO04
		        ,round(CASE WHEN CO05_CNT > 0 then CO05_DT / CO05_CNT * 100 else null end,1) as CO05
		        ,round(CASE WHEN CP01_CNT > 0 then CP01_DT / CP01_CNT * 100 else null end,1) as CP01
		        ,round(CASE WHEN CP02_CNT > 0 then CP02_DT / CP02_CNT * 100 else null end,1) as CP02
		        ,round(CASE WHEN CP03_CNT > 0 then CP03_DT / CP03_CNT * 100 else null end,1) as CP03
		        ,round(CASE WHEN CQ01_CNT > 0 then CQ01_DT / CQ01_CNT * 100 else null end,1) as CQ01
		        ,round(CASE WHEN CQ02_CNT > 0 then CQ02_DT / CQ02_CNT * 100 else null end,1) as CQ02
		        ,round(CASE WHEN CQ03_CNT > 0 then CQ03_DT / CQ03_CNT * 100 else null end,1) as CQ03
		        ,round(CASE WHEN CQ04_CNT > 0 then CQ04_DT / CQ04_CNT * 100 else null end,1) as CQ04
		        ,round(CASE WHEN CR01_CNT > 0 then CR01_DT / CR01_CNT * 100 else null end,1) as CR01
		        ,round(CASE WHEN DA01_CNT > 0 then DA01_DT / DA01_CNT * 100 else null end,1) as DA01 
		        ,round(CASE WHEN DA02_CNT > 0 then DA02_DT / DA02_CNT * 100 else null end,1) as DA02
		        ,round(CASE WHEN DA03_CNT > 0 then DA03_DT / DA03_CNT * 100 else null end,1) as DA03
		        ,round(CASE WHEN DA04_CNT > 0 then DA04_DT / DA04_CNT * 100 else null end,1) as DA04
		        ,round(CASE WHEN DA05_CNT > 0 then DA05_DT / DA05_CNT * 100 else null end,1) as DA05
		        ,round(CASE WHEN DA06_CNT > 0 then DA06_DT / DA06_CNT * 100 else null end,1) as DA06
		        ,round(CASE WHEN DA07_CNT > 0 then DA07_DT / DA07_CNT * 100 else null end,1) as DA07
		        ,round(CASE WHEN DB01_CNT > 0 then DB01_DT / DB01_CNT * 100 else null end,1) as DB01 
		        ,round(CASE WHEN DB02_CNT > 0 then DB02_DT / DB02_CNT * 100 else null end,1) as DB02
		        ,round(CASE WHEN DB03_CNT > 0 then DB03_DT / DB03_CNT * 100 else null end,1) as DB03
		        ,round(CASE WHEN DB04_CNT > 0 then DB04_DT / DB04_CNT * 100 else null end,1) as DB04
		        ,round(CASE WHEN DB05_CNT > 0 then DB05_DT / DB05_CNT * 100 else null end,1) as DB05
		        ,round(CASE WHEN DB06_CNT > 0 then DB06_DT / DB06_CNT * 100 else null end,1) as DB06
		        ,round(CASE WHEN DC01_CNT > 0 then DC01_DT / DC01_CNT * 100 else null end,1) as DC01 
		        ,round(CASE WHEN DC02_CNT > 0 then DC02_DT / DC02_CNT * 100 else null end,1) as DC02
		        ,round(CASE WHEN DC03_CNT > 0 then DC03_DT / DC03_CNT * 100 else null end,1) as DC03
		        ,round(CASE WHEN DD01_CNT > 0 then DD01_DT / DD01_CNT * 100 else null end,1) as DD01 
		        ,round(CASE WHEN DD02_CNT > 0 then DD02_DT / DD02_CNT * 100 else null end,1) as DD02
		        ,round(CASE WHEN DD03_CNT > 0 then DD03_DT / DD03_CNT * 100 else null end,1) as DD03
		        ,round(CASE WHEN DD04_CNT > 0 then DD04_DT / DD04_CNT * 100 else null end,1) as DD04
		        ,round(CASE WHEN DD05_CNT > 0 then DD05_DT / DD05_CNT * 100 else null end,1) as DD05
		        ,round(CASE WHEN DD06_CNT > 0 then DD06_DT / DD06_CNT * 100 else null end,1) as DD06
		        ,round(CASE WHEN DE01_CNT > 0 then DE01_DT / DE01_CNT * 100 else null end,1) as DE01 
		        ,round(CASE WHEN DE02_CNT > 0 then DE02_DT / DE02_CNT * 100 else null end,1) as DE02
		        ,round(CASE WHEN DE03_CNT > 0 then DE03_DT / DE03_CNT * 100 else null end,1) as DE03
		        ,round(CASE WHEN DF01_CNT > 0 then DF01_DT / DF01_CNT * 100 else null end,1) as DF01 
		        ,round(CASE WHEN DF02_CNT > 0 then DF02_DT / DF02_CNT * 100 else null end,1) as DF02
		        ,round(CASE WHEN DF03_CNT > 0 then DF03_DT / DF03_CNT * 100 else null end,1) as DF03
		        ,round(CASE WHEN DF04_CNT > 0 then DF04_DT / DF04_CNT * 100 else null end,1) as DF04
		        ,round(CASE WHEN DG01_CNT > 0 then DG01_DT / DG01_CNT * 100 else null end,1) as DG01 
		        ,round(CASE WHEN DG02_CNT > 0 then DG02_DT / DG02_CNT * 100 else null end,1) as DG02
		        ,round(CASE WHEN DG03_CNT > 0 then DG03_DT / DG03_CNT * 100 else null end,1) as DG03
		        ,round(CASE WHEN DG_ALL_CNT > 0 then DG_ALL / DG_ALL_CNT * 100 else null end,1) as DG_ALL
		        
		        
		        from( 
		        select G.HGRK_DEPT_CDNM,G.HGRK_DEPT_CD,  G.DEPT_CDNM
		        
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CA01' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CA01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CA01' THEN 1 ELSE 0 END) AS CA01_CNT
    		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CA02' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CA02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CA02' THEN 1 ELSE 0 END) AS CA02_CNT
    		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CA03' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CA03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CA03' THEN 1 ELSE 0 END) AS CA03_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB01' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CB01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB01' THEN 1 ELSE 0 END) AS CB01_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB02' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CB02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB02' THEN 1 ELSE 0 END) AS CB02_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB03' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CB03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB03' THEN 1 ELSE 0 END) AS CB03_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB04' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CB04_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB04' THEN 1 ELSE 0 END) AS CB04_CNT
    		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB05' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CB05_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB05' THEN 1 ELSE 0 END) AS CB05_CNT                
    		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB06' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CB06_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB06' THEN 1 ELSE 0 END) AS CB06_CNT
    		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB07' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CB07_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB07' THEN 1 ELSE 0 END) AS CB07_CNT                 	
    		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB08' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CB08_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB08' THEN 1 ELSE 0 END) AS CB08_CNT
    		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB09' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CB09_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB09' THEN 1 ELSE 0 END) AS CB09_CNT
    		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB10' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CB10_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB10' THEN 1 ELSE 0 END) AS CB10_CNT                
    		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CC01' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CC01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CC01' THEN 1 ELSE 0 END) AS CC01_CNT
    		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CC02' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CC02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CC02' THEN 1 ELSE 0 END) AS CC02_CNT
    		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CC03' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CC03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CC03' THEN 1 ELSE 0 END) AS CC03_CNT
    		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CC04' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CC04_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CC04' THEN 1 ELSE 0 END) AS CC04_CNT
    		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CD01' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CD01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CD01' THEN 1 ELSE 0 END) AS CD01_CNT
    		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CE01' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CE01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CE01' THEN 1 ELSE 0 END) AS CE01_CNT
    		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CE02' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CE02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CE02' THEN 1 ELSE 0 END) AS CE02_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CE03' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CE03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CE03' THEN 1 ELSE 0 END) AS CE03_CNT		     
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CF01' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CF01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CF01' THEN 1 ELSE 0 END) AS CF01_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CG01' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CG01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CG01' THEN 1 ELSE 0 END) AS CG01_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CH01' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CH01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CH01' THEN 1 ELSE 0 END) AS CH01_CNT                 
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CI01' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CI01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CI01' THEN 1 ELSE 0 END) AS CI01_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CJ01' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CJ01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CJ01' THEN 1 ELSE 0 END) AS CJ01_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CK01' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CK01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CK01' THEN 1 ELSE 0 END) AS CK01_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CL01' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CL01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CL01' THEN 1 ELSE 0 END) AS CL01_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CM01' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CM01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CM01' THEN 1 ELSE 0 END) AS CM01_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CM02' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CM02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CM02' THEN 1 ELSE 0 END) AS CM02_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CM03' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CM03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CM03' THEN 1 ELSE 0 END) AS CM03_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CM04' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CM04_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CM04' THEN 1 ELSE 0 END) AS CM04_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CM05' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CM05_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CM05' THEN 1 ELSE 0 END) AS CM05_CNT                
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CN01' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CN01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CN01' THEN 1 ELSE 0 END) AS CN01_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CN02' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CN02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CN02' THEN 1 ELSE 0 END) AS CN02_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CN03' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CN03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CN03' THEN 1 ELSE 0 END) AS CN03_CNT		        
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CO01' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CO01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CO01' THEN 1 ELSE 0 END) AS CO01_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CO02' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CO02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CO02' THEN 1 ELSE 0 END) AS CO02_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CO03' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CO03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CO03' THEN 1 ELSE 0 END) AS CO03_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CO04' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CO04_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CO04' THEN 1 ELSE 0 END) AS CO04_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CO05' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CO05_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CO05' THEN 1 ELSE 0 END) AS CO05_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CP01' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CP01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CP01' THEN 1 ELSE 0 END) AS CP01_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CP02' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CP02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CP02' THEN 1 ELSE 0 END) AS CP02_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CP03' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CP03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CP03' THEN 1 ELSE 0 END) AS CP03_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CQ01' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CQ01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CQ01' THEN 1 ELSE 0 END) AS CQ01_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CQ02' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CQ02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CQ02' THEN 1 ELSE 0 END) AS CQ02_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CQ03' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CQ03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CQ03' THEN 1 ELSE 0 END) AS CQ03_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CQ04' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CQ04_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CQ04' THEN 1 ELSE 0 END) AS CQ04_CNT                 
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CR01' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CR01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CR01' THEN 1 ELSE 0 END) AS CR01_CNT                 
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA01' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DA01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA01' THEN 1 ELSE 0 END) AS DA01_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA02' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DA02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA02' THEN 1 ELSE 0 END) AS DA02_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA03' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DA03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA03' THEN 1 ELSE 0 END) AS DA03_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA04' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DA04_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA04' THEN 1 ELSE 0 END) AS DA04_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA05' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DA05_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA05' THEN 1 ELSE 0 END) AS DA05_CNT                
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA06' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DA06_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA06' THEN 1 ELSE 0 END) AS DA06_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA07' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DA07_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA07' THEN 1 ELSE 0 END) AS DA07_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DB01' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DB01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DB01' THEN 1 ELSE 0 END) AS DB01_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DB02' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DB02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DB02' THEN 1 ELSE 0 END) AS DB02_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DB03' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DB03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DB03' THEN 1 ELSE 0 END) AS DB03_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DB04' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DB04_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DB04' THEN 1 ELSE 0 END) AS DB04_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DB05' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DB05_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DB05' THEN 1 ELSE 0 END) AS DB05_CNT                
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DB06' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DB06_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DB06' THEN 1 ELSE 0 END) AS DB06_CNT                
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DC01' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DC01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DC01' THEN 1 ELSE 0 END) AS DC01_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DC02' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DC02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DC02' THEN 1 ELSE 0 END) AS DC02_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DC03' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DC03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DC03' THEN 1 ELSE 0 END) AS DC03_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DD01' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DD01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DD01' THEN 1 ELSE 0 END) AS DD01_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DD02' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DD02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DD02' THEN 1 ELSE 0 END) AS DD02_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DD03' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DD03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DD03' THEN 1 ELSE 0 END) AS DD03_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DD04' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DD04_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DD04' THEN 1 ELSE 0 END) AS DD04_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DD05' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DD05_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DD05' THEN 1 ELSE 0 END) AS DD05_CNT                
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DD06' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DD06_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DD06' THEN 1 ELSE 0 END) AS DD06_CNT		       
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DE01' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DE01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DE01' THEN 1 ELSE 0 END) AS DE01_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DE02' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DE02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DE02' THEN 1 ELSE 0 END) AS DE02_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DE03' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DE03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DE03' THEN 1 ELSE 0 END) AS DE03_CNT                 
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DF01' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DF01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DF01' THEN 1 ELSE 0 END) AS DF01_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DF02' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DF02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DF02' THEN 1 ELSE 0 END) AS DF02_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DF03' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DF03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DF03' THEN 1 ELSE 0 END) AS DF03_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DF04' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DF04_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DF04' THEN 1 ELSE 0 END) AS DF04_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DG01' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DG01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DG01' THEN 1 ELSE 0 END) AS DG01_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DG02' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DG02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DG02' THEN 1 ELSE 0 END) AS DG02_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DG03' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DG03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DG03' THEN 1 ELSE 0 END) AS DG03_CNT
                    ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD is not null and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DG_ALL
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD is not null THEN 1 ELSE 0 END) AS DG_ALL_CNT
                
		            FROM TBL_DSFT_ACPN_PROC A					
			        LEFT JOIN TBL_HC_HIST C
			               ON A.DSFT_ACPN_SEQ_NO = C.DSFT_ACPN_SEQ_NO		  
			        LEFT JOIN TBL_CRPN_CUST_BASE D
			       		   ON A.ORGN_PTR_ST_CD = D.CUST_ID        	    	  
			        LEFT JOIN TBL_USR B
			       		   ON A.DSPSR_ID = B.USR_ID 
			        LEFT JOIN TBL_HR_EMP_CD F
			       		   ON A.DSPSR_ID = F.EMP_NO
			        LEFT JOIN TBL_HR_DEPT_CD G 
			       		   ON F.BLNG_DEPT_CD = G.DEPT_CD
			        LEFT JOIN TBL_SAP_CD H	
			       		   ON (A.ORGN_ENTR_DV_CD = H.CD_ID AND H.CD_CLAS_CD = '1')	
			        LEFT JOIN TBL_DSFT_TAXN_TYP_CD I
			       		   ON A.DSFT_TAXN_TYP_CD = I.DSFT_TAXN_TYP_CD
			       		   
			WHERE G.HGRK_DEPT_CD IN ('E00054','E00056','T21000','E00053','E00042','E00044','JD1000','E00048')
							
		   			AND (A.DEL_YN = 'N' OR A.DEL_YN IS NULL) 
		   			
		   				<dynamic>
		       			<!-- 년도별 -->   				    	
			    	    <isEqual property="cmb_gubun" compareValue="1">              
			                and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'                                                                  
			            </isEqual>
			            <!--  -->
			            <isEqual property="cmb_gubun" compareValue="2">
			            	<isEmpty property="cmb_half">
			            		and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'
			            	</isEmpty>              
			                <isEqual property="cmb_half" compareValue="1">
			                	and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0632000000'                                                                  
							</isEqual>	 
							<isEqual property="cmb_half" compareValue="2">
								and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '1232000000'
							</isEqual>	 
			            </isEqual>	 
			            <isEqual property="cmb_gubun" compareValue="3"> 
			            	<isEmpty>
								and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'	            	
			            	</isEmpty>    
			           		<isEqual property="cmb_qua" compareValue="1">
			           			and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0332000000'   
			           	  	</isEqual>
			           	  	<isEqual property="cmb_qua" compareValue="2">
			           	   		and A.ACPN_DTM between #time_key# || '0400000000' and #time_key# || '0632000000'   
			           	  	</isEqual>	 
			           	  	<isEqual property="cmb_qua" compareValue="3">
			           	   		and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '0932000000'   
			           	  	</isEqual>	 
		           	  		<isEqual property="cmb_qua" compareValue="4">
			           	   		and A.ACPN_DTM between #time_key# || '1000000000' and #time_key# || '1232000000'   
			           	  	</isEqual>	 	 
		            	</isEqual>	 				            
			    	 	<isEqual property="cmb_gubun" compareValue="4">              
			            	and A.ACPN_DTM between #time_key# || '00000000' and #time_key# || '32000000'                                                                  
			         	</isEqual>	
			    	 	<isEqual property="cmb_gubun" compareValue="5">              
			                and A.ACPN_DTM between #time_key# || '000000' and #time_key# || '240000'                                                                  
			         	</isEqual>
					
						<!-- 불만유형이 전체일 때는 두가지 경우 존재(전체, 품질&혼유)		-->				
						<isEmpty property="dsft_typ_cd">
							<isEqual property="dsft_typ_tot_gbn" compareValue="2">
								AND A.DSFT_TYP_CD IN ('CA','CK')
							</isEqual>
						</isEmpty>						
					  	<isNotEmpty prepend="AND" property="dsft_typ_cd">				<!-- 불만유형		-->
					    	A.DSFT_TYP_CD = #dsft_typ_cd#
					  	</isNotEmpty>
					  	<isNotEmpty prepend="AND" property="dsft_taxn_typ_cd">			<!-- 불만세부유형		-->
					    	A.DSFT_TAXN_TYP_CD = #dsft_taxn_typ_cd#
					  	</isNotEmpty>
				  		<isNotEmpty prepend="AND" property="orgn_ptr_st_cd">			<!-- 불만발생업체코드(가맹점SAP코드) -->
						    A.ORGN_PTR_ST_CD = #orgn_ptr_st_cd#
					  	</isNotEmpty>
					    <isNotEmpty prepend="AND" property="conn_chnl_kind_cd">			<!-- 접촉채널	-->
						    A.CONN_CHNL_KIND_CD = #conn_chnl_kind_cd#
					    </isNotEmpty>			  	
					  	<isNotEmpty prepend="AND" property="hgrk_dept_cd">				<!-- 부문/본부 -->
						    G.HGRK_DEPT_CD = #hgrk_dept_cd#
					  	</isNotEmpty>
					  	<isNotEmpty prepend="AND" property="dept_cd">					<!-- 처리팀 -->
						    G.DEPT_CD = #dept_cd#
					  	</isNotEmpty>
					  	<isNotEmpty prepend="AND" property="dspsr_id_nm">				<!-- 처리자명 		-->
						    (B.USR_NM LIKE '%'|| #dspsr_id_nm# ||'%' OR F.EMP_NM LIKE '%'|| #dspsr_id_nm# ||'%')
					  	</isNotEmpty>
				 		<isEqual property="hc_yn" compareValue="Y"> 					<!-- 해피콜여부  -->
				 			AND A.HC_YN = 'Y'
				 		</isEqual>
					 	<isEqual property="hc_yn" compareValue="N"> 					<!-- 해피콜여부  -->
					 		AND (A.HC_YN = 'N' OR A.HC_YN IS NULL)
					 	</isEqual>
					  	<isNotEmpty prepend="AND" property="attd_sft_cd">				<!-- 태도만족도 		-->
					  		(A.HC_YN = 'Y' AND C.ATTD_SFT_CD = #attd_sft_cd#)
					  	</isNotEmpty>
					  	<isNotEmpty prepend="AND" property="rslt_sft_cd">				<!-- 결과만족도 		-->
					  		(A.HC_YN = 'Y' AND C.RSLT_SFT_CD = #rslt_sft_cd#)
					  	</isNotEmpty>
					  	<isNotEmpty prepend="AND" property="hc_uabl_rsn_cd">			<!-- 해피콜불가사유		-->
					  		A.HC_UABL_RSN_CD = #hc_uabl_rsn_cd#
					  	</isNotEmpty>
					  	<isNotEmpty prepend="AND" property="prdct_cd">					<!-- 불만제품 		-->
						    A.PRDCT_CD = #prdct_cd#
					  	</isNotEmpty>			  				 	
					  	<isNotEmpty prepend="AND" property="prblm_penom_cd">			<!-- 현상 		-->
						    A.PRBLM_PENOM_CD = #prblm_penom_cd#
					  	</isNotEmpty>
				 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="1">  	<!-- 시료품질 점검결과		-->
				 			AND	A.VHCL_QLIT_DSFT_CAUS_CD_CUST IS NOT NULL
				 	  	</isEqual>
				 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="2">   	<!-- 시료품질 점검결과		-->
				 	  		AND	A.VHCL_QLIT_DSFT_CAUS_CD_PTR_ST IS NOT NULL
				 	  	</isEqual>
					  	<isNotEmpty prepend="AND" property="vhcl_biztr_qlit_dsft_typ_cd">			<!-- 품질불만유형 		-->
						    A.VHCL_BIZTR_QLIT_DSFT_TYP_CD = #vhcl_biztr_qlit_dsft_typ_cd#
					  	</isNotEmpty>
					 	<isEqual property="vhcl_biztr_yn" compareValue="Y"> 			<!-- Kixx 품질서비스차량 출동 -->
					 		AND A.VHCL_BIZTR_YN = 'Y'
					 	</isEqual>
					 	<isEqual property="vhcl_biztr_yn" compareValue="N"> 			<!-- Kixx 품질서비스차량 출동 -->
					 		AND (A.VHCL_BIZTR_YN = 'N' OR A.VHCL_BIZTR_YN IS NULL)
					 	</isEqual>		 	  	
					 	<isEqual property="rwrd_yn" compareValue="Y"> 					<!-- 보상여부 -->
					 		AND A.RWRD_YN = 'Y'
					 	</isEqual>
					 	<isEqual property="rwrd_yn" compareValue="N"> 					<!-- 보상여부 -->
					 		AND (A.RWRD_YN = 'N' OR A.RWRD_YN IS NULL)
					 	</isEqual>
					 	
					 	<isEqual property="cps_amt_gbn" compareValue="1"> 				
					 		<isEqual property="cps_amt" compareValue="1">				<!-- 주유소 보상금 1만원 미만-->
					 			AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 10000
					 		</isEqual>
					 		<isEqual property="cps_amt" compareValue="2">				<!-- 주유소 보상금 1만원 ~ 10만원-->
					 			AND (A.PTR_ST_CPS_AMT <![CDATA[>=]]> 10000 AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 100000)
					 		</isEqual>
							<isEqual property="cps_amt" compareValue="3">				<!-- 주유소 보상금 10만원 초과-->
					 			AND A.PTR_ST_CPS_AMT <![CDATA[>]]> 100000
					 		</isEqual>
					 	</isEqual>
					 	<isEqual property="cps_amt_gbn" compareValue="2"> 				
					 		<isEqual property="cps_amt" compareValue="1">				<!-- 회사 보상금 1만원 미만-->
					 			AND A.CO_CPS_AMT <![CDATA[<]]> 10000
					 		</isEqual>
					 		<isEqual property="cps_amt" compareValue="2">				<!-- 회사 보상금 1만원 ~ 10만원-->
					 			AND (A.CO_CPS_AMT <![CDATA[>=]]> 10000 AND A.CO_CPS_AMT <![CDATA[<]]> 100000)
					 		</isEqual>
							<isEqual property="cps_amt" compareValue="3">				<!-- 회사 보상금 10만원 초과-->
					 			AND A.CO_CPS_AMT <![CDATA[>]]> 100000
					 		</isEqual>
					 	</isEqual>
					 	<isEqual property="cps_amt_gbn" compareValue="3"> 				
					 		<isEqual property="cps_amt" compareValue="1">				<!-- 총 보상금 1만원 미만-->
					 			AND A.TOT_CPS_AMT <![CDATA[<]]> 10000
					 		</isEqual>
					 		<isEqual property="cps_amt" compareValue="2">				<!-- 총 보상금 1만원 ~ 10만원-->
					 			AND (A.TOT_CPS_AMT <![CDATA[>=]]> 10000 AND A.TOT_CPS_AMT <![CDATA[<]]> 100000)
					 		</isEqual>
							<isEqual property="cps_amt" compareValue="3">				<!-- 총 보상금 10만원 초과-->
					 			AND A.TOT_CPS_AMT <![CDATA[>]]> 100000
					 		</isEqual>
					 	</isEqual>
					 	
						<!--처리자구분에 체크항목이 하나도 없는 경우, 전체데이터가 조회된다.-->
					 	<isEqual property="cmp_handler" compareValue="1">   
					 		AND	A.DSPSR_YN_CNSLR = 'Y'
					 	</isEqual>
					 	<isEqual property="cmp_handler" compareValue="2">   
					 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y')
					 	</isEqual>
					 	<isEqual property="cmp_handler" compareValue="3">   
					 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
					 	</isEqual>
					 	<isEqual property="cmp_handler" compareValue="4">   
					 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
					 	</isEqual>
					 	<isEqual property="cmp_handler" compareValue="5">   
					 		AND	A.DSPSR_YN_DSFT_CHRG = 'Y'
					 	</isEqual>
					 	<isEqual property="cmp_handler" compareValue="6">   
					 		AND	A.DSPSR_YN_PART_HD = 'Y'
					 	</isEqual>
					 	<isEqual property="cmp_handler" compareValue="7">   
					 		AND	(A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
					 	</isEqual>
		       		</dynamic>  
		   			
		   			
		   			GROUP BY ROLLUP(G.HGRK_DEPT_CDNM,G.HGRK_DEPT_CD, G.DEPT_CDNM) 
		   			having (HGRK_DEPT_CD) is not null
		   			order by G.HGRK_DEPT_CDNM,G.HGRK_DEPT_CD, G.DEPT_CDNM
		   		)
	union all 
	
	   select case when HGRK_DEPT_CDNM is not null then HGRK_DEPT_CDNM else '전체' end as HGRK_DEPT_CDNM,
		        HGRK_DEPT_CD,
		       		    case when DEPT_CDNM is not null then DEPT_CDNM else '합계' end as    DEPT_CDNM
		        
		        ,round(CASE WHEN CA01_CNT > 0 then CA01_DT / CA01_CNT * 100 else null end,1) as CA01
		        ,round(CASE WHEN CA02_CNT > 0 then CA02_DT / CA02_CNT * 100 else null end,1) as CA02
		        ,round(CASE WHEN CA03_CNT > 0 then CA03_DT / CA03_CNT * 100 else null end,1) as CA03
		        ,round(CASE WHEN CB01_CNT > 0 then CB01_DT / CB01_CNT * 100 else null end,1) as CB01
		        ,round(CASE WHEN CB02_CNT > 0 then CB02_DT / CB02_CNT * 100 else null end,1) as CB02
		        ,round(CASE WHEN CB03_CNT > 0 then CB03_DT / CB03_CNT * 100 else null end,1) as CB03
		        ,round(CASE WHEN CB04_CNT > 0 then CB04_DT / CB04_CNT * 100 else null end,1) as CB04
		        ,round(CASE WHEN CB05_CNT > 0 then CB05_DT / CB05_CNT * 100 else null end,1) as CB05
		        ,round(CASE WHEN CB06_CNT > 0 then CB06_DT / CB06_CNT * 100 else null end,1) as CB06
		        ,round(CASE WHEN CB07_CNT > 0 then CB07_DT / CB07_CNT * 100 else null end,1) as CB07
		        ,round(CASE WHEN CB08_CNT > 0 then CB08_DT / CB08_CNT * 100 else null end,1) as CB08
		        ,round(CASE WHEN CB09_CNT > 0 then CB09_DT / CB09_CNT * 100 else null end,1) as CB09
		        ,round(CASE WHEN CB10_CNT > 0 then CB10_DT / CB10_CNT * 100 else null end,1) as CB10
		        ,round(CASE WHEN CC01_CNT > 0 then CC01_DT / CC01_CNT * 100 else null end,1) as CC01
		        ,round(CASE WHEN CC02_CNT > 0 then CC02_DT / CC02_CNT * 100 else null end,1) as CC02
		        ,round(CASE WHEN CC03_CNT > 0 then CC03_DT / CC03_CNT * 100 else null end,1) as CC03
		        ,round(CASE WHEN CC04_CNT > 0 then CC04_DT / CC04_CNT * 100 else null end,1) as CC04
		        ,round(CASE WHEN CD01_CNT > 0 then CD01_DT / CD01_CNT * 100 else null end,1) as CD01
		        ,round(CASE WHEN CE01_CNT > 0 then CE01_DT / CE01_CNT * 100 else null end,1) as CE01
		        ,round(CASE WHEN CE02_CNT > 0 then CE02_DT / CE02_CNT * 100 else null end,1) as CE02
		        ,round(CASE WHEN CE03_CNT > 0 then CE03_DT / CE03_CNT * 100 else null end,1) as CE03
		        ,round(CASE WHEN CF01_CNT > 0 then CF01_DT / CF01_CNT * 100 else null end,1) as CF01
		        ,round(CASE WHEN CG01_CNT > 0 then CG01_DT / CG01_CNT * 100 else null end,1) as CG01
		        ,round(CASE WHEN CH01_CNT > 0 then CH01_DT / CH01_CNT * 100 else null end,1) as CH01
		        ,round(CASE WHEN CI01_CNT > 0 then CI01_DT / CI01_CNT * 100 else null end,1) as CI01
		        ,round(CASE WHEN CJ01_CNT > 0 then CJ01_DT / CJ01_CNT * 100 else null end,1) as CJ01
		        ,round(CASE WHEN CK01_CNT > 0 then CK01_DT / CK01_CNT * 100 else null end,1) as CK01
		        ,round(CASE WHEN CL01_CNT > 0 then CL01_DT / CL01_CNT * 100 else null end,1) as CL01
		        ,round(CASE WHEN CM01_CNT > 0 then CM01_DT / CM01_CNT * 100 else null end,1) as CM01
		        ,round(CASE WHEN CM02_CNT > 0 then CM02_DT / CM02_CNT * 100 else null end,1) as CM02
		        ,round(CASE WHEN CM03_CNT > 0 then CM03_DT / CM03_CNT * 100 else null end,1) as CM03
		        ,round(CASE WHEN CM04_CNT > 0 then CM04_DT / CM04_CNT * 100 else null end,1) as CM04
		        ,round(CASE WHEN CM05_CNT > 0 then CM05_DT / CM05_CNT * 100 else null end,1) as CM05
		        ,round(CASE WHEN CN01_CNT > 0 then CN01_DT / CN01_CNT * 100 else null end,1) as CN01
		        ,round(CASE WHEN CN02_CNT > 0 then CN02_DT / CN02_CNT * 100 else null end,1) as CN02
		        ,round(CASE WHEN CN03_CNT > 0 then CN03_DT / CN03_CNT * 100 else null end,1) as CN03
		        ,round(CASE WHEN CO01_CNT > 0 then CO01_DT / CO01_CNT * 100 else null end,1) as CO01
		        ,round(CASE WHEN CO02_CNT > 0 then CO02_DT / CO02_CNT * 100 else null end,1) as CO02
		        ,round(CASE WHEN CO03_CNT > 0 then CO03_DT / CO03_CNT * 100 else null end,1) as CO03
		        ,round(CASE WHEN CO04_CNT > 0 then CO04_DT / CO04_CNT * 100 else null end,1) as CO04
		        ,round(CASE WHEN CO05_CNT > 0 then CO05_DT / CO05_CNT * 100 else null end,1) as CO05
		        ,round(CASE WHEN CP01_CNT > 0 then CP01_DT / CP01_CNT * 100 else null end,1) as CP01
		        ,round(CASE WHEN CP02_CNT > 0 then CP02_DT / CP02_CNT * 100 else null end,1) as CP02
		        ,round(CASE WHEN CP03_CNT > 0 then CP03_DT / CP03_CNT * 100 else null end,1) as CP03
		        ,round(CASE WHEN CQ01_CNT > 0 then CQ01_DT / CQ01_CNT * 100 else null end,1) as CQ01
		        ,round(CASE WHEN CQ02_CNT > 0 then CQ02_DT / CQ02_CNT * 100 else null end,1) as CQ02
		        ,round(CASE WHEN CQ03_CNT > 0 then CQ03_DT / CQ03_CNT * 100 else null end,1) as CQ03
		        ,round(CASE WHEN CQ04_CNT > 0 then CQ04_DT / CQ04_CNT * 100 else null end,1) as CQ04
		        ,round(CASE WHEN CR01_CNT > 0 then CR01_DT / CR01_CNT * 100 else null end,1) as CR01
		        ,round(CASE WHEN DA01_CNT > 0 then DA01_DT / DA01_CNT * 100 else null end,1) as DA01 
		        ,round(CASE WHEN DA02_CNT > 0 then DA02_DT / DA02_CNT * 100 else null end,1) as DA02
		        ,round(CASE WHEN DA03_CNT > 0 then DA03_DT / DA03_CNT * 100 else null end,1) as DA03
		        ,round(CASE WHEN DA04_CNT > 0 then DA04_DT / DA04_CNT * 100 else null end,1) as DA04
		        ,round(CASE WHEN DA05_CNT > 0 then DA05_DT / DA05_CNT * 100 else null end,1) as DA05
		        ,round(CASE WHEN DA06_CNT > 0 then DA06_DT / DA06_CNT * 100 else null end,1) as DA06
		        ,round(CASE WHEN DA07_CNT > 0 then DA07_DT / DA07_CNT * 100 else null end,1) as DA07
		        ,round(CASE WHEN DB01_CNT > 0 then DB01_DT / DB01_CNT * 100 else null end,1) as DB01 
		        ,round(CASE WHEN DB02_CNT > 0 then DB02_DT / DB02_CNT * 100 else null end,1) as DB02
		        ,round(CASE WHEN DB03_CNT > 0 then DB03_DT / DB03_CNT * 100 else null end,1) as DB03
		        ,round(CASE WHEN DB04_CNT > 0 then DB04_DT / DB04_CNT * 100 else null end,1) as DB04
		        ,round(CASE WHEN DB05_CNT > 0 then DB05_DT / DB05_CNT * 100 else null end,1) as DB05
		        ,round(CASE WHEN DB06_CNT > 0 then DB06_DT / DB06_CNT * 100 else null end,1) as DB06
		        ,round(CASE WHEN DC01_CNT > 0 then DC01_DT / DC01_CNT * 100 else null end,1) as DC01 
		        ,round(CASE WHEN DC02_CNT > 0 then DC02_DT / DC02_CNT * 100 else null end,1) as DC02
		        ,round(CASE WHEN DC03_CNT > 0 then DC03_DT / DC03_CNT * 100 else null end,1) as DC03
		        ,round(CASE WHEN DD01_CNT > 0 then DD01_DT / DD01_CNT * 100 else null end,1) as DD01 
		        ,round(CASE WHEN DD02_CNT > 0 then DD02_DT / DD02_CNT * 100 else null end,1) as DD02
		        ,round(CASE WHEN DD03_CNT > 0 then DD03_DT / DD03_CNT * 100 else null end,1) as DD03
		        ,round(CASE WHEN DD04_CNT > 0 then DD04_DT / DD04_CNT * 100 else null end,1) as DD04
		        ,round(CASE WHEN DD05_CNT > 0 then DD05_DT / DD05_CNT * 100 else null end,1) as DD05
		        ,round(CASE WHEN DD06_CNT > 0 then DD06_DT / DD06_CNT * 100 else null end,1) as DD06
		        ,round(CASE WHEN DE01_CNT > 0 then DE01_DT / DE01_CNT * 100 else null end,1) as DE01 
		        ,round(CASE WHEN DE02_CNT > 0 then DE02_DT / DE02_CNT * 100 else null end,1) as DE02
		        ,round(CASE WHEN DE03_CNT > 0 then DE03_DT / DE03_CNT * 100 else null end,1) as DE03
		        ,round(CASE WHEN DF01_CNT > 0 then DF01_DT / DF01_CNT * 100 else null end,1) as DF01 
		        ,round(CASE WHEN DF02_CNT > 0 then DF02_DT / DF02_CNT * 100 else null end,1) as DF02
		        ,round(CASE WHEN DF03_CNT > 0 then DF03_DT / DF03_CNT * 100 else null end,1) as DF03
		        ,round(CASE WHEN DF04_CNT > 0 then DF04_DT / DF04_CNT * 100 else null end,1) as DF04
		        ,round(CASE WHEN DG01_CNT > 0 then DG01_DT / DG01_CNT * 100 else null end,1) as DG01 
		        ,round(CASE WHEN DG02_CNT > 0 then DG02_DT / DG02_CNT * 100 else null end,1) as DG02
		        ,round(CASE WHEN DG03_CNT > 0 then DG03_DT / DG03_CNT * 100 else null end,1) as DG03
		        ,round(CASE WHEN DG_ALL_CNT > 0 then DG_ALL / DG_ALL_CNT * 100 else null end,1) as DG_ALL
		        
		        
		        from( 
		        select G.HGRK_DEPT_CDNM,G.HGRK_DEPT_CD,  G.DEPT_CDNM
		        
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CA01' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CA01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CA01' THEN 1 ELSE 0 END) AS CA01_CNT
    		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CA02' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CA02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CA02' THEN 1 ELSE 0 END) AS CA02_CNT
    		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CA03' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CA03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CA03' THEN 1 ELSE 0 END) AS CA03_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB01' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CB01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB01' THEN 1 ELSE 0 END) AS CB01_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB02' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CB02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB02' THEN 1 ELSE 0 END) AS CB02_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB03' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CB03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB03' THEN 1 ELSE 0 END) AS CB03_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB04' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CB04_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB04' THEN 1 ELSE 0 END) AS CB04_CNT
    		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB05' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CB05_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB05' THEN 1 ELSE 0 END) AS CB05_CNT                
    		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB06' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CB06_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB06' THEN 1 ELSE 0 END) AS CB06_CNT
    		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB07' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CB07_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB07' THEN 1 ELSE 0 END) AS CB07_CNT                 	
    		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB08' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CB08_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB08' THEN 1 ELSE 0 END) AS CB08_CNT
    		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB09' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CB09_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB09' THEN 1 ELSE 0 END) AS CB09_CNT
    		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB10' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CB10_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB10' THEN 1 ELSE 0 END) AS CB10_CNT                
    		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CC01' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CC01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CC01' THEN 1 ELSE 0 END) AS CC01_CNT
    		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CC02' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CC02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CC02' THEN 1 ELSE 0 END) AS CC02_CNT
    		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CC03' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CC03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CC03' THEN 1 ELSE 0 END) AS CC03_CNT
    		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CC04' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CC04_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CC04' THEN 1 ELSE 0 END) AS CC04_CNT
    		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CD01' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CD01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CD01' THEN 1 ELSE 0 END) AS CD01_CNT
    		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CE01' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CE01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CE01' THEN 1 ELSE 0 END) AS CE01_CNT
    		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CE02' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CE02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CE02' THEN 1 ELSE 0 END) AS CE02_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CE03' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CE03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CE03' THEN 1 ELSE 0 END) AS CE03_CNT		     
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CF01' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CF01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CF01' THEN 1 ELSE 0 END) AS CF01_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CG01' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CG01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CG01' THEN 1 ELSE 0 END) AS CG01_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CH01' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CH01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CH01' THEN 1 ELSE 0 END) AS CH01_CNT                 
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CI01' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CI01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CI01' THEN 1 ELSE 0 END) AS CI01_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CJ01' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CJ01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CJ01' THEN 1 ELSE 0 END) AS CJ01_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CK01' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CK01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CK01' THEN 1 ELSE 0 END) AS CK01_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CL01' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CL01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CL01' THEN 1 ELSE 0 END) AS CL01_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CM01' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CM01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CM01' THEN 1 ELSE 0 END) AS CM01_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CM02' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CM02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CM02' THEN 1 ELSE 0 END) AS CM02_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CM03' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CM03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CM03' THEN 1 ELSE 0 END) AS CM03_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CM04' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CM04_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CM04' THEN 1 ELSE 0 END) AS CM04_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CM05' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CM05_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CM05' THEN 1 ELSE 0 END) AS CM05_CNT                
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CN01' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CN01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CN01' THEN 1 ELSE 0 END) AS CN01_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CN02' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CN02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CN02' THEN 1 ELSE 0 END) AS CN02_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CN03' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CN03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CN03' THEN 1 ELSE 0 END) AS CN03_CNT		        
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CO01' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CO01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CO01' THEN 1 ELSE 0 END) AS CO01_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CO02' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CO02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CO02' THEN 1 ELSE 0 END) AS CO02_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CO03' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CO03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CO03' THEN 1 ELSE 0 END) AS CO03_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CO04' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CO04_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CO04' THEN 1 ELSE 0 END) AS CO04_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CO05' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CO05_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CO05' THEN 1 ELSE 0 END) AS CO05_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CP01' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CP01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CP01' THEN 1 ELSE 0 END) AS CP01_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CP02' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CP02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CP02' THEN 1 ELSE 0 END) AS CP02_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CP03' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CP03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CP03' THEN 1 ELSE 0 END) AS CP03_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CQ01' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CQ01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CQ01' THEN 1 ELSE 0 END) AS CQ01_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CQ02' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CQ02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CQ02' THEN 1 ELSE 0 END) AS CQ02_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CQ03' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CQ03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CQ03' THEN 1 ELSE 0 END) AS CQ03_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CQ04' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CQ04_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CQ04' THEN 1 ELSE 0 END) AS CQ04_CNT                 
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CR01' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS CR01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CR01' THEN 1 ELSE 0 END) AS CR01_CNT                 
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA01' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DA01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA01' THEN 1 ELSE 0 END) AS DA01_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA02' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DA02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA02' THEN 1 ELSE 0 END) AS DA02_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA03' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DA03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA03' THEN 1 ELSE 0 END) AS DA03_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA04' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DA04_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA04' THEN 1 ELSE 0 END) AS DA04_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA05' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DA05_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA05' THEN 1 ELSE 0 END) AS DA05_CNT                
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA06' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DA06_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA06' THEN 1 ELSE 0 END) AS DA06_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA07' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DA07_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA07' THEN 1 ELSE 0 END) AS DA07_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DB01' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DB01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DB01' THEN 1 ELSE 0 END) AS DB01_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DB02' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DB02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DB02' THEN 1 ELSE 0 END) AS DB02_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DB03' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DB03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DB03' THEN 1 ELSE 0 END) AS DB03_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DB04' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DB04_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DB04' THEN 1 ELSE 0 END) AS DB04_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DB05' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DB05_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DB05' THEN 1 ELSE 0 END) AS DB05_CNT                
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DB06' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DB06_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DB06' THEN 1 ELSE 0 END) AS DB06_CNT                
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DC01' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DC01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DC01' THEN 1 ELSE 0 END) AS DC01_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DC02' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DC02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DC02' THEN 1 ELSE 0 END) AS DC02_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DC03' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DC03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DC03' THEN 1 ELSE 0 END) AS DC03_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DD01' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DD01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DD01' THEN 1 ELSE 0 END) AS DD01_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DD02' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DD02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DD02' THEN 1 ELSE 0 END) AS DD02_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DD03' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DD03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DD03' THEN 1 ELSE 0 END) AS DD03_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DD04' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DD04_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DD04' THEN 1 ELSE 0 END) AS DD04_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DD05' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DD05_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DD05' THEN 1 ELSE 0 END) AS DD05_CNT                
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DD06' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DD06_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DD06' THEN 1 ELSE 0 END) AS DD06_CNT		       
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DE01' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DE01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DE01' THEN 1 ELSE 0 END) AS DE01_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DE02' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DE02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DE02' THEN 1 ELSE 0 END) AS DE02_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DE03' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DE03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DE03' THEN 1 ELSE 0 END) AS DE03_CNT                 
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DF01' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DF01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DF01' THEN 1 ELSE 0 END) AS DF01_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DF02' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DF02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DF02' THEN 1 ELSE 0 END) AS DF02_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DF03' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DF03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DF03' THEN 1 ELSE 0 END) AS DF03_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DF04' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DF04_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DF04' THEN 1 ELSE 0 END) AS DF04_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DG01' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DG01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DG01' THEN 1 ELSE 0 END) AS DG01_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DG02' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DG02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DG02' THEN 1 ELSE 0 END) AS DG02_CNT
		            ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DG03' and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DG03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DG03' THEN 1 ELSE 0 END) AS DG03_CNT
                    ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD is not null and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DG_ALL
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD is not null THEN 1 ELSE 0 END) AS DG_ALL_CNT
                
		            FROM TBL_DSFT_ACPN_PROC A					
			        LEFT JOIN TBL_HC_HIST C
			               ON A.DSFT_ACPN_SEQ_NO = C.DSFT_ACPN_SEQ_NO		  
			        LEFT JOIN TBL_CRPN_CUST_BASE D
			       		   ON A.ORGN_PTR_ST_CD = D.CUST_ID        	    	  
			        LEFT JOIN TBL_USR B
			       		   ON A.DSPSR_ID = B.USR_ID 
			        LEFT JOIN TBL_HR_EMP_CD F
			       		   ON A.DSPSR_ID = F.EMP_NO
			        LEFT JOIN TBL_HR_DEPT_CD G 
			       		   ON F.BLNG_DEPT_CD = G.DEPT_CD
			        LEFT JOIN TBL_SAP_CD H	
			       		   ON (A.ORGN_ENTR_DV_CD = H.CD_ID AND H.CD_CLAS_CD = '1')	
			        LEFT JOIN TBL_DSFT_TAXN_TYP_CD I
			       		   ON A.DSFT_TAXN_TYP_CD = I.DSFT_TAXN_TYP_CD
			       		   
			WHERE G.HGRK_DEPT_CD IN ('E00054','E00056','T21000','E00053','E00042','E00044','JD1000','E00048')
							
		   			AND (A.DEL_YN = 'N' OR A.DEL_YN IS NULL) 
		   			
		   				<dynamic>
		       			<!-- 년도별 -->   				    	
			    	    <isEqual property="cmb_gubun" compareValue="1">              
			                and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'                                                                  
			            </isEqual>
			            <!--  -->
			            <isEqual property="cmb_gubun" compareValue="2">
			            	<isEmpty property="cmb_half">
			            		and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'
			            	</isEmpty>              
			                <isEqual property="cmb_half" compareValue="1">
			                	and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0632000000'                                                                  
							</isEqual>	 
							<isEqual property="cmb_half" compareValue="2">
								and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '1232000000'
							</isEqual>	 
			            </isEqual>	 
			            <isEqual property="cmb_gubun" compareValue="3"> 
			            	<isEmpty>
								and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'	            	
			            	</isEmpty>    
			           		<isEqual property="cmb_qua" compareValue="1">
			           			and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0332000000'   
			           	  	</isEqual>
			           	  	<isEqual property="cmb_qua" compareValue="2">
			           	   		and A.ACPN_DTM between #time_key# || '0400000000' and #time_key# || '0632000000'   
			           	  	</isEqual>	 
			           	  	<isEqual property="cmb_qua" compareValue="3">
			           	   		and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '0932000000'   
			           	  	</isEqual>	 
		           	  		<isEqual property="cmb_qua" compareValue="4">
			           	   		and A.ACPN_DTM between #time_key# || '1000000000' and #time_key# || '1232000000'   
			           	  	</isEqual>	 	 
		            	</isEqual>	 				            
			    	 	<isEqual property="cmb_gubun" compareValue="4">              
			            	and A.ACPN_DTM between #time_key# || '00000000' and #time_key# || '32000000'                                                                  
			         	</isEqual>	
			    	 	<isEqual property="cmb_gubun" compareValue="5">              
			                and A.ACPN_DTM between #time_key# || '000000' and #time_key# || '240000'                                                                  
			         	</isEqual>
					
						<!-- 불만유형이 전체일 때는 두가지 경우 존재(전체, 품질&혼유)		-->				
						<isEmpty property="dsft_typ_cd">
							<isEqual property="dsft_typ_tot_gbn" compareValue="2">
								AND A.DSFT_TYP_CD IN ('CA','CK')
							</isEqual>
						</isEmpty>						
					  	<isNotEmpty prepend="AND" property="dsft_typ_cd">				<!-- 불만유형		-->
					    	A.DSFT_TYP_CD = #dsft_typ_cd#
					  	</isNotEmpty>
					  	<isNotEmpty prepend="AND" property="dsft_taxn_typ_cd">			<!-- 불만세부유형		-->
					    	A.DSFT_TAXN_TYP_CD = #dsft_taxn_typ_cd#
					  	</isNotEmpty>
				  		<isNotEmpty prepend="AND" property="orgn_ptr_st_cd">			<!-- 불만발생업체코드(가맹점SAP코드) -->
						    A.ORGN_PTR_ST_CD = #orgn_ptr_st_cd#
					  	</isNotEmpty>
					    <isNotEmpty prepend="AND" property="conn_chnl_kind_cd">			<!-- 접촉채널	-->
						    A.CONN_CHNL_KIND_CD = #conn_chnl_kind_cd#
					    </isNotEmpty>			  	
					  	<isNotEmpty prepend="AND" property="hgrk_dept_cd">				<!-- 부문/본부 -->
						    G.HGRK_DEPT_CD = #hgrk_dept_cd#
					  	</isNotEmpty>
					  	<isNotEmpty prepend="AND" property="dept_cd">					<!-- 처리팀 -->
						    G.DEPT_CD = #dept_cd#
					  	</isNotEmpty>
					  	<isNotEmpty prepend="AND" property="dspsr_id_nm">				<!-- 처리자명 		-->
						    (B.USR_NM LIKE '%'|| #dspsr_id_nm# ||'%' OR F.EMP_NM LIKE '%'|| #dspsr_id_nm# ||'%')
					  	</isNotEmpty>
				 		<isEqual property="hc_yn" compareValue="Y"> 					<!-- 해피콜여부  -->
				 			AND A.HC_YN = 'Y'
				 		</isEqual>
					 	<isEqual property="hc_yn" compareValue="N"> 					<!-- 해피콜여부  -->
					 		AND (A.HC_YN = 'N' OR A.HC_YN IS NULL)
					 	</isEqual>
					  	<isNotEmpty prepend="AND" property="attd_sft_cd">				<!-- 태도만족도 		-->
					  		(A.HC_YN = 'Y' AND C.ATTD_SFT_CD = #attd_sft_cd#)
					  	</isNotEmpty>
					  	<isNotEmpty prepend="AND" property="rslt_sft_cd">				<!-- 결과만족도 		-->
					  		(A.HC_YN = 'Y' AND C.RSLT_SFT_CD = #rslt_sft_cd#)
					  	</isNotEmpty>
					  	<isNotEmpty prepend="AND" property="hc_uabl_rsn_cd">			<!-- 해피콜불가사유		-->
					  		A.HC_UABL_RSN_CD = #hc_uabl_rsn_cd#
					  	</isNotEmpty>
					  	<isNotEmpty prepend="AND" property="prdct_cd">					<!-- 불만제품 		-->
						    A.PRDCT_CD = #prdct_cd#
					  	</isNotEmpty>			  				 	
					  	<isNotEmpty prepend="AND" property="prblm_penom_cd">			<!-- 현상 		-->
						    A.PRBLM_PENOM_CD = #prblm_penom_cd#
					  	</isNotEmpty>
				 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="1">  	<!-- 시료품질 점검결과		-->
				 			AND	A.VHCL_QLIT_DSFT_CAUS_CD_CUST IS NOT NULL
				 	  	</isEqual>
				 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="2">   	<!-- 시료품질 점검결과		-->
				 	  		AND	A.VHCL_QLIT_DSFT_CAUS_CD_PTR_ST IS NOT NULL
				 	  	</isEqual>
					  	<isNotEmpty prepend="AND" property="vhcl_biztr_qlit_dsft_typ_cd">			<!-- 품질불만유형 		-->
						    A.VHCL_BIZTR_QLIT_DSFT_TYP_CD = #vhcl_biztr_qlit_dsft_typ_cd#
					  	</isNotEmpty>
					 	<isEqual property="vhcl_biztr_yn" compareValue="Y"> 			<!-- Kixx 품질서비스차량 출동 -->
					 		AND A.VHCL_BIZTR_YN = 'Y'
					 	</isEqual>
					 	<isEqual property="vhcl_biztr_yn" compareValue="N"> 			<!-- Kixx 품질서비스차량 출동 -->
					 		AND (A.VHCL_BIZTR_YN = 'N' OR A.VHCL_BIZTR_YN IS NULL)
					 	</isEqual>		 	  	
					 	<isEqual property="rwrd_yn" compareValue="Y"> 					<!-- 보상여부 -->
					 		AND A.RWRD_YN = 'Y'
					 	</isEqual>
					 	<isEqual property="rwrd_yn" compareValue="N"> 					<!-- 보상여부 -->
					 		AND (A.RWRD_YN = 'N' OR A.RWRD_YN IS NULL)
					 	</isEqual>
					 	
					 	<isEqual property="cps_amt_gbn" compareValue="1"> 				
					 		<isEqual property="cps_amt" compareValue="1">				<!-- 주유소 보상금 1만원 미만-->
					 			AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 10000
					 		</isEqual>
					 		<isEqual property="cps_amt" compareValue="2">				<!-- 주유소 보상금 1만원 ~ 10만원-->
					 			AND (A.PTR_ST_CPS_AMT <![CDATA[>=]]> 10000 AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 100000)
					 		</isEqual>
							<isEqual property="cps_amt" compareValue="3">				<!-- 주유소 보상금 10만원 초과-->
					 			AND A.PTR_ST_CPS_AMT <![CDATA[>]]> 100000
					 		</isEqual>
					 	</isEqual>
					 	<isEqual property="cps_amt_gbn" compareValue="2"> 				
					 		<isEqual property="cps_amt" compareValue="1">				<!-- 회사 보상금 1만원 미만-->
					 			AND A.CO_CPS_AMT <![CDATA[<]]> 10000
					 		</isEqual>
					 		<isEqual property="cps_amt" compareValue="2">				<!-- 회사 보상금 1만원 ~ 10만원-->
					 			AND (A.CO_CPS_AMT <![CDATA[>=]]> 10000 AND A.CO_CPS_AMT <![CDATA[<]]> 100000)
					 		</isEqual>
							<isEqual property="cps_amt" compareValue="3">				<!-- 회사 보상금 10만원 초과-->
					 			AND A.CO_CPS_AMT <![CDATA[>]]> 100000
					 		</isEqual>
					 	</isEqual>
					 	<isEqual property="cps_amt_gbn" compareValue="3"> 				
					 		<isEqual property="cps_amt" compareValue="1">				<!-- 총 보상금 1만원 미만-->
					 			AND A.TOT_CPS_AMT <![CDATA[<]]> 10000
					 		</isEqual>
					 		<isEqual property="cps_amt" compareValue="2">				<!-- 총 보상금 1만원 ~ 10만원-->
					 			AND (A.TOT_CPS_AMT <![CDATA[>=]]> 10000 AND A.TOT_CPS_AMT <![CDATA[<]]> 100000)
					 		</isEqual>
							<isEqual property="cps_amt" compareValue="3">				<!-- 총 보상금 10만원 초과-->
					 			AND A.TOT_CPS_AMT <![CDATA[>]]> 100000
					 		</isEqual>
					 	</isEqual>
					 	
						<!--처리자구분에 체크항목이 하나도 없는 경우, 전체데이터가 조회된다.-->
					 	<isEqual property="cmp_handler" compareValue="1">   
					 		AND	A.DSPSR_YN_CNSLR = 'Y'
					 	</isEqual>
					 	<isEqual property="cmp_handler" compareValue="2">   
					 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y')
					 	</isEqual>
					 	<isEqual property="cmp_handler" compareValue="3">   
					 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
					 	</isEqual>
					 	<isEqual property="cmp_handler" compareValue="4">   
					 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
					 	</isEqual>
					 	<isEqual property="cmp_handler" compareValue="5">   
					 		AND	A.DSPSR_YN_DSFT_CHRG = 'Y'
					 	</isEqual>
					 	<isEqual property="cmp_handler" compareValue="6">   
					 		AND	A.DSPSR_YN_PART_HD = 'Y'
					 	</isEqual>
					 	<isEqual property="cmp_handler" compareValue="7">   
					 		AND	(A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
					 	</isEqual>
		       		</dynamic>  
		   			
		   			
		   			GROUP BY ROLLUP(G.HGRK_DEPT_CDNM,G.HGRK_DEPT_CD, G.DEPT_CDNM) 
		   			having (HGRK_DEPT_CDNM) is null
		   			order by G.HGRK_DEPT_CDNM,G.HGRK_DEPT_CD, G.DEPT_CDNM
		   		)
 	</select> 		
 
 <!-- 불만조회 - 조직별(문제현상) -->
 	<select id="Get_CMP_SELECT4" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
	   select case when HGRK_DEPT_CDNM is not null then HGRK_DEPT_CDNM else '전체' end as HGRK_DEPT_CDNM,
		        HGRK_DEPT_CD,
		       		    case when DEPT_CDNM is not null then DEPT_CDNM else '소계' end as    DEPT_CDNM
		        
		        ,round(CASE WHEN CA_CA_CNT > 0 then CA_CA_DT / CA_CA_CNT * 100 else null end,1) as CA_CA
		        ,round(CASE WHEN CA_CB_CNT > 0 then CA_CB_DT / CA_CB_CNT * 100 else null end,1) as CA_CB
		        ,round(CASE WHEN CA_CC_CNT > 0 then CA_CC_DT / CA_CC_CNT * 100 else null end,1) as CA_CC
		        ,round(CASE WHEN CA_CD_CNT > 0 then CA_CD_DT / CA_CD_CNT * 100 else null end,1) as CA_CD
		        ,round(CASE WHEN CA_CE_CNT > 0 then CA_CE_DT / CA_CE_CNT * 100 else null end,1) as CA_CE
		        ,round(CASE WHEN CA_CF_CNT > 0 then CA_CF_DT / CA_CF_CNT * 100 else null end,1) as CA_CF
		        ,round(CASE WHEN CA_CG_CNT > 0 then CA_CG_DT / CA_CG_CNT * 100 else null end,1) as CA_CG
		        ,round(CASE WHEN CA_CH_CNT > 0 then CA_CH_DT / CA_CH_CNT * 100 else null end,1) as CA_CH
		        ,round(CASE WHEN CA_CI_CNT > 0 then CA_CI_DT / CA_CI_CNT * 100 else null end,1) as CA_CI
		        ,round(CASE WHEN CA_CJ_CNT > 0 then CA_CJ_DT / CA_CJ_CNT * 100 else null end,1) as CA_CJ
		        ,round(CASE WHEN CA_CK_CNT > 0 then CA_CK_DT / CA_CK_CNT * 100 else null end,1) as CA_CK
		        ,round(CASE WHEN CA_CL_CNT > 0 then CA_CL_DT / CA_CL_CNT * 100 else null end,1) as CA_CL
		        ,round(CASE WHEN CA_CM_CNT > 0 then CA_CM_DT / CA_CM_CNT * 100 else null end,1) as CA_CM
		        ,round(CASE WHEN CA_CN_CNT > 0 then CA_CN_DT / CA_CN_CNT * 100 else null end,1) as CA_CN
		        ,round(CASE WHEN CA_CO_CNT > 0 then CA_CO_DT / CA_CO_CNT * 100 else null end,1) as CA_CO
		        ,round(CASE WHEN CA_CR_CNT > 0 then CA_CR_DT / CA_CR_CNT * 100 else null end,1) as CA_CR
		        
		        ,round(CASE WHEN CA_CT_CNT > 0 then CA_CT_DT / CA_CT_CNT * 100 else null end,1) as CA_CT
		        ,round(CASE WHEN CA_CU_CNT > 0 then CA_CU_DT / CA_CU_CNT * 100 else null end,1) as CA_CU
		        ,round(CASE WHEN CA_CV_CNT > 0 then CA_CV_DT / CA_CV_CNT * 100 else null end,1) as CA_CV
		        ,round(CASE WHEN CA_CW_CNT > 0 then CA_CW_DT / CA_CW_CNT * 100 else null end,1) as CA_CW
		        ,round(CASE WHEN CA_CX_CNT > 0 then CA_CX_DT / CA_CX_CNT * 100 else null end,1) as CA_CX
		        ,round(CASE WHEN CA_CY_CNT > 0 then CA_CY_DT / CA_CY_CNT * 100 else null end,1) as CA_CY
		       	       
		        
		        ,round(CASE WHEN CK_CA_CNT > 0 then CK_CA_DT / CK_CA_CNT * 100 else null end,1) as CK_CA
		        ,round(CASE WHEN CK_CB_CNT > 0 then CK_CB_DT / CK_CB_CNT * 100 else null end,1) as CK_CB
		        ,round(CASE WHEN CK_CC_CNT > 0 then CK_CC_DT / CK_CC_CNT * 100 else null end,1) as CK_CC
		        ,round(CASE WHEN CK_CD_CNT > 0 then CK_CD_DT / CK_CD_CNT * 100 else null end,1) as CK_CD
		        ,round(CASE WHEN CK_CE_CNT > 0 then CK_CE_DT / CK_CE_CNT * 100 else null end,1) as CK_CE
		        ,round(CASE WHEN CK_CF_CNT > 0 then CK_CF_DT / CK_CF_CNT * 100 else null end,1) as CK_CF
		        ,round(CASE WHEN CK_CG_CNT > 0 then CK_CG_DT / CK_CG_CNT * 100 else null end,1) as CK_CG
		        ,round(CASE WHEN CK_CH_CNT > 0 then CK_CH_DT / CK_CH_CNT * 100 else null end,1) as CK_CH
		        ,round(CASE WHEN CK_CI_CNT > 0 then CK_CI_DT / CK_CI_CNT * 100 else null end,1) as CK_CI
		        ,round(CASE WHEN CK_CJ_CNT > 0 then CK_CJ_DT / CK_CJ_CNT * 100 else null end,1) as CK_CJ
		        ,round(CASE WHEN CK_CK_CNT > 0 then CK_CK_DT / CK_CK_CNT * 100 else null end,1) as CK_CK
		        ,round(CASE WHEN CK_CL_CNT > 0 then CK_CL_DT / CK_CL_CNT * 100 else null end,1) as CK_CL
		        ,round(CASE WHEN CK_CM_CNT > 0 then CK_CM_DT / CK_CM_CNT * 100 else null end,1) as CK_CM
		        ,round(CASE WHEN CK_CN_CNT > 0 then CK_CN_DT / CK_CN_CNT * 100 else null end,1) as CK_CN
		        ,round(CASE WHEN CK_CO_CNT > 0 then CK_CO_DT / CK_CO_CNT * 100 else null end,1) as CK_CO
		        ,round(CASE WHEN CK_CR_CNT > 0 then CK_CR_DT / CK_CR_CNT * 100 else null end,1) as CK_CR
		        
		        ,round(CASE WHEN CK_CT_CNT > 0 then CK_CT_DT / CK_CT_CNT * 100 else null end,1) as CK_CT
		        ,round(CASE WHEN CK_CU_CNT > 0 then CK_CU_DT / CK_CU_CNT * 100 else null end,1) as CK_CU
		        ,round(CASE WHEN CK_CV_CNT > 0 then CK_CV_DT / CK_CV_CNT * 100 else null end,1) as CK_CV
		        ,round(CASE WHEN CK_CW_CNT > 0 then CK_CW_DT / CK_CW_CNT * 100 else null end,1) as CK_CW
		        ,round(CASE WHEN CK_CX_CNT > 0 then CK_CX_DT / CK_CX_CNT * 100 else null end,1) as CK_CX
		        ,round(CASE WHEN CK_CY_CNT > 0 then CK_CY_DT / CK_CY_CNT * 100 else null end,1) as CK_CY
		       
		        ,round(CASE WHEN DG_ALL_CNT > 0 then DG_ALL / DG_ALL_CNT * 100 else null end,1) as DG_ALL
		        
		        
		        from( 
		        select G.HGRK_DEPT_CDNM,G.HGRK_DEPT_CD,  G.DEPT_CDNM
		        
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CA'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CA_CA_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CA' THEN 1 ELSE 0 END) AS CA_CA_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CB'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CA_CB_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CB' THEN 1 ELSE 0 END) AS CA_CB_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CC'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CA_CC_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CC' THEN 1 ELSE 0 END) AS CA_CC_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CD'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CA_CD_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CD' THEN 1 ELSE 0 END) AS CA_CD_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CE'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CA_CE_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CE' THEN 1 ELSE 0 END) AS CA_CE_CNT                
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CF'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CA_CF_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CF' THEN 1 ELSE 0 END) AS CA_CF_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CG'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CA_CG_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CG' THEN 1 ELSE 0 END) AS CA_CG_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CH'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CA_CH_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CH' THEN 1 ELSE 0 END) AS CA_CH_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CI'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CA_CI_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CI' THEN 1 ELSE 0 END) AS CA_CI_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CJ'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CA_CJ_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CJ' THEN 1 ELSE 0 END) AS CA_CJ_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CK'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CA_CK_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CK' THEN 1 ELSE 0 END) AS CA_CK_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CL'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CA_CL_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CL' THEN 1 ELSE 0 END) AS CA_CL_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CM'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CA_CM_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CM' THEN 1 ELSE 0 END) AS CA_CM_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CN'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CA_CN_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CN' THEN 1 ELSE 0 END) AS CA_CN_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CO'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CA_CO_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CO' THEN 1 ELSE 0 END) AS CA_CO_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CR'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CA_CR_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CR' THEN 1 ELSE 0 END) AS CA_CR_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CT'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CA_CT_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CT' THEN 1 ELSE 0 END) AS CA_CT_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CU'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CA_CU_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CU' THEN 1 ELSE 0 END) AS CA_CU_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CV'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CA_CV_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CV' THEN 1 ELSE 0 END) AS CA_CV_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CW'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CA_CW_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CW' THEN 1 ELSE 0 END) AS CA_CW_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CX'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CA_CX_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CX' THEN 1 ELSE 0 END) AS CA_CX_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CY'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CA_CY_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CY' THEN 1 ELSE 0 END) AS CA_CY_CNT                                      
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CA'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CK_CA_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CA' THEN 1 ELSE 0 END) AS CK_CA_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CB'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CK_CB_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CB' THEN 1 ELSE 0 END) AS CK_CB_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CC'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CK_CC_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CC' THEN 1 ELSE 0 END) AS CK_CC_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CD'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CK_CD_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CD' THEN 1 ELSE 0 END) AS CK_CD_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CE'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CK_CE_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CE' THEN 1 ELSE 0 END) AS CK_CE_CNT                
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CF'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CK_CF_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CF' THEN 1 ELSE 0 END) AS CK_CF_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CG'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CK_CG_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CG' THEN 1 ELSE 0 END) AS CK_CG_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CH'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CK_CH_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CH' THEN 1 ELSE 0 END) AS CK_CH_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CI'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CK_CI_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CI' THEN 1 ELSE 0 END) AS CK_CI_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CJ'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CK_CJ_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CJ' THEN 1 ELSE 0 END) AS CK_CJ_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CK'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CK_CK_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CK' THEN 1 ELSE 0 END) AS CK_CK_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CL'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CK_CL_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CL' THEN 1 ELSE 0 END) AS CK_CL_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CM'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CK_CM_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CM' THEN 1 ELSE 0 END) AS CK_CM_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CN'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CK_CN_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CN' THEN 1 ELSE 0 END) AS CK_CN_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CO'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CK_CO_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CO' THEN 1 ELSE 0 END) AS CK_CO_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CR'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CK_CR_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CR' THEN 1 ELSE 0 END) AS CK_CR_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CT'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CK_CT_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CT' THEN 1 ELSE 0 END) AS CK_CT_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CU'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CK_CU_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CU' THEN 1 ELSE 0 END) AS CK_CU_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CV'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CK_CV_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CV' THEN 1 ELSE 0 END) AS CK_CV_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CW'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CK_CW_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CW' THEN 1 ELSE 0 END) AS CK_CW_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CX'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CK_CX_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CX' THEN 1 ELSE 0 END) AS CK_CX_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CY'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CK_CY_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CY' THEN 1 ELSE 0 END) AS CK_CY_CNT
                ,SUM(CASE WHEN A.DSFT_TYP_CD IN ('CK','CA') and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DG_ALL
                ,SUM(CASE WHEN A.DSFT_TYP_CD IN ('CK','CA') THEN 1 ELSE 0 END) AS DG_ALL_CNT
                
		            FROM TBL_DSFT_ACPN_PROC A					
			        LEFT JOIN TBL_HC_HIST C
			               ON A.DSFT_ACPN_SEQ_NO = C.DSFT_ACPN_SEQ_NO		  
			        LEFT JOIN TBL_CRPN_CUST_BASE D
			       		   ON A.ORGN_PTR_ST_CD = D.CUST_ID        	    	  
			        LEFT JOIN TBL_USR B
			       		   ON A.DSPSR_ID = B.USR_ID 
			        LEFT JOIN TBL_HR_EMP_CD F
			       		   ON A.DSPSR_ID = F.EMP_NO
			        LEFT JOIN TBL_HR_DEPT_CD G 
			       		   ON F.BLNG_DEPT_CD = G.DEPT_CD
			        LEFT JOIN TBL_SAP_CD H	
			       		   ON (A.ORGN_ENTR_DV_CD = H.CD_ID AND H.CD_CLAS_CD = '1')	
			        LEFT JOIN TBL_DSFT_TAXN_TYP_CD I
			       		   ON A.DSFT_TAXN_TYP_CD = I.DSFT_TAXN_TYP_CD
			       		   
			WHERE G.HGRK_DEPT_CD IN ('E00054','E00056','T21000','E00053','E00042','E00044','JD1000','E00048')
								
		   			AND (A.DEL_YN = 'N' OR A.DEL_YN IS NULL) 
		   			
		   				<dynamic>
		       			<!-- 년도별 -->   				    	
			    	    <isEqual property="cmb_gubun" compareValue="1">              
			                and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'                                                                  
			            </isEqual>
			            <!--  -->
			            <isEqual property="cmb_gubun" compareValue="2">
			            	<isEmpty property="cmb_half">
			            		and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'
			            	</isEmpty>              
			                <isEqual property="cmb_half" compareValue="1">
			                	and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0632000000'                                                                  
							</isEqual>	 
							<isEqual property="cmb_half" compareValue="2">
								and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '1232000000'
							</isEqual>	 
			            </isEqual>	 
			            <isEqual property="cmb_gubun" compareValue="3"> 
			            	<isEmpty>
								and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'	            	
			            	</isEmpty>    
			           		<isEqual property="cmb_qua" compareValue="1">
			           			and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0332000000'   
			           	  	</isEqual>
			           	  	<isEqual property="cmb_qua" compareValue="2">
			           	   		and A.ACPN_DTM between #time_key# || '0400000000' and #time_key# || '0632000000'   
			           	  	</isEqual>	 
			           	  	<isEqual property="cmb_qua" compareValue="3">
			           	   		and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '0932000000'   
			           	  	</isEqual>	 
		           	  		<isEqual property="cmb_qua" compareValue="4">
			           	   		and A.ACPN_DTM between #time_key# || '1000000000' and #time_key# || '1232000000'   
			           	  	</isEqual>	 	 
		            	</isEqual>	 				            
			    	 	<isEqual property="cmb_gubun" compareValue="4">              
			            	and A.ACPN_DTM between #time_key# || '00000000' and #time_key# || '32000000'                                                                  
			         	</isEqual>	
			    	 	<isEqual property="cmb_gubun" compareValue="5">              
			                and A.ACPN_DTM between #time_key# || '000000' and #time_key# || '240000'                                                                  
			         	</isEqual>
					
						<!-- 불만유형이 전체일 때는 두가지 경우 존재(전체, 품질&혼유)		-->				
						<isEmpty property="dsft_typ_cd">
							<isEqual property="dsft_typ_tot_gbn" compareValue="2">
								AND A.DSFT_TYP_CD IN ('CA','CK')
							</isEqual>
						</isEmpty>						
					  	<isNotEmpty prepend="AND" property="dsft_typ_cd">				<!-- 불만유형		-->
					    	A.DSFT_TYP_CD = #dsft_typ_cd#
					  	</isNotEmpty>
					  	<isNotEmpty prepend="AND" property="dsft_taxn_typ_cd">			<!-- 불만세부유형		-->
					    	A.DSFT_TAXN_TYP_CD = #dsft_taxn_typ_cd#
					  	</isNotEmpty>
				  		<isNotEmpty prepend="AND" property="orgn_ptr_st_cd">			<!-- 불만발생업체코드(가맹점SAP코드) -->
						    A.ORGN_PTR_ST_CD = #orgn_ptr_st_cd#
					  	</isNotEmpty>
					    <isNotEmpty prepend="AND" property="conn_chnl_kind_cd">			<!-- 접촉채널	-->
						    A.CONN_CHNL_KIND_CD = #conn_chnl_kind_cd#
					    </isNotEmpty>			  	
					  	<isNotEmpty prepend="AND" property="hgrk_dept_cd">				<!-- 부문/본부 -->
						    G.HGRK_DEPT_CD = #hgrk_dept_cd#
					  	</isNotEmpty>
					  	<isNotEmpty prepend="AND" property="dept_cd">					<!-- 처리팀 -->
						    G.DEPT_CD = #dept_cd#
					  	</isNotEmpty>
					  	<isNotEmpty prepend="AND" property="dspsr_id_nm">				<!-- 처리자명 		-->
						    (B.USR_NM LIKE '%'|| #dspsr_id_nm# ||'%' OR F.EMP_NM LIKE '%'|| #dspsr_id_nm# ||'%')
					  	</isNotEmpty>
				 		<isEqual property="hc_yn" compareValue="Y"> 					<!-- 해피콜여부  -->
				 			AND A.HC_YN = 'Y'
				 		</isEqual>
					 	<isEqual property="hc_yn" compareValue="N"> 					<!-- 해피콜여부  -->
					 		AND (A.HC_YN = 'N' OR A.HC_YN IS NULL)
					 	</isEqual>
					  	<isNotEmpty prepend="AND" property="attd_sft_cd">				<!-- 태도만족도 		-->
					  		(A.HC_YN = 'Y' AND C.ATTD_SFT_CD = #attd_sft_cd#)
					  	</isNotEmpty>
					  	<isNotEmpty prepend="AND" property="rslt_sft_cd">				<!-- 결과만족도 		-->
					  		(A.HC_YN = 'Y' AND C.RSLT_SFT_CD = #rslt_sft_cd#)
					  	</isNotEmpty>
					  	<isNotEmpty prepend="AND" property="hc_uabl_rsn_cd">			<!-- 해피콜불가사유		-->
					  		A.HC_UABL_RSN_CD = #hc_uabl_rsn_cd#
					  	</isNotEmpty>
					  	<isNotEmpty prepend="AND" property="prdct_cd">					<!-- 불만제품 		-->
						    A.PRDCT_CD = #prdct_cd#
					  	</isNotEmpty>			  				 	
					  	<isNotEmpty prepend="AND" property="prblm_penom_cd">			<!-- 현상 		-->
						    A.PRBLM_PENOM_CD = #prblm_penom_cd#
					  	</isNotEmpty>
				 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="1">  	<!-- 시료품질 점검결과		-->
				 			AND	A.VHCL_QLIT_DSFT_CAUS_CD_CUST IS NOT NULL
				 	  	</isEqual>
				 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="2">   	<!-- 시료품질 점검결과		-->
				 	  		AND	A.VHCL_QLIT_DSFT_CAUS_CD_PTR_ST IS NOT NULL
				 	  	</isEqual>
					  	<isNotEmpty prepend="AND" property="vhcl_biztr_qlit_dsft_typ_cd">			<!-- 품질불만유형 		-->
						    A.VHCL_BIZTR_QLIT_DSFT_TYP_CD = #vhcl_biztr_qlit_dsft_typ_cd#
					  	</isNotEmpty>
					 	<isEqual property="vhcl_biztr_yn" compareValue="Y"> 			<!-- Kixx 품질서비스차량 출동 -->
					 		AND A.VHCL_BIZTR_YN = 'Y'
					 	</isEqual>
					 	<isEqual property="vhcl_biztr_yn" compareValue="N"> 			<!-- Kixx 품질서비스차량 출동 -->
					 		AND (A.VHCL_BIZTR_YN = 'N' OR A.VHCL_BIZTR_YN IS NULL)
					 	</isEqual>		 	  	
					 	<isEqual property="rwrd_yn" compareValue="Y"> 					<!-- 보상여부 -->
					 		AND A.RWRD_YN = 'Y'
					 	</isEqual>
					 	<isEqual property="rwrd_yn" compareValue="N"> 					<!-- 보상여부 -->
					 		AND (A.RWRD_YN = 'N' OR A.RWRD_YN IS NULL)
					 	</isEqual>
					 	
					 	<isEqual property="cps_amt_gbn" compareValue="1"> 				
					 		<isEqual property="cps_amt" compareValue="1">				<!-- 주유소 보상금 1만원 미만-->
					 			AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 10000
					 		</isEqual>
					 		<isEqual property="cps_amt" compareValue="2">				<!-- 주유소 보상금 1만원 ~ 10만원-->
					 			AND (A.PTR_ST_CPS_AMT <![CDATA[>=]]> 10000 AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 100000)
					 		</isEqual>
							<isEqual property="cps_amt" compareValue="3">				<!-- 주유소 보상금 10만원 초과-->
					 			AND A.PTR_ST_CPS_AMT <![CDATA[>]]> 100000
					 		</isEqual>
					 	</isEqual>
					 	<isEqual property="cps_amt_gbn" compareValue="2"> 				
					 		<isEqual property="cps_amt" compareValue="1">				<!-- 회사 보상금 1만원 미만-->
					 			AND A.CO_CPS_AMT <![CDATA[<]]> 10000
					 		</isEqual>
					 		<isEqual property="cps_amt" compareValue="2">				<!-- 회사 보상금 1만원 ~ 10만원-->
					 			AND (A.CO_CPS_AMT <![CDATA[>=]]> 10000 AND A.CO_CPS_AMT <![CDATA[<]]> 100000)
					 		</isEqual>
							<isEqual property="cps_amt" compareValue="3">				<!-- 회사 보상금 10만원 초과-->
					 			AND A.CO_CPS_AMT <![CDATA[>]]> 100000
					 		</isEqual>
					 	</isEqual>
					 	<isEqual property="cps_amt_gbn" compareValue="3"> 				
					 		<isEqual property="cps_amt" compareValue="1">				<!-- 총 보상금 1만원 미만-->
					 			AND A.TOT_CPS_AMT <![CDATA[<]]> 10000
					 		</isEqual>
					 		<isEqual property="cps_amt" compareValue="2">				<!-- 총 보상금 1만원 ~ 10만원-->
					 			AND (A.TOT_CPS_AMT <![CDATA[>=]]> 10000 AND A.TOT_CPS_AMT <![CDATA[<]]> 100000)
					 		</isEqual>
							<isEqual property="cps_amt" compareValue="3">				<!-- 총 보상금 10만원 초과-->
					 			AND A.TOT_CPS_AMT <![CDATA[>]]> 100000
					 		</isEqual>
					 	</isEqual>
					 	
						<!--처리자구분에 체크항목이 하나도 없는 경우, 전체데이터가 조회된다.-->
					 	<isEqual property="cmp_handler" compareValue="1">   
					 		AND	A.DSPSR_YN_CNSLR = 'Y'
					 	</isEqual>
					 	<isEqual property="cmp_handler" compareValue="2">   
					 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y')
					 	</isEqual>
					 	<isEqual property="cmp_handler" compareValue="3">   
					 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
					 	</isEqual>
					 	<isEqual property="cmp_handler" compareValue="4">   
					 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
					 	</isEqual>
					 	<isEqual property="cmp_handler" compareValue="5">   
					 		AND	A.DSPSR_YN_DSFT_CHRG = 'Y'
					 	</isEqual>
					 	<isEqual property="cmp_handler" compareValue="6">   
					 		AND	A.DSPSR_YN_PART_HD = 'Y'
					 	</isEqual>
					 	<isEqual property="cmp_handler" compareValue="7">   
					 		AND	(A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
					 	</isEqual>
		       		</dynamic>  
		   			
		   			
		   			GROUP BY ROLLUP(G.HGRK_DEPT_CDNM,G.HGRK_DEPT_CD, G.DEPT_CDNM) 
		   			having (HGRK_DEPT_CD) is not null
		   			order by G.HGRK_DEPT_CDNM,G.HGRK_DEPT_CD, G.DEPT_CDNM
		   		)
		   union all
		   
		     select case when HGRK_DEPT_CDNM is not null then HGRK_DEPT_CDNM else '전체' end as HGRK_DEPT_CDNM,
		        HGRK_DEPT_CD,
		       		    case when DEPT_CDNM is not null then DEPT_CDNM else '합계' end as    DEPT_CDNM
		        
		        ,round(CASE WHEN CA_CA_CNT > 0 then CA_CA_DT / CA_CA_CNT * 100 else null end,1) as CA_CA
		        ,round(CASE WHEN CA_CB_CNT > 0 then CA_CB_DT / CA_CB_CNT * 100 else null end,1) as CA_CB
		        ,round(CASE WHEN CA_CC_CNT > 0 then CA_CC_DT / CA_CC_CNT * 100 else null end,1) as CA_CC
		        ,round(CASE WHEN CA_CD_CNT > 0 then CA_CD_DT / CA_CD_CNT * 100 else null end,1) as CA_CD
		        ,round(CASE WHEN CA_CE_CNT > 0 then CA_CE_DT / CA_CE_CNT * 100 else null end,1) as CA_CE
		        ,round(CASE WHEN CA_CF_CNT > 0 then CA_CF_DT / CA_CF_CNT * 100 else null end,1) as CA_CF
		        ,round(CASE WHEN CA_CG_CNT > 0 then CA_CG_DT / CA_CG_CNT * 100 else null end,1) as CA_CG
		        ,round(CASE WHEN CA_CH_CNT > 0 then CA_CH_DT / CA_CH_CNT * 100 else null end,1) as CA_CH
		        ,round(CASE WHEN CA_CI_CNT > 0 then CA_CI_DT / CA_CI_CNT * 100 else null end,1) as CA_CI
		        ,round(CASE WHEN CA_CJ_CNT > 0 then CA_CJ_DT / CA_CJ_CNT * 100 else null end,1) as CA_CJ
		        ,round(CASE WHEN CA_CK_CNT > 0 then CA_CK_DT / CA_CK_CNT * 100 else null end,1) as CA_CK
		        ,round(CASE WHEN CA_CL_CNT > 0 then CA_CL_DT / CA_CL_CNT * 100 else null end,1) as CA_CL
		        ,round(CASE WHEN CA_CM_CNT > 0 then CA_CM_DT / CA_CM_CNT * 100 else null end,1) as CA_CM
		        ,round(CASE WHEN CA_CN_CNT > 0 then CA_CN_DT / CA_CN_CNT * 100 else null end,1) as CA_CN
		        ,round(CASE WHEN CA_CO_CNT > 0 then CA_CO_DT / CA_CO_CNT * 100 else null end,1) as CA_CO
		        ,round(CASE WHEN CA_CR_CNT > 0 then CA_CR_DT / CA_CR_CNT * 100 else null end,1) as CA_CR
		        
		        ,round(CASE WHEN CA_CT_CNT > 0 then CA_CT_DT / CA_CT_CNT * 100 else null end,1) as CA_CT
		        ,round(CASE WHEN CA_CU_CNT > 0 then CA_CU_DT / CA_CU_CNT * 100 else null end,1) as CA_CU
		        ,round(CASE WHEN CA_CV_CNT > 0 then CA_CV_DT / CA_CV_CNT * 100 else null end,1) as CA_CV
		        ,round(CASE WHEN CA_CW_CNT > 0 then CA_CW_DT / CA_CW_CNT * 100 else null end,1) as CA_CW
		        ,round(CASE WHEN CA_CX_CNT > 0 then CA_CX_DT / CA_CX_CNT * 100 else null end,1) as CA_CX
		        ,round(CASE WHEN CA_CY_CNT > 0 then CA_CY_DT / CA_CY_CNT * 100 else null end,1) as CA_CY
		       	       
		        
		        ,round(CASE WHEN CK_CA_CNT > 0 then CK_CA_DT / CK_CA_CNT * 100 else null end,1) as CK_CA
		        ,round(CASE WHEN CK_CB_CNT > 0 then CK_CB_DT / CK_CB_CNT * 100 else null end,1) as CK_CB
		        ,round(CASE WHEN CK_CC_CNT > 0 then CK_CC_DT / CK_CC_CNT * 100 else null end,1) as CK_CC
		        ,round(CASE WHEN CK_CD_CNT > 0 then CK_CD_DT / CK_CD_CNT * 100 else null end,1) as CK_CD
		        ,round(CASE WHEN CK_CE_CNT > 0 then CK_CE_DT / CK_CE_CNT * 100 else null end,1) as CK_CE
		        ,round(CASE WHEN CK_CF_CNT > 0 then CK_CF_DT / CK_CF_CNT * 100 else null end,1) as CK_CF
		        ,round(CASE WHEN CK_CG_CNT > 0 then CK_CG_DT / CK_CG_CNT * 100 else null end,1) as CK_CG
		        ,round(CASE WHEN CK_CH_CNT > 0 then CK_CH_DT / CK_CH_CNT * 100 else null end,1) as CK_CH
		        ,round(CASE WHEN CK_CI_CNT > 0 then CK_CI_DT / CK_CI_CNT * 100 else null end,1) as CK_CI
		        ,round(CASE WHEN CK_CJ_CNT > 0 then CK_CJ_DT / CK_CJ_CNT * 100 else null end,1) as CK_CJ
		        ,round(CASE WHEN CK_CK_CNT > 0 then CK_CK_DT / CK_CK_CNT * 100 else null end,1) as CK_CK
		        ,round(CASE WHEN CK_CL_CNT > 0 then CK_CL_DT / CK_CL_CNT * 100 else null end,1) as CK_CL
		        ,round(CASE WHEN CK_CM_CNT > 0 then CK_CM_DT / CK_CM_CNT * 100 else null end,1) as CK_CM
		        ,round(CASE WHEN CK_CN_CNT > 0 then CK_CN_DT / CK_CN_CNT * 100 else null end,1) as CK_CN
		        ,round(CASE WHEN CK_CO_CNT > 0 then CK_CO_DT / CK_CO_CNT * 100 else null end,1) as CK_CO
		        ,round(CASE WHEN CK_CR_CNT > 0 then CK_CR_DT / CK_CR_CNT * 100 else null end,1) as CK_CR
		        
		        ,round(CASE WHEN CK_CT_CNT > 0 then CK_CT_DT / CK_CT_CNT * 100 else null end,1) as CK_CT
		        ,round(CASE WHEN CK_CU_CNT > 0 then CK_CU_DT / CK_CU_CNT * 100 else null end,1) as CK_CU
		        ,round(CASE WHEN CK_CV_CNT > 0 then CK_CV_DT / CK_CV_CNT * 100 else null end,1) as CK_CV
		        ,round(CASE WHEN CK_CW_CNT > 0 then CK_CW_DT / CK_CW_CNT * 100 else null end,1) as CK_CW
		        ,round(CASE WHEN CK_CX_CNT > 0 then CK_CX_DT / CK_CX_CNT * 100 else null end,1) as CK_CX
		        ,round(CASE WHEN CK_CY_CNT > 0 then CK_CY_DT / CK_CY_CNT * 100 else null end,1) as CK_CY
		       
		        ,round(CASE WHEN DG_ALL_CNT > 0 then DG_ALL / DG_ALL_CNT * 100 else null end,1) as DG_ALL
		        
		        
		        from( 
		        select G.HGRK_DEPT_CDNM,G.HGRK_DEPT_CD,  G.DEPT_CDNM
		        
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CA'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CA_CA_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CA' THEN 1 ELSE 0 END) AS CA_CA_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CB'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CA_CB_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CB' THEN 1 ELSE 0 END) AS CA_CB_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CC'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CA_CC_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CC' THEN 1 ELSE 0 END) AS CA_CC_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CD'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CA_CD_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CD' THEN 1 ELSE 0 END) AS CA_CD_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CE'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CA_CE_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CE' THEN 1 ELSE 0 END) AS CA_CE_CNT                
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CF'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CA_CF_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CF' THEN 1 ELSE 0 END) AS CA_CF_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CG'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CA_CG_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CG' THEN 1 ELSE 0 END) AS CA_CG_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CH'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CA_CH_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CH' THEN 1 ELSE 0 END) AS CA_CH_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CI'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CA_CI_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CI' THEN 1 ELSE 0 END) AS CA_CI_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CJ'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CA_CJ_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CJ' THEN 1 ELSE 0 END) AS CA_CJ_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CK'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CA_CK_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CK' THEN 1 ELSE 0 END) AS CA_CK_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CL'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CA_CL_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CL' THEN 1 ELSE 0 END) AS CA_CL_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CM'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CA_CM_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CM' THEN 1 ELSE 0 END) AS CA_CM_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CN'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CA_CN_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CN' THEN 1 ELSE 0 END) AS CA_CN_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CO'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CA_CO_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CO' THEN 1 ELSE 0 END) AS CA_CO_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CR'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CA_CR_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CR' THEN 1 ELSE 0 END) AS CA_CR_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CT'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CA_CT_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CT' THEN 1 ELSE 0 END) AS CA_CT_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CU'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CA_CU_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CU' THEN 1 ELSE 0 END) AS CA_CU_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CV'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CA_CV_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CV' THEN 1 ELSE 0 END) AS CA_CV_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CW'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CA_CW_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CW' THEN 1 ELSE 0 END) AS CA_CW_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CX'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CA_CX_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CX' THEN 1 ELSE 0 END) AS CA_CX_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CY'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CA_CY_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CY' THEN 1 ELSE 0 END) AS CA_CY_CNT                                      
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CA'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CK_CA_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CA' THEN 1 ELSE 0 END) AS CK_CA_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CB'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CK_CB_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CB' THEN 1 ELSE 0 END) AS CK_CB_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CC'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CK_CC_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CC' THEN 1 ELSE 0 END) AS CK_CC_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CD'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CK_CD_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CD' THEN 1 ELSE 0 END) AS CK_CD_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CE'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CK_CE_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CE' THEN 1 ELSE 0 END) AS CK_CE_CNT                
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CF'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CK_CF_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CF' THEN 1 ELSE 0 END) AS CK_CF_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CG'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CK_CG_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CG' THEN 1 ELSE 0 END) AS CK_CG_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CH'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CK_CH_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CH' THEN 1 ELSE 0 END) AS CK_CH_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CI'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CK_CI_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CI' THEN 1 ELSE 0 END) AS CK_CI_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CJ'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CK_CJ_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CJ' THEN 1 ELSE 0 END) AS CK_CJ_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CK'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CK_CK_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CK' THEN 1 ELSE 0 END) AS CK_CK_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CL'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CK_CL_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CL' THEN 1 ELSE 0 END) AS CK_CL_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CM'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CK_CM_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CM' THEN 1 ELSE 0 END) AS CK_CM_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CN'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CK_CN_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CN' THEN 1 ELSE 0 END) AS CK_CN_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CO'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CK_CO_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CO' THEN 1 ELSE 0 END) AS CK_CO_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CR'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CK_CR_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CR' THEN 1 ELSE 0 END) AS CK_CR_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CT'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CK_CT_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CT' THEN 1 ELSE 0 END) AS CK_CT_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CU'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CK_CU_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CU' THEN 1 ELSE 0 END) AS CK_CU_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CV'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CK_CV_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CV' THEN 1 ELSE 0 END) AS CK_CV_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CW'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CK_CW_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CW' THEN 1 ELSE 0 END) AS CK_CW_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CX'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CK_CX_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CX' THEN 1 ELSE 0 END) AS CK_CX_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CY'  and A.PROC_DTM IS NOT NULL THEN 1  ELSE 0 END) AS CK_CY_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CY' THEN 1 ELSE 0 END) AS CK_CY_CNT
                ,SUM(CASE WHEN A.DSFT_TYP_CD IN ('CK','CA') and A.PROC_DTM IS NOT NULL THEN 1 ELSE 0 END) AS DG_ALL
                ,SUM(CASE WHEN A.DSFT_TYP_CD IN ('CK','CA') THEN 1 ELSE 0 END) AS DG_ALL_CNT
                
		            FROM TBL_DSFT_ACPN_PROC A					
			        LEFT JOIN TBL_HC_HIST C
			               ON A.DSFT_ACPN_SEQ_NO = C.DSFT_ACPN_SEQ_NO		  
			        LEFT JOIN TBL_CRPN_CUST_BASE D
			       		   ON A.ORGN_PTR_ST_CD = D.CUST_ID        	    	  
			        LEFT JOIN TBL_USR B
			       		   ON A.DSPSR_ID = B.USR_ID 
			        LEFT JOIN TBL_HR_EMP_CD F
			       		   ON A.DSPSR_ID = F.EMP_NO
			        LEFT JOIN TBL_HR_DEPT_CD G 
			       		   ON F.BLNG_DEPT_CD = G.DEPT_CD
			        LEFT JOIN TBL_SAP_CD H	
			       		   ON (A.ORGN_ENTR_DV_CD = H.CD_ID AND H.CD_CLAS_CD = '1')	
			        LEFT JOIN TBL_DSFT_TAXN_TYP_CD I
			       		   ON A.DSFT_TAXN_TYP_CD = I.DSFT_TAXN_TYP_CD
			       		   
			WHERE G.HGRK_DEPT_CD IN ('E00054','E00056','T21000','E00053','E00042','E00044','JD1000','E00048')
								
		   			AND (A.DEL_YN = 'N' OR A.DEL_YN IS NULL) 
		   			
		   				<dynamic>
		       			<!-- 년도별 -->   				    	
			    	    <isEqual property="cmb_gubun" compareValue="1">              
			                and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'                                                                  
			            </isEqual>
			            <!--  -->
			            <isEqual property="cmb_gubun" compareValue="2">
			            	<isEmpty property="cmb_half">
			            		and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'
			            	</isEmpty>              
			                <isEqual property="cmb_half" compareValue="1">
			                	and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0632000000'                                                                  
							</isEqual>	 
							<isEqual property="cmb_half" compareValue="2">
								and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '1232000000'
							</isEqual>	 
			            </isEqual>	 
			            <isEqual property="cmb_gubun" compareValue="3"> 
			            	<isEmpty>
								and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'	            	
			            	</isEmpty>    
			           		<isEqual property="cmb_qua" compareValue="1">
			           			and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0332000000'   
			           	  	</isEqual>
			           	  	<isEqual property="cmb_qua" compareValue="2">
			           	   		and A.ACPN_DTM between #time_key# || '0400000000' and #time_key# || '0632000000'   
			           	  	</isEqual>	 
			           	  	<isEqual property="cmb_qua" compareValue="3">
			           	   		and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '0932000000'   
			           	  	</isEqual>	 
		           	  		<isEqual property="cmb_qua" compareValue="4">
			           	   		and A.ACPN_DTM between #time_key# || '1000000000' and #time_key# || '1232000000'   
			           	  	</isEqual>	 	 
		            	</isEqual>	 				            
			    	 	<isEqual property="cmb_gubun" compareValue="4">              
			            	and A.ACPN_DTM between #time_key# || '00000000' and #time_key# || '32000000'                                                                  
			         	</isEqual>	
			    	 	<isEqual property="cmb_gubun" compareValue="5">              
			                and A.ACPN_DTM between #time_key# || '000000' and #time_key# || '240000'                                                                  
			         	</isEqual>
					
						<!-- 불만유형이 전체일 때는 두가지 경우 존재(전체, 품질&혼유)		-->				
						<isEmpty property="dsft_typ_cd">
							<isEqual property="dsft_typ_tot_gbn" compareValue="2">
								AND A.DSFT_TYP_CD IN ('CA','CK')
							</isEqual>
						</isEmpty>						
					  	<isNotEmpty prepend="AND" property="dsft_typ_cd">				<!-- 불만유형		-->
					    	A.DSFT_TYP_CD = #dsft_typ_cd#
					  	</isNotEmpty>
					  	<isNotEmpty prepend="AND" property="dsft_taxn_typ_cd">			<!-- 불만세부유형		-->
					    	A.DSFT_TAXN_TYP_CD = #dsft_taxn_typ_cd#
					  	</isNotEmpty>
				  		<isNotEmpty prepend="AND" property="orgn_ptr_st_cd">			<!-- 불만발생업체코드(가맹점SAP코드) -->
						    A.ORGN_PTR_ST_CD = #orgn_ptr_st_cd#
					  	</isNotEmpty>
					    <isNotEmpty prepend="AND" property="conn_chnl_kind_cd">			<!-- 접촉채널	-->
						    A.CONN_CHNL_KIND_CD = #conn_chnl_kind_cd#
					    </isNotEmpty>			  	
					  	<isNotEmpty prepend="AND" property="hgrk_dept_cd">				<!-- 부문/본부 -->
						    G.HGRK_DEPT_CD = #hgrk_dept_cd#
					  	</isNotEmpty>
					  	<isNotEmpty prepend="AND" property="dept_cd">					<!-- 처리팀 -->
						    G.DEPT_CD = #dept_cd#
					  	</isNotEmpty>
					  	<isNotEmpty prepend="AND" property="dspsr_id_nm">				<!-- 처리자명 		-->
						    (B.USR_NM LIKE '%'|| #dspsr_id_nm# ||'%' OR F.EMP_NM LIKE '%'|| #dspsr_id_nm# ||'%')
					  	</isNotEmpty>
				 		<isEqual property="hc_yn" compareValue="Y"> 					<!-- 해피콜여부  -->
				 			AND A.HC_YN = 'Y'
				 		</isEqual>
					 	<isEqual property="hc_yn" compareValue="N"> 					<!-- 해피콜여부  -->
					 		AND (A.HC_YN = 'N' OR A.HC_YN IS NULL)
					 	</isEqual>
					  	<isNotEmpty prepend="AND" property="attd_sft_cd">				<!-- 태도만족도 		-->
					  		(A.HC_YN = 'Y' AND C.ATTD_SFT_CD = #attd_sft_cd#)
					  	</isNotEmpty>
					  	<isNotEmpty prepend="AND" property="rslt_sft_cd">				<!-- 결과만족도 		-->
					  		(A.HC_YN = 'Y' AND C.RSLT_SFT_CD = #rslt_sft_cd#)
					  	</isNotEmpty>
					  	<isNotEmpty prepend="AND" property="hc_uabl_rsn_cd">			<!-- 해피콜불가사유		-->
					  		A.HC_UABL_RSN_CD = #hc_uabl_rsn_cd#
					  	</isNotEmpty>
					  	<isNotEmpty prepend="AND" property="prdct_cd">					<!-- 불만제품 		-->
						    A.PRDCT_CD = #prdct_cd#
					  	</isNotEmpty>			  				 	
					  	<isNotEmpty prepend="AND" property="prblm_penom_cd">			<!-- 현상 		-->
						    A.PRBLM_PENOM_CD = #prblm_penom_cd#
					  	</isNotEmpty>
				 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="1">  	<!-- 시료품질 점검결과		-->
				 			AND	A.VHCL_QLIT_DSFT_CAUS_CD_CUST IS NOT NULL
				 	  	</isEqual>
				 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="2">   	<!-- 시료품질 점검결과		-->
				 	  		AND	A.VHCL_QLIT_DSFT_CAUS_CD_PTR_ST IS NOT NULL
				 	  	</isEqual>
					  	<isNotEmpty prepend="AND" property="vhcl_biztr_qlit_dsft_typ_cd">			<!-- 품질불만유형 		-->
						    A.VHCL_BIZTR_QLIT_DSFT_TYP_CD = #vhcl_biztr_qlit_dsft_typ_cd#
					  	</isNotEmpty>
					 	<isEqual property="vhcl_biztr_yn" compareValue="Y"> 			<!-- Kixx 품질서비스차량 출동 -->
					 		AND A.VHCL_BIZTR_YN = 'Y'
					 	</isEqual>
					 	<isEqual property="vhcl_biztr_yn" compareValue="N"> 			<!-- Kixx 품질서비스차량 출동 -->
					 		AND (A.VHCL_BIZTR_YN = 'N' OR A.VHCL_BIZTR_YN IS NULL)
					 	</isEqual>		 	  	
					 	<isEqual property="rwrd_yn" compareValue="Y"> 					<!-- 보상여부 -->
					 		AND A.RWRD_YN = 'Y'
					 	</isEqual>
					 	<isEqual property="rwrd_yn" compareValue="N"> 					<!-- 보상여부 -->
					 		AND (A.RWRD_YN = 'N' OR A.RWRD_YN IS NULL)
					 	</isEqual>
					 	
					 	<isEqual property="cps_amt_gbn" compareValue="1"> 				
					 		<isEqual property="cps_amt" compareValue="1">				<!-- 주유소 보상금 1만원 미만-->
					 			AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 10000
					 		</isEqual>
					 		<isEqual property="cps_amt" compareValue="2">				<!-- 주유소 보상금 1만원 ~ 10만원-->
					 			AND (A.PTR_ST_CPS_AMT <![CDATA[>=]]> 10000 AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 100000)
					 		</isEqual>
							<isEqual property="cps_amt" compareValue="3">				<!-- 주유소 보상금 10만원 초과-->
					 			AND A.PTR_ST_CPS_AMT <![CDATA[>]]> 100000
					 		</isEqual>
					 	</isEqual>
					 	<isEqual property="cps_amt_gbn" compareValue="2"> 				
					 		<isEqual property="cps_amt" compareValue="1">				<!-- 회사 보상금 1만원 미만-->
					 			AND A.CO_CPS_AMT <![CDATA[<]]> 10000
					 		</isEqual>
					 		<isEqual property="cps_amt" compareValue="2">				<!-- 회사 보상금 1만원 ~ 10만원-->
					 			AND (A.CO_CPS_AMT <![CDATA[>=]]> 10000 AND A.CO_CPS_AMT <![CDATA[<]]> 100000)
					 		</isEqual>
							<isEqual property="cps_amt" compareValue="3">				<!-- 회사 보상금 10만원 초과-->
					 			AND A.CO_CPS_AMT <![CDATA[>]]> 100000
					 		</isEqual>
					 	</isEqual>
					 	<isEqual property="cps_amt_gbn" compareValue="3"> 				
					 		<isEqual property="cps_amt" compareValue="1">				<!-- 총 보상금 1만원 미만-->
					 			AND A.TOT_CPS_AMT <![CDATA[<]]> 10000
					 		</isEqual>
					 		<isEqual property="cps_amt" compareValue="2">				<!-- 총 보상금 1만원 ~ 10만원-->
					 			AND (A.TOT_CPS_AMT <![CDATA[>=]]> 10000 AND A.TOT_CPS_AMT <![CDATA[<]]> 100000)
					 		</isEqual>
							<isEqual property="cps_amt" compareValue="3">				<!-- 총 보상금 10만원 초과-->
					 			AND A.TOT_CPS_AMT <![CDATA[>]]> 100000
					 		</isEqual>
					 	</isEqual>
					 	
						<!--처리자구분에 체크항목이 하나도 없는 경우, 전체데이터가 조회된다.-->
					 	<isEqual property="cmp_handler" compareValue="1">   
					 		AND	A.DSPSR_YN_CNSLR = 'Y'
					 	</isEqual>
					 	<isEqual property="cmp_handler" compareValue="2">   
					 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y')
					 	</isEqual>
					 	<isEqual property="cmp_handler" compareValue="3">   
					 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
					 	</isEqual>
					 	<isEqual property="cmp_handler" compareValue="4">   
					 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
					 	</isEqual>
					 	<isEqual property="cmp_handler" compareValue="5">   
					 		AND	A.DSPSR_YN_DSFT_CHRG = 'Y'
					 	</isEqual>
					 	<isEqual property="cmp_handler" compareValue="6">   
					 		AND	A.DSPSR_YN_PART_HD = 'Y'
					 	</isEqual>
					 	<isEqual property="cmp_handler" compareValue="7">   
					 		AND	(A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
					 	</isEqual>
		       		</dynamic>  
		   			
		   			
		   			GROUP BY ROLLUP(G.HGRK_DEPT_CDNM,G.HGRK_DEPT_CD, G.DEPT_CDNM) 
		   			having (HGRK_DEPT_CDNM) is null
		   			order by G.HGRK_DEPT_CDNM,G.HGRK_DEPT_CD, G.DEPT_CDNM
		   		)
 	</select> 	
 
 </sqlMap>
