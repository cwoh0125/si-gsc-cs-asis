<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="CMP340">
 	
	<!-- 만족도1)-->
 	<select id="Get_CMP_SELECT1" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
	 select HGRK_DEPT_CDNM
				,DSPSR_CHRG_DEPT
				,DEPT_CD 
					, round(count_a1 / nvl(count_a2,1) * 100,1) as hvalue1
				, round(count_b1 / nvl(count_b2,1) * 100,1) as hvalue2
				, round(count_c1 / nvl(count_c2,1) * 100,1) as hvalue3
				, round(count_d1 / nvl(count_d2,1) * 100,1) as hvalue4
				, round(count_e1 / nvl(count_e2,1) * 100,1) as hvalue5
				, round(count_f1 / nvl(count_f2,1) * 100,1) as hvalue6
				, round(count_g1 / nvl(count_g2,1) * 100,1) as hvalue7
				, round(count_h1 / nvl(count_h2,1) * 100,1) as hvalue8
				, round(count_i1 / nvl(count_i2,1) * 100,1) as hvalue9
				, round(count_j1 / nvl(count_j2,1) * 100,1) as hvalue10
				, round(count_k1 / nvl(count_k2,1) * 100,1) as hvalue11
				, round(count_l1 / nvl(count_l2,1) * 100,1) as hvalue12
				, round(count_m1 / nvl(count_m2,1) * 100,1) as hvalue13
				, round(count_n1 / nvl(count_n2,1) * 100,1) as hvalue14
				, round(count_o1 / nvl(count_o2,1) * 100,1) as hvalue15
				, round(count_p1 / nvl(count_p2,1) * 100,1) as hvalue16
				, round(count_q1 / nvl(count_q2,1) * 100,1) as hvalue17
				, round(count_r1 / nvl(count_r2,1) * 100,1) as hvalue18
				, round(count_s1 / nvl(count_s2,1) * 100,1) as hvalue19
				, round(count_t1 / nvl(count_t2,1) * 100,1) as hvalue20
				, round(count_u1 / nvl(count_u2,1) * 100,1) as hvalue21
				, round(count_v1 / nvl(count_v2,1) * 100,1) as hvalue22
				, round(count_w1 / nvl(count_w2,1) * 100,1) as hvalue23
				, round(count_x1 / nvl(count_x2,1) * 100,1) as hvalue24
				, round(count_y1 / nvl(count_y2,1) * 100,1) as hvalue25
				, round((nvl(count_a1,0)+
				nvl(count_b1,0)+
				nvl(count_c1,0)+
				nvl(count_d1,0)+
				nvl(count_e1,0)+
				nvl(count_f1,0)+
				nvl(count_g1,0)+
				nvl(count_h1,0)+
				nvl(count_i1,0)+
				nvl(count_j1,0)+
				nvl(count_k1,0)+
				nvl(count_l1,0)+
				nvl(count_m1,0)+
				nvl(count_n1,0)+
				nvl(count_o1,0)+
				nvl(count_p1,0)+
				nvl(count_q1,0)+
				nvl(count_r1,0)+
				nvl(count_s1,0)+
				nvl(count_t1,0)+
				nvl(count_u1,0)+
				nvl(count_v1,0)+
				nvl(count_w1,0)+
				nvl(count_x1,0)+
				nvl(count_y1,0))/
				
				(case when  				
				(nvl(count_a2,0)+
				nvl(count_b2,0)+
				nvl(count_c2,0)+
				nvl(count_d2,0)+
				nvl(count_e2,0)+
				nvl(count_f2,0)+
				nvl(count_g2,0)+
				nvl(count_h2,0)+
				nvl(count_i2,0)+
				nvl(count_j2,0)+
				nvl(count_k2,0)+
				nvl(count_l2,0)+
				nvl(count_m2,0)+
				nvl(count_n2,0)+
				nvl(count_o2,0)+
				nvl(count_p2,0)+
				nvl(count_q2,0)+
				nvl(count_r2,0)+
				nvl(count_s2,0)+
				nvl(count_t2,0)+
				nvl(count_u2,0)+
				nvl(count_v2,0)+
				nvl(count_w2,0)+
				nvl(count_x2,0)+
				nvl(count_y2,0))='0'
				then 1 else 
				nvl(count_a2,0)+
				nvl(count_b2,0)+
				nvl(count_c2,0)+
				nvl(count_d2,0)+
				nvl(count_e2,0)+
				nvl(count_f2,0)+
				nvl(count_g2,0)+
				nvl(count_h2,0)+
				nvl(count_i2,0)+
				nvl(count_j2,0)+
				nvl(count_k2,0)+
				nvl(count_l2,0)+
				nvl(count_m2,0)+
				nvl(count_n2,0)+
				nvl(count_o2,0)+
				nvl(count_p2,0)+
				nvl(count_q2,0)+
				nvl(count_r2,0)+
				nvl(count_s2,0)+
				nvl(count_t2,0)+
				nvl(count_u2,0)+
				nvl(count_v2,0)+
				nvl(count_w2,0)+
				nvl(count_x2,0)+
				nvl(count_y2,0) end)
				 * 100,1) as hvalue26
				
				 from (SELECT 	HGRK_DEPT_CDNM
				,DSPSR_CHRG_DEPT
				,DEPT_CD, 
	
	CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CA' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CA' and C.RSLT_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_a1
	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CA' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CA' then 1 else 0 end)) else null end as count_a2
	
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CB' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CB' and C.RSLT_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_b1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CB' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CB' then 1 else 0 end)) else null end as count_b2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CC' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CC' and C.RSLT_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_c1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CC' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CC' then 1 else 0 end)) else null end as count_c2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CD' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CD' and C.RSLT_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_d1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CD' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CD' then 1 else 0 end)) else null end as count_d2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CE' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CE' and C.RSLT_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_e1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CE' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CE' then 1 else 0 end)) else null end as count_e2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CF' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CF' and C.RSLT_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_f1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CF' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CF' then 1 else 0 end)) else null end as count_f2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CG' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CG' and C.RSLT_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_g1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CG' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CG' then 1 else 0 end)) else null end as count_g2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CH' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CH' and C.RSLT_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_h1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CH' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CH' then 1 else 0 end)) else null end as count_h2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CI' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CI' and C.RSLT_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_i1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CI' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CI' then 1 else 0 end)) else null end as count_i2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CJ' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CJ' and C.RSLT_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_j1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CJ' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CJ' then 1 else 0 end)) else null end as count_j2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CK' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CK' and C.RSLT_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_k1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CK' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CK' then 1 else 0 end)) else null end as count_k2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CL' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CL' and C.RSLT_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_l1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CL' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CL' then 1 else 0 end)) else null end as count_l2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CM' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CM' and C.RSLT_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_m1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CM' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CM' then 1 else 0 end)) else null end as count_m2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CN' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CN' and C.RSLT_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_n1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CN' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CN' then 1 else 0 end)) else null end as count_n2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CO' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CO' and C.RSLT_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_o1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CO' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CO' then 1 else 0 end)) else null end as count_o2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CP' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CP' and C.RSLT_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_p1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CP' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CP' then 1 else 0 end)) else null end as count_p2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CQ' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CQ' and C.RSLT_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_q1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CQ' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CQ' then 1 else 0 end)) else null end as count_q2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CR' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CR' and C.RSLT_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_r1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CR' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CR' then 1 else 0 end)) else null end as count_r2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DA' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DA' and C.RSLT_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_s1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DA' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DA' then 1 else 0 end)) else null end as count_s2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DB' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DB' and C.RSLT_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_t1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DB' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DB' then 1 else 0 end)) else null end as count_t2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DC' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DC' and C.RSLT_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_u1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DC' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DC' then 1 else 0 end)) else null end as count_u2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DD' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DD' and C.RSLT_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_v1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DD' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DD' then 1 else 0 end)) else null end as count_v2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DE' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DE' and C.RSLT_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_w1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DE' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DE' then 1 else 0 end)) else null end as count_w2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DF' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DF' and C.RSLT_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_x1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DF' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DF' then 1 else 0 end)) else null end as count_x2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DG' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DG' and C.RSLT_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_y1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DG' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DG' then 1 else 0 end)) else null end as count_y2
	
                                        
	
	        FROM TBL_DSFT_ACPN_PROC A					  		   
			        LEFT JOIN TBL_HC_HIST C
			               ON A.DSFT_ACPN_SEQ_NO = C.DSFT_ACPN_SEQ_NO		  
			        LEFT JOIN TBL_CRPN_CUST_BASE D
			       		   ON A.ORGN_PTR_ST_CD = D.CUST_ID        	    	  
			        LEFT JOIN TBL_USR B
			       		   ON A.DSPSR_ID = B.USR_ID 
			        LEFT JOIN TBL_HR_EMP_CD F
			       		   ON A.DSPSR_ID = F.EMP_NO
			        LEFT JOIN TBL_HR_DEPT_CD G 
			       		   ON F.BLNG_DEPT_CD = G.DEPT_CD
			        LEFT JOIN TBL_SAP_CD H	
			       		   ON (A.ORGN_ENTR_DV_CD = H.CD_ID AND H.CD_CLAS_CD = '1')	
			        LEFT JOIN TBL_DSFT_TAXN_TYP_CD I
			       		   ON A.DSFT_TAXN_TYP_CD = I.DSFT_TAXN_TYP_CD
			       		   
			WHERE (A.DEL_YN = 'N' OR A.DEL_YN IS NULL)	
			and (A.DSPSR_YN_OB_CNTR='N' or A.DSPSR_YN_OB_CNTR is null )	
              and (A.HC_YN ='Y')
	
	       		<dynamic>
	       			<!-- 년도별 -->   				    	
		    	    <isEqual property="cmb_gubun" compareValue="1">              
		                and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'                                                                  
		            </isEqual>
		            <!--  -->
		            <isEqual property="cmb_gubun" compareValue="2">
		            	<isEmpty property="cmb_half">
		            		and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'
		            	</isEmpty>              
		                <isEqual property="cmb_half" compareValue="1">
		                	and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0632000000'                                                                  
						</isEqual>	 
						<isEqual property="cmb_half" compareValue="2">
							and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '1232000000'
						</isEqual>	 
		            </isEqual>	 
		            <isEqual property="cmb_gubun" compareValue="3"> 
		            	<isEmpty>
							and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'	            	
		            	</isEmpty>    
		           		<isEqual property="cmb_qua" compareValue="1">
		           			and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0332000000'   
		           	  	</isEqual>
		           	  	<isEqual property="cmb_qua" compareValue="2">
		           	   		and A.ACPN_DTM between #time_key# || '0400000000' and #time_key# || '0632000000'   
		           	  	</isEqual>	 
		           	  	<isEqual property="cmb_qua" compareValue="3">
		           	   		and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '0932000000'   
		           	  	</isEqual>	 
	           	  		<isEqual property="cmb_qua" compareValue="4">
		           	   		and A.ACPN_DTM between #time_key# || '1000000000' and #time_key# || '1232000000'   
		           	  	</isEqual>	 	 
	            	</isEqual>	 				            
		    	 	<isEqual property="cmb_gubun" compareValue="4">              
		            	and A.ACPN_DTM between #time_key# || '00000000' and #time_key# || '32000000'                                                                  
		         	</isEqual>	
		    	 	<isEqual property="cmb_gubun" compareValue="5">              
		                and A.ACPN_DTM between #time_key# || '000000' and #time_key2# || '240000'                                                                  
		         	</isEqual>
				
					<!-- 불만유형이 전체일 때는 두가지 경우 존재(전체, 품질&혼유)		-->				
					<isEmpty property="dsft_typ_cd">
						<isEqual property="dsft_typ_tot_gbn" compareValue="2">
							AND A.DSFT_TYP_CD IN ('CA','CK')
						</isEqual>
					</isEmpty>
				  	<isNotEmpty prepend="AND" property="dsft_typ_cd">				<!-- 불만유형		-->
				    	A.DSFT_TYP_CD = #dsft_typ_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dsft_taxn_typ_cd">			<!-- 불만세부유형		-->
				    	A.DSFT_TAXN_TYP_CD = #dsft_taxn_typ_cd#
				  	</isNotEmpty>
			  		<isNotEmpty prepend="AND" property="orgn_ptr_st_cd">			<!-- 불만발생업체코드(가맹점SAP코드) -->
					    A.ORGN_PTR_ST_CD = #orgn_ptr_st_cd#
				  	</isNotEmpty>
				    <isNotEmpty prepend="AND" property="conn_chnl_kind_cd">			<!-- 접촉채널	-->
					    A.CONN_CHNL_KIND_CD = #conn_chnl_kind_cd#
				    </isNotEmpty>			  	
				  	<isNotEmpty prepend="AND" property="hgrk_dept_cd">				<!-- 부문/본부 -->
					    G.HGRK_DEPT_CD = #hgrk_dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dept_cd">					<!-- 처리팀 -->
					    G.DEPT_CD = #dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dspsr_id_nm">				<!-- 처리자명 		-->
					    (B.USR_NM LIKE '%'|| #dspsr_id_nm# ||'%' OR F.EMP_NM LIKE '%'|| #dspsr_id_nm# ||'%')
				  	</isNotEmpty>
			 		<isEqual property="hc_yn" compareValue="Y"> 					<!-- 해피콜여부  -->
			 			AND A.HC_YN = 'Y'
			 		</isEqual>
				 	<isEqual property="hc_yn" compareValue="N"> 					<!-- 해피콜여부  -->
				 		AND (A.HC_YN = 'N' OR A.HC_YN IS NULL)
				 	</isEqual>
				  	<isNotEmpty prepend="AND" property="attd_sft_cd">				<!-- 태도만족도 		-->
				  		(A.HC_YN = 'Y' AND C.ATTD_SFT_CD = #attd_sft_cd#)
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="rslt_sft_cd">				<!-- 결과만족도 		-->
				  		(A.HC_YN = 'Y' AND C.RSLT_SFT_CD = #rslt_sft_cd#)
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="hc_uabl_rsn_cd">			<!-- 해피콜불가사유		-->
				  		A.HC_UABL_RSN_CD = #hc_uabl_rsn_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="prdct_cd">					<!-- 불만제품 		-->
					    A.PRDCT_CD = #prdct_cd#
				  	</isNotEmpty>			  				 	
				  	<isNotEmpty prepend="AND" property="prblm_penom_cd">			<!-- 현상 		-->
					    A.PRBLM_PENOM_CD = #prblm_penom_cd#
				  	</isNotEmpty>
			 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="1">  	<!-- 시료품질 점검결과		-->
			 			AND	A.VHCL_QLIT_DSFT_CAUS_CD_CUST IS NOT NULL
			 	  	</isEqual>
			 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="2">   	<!-- 시료품질 점검결과		-->
			 	  		AND	A.VHCL_QLIT_DSFT_CAUS_CD_PTR_ST IS NOT NULL
			 	  	</isEqual>
				  	<isNotEmpty prepend="AND" property="vhcl_biztr_qlit_dsft_typ_cd">			<!-- 품질불만유형 		-->
					    A.VHCL_BIZTR_QLIT_DSFT_TYP_CD = #vhcl_biztr_qlit_dsft_typ_cd#
				  	</isNotEmpty>
				 	<isEqual property="vhcl_biztr_yn" compareValue="Y"> 			<!-- Kixx 품질서비스차량 출동 -->
				 		AND A.VHCL_BIZTR_YN = 'Y'
				 	</isEqual>
				 	<isEqual property="vhcl_biztr_yn" compareValue="N"> 			<!-- Kixx 품질서비스차량 출동 -->
				 		AND (A.VHCL_BIZTR_YN = 'N' OR A.VHCL_BIZTR_YN IS NULL)
				 	</isEqual>		 	  	
				 	<isEqual property="rwrd_yn" compareValue="Y"> 					<!-- 보상여부 -->
				 		AND A.RWRD_YN = 'Y'
				 	</isEqual>
				 	<isEqual property="rwrd_yn" compareValue="N"> 					<!-- 보상여부 -->
				 		AND (A.RWRD_YN = 'N' OR A.RWRD_YN IS NULL)
				 	</isEqual>
				 	
				 	<isEqual property="cps_amt_gbn" compareValue="1"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 주유소 보상금 1만원 미만-->
				 			AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 주유소 보상금 1만원 ~ 10만원-->
				 			AND (A.PTR_ST_CPS_AMT <![CDATA[>=]]> 10000 AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 주유소 보상금 10만원 초과-->
				 			AND A.PTR_ST_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	<isEqual property="cps_amt_gbn" compareValue="2"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 회사 보상금 1만원 미만-->
				 			AND A.CO_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 회사 보상금 1만원 ~ 10만원-->
				 			AND (A.CO_CPS_AMT <![CDATA[>=]]> 10000 AND A.CO_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 회사 보상금 10만원 초과-->
				 			AND A.CO_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	<isEqual property="cps_amt_gbn" compareValue="3"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 총 보상금 1만원 미만-->
				 			AND A.TOT_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 총 보상금 1만원 ~ 10만원-->
				 			AND (A.TOT_CPS_AMT <![CDATA[>=]]> 10000 AND A.TOT_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 총 보상금 10만원 초과-->
				 			AND A.TOT_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	
					<!--처리자구분에 체크항목이 하나도 없는 경우, 전체데이터가 조회된다.-->
				 	<isEqual property="cmp_handler" compareValue="1">   
				 		AND	A.DSPSR_YN_CNSLR = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="2">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="3">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="4">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="5">   
				 		AND	A.DSPSR_YN_DSFT_CHRG = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="6">   
				 		AND	A.DSPSR_YN_PART_HD = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="7">   
				 		AND	(A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
	       		</dynamic>  
		
		 group by HGRK_DEPT_CDNM
				,DSPSR_CHRG_DEPT
				,DEPT_CD order by  HGRK_DEPT_CDNM
				,DSPSR_CHRG_DEPT
				,DEPT_CD
				 )
	union all
	
	 select HGRK_DEPT_CDNM
				,DSPSR_CHRG_DEPT
				,DEPT_CD 
				, round(count_a1 / nvl(count_a2,1) * 100,1) as hvalue1
				, round(count_b1 / nvl(count_b2,1) * 100,1) as hvalue2
				, round(count_c1 / nvl(count_c2,1) * 100,1) as hvalue3
				, round(count_d1 / nvl(count_d2,1) * 100,1) as hvalue4
				, round(count_e1 / nvl(count_e2,1) * 100,1) as hvalue5
				, round(count_f1 / nvl(count_f2,1) * 100,1) as hvalue6
				, round(count_g1 / nvl(count_g2,1) * 100,1) as hvalue7
				, round(count_h1 / nvl(count_h2,1) * 100,1) as hvalue8
				, round(count_i1 / nvl(count_i2,1) * 100,1) as hvalue9
				, round(count_j1 / nvl(count_j2,1) * 100,1) as hvalue10
				, round(count_k1 / nvl(count_k2,1) * 100,1) as hvalue11
				, round(count_l1 / nvl(count_l2,1) * 100,1) as hvalue12
				, round(count_m1 / nvl(count_m2,1) * 100,1) as hvalue13
				, round(count_n1 / nvl(count_n2,1) * 100,1) as hvalue14
				, round(count_o1 / nvl(count_o2,1) * 100,1) as hvalue15
				, round(count_p1 / nvl(count_p2,1) * 100,1) as hvalue16
				, round(count_q1 / nvl(count_q2,1) * 100,1) as hvalue17
				, round(count_r1 / nvl(count_r2,1) * 100,1) as hvalue18
				, round(count_s1 / nvl(count_s2,1) * 100,1) as hvalue19
				, round(count_t1 / nvl(count_t2,1) * 100,1) as hvalue20
				, round(count_u1 / nvl(count_u2,1) * 100,1) as hvalue21
				, round(count_v1 / nvl(count_v2,1) * 100,1) as hvalue22
				, round(count_w1 / nvl(count_w2,1) * 100,1) as hvalue23
				, round(count_x1 / nvl(count_x2,1) * 100,1) as hvalue24
				, round(count_y1 / nvl(count_y2,1) * 100,1) as hvalue25
				, round((nvl(count_a1,0)+
				nvl(count_b1,0)+
				nvl(count_c1,0)+
				nvl(count_d1,0)+
				nvl(count_e1,0)+
				nvl(count_f1,0)+
				nvl(count_g1,0)+
				nvl(count_h1,0)+
				nvl(count_i1,0)+
				nvl(count_j1,0)+
				nvl(count_k1,0)+
				nvl(count_l1,0)+
				nvl(count_m1,0)+
				nvl(count_n1,0)+
				nvl(count_o1,0)+
				nvl(count_p1,0)+
				nvl(count_q1,0)+
				nvl(count_r1,0)+
				nvl(count_s1,0)+
				nvl(count_t1,0)+
				nvl(count_u1,0)+
				nvl(count_v1,0)+
				nvl(count_w1,0)+
				nvl(count_x1,0)+
				nvl(count_y1,0))/
				
				(case when  				
				(nvl(count_a2,0)+
				nvl(count_b2,0)+
				nvl(count_c2,0)+
				nvl(count_d2,0)+
				nvl(count_e2,0)+
				nvl(count_f2,0)+
				nvl(count_g2,0)+
				nvl(count_h2,0)+
				nvl(count_i2,0)+
				nvl(count_j2,0)+
				nvl(count_k2,0)+
				nvl(count_l2,0)+
				nvl(count_m2,0)+
				nvl(count_n2,0)+
				nvl(count_o2,0)+
				nvl(count_p2,0)+
				nvl(count_q2,0)+
				nvl(count_r2,0)+
				nvl(count_s2,0)+
				nvl(count_t2,0)+
				nvl(count_u2,0)+
				nvl(count_v2,0)+
				nvl(count_w2,0)+
				nvl(count_x2,0)+
				nvl(count_y2,0))='0'
				then 1 else 
				nvl(count_a2,0)+
				nvl(count_b2,0)+
				nvl(count_c2,0)+
				nvl(count_d2,0)+
				nvl(count_e2,0)+
				nvl(count_f2,0)+
				nvl(count_g2,0)+
				nvl(count_h2,0)+
				nvl(count_i2,0)+
				nvl(count_j2,0)+
				nvl(count_k2,0)+
				nvl(count_l2,0)+
				nvl(count_m2,0)+
				nvl(count_n2,0)+
				nvl(count_o2,0)+
				nvl(count_p2,0)+
				nvl(count_q2,0)+
				nvl(count_r2,0)+
				nvl(count_s2,0)+
				nvl(count_t2,0)+
				nvl(count_u2,0)+
				nvl(count_v2,0)+
				nvl(count_w2,0)+
				nvl(count_x2,0)+
				nvl(count_y2,0) end)
				 * 100,1) as hvalue26
				
				 from (SELECT '전체' as	HGRK_DEPT_CDNM
				,'평균' as DSPSR_CHRG_DEPT 
				,'' as DEPT_CD, 
	
	CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CA' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CA' and C.RSLT_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_a1
	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CA' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CA' then 1 else 0 end)) else null end as count_a2
	
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CB' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CB' and C.RSLT_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_b1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CB' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CB' then 1 else 0 end)) else null end as count_b2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CC' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CC' and C.RSLT_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_c1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CC' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CC' then 1 else 0 end)) else null end as count_c2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CD' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CD' and C.RSLT_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_d1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CD' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CD' then 1 else 0 end)) else null end as count_d2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CE' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CE' and C.RSLT_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_e1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CE' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CE' then 1 else 0 end)) else null end as count_e2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CF' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CF' and C.RSLT_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_f1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CF' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CF' then 1 else 0 end)) else null end as count_f2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CG' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CG' and C.RSLT_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_g1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CG' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CG' then 1 else 0 end)) else null end as count_g2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CH' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CH' and C.RSLT_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_h1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CH' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CH' then 1 else 0 end)) else null end as count_h2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CI' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CI' and C.RSLT_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_i1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CI' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CI' then 1 else 0 end)) else null end as count_i2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CJ' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CJ' and C.RSLT_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_j1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CJ' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CJ' then 1 else 0 end)) else null end as count_j2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CK' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CK' and C.RSLT_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_k1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CK' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CK' then 1 else 0 end)) else null end as count_k2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CL' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CL' and C.RSLT_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_l1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CL' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CL' then 1 else 0 end)) else null end as count_l2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CM' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CM' and C.RSLT_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_m1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CM' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CM' then 1 else 0 end)) else null end as count_m2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CN' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CN' and C.RSLT_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_n1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CN' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CN' then 1 else 0 end)) else null end as count_n2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CO' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CO' and C.RSLT_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_o1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CO' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CO' then 1 else 0 end)) else null end as count_o2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CP' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CP' and C.RSLT_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_p1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CP' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CP' then 1 else 0 end)) else null end as count_p2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CQ' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CQ' and C.RSLT_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_q1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CQ' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CQ' then 1 else 0 end)) else null end as count_q2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CR' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CR' and C.RSLT_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_r1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CR' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CR' then 1 else 0 end)) else null end as count_r2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DA' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DA' and C.RSLT_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_s1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DA' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DA' then 1 else 0 end)) else null end as count_s2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DB' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DB' and C.RSLT_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_t1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DB' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DB' then 1 else 0 end)) else null end as count_t2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DC' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DC' and C.RSLT_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_u1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DC' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DC' then 1 else 0 end)) else null end as count_u2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DD' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DD' and C.RSLT_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_v1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DD' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DD' then 1 else 0 end)) else null end as count_v2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DE' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DE' and C.RSLT_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_w1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DE' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DE' then 1 else 0 end)) else null end as count_w2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DF' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DF' and C.RSLT_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_x1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DF' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DF' then 1 else 0 end)) else null end as count_x2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DG' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DG' and C.RSLT_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_y1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DG' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DG' then 1 else 0 end)) else null end as count_y2
	
                                        
	
	        FROM TBL_DSFT_ACPN_PROC A					  		   
			        LEFT JOIN TBL_HC_HIST C
			               ON A.DSFT_ACPN_SEQ_NO = C.DSFT_ACPN_SEQ_NO		  
			        LEFT JOIN TBL_CRPN_CUST_BASE D
			       		   ON A.ORGN_PTR_ST_CD = D.CUST_ID        	    	  
			        LEFT JOIN TBL_USR B
			       		   ON A.DSPSR_ID = B.USR_ID 
			        LEFT JOIN TBL_HR_EMP_CD F
			       		   ON A.DSPSR_ID = F.EMP_NO
			        LEFT JOIN TBL_HR_DEPT_CD G 
			       		   ON F.BLNG_DEPT_CD = G.DEPT_CD
			        LEFT JOIN TBL_SAP_CD H	
			       		   ON (A.ORGN_ENTR_DV_CD = H.CD_ID AND H.CD_CLAS_CD = '1')	
			        LEFT JOIN TBL_DSFT_TAXN_TYP_CD I
			       		   ON A.DSFT_TAXN_TYP_CD = I.DSFT_TAXN_TYP_CD
			       		   
			WHERE (A.DEL_YN = 'N' OR A.DEL_YN IS NULL)	
			and (A.DSPSR_YN_OB_CNTR='N' or A.DSPSR_YN_OB_CNTR is null )	
              and (A.HC_YN ='Y')
	
	       		<dynamic>
	       			<!-- 년도별 -->   				    	
		    	    <isEqual property="cmb_gubun" compareValue="1">              
		                and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'                                                                  
		            </isEqual>
		            <!--  -->
		            <isEqual property="cmb_gubun" compareValue="2">
		            	<isEmpty property="cmb_half">
		            		and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'
		            	</isEmpty>              
		                <isEqual property="cmb_half" compareValue="1">
		                	and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0632000000'                                                                  
						</isEqual>	 
						<isEqual property="cmb_half" compareValue="2">
							and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '1232000000'
						</isEqual>	 
		            </isEqual>	 
		            <isEqual property="cmb_gubun" compareValue="3"> 
		            	<isEmpty>
							and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'	            	
		            	</isEmpty>    
		           		<isEqual property="cmb_qua" compareValue="1">
		           			and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0332000000'   
		           	  	</isEqual>
		           	  	<isEqual property="cmb_qua" compareValue="2">
		           	   		and A.ACPN_DTM between #time_key# || '0400000000' and #time_key# || '0632000000'   
		           	  	</isEqual>	 
		           	  	<isEqual property="cmb_qua" compareValue="3">
		           	   		and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '0932000000'   
		           	  	</isEqual>	 
	           	  		<isEqual property="cmb_qua" compareValue="4">
		           	   		and A.ACPN_DTM between #time_key# || '1000000000' and #time_key# || '1232000000'   
		           	  	</isEqual>	 	 
	            	</isEqual>	 				            
		    	 	<isEqual property="cmb_gubun" compareValue="4">              
		            	and A.ACPN_DTM between #time_key# || '00000000' and #time_key# || '32000000'                                                                  
		         	</isEqual>	
		    	 	<isEqual property="cmb_gubun" compareValue="5">              
		                and A.ACPN_DTM between #time_key# || '000000' and #time_key2# || '240000'                                                                  
		         	</isEqual>
				
					<!-- 불만유형이 전체일 때는 두가지 경우 존재(전체, 품질&혼유)		-->				
					<isEmpty property="dsft_typ_cd">
						<isEqual property="dsft_typ_tot_gbn" compareValue="2">
							AND A.DSFT_TYP_CD IN ('CA','CK')
						</isEqual>
					</isEmpty>
				  	<isNotEmpty prepend="AND" property="dsft_typ_cd">				<!-- 불만유형		-->
				    	A.DSFT_TYP_CD = #dsft_typ_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dsft_taxn_typ_cd">			<!-- 불만세부유형		-->
				    	A.DSFT_TAXN_TYP_CD = #dsft_taxn_typ_cd#
				  	</isNotEmpty>
			  		<isNotEmpty prepend="AND" property="orgn_ptr_st_cd">			<!-- 불만발생업체코드(가맹점SAP코드) -->
					    A.ORGN_PTR_ST_CD = #orgn_ptr_st_cd#
				  	</isNotEmpty>
				    <isNotEmpty prepend="AND" property="conn_chnl_kind_cd">			<!-- 접촉채널	-->
					    A.CONN_CHNL_KIND_CD = #conn_chnl_kind_cd#
				    </isNotEmpty>			  	
				  	<isNotEmpty prepend="AND" property="hgrk_dept_cd">				<!-- 부문/본부 -->
					    G.HGRK_DEPT_CD = #hgrk_dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dept_cd">					<!-- 처리팀 -->
					    G.DEPT_CD = #dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dspsr_id_nm">				<!-- 처리자명 		-->
					    (B.USR_NM LIKE '%'|| #dspsr_id_nm# ||'%' OR F.EMP_NM LIKE '%'|| #dspsr_id_nm# ||'%')
				  	</isNotEmpty>
			 		<isEqual property="hc_yn" compareValue="Y"> 					<!-- 해피콜여부  -->
			 			AND A.HC_YN = 'Y'
			 		</isEqual>
				 	<isEqual property="hc_yn" compareValue="N"> 					<!-- 해피콜여부  -->
				 		AND (A.HC_YN = 'N' OR A.HC_YN IS NULL)
				 	</isEqual>
				  	<isNotEmpty prepend="AND" property="attd_sft_cd">				<!-- 태도만족도 		-->
				  		(A.HC_YN = 'Y' AND C.ATTD_SFT_CD = #attd_sft_cd#)
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="rslt_sft_cd">				<!-- 결과만족도 		-->
				  		(A.HC_YN = 'Y' AND C.RSLT_SFT_CD = #rslt_sft_cd#)
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="hc_uabl_rsn_cd">			<!-- 해피콜불가사유		-->
				  		A.HC_UABL_RSN_CD = #hc_uabl_rsn_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="prdct_cd">					<!-- 불만제품 		-->
					    A.PRDCT_CD = #prdct_cd#
				  	</isNotEmpty>			  				 	
				  	<isNotEmpty prepend="AND" property="prblm_penom_cd">			<!-- 현상 		-->
					    A.PRBLM_PENOM_CD = #prblm_penom_cd#
				  	</isNotEmpty>
			 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="1">  	<!-- 시료품질 점검결과		-->
			 			AND	A.VHCL_QLIT_DSFT_CAUS_CD_CUST IS NOT NULL
			 	  	</isEqual>
			 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="2">   	<!-- 시료품질 점검결과		-->
			 	  		AND	A.VHCL_QLIT_DSFT_CAUS_CD_PTR_ST IS NOT NULL
			 	  	</isEqual>
				  	<isNotEmpty prepend="AND" property="vhcl_biztr_qlit_dsft_typ_cd">			<!-- 품질불만유형 		-->
					    A.VHCL_BIZTR_QLIT_DSFT_TYP_CD = #vhcl_biztr_qlit_dsft_typ_cd#
				  	</isNotEmpty>
				 	<isEqual property="vhcl_biztr_yn" compareValue="Y"> 			<!-- Kixx 품질서비스차량 출동 -->
				 		AND A.VHCL_BIZTR_YN = 'Y'
				 	</isEqual>
				 	<isEqual property="vhcl_biztr_yn" compareValue="N"> 			<!-- Kixx 품질서비스차량 출동 -->
				 		AND (A.VHCL_BIZTR_YN = 'N' OR A.VHCL_BIZTR_YN IS NULL)
				 	</isEqual>		 	  	
				 	<isEqual property="rwrd_yn" compareValue="Y"> 					<!-- 보상여부 -->
				 		AND A.RWRD_YN = 'Y'
				 	</isEqual>
				 	<isEqual property="rwrd_yn" compareValue="N"> 					<!-- 보상여부 -->
				 		AND (A.RWRD_YN = 'N' OR A.RWRD_YN IS NULL)
				 	</isEqual>
				 	
				 	<isEqual property="cps_amt_gbn" compareValue="1"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 주유소 보상금 1만원 미만-->
				 			AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 주유소 보상금 1만원 ~ 10만원-->
				 			AND (A.PTR_ST_CPS_AMT <![CDATA[>=]]> 10000 AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 주유소 보상금 10만원 초과-->
				 			AND A.PTR_ST_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	<isEqual property="cps_amt_gbn" compareValue="2"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 회사 보상금 1만원 미만-->
				 			AND A.CO_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 회사 보상금 1만원 ~ 10만원-->
				 			AND (A.CO_CPS_AMT <![CDATA[>=]]> 10000 AND A.CO_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 회사 보상금 10만원 초과-->
				 			AND A.CO_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	<isEqual property="cps_amt_gbn" compareValue="3"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 총 보상금 1만원 미만-->
				 			AND A.TOT_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 총 보상금 1만원 ~ 10만원-->
				 			AND (A.TOT_CPS_AMT <![CDATA[>=]]> 10000 AND A.TOT_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 총 보상금 10만원 초과-->
				 			AND A.TOT_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	
					<!--처리자구분에 체크항목이 하나도 없는 경우, 전체데이터가 조회된다.-->
				 	<isEqual property="cmp_handler" compareValue="1">   
				 		AND	A.DSPSR_YN_CNSLR = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="2">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="3">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="4">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="5">   
				 		AND	A.DSPSR_YN_DSFT_CHRG = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="6">   
				 		AND	A.DSPSR_YN_PART_HD = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="7">   
				 		AND	(A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
	       		</dynamic>  		
				 )
 	</select>
 	
	<!-- 만족도2)-->
 	<select id="Get_CMP_SELECT2" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
	 	
	 select HGRK_DEPT_CDNM
				,DSPSR_CHRG_DEPT
				,DEPT_CD 
				, round(count_a1 / nvl(count_a2,1) * 100,1) as hvalue1
				, round(count_b1 / nvl(count_b2,1) * 100,1) as hvalue2
				, round(count_c1 / nvl(count_c2,1) * 100,1) as hvalue3
				, round(count_d1 / nvl(count_d2,1) * 100,1) as hvalue4
				, round(count_e1 / nvl(count_e2,1) * 100,1) as hvalue5
				, round(count_f1 / nvl(count_f2,1) * 100,1) as hvalue6
				, round(count_g1 / nvl(count_g2,1) * 100,1) as hvalue7
				, round(count_h1 / nvl(count_h2,1) * 100,1) as hvalue8
				, round(count_i1 / nvl(count_i2,1) * 100,1) as hvalue9
				, round(count_j1 / nvl(count_j2,1) * 100,1) as hvalue10
				, round(count_k1 / nvl(count_k2,1) * 100,1) as hvalue11
				, round(count_l1 / nvl(count_l2,1) * 100,1) as hvalue12
				, round(count_m1 / nvl(count_m2,1) * 100,1) as hvalue13
				, round(count_n1 / nvl(count_n2,1) * 100,1) as hvalue14
				, round(count_o1 / nvl(count_o2,1) * 100,1) as hvalue15
				, round(count_p1 / nvl(count_p2,1) * 100,1) as hvalue16
				, round(count_q1 / nvl(count_q2,1) * 100,1) as hvalue17
				, round(count_r1 / nvl(count_r2,1) * 100,1) as hvalue18
				, round(count_s1 / nvl(count_s2,1) * 100,1) as hvalue19
				, round(count_t1 / nvl(count_t2,1) * 100,1) as hvalue20
				, round(count_u1 / nvl(count_u2,1) * 100,1) as hvalue21
				, round(count_v1 / nvl(count_v2,1) * 100,1) as hvalue22
				, round(count_w1 / nvl(count_w2,1) * 100,1) as hvalue23
				, round(count_x1 / nvl(count_x2,1) * 100,1) as hvalue24
				, round(count_y1 / nvl(count_y2,1) * 100,1) as hvalue25
				, round((nvl(count_a1,0)+
				nvl(count_b1,0)+
				nvl(count_c1,0)+
				nvl(count_d1,0)+
				nvl(count_e1,0)+
				nvl(count_f1,0)+
				nvl(count_g1,0)+
				nvl(count_h1,0)+
				nvl(count_i1,0)+
				nvl(count_j1,0)+
				nvl(count_k1,0)+
				nvl(count_l1,0)+
				nvl(count_m1,0)+
				nvl(count_n1,0)+
				nvl(count_o1,0)+
				nvl(count_p1,0)+
				nvl(count_q1,0)+
				nvl(count_r1,0)+
				nvl(count_s1,0)+
				nvl(count_t1,0)+
				nvl(count_u1,0)+
				nvl(count_v1,0)+
				nvl(count_w1,0)+
				nvl(count_x1,0)+
				nvl(count_y1,0))/
				
				(case when  				
				(nvl(count_a2,0)+
				nvl(count_b2,0)+
				nvl(count_c2,0)+
				nvl(count_d2,0)+
				nvl(count_e2,0)+
				nvl(count_f2,0)+
				nvl(count_g2,0)+
				nvl(count_h2,0)+
				nvl(count_i2,0)+
				nvl(count_j2,0)+
				nvl(count_k2,0)+
				nvl(count_l2,0)+
				nvl(count_m2,0)+
				nvl(count_n2,0)+
				nvl(count_o2,0)+
				nvl(count_p2,0)+
				nvl(count_q2,0)+
				nvl(count_r2,0)+
				nvl(count_s2,0)+
				nvl(count_t2,0)+
				nvl(count_u2,0)+
				nvl(count_v2,0)+
				nvl(count_w2,0)+
				nvl(count_x2,0)+
				nvl(count_y2,0))='0'
				then 1 else 
				nvl(count_a2,0)+
				nvl(count_b2,0)+
				nvl(count_c2,0)+
				nvl(count_d2,0)+
				nvl(count_e2,0)+
				nvl(count_f2,0)+
				nvl(count_g2,0)+
				nvl(count_h2,0)+
				nvl(count_i2,0)+
				nvl(count_j2,0)+
				nvl(count_k2,0)+
				nvl(count_l2,0)+
				nvl(count_m2,0)+
				nvl(count_n2,0)+
				nvl(count_o2,0)+
				nvl(count_p2,0)+
				nvl(count_q2,0)+
				nvl(count_r2,0)+
				nvl(count_s2,0)+
				nvl(count_t2,0)+
				nvl(count_u2,0)+
				nvl(count_v2,0)+
				nvl(count_w2,0)+
				nvl(count_x2,0)+
				nvl(count_y2,0) end)
				 * 100,1) as hvalue26
				
				 from (SELECT 	HGRK_DEPT_CDNM
				,DSPSR_CHRG_DEPT
				,DEPT_CD, 
	
	CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CA' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CA' and C.ATTD_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_a1
	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CA' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CA' then 1 else 0 end)) else null end as count_a2
	
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CB' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CB' and C.ATTD_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_b1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CB' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CB' then 1 else 0 end)) else null end as count_b2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CC' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CC' and C.ATTD_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_c1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CC' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CC' then 1 else 0 end)) else null end as count_c2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CD' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CD' and C.ATTD_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_d1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CD' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CD' then 1 else 0 end)) else null end as count_d2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CE' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CE' and C.ATTD_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_e1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CE' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CE' then 1 else 0 end)) else null end as count_e2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CF' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CF' and C.ATTD_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_f1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CF' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CF' then 1 else 0 end)) else null end as count_f2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CG' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CG' and C.ATTD_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_g1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CG' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CG' then 1 else 0 end)) else null end as count_g2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CH' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CH' and C.ATTD_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_h1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CH' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CH' then 1 else 0 end)) else null end as count_h2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CI' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CI' and C.ATTD_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_i1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CI' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CI' then 1 else 0 end)) else null end as count_i2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CJ' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CJ' and C.ATTD_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_j1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CJ' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CJ' then 1 else 0 end)) else null end as count_j2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CK' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CK' and C.ATTD_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_k1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CK' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CK' then 1 else 0 end)) else null end as count_k2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CL' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CL' and C.ATTD_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_l1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CL' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CL' then 1 else 0 end)) else null end as count_l2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CM' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CM' and C.ATTD_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_m1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CM' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CM' then 1 else 0 end)) else null end as count_m2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CN' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CN' and C.ATTD_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_n1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CN' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CN' then 1 else 0 end)) else null end as count_n2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CO' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CO' and C.ATTD_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_o1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CO' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CO' then 1 else 0 end)) else null end as count_o2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CP' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CP' and C.ATTD_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_p1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CP' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CP' then 1 else 0 end)) else null end as count_p2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CQ' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CQ' and C.ATTD_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_q1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CQ' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CQ' then 1 else 0 end)) else null end as count_q2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CR' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CR' and C.ATTD_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_r1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CR' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CR' then 1 else 0 end)) else null end as count_r2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DA' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DA' and C.ATTD_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_s1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DA' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DA' then 1 else 0 end)) else null end as count_s2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DB' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DB' and C.ATTD_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_t1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DB' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DB' then 1 else 0 end)) else null end as count_t2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DC' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DC' and C.ATTD_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_u1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DC' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DC' then 1 else 0 end)) else null end as count_u2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DD' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DD' and C.ATTD_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_v1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DD' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DD' then 1 else 0 end)) else null end as count_v2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DE' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DE' and C.ATTD_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_w1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DE' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DE' then 1 else 0 end)) else null end as count_w2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DF' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DF' and C.ATTD_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_x1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DF' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DF' then 1 else 0 end)) else null end as count_x2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DG' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DG' and C.ATTD_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_y1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DG' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DG' then 1 else 0 end)) else null end as count_y2
	
	        FROM TBL_DSFT_ACPN_PROC A					  		   
			        LEFT JOIN TBL_HC_HIST C
			               ON A.DSFT_ACPN_SEQ_NO = C.DSFT_ACPN_SEQ_NO		  
			        LEFT JOIN TBL_CRPN_CUST_BASE D
			       		   ON A.ORGN_PTR_ST_CD = D.CUST_ID        	    	  
			        LEFT JOIN TBL_USR B
			       		   ON A.DSPSR_ID = B.USR_ID 
			        LEFT JOIN TBL_HR_EMP_CD F
			       		   ON A.DSPSR_ID = F.EMP_NO
			        LEFT JOIN TBL_HR_DEPT_CD G 
			       		   ON F.BLNG_DEPT_CD = G.DEPT_CD
			        LEFT JOIN TBL_SAP_CD H	
			       		   ON (A.ORGN_ENTR_DV_CD = H.CD_ID AND H.CD_CLAS_CD = '1')	
			        LEFT JOIN TBL_DSFT_TAXN_TYP_CD I
			       		   ON A.DSFT_TAXN_TYP_CD = I.DSFT_TAXN_TYP_CD
			       		   
			WHERE (A.DEL_YN = 'N' OR A.DEL_YN IS NULL)	
			and (A.DSPSR_YN_OB_CNTR='N' or A.DSPSR_YN_OB_CNTR is null )	
              and (A.HC_YN ='Y')
	
	       		<dynamic>
	       			<!-- 년도별 -->   				    	
		    	    <isEqual property="cmb_gubun" compareValue="1">              
		                and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'                                                                  
		            </isEqual>
		            <!--  -->
		            <isEqual property="cmb_gubun" compareValue="2">
		            	<isEmpty property="cmb_half">
		            		and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'
		            	</isEmpty>              
		                <isEqual property="cmb_half" compareValue="1">
		                	and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0632000000'                                                                  
						</isEqual>	 
						<isEqual property="cmb_half" compareValue="2">
							and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '1232000000'
						</isEqual>	 
		            </isEqual>	 
		            <isEqual property="cmb_gubun" compareValue="3"> 
		            	<isEmpty>
							and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'	            	
		            	</isEmpty>    
		           		<isEqual property="cmb_qua" compareValue="1">
		           			and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0332000000'   
		           	  	</isEqual>
		           	  	<isEqual property="cmb_qua" compareValue="2">
		           	   		and A.ACPN_DTM between #time_key# || '0400000000' and #time_key# || '0632000000'   
		           	  	</isEqual>	 
		           	  	<isEqual property="cmb_qua" compareValue="3">
		           	   		and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '0932000000'   
		           	  	</isEqual>	 
	           	  		<isEqual property="cmb_qua" compareValue="4">
		           	   		and A.ACPN_DTM between #time_key# || '1000000000' and #time_key# || '1232000000'   
		           	  	</isEqual>	 	 
	            	</isEqual>	 				            
		    	 	<isEqual property="cmb_gubun" compareValue="4">              
		            	and A.ACPN_DTM between #time_key# || '00000000' and #time_key# || '32000000'                                                                  
		         	</isEqual>	
		    	 	<isEqual property="cmb_gubun" compareValue="5">              
		                and A.ACPN_DTM between #time_key# || '000000' and #time_key2# || '240000'                                                                  
		         	</isEqual>
				
					<!-- 불만유형이 전체일 때는 두가지 경우 존재(전체, 품질&혼유)		-->				
					<isEmpty property="dsft_typ_cd">
						<isEqual property="dsft_typ_tot_gbn" compareValue="2">
							AND A.DSFT_TYP_CD IN ('CA','CK')
						</isEqual>
					</isEmpty>
				  	<isNotEmpty prepend="AND" property="dsft_typ_cd">				<!-- 불만유형		-->
				    	A.DSFT_TYP_CD = #dsft_typ_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dsft_taxn_typ_cd">			<!-- 불만세부유형		-->
				    	A.DSFT_TAXN_TYP_CD = #dsft_taxn_typ_cd#
				  	</isNotEmpty>
			  		<isNotEmpty prepend="AND" property="orgn_ptr_st_cd">			<!-- 불만발생업체코드(가맹점SAP코드) -->
					    A.ORGN_PTR_ST_CD = #orgn_ptr_st_cd#
				  	</isNotEmpty>
				    <isNotEmpty prepend="AND" property="conn_chnl_kind_cd">			<!-- 접촉채널	-->
					    A.CONN_CHNL_KIND_CD = #conn_chnl_kind_cd#
				    </isNotEmpty>			  	
				  	<isNotEmpty prepend="AND" property="hgrk_dept_cd">				<!-- 부문/본부 -->
					    G.HGRK_DEPT_CD = #hgrk_dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dept_cd">					<!-- 처리팀 -->
					    G.DEPT_CD = #dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dspsr_id_nm">				<!-- 처리자명 		-->
					    (B.USR_NM LIKE '%'|| #dspsr_id_nm# ||'%' OR F.EMP_NM LIKE '%'|| #dspsr_id_nm# ||'%')
				  	</isNotEmpty>
			 		<isEqual property="hc_yn" compareValue="Y"> 					<!-- 해피콜여부  -->
			 			AND A.HC_YN = 'Y'
			 		</isEqual>
				 	<isEqual property="hc_yn" compareValue="N"> 					<!-- 해피콜여부  -->
				 		AND (A.HC_YN = 'N' OR A.HC_YN IS NULL)
				 	</isEqual>
				  	<isNotEmpty prepend="AND" property="attd_sft_cd">				<!-- 태도만족도 		-->
				  		(A.HC_YN = 'Y' AND C.ATTD_SFT_CD = #attd_sft_cd#)
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="rslt_sft_cd">				<!-- 결과만족도 		-->
				  		(A.HC_YN = 'Y' AND C.RSLT_SFT_CD = #rslt_sft_cd#)
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="hc_uabl_rsn_cd">			<!-- 해피콜불가사유		-->
				  		A.HC_UABL_RSN_CD = #hc_uabl_rsn_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="prdct_cd">					<!-- 불만제품 		-->
					    A.PRDCT_CD = #prdct_cd#
				  	</isNotEmpty>			  				 	
				  	<isNotEmpty prepend="AND" property="prblm_penom_cd">			<!-- 현상 		-->
					    A.PRBLM_PENOM_CD = #prblm_penom_cd#
				  	</isNotEmpty>
			 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="1">  	<!-- 시료품질 점검결과		-->
			 			AND	A.VHCL_QLIT_DSFT_CAUS_CD_CUST IS NOT NULL
			 	  	</isEqual>
			 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="2">   	<!-- 시료품질 점검결과		-->
			 	  		AND	A.VHCL_QLIT_DSFT_CAUS_CD_PTR_ST IS NOT NULL
			 	  	</isEqual>
				  	<isNotEmpty prepend="AND" property="vhcl_biztr_qlit_dsft_typ_cd">			<!-- 품질불만유형 		-->
					    A.VHCL_BIZTR_QLIT_DSFT_TYP_CD = #vhcl_biztr_qlit_dsft_typ_cd#
				  	</isNotEmpty>
				 	<isEqual property="vhcl_biztr_yn" compareValue="Y"> 			<!-- Kixx 품질서비스차량 출동 -->
				 		AND A.VHCL_BIZTR_YN = 'Y'
				 	</isEqual>
				 	<isEqual property="vhcl_biztr_yn" compareValue="N"> 			<!-- Kixx 품질서비스차량 출동 -->
				 		AND (A.VHCL_BIZTR_YN = 'N' OR A.VHCL_BIZTR_YN IS NULL)
				 	</isEqual>		 	  	
				 	<isEqual property="rwrd_yn" compareValue="Y"> 					<!-- 보상여부 -->
				 		AND A.RWRD_YN = 'Y'
				 	</isEqual>
				 	<isEqual property="rwrd_yn" compareValue="N"> 					<!-- 보상여부 -->
				 		AND (A.RWRD_YN = 'N' OR A.RWRD_YN IS NULL)
				 	</isEqual>
				 	
				 	<isEqual property="cps_amt_gbn" compareValue="1"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 주유소 보상금 1만원 미만-->
				 			AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 주유소 보상금 1만원 ~ 10만원-->
				 			AND (A.PTR_ST_CPS_AMT <![CDATA[>=]]> 10000 AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 주유소 보상금 10만원 초과-->
				 			AND A.PTR_ST_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	<isEqual property="cps_amt_gbn" compareValue="2"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 회사 보상금 1만원 미만-->
				 			AND A.CO_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 회사 보상금 1만원 ~ 10만원-->
				 			AND (A.CO_CPS_AMT <![CDATA[>=]]> 10000 AND A.CO_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 회사 보상금 10만원 초과-->
				 			AND A.CO_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	<isEqual property="cps_amt_gbn" compareValue="3"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 총 보상금 1만원 미만-->
				 			AND A.TOT_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 총 보상금 1만원 ~ 10만원-->
				 			AND (A.TOT_CPS_AMT <![CDATA[>=]]> 10000 AND A.TOT_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 총 보상금 10만원 초과-->
				 			AND A.TOT_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	
					<!--처리자구분에 체크항목이 하나도 없는 경우, 전체데이터가 조회된다.-->
				 	<isEqual property="cmp_handler" compareValue="1">   
				 		AND	A.DSPSR_YN_CNSLR = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="2">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="3">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="4">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="5">   
				 		AND	A.DSPSR_YN_DSFT_CHRG = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="6">   
				 		AND	A.DSPSR_YN_PART_HD = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="7">   
				 		AND	(A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
	       		</dynamic>  
		
		 group by HGRK_DEPT_CDNM
				,DSPSR_CHRG_DEPT
				,DEPT_CD order by  HGRK_DEPT_CDNM
				,DSPSR_CHRG_DEPT
				,DEPT_CD
				)
				
				union all
				
				 select HGRK_DEPT_CDNM
				,DSPSR_CHRG_DEPT
				,DEPT_CD 
				, round(count_a1 / nvl(count_a2,1) * 100,1) as hvalue1
				, round(count_b1 / nvl(count_b2,1) * 100,1) as hvalue2
				, round(count_c1 / nvl(count_c2,1) * 100,1) as hvalue3
				, round(count_d1 / nvl(count_d2,1) * 100,1) as hvalue4
				, round(count_e1 / nvl(count_e2,1) * 100,1) as hvalue5
				, round(count_f1 / nvl(count_f2,1) * 100,1) as hvalue6
				, round(count_g1 / nvl(count_g2,1) * 100,1) as hvalue7
				, round(count_h1 / nvl(count_h2,1) * 100,1) as hvalue8
				, round(count_i1 / nvl(count_i2,1) * 100,1) as hvalue9
				, round(count_j1 / nvl(count_j2,1) * 100,1) as hvalue10
				, round(count_k1 / nvl(count_k2,1) * 100,1) as hvalue11
				, round(count_l1 / nvl(count_l2,1) * 100,1) as hvalue12
				, round(count_m1 / nvl(count_m2,1) * 100,1) as hvalue13
				, round(count_n1 / nvl(count_n2,1) * 100,1) as hvalue14
				, round(count_o1 / nvl(count_o2,1) * 100,1) as hvalue15
				, round(count_p1 / nvl(count_p2,1) * 100,1) as hvalue16
				, round(count_q1 / nvl(count_q2,1) * 100,1) as hvalue17
				, round(count_r1 / nvl(count_r2,1) * 100,1) as hvalue18
				, round(count_s1 / nvl(count_s2,1) * 100,1) as hvalue19
				, round(count_t1 / nvl(count_t2,1) * 100,1) as hvalue20
				, round(count_u1 / nvl(count_u2,1) * 100,1) as hvalue21
				, round(count_v1 / nvl(count_v2,1) * 100,1) as hvalue22
				, round(count_w1 / nvl(count_w2,1) * 100,1) as hvalue23
				, round(count_x1 / nvl(count_x2,1) * 100,1) as hvalue24
				, round(count_y1 / nvl(count_y2,1) * 100,1) as hvalue25
				, round((nvl(count_a1,0)+
				nvl(count_b1,0)+
				nvl(count_c1,0)+
				nvl(count_d1,0)+
				nvl(count_e1,0)+
				nvl(count_f1,0)+
				nvl(count_g1,0)+
				nvl(count_h1,0)+
				nvl(count_i1,0)+
				nvl(count_j1,0)+
				nvl(count_k1,0)+
				nvl(count_l1,0)+
				nvl(count_m1,0)+
				nvl(count_n1,0)+
				nvl(count_o1,0)+
				nvl(count_p1,0)+
				nvl(count_q1,0)+
				nvl(count_r1,0)+
				nvl(count_s1,0)+
				nvl(count_t1,0)+
				nvl(count_u1,0)+
				nvl(count_v1,0)+
				nvl(count_w1,0)+
				nvl(count_x1,0)+
				nvl(count_y1,0))/
				
				(case when  				
				(nvl(count_a2,0)+
				nvl(count_b2,0)+
				nvl(count_c2,0)+
				nvl(count_d2,0)+
				nvl(count_e2,0)+
				nvl(count_f2,0)+
				nvl(count_g2,0)+
				nvl(count_h2,0)+
				nvl(count_i2,0)+
				nvl(count_j2,0)+
				nvl(count_k2,0)+
				nvl(count_l2,0)+
				nvl(count_m2,0)+
				nvl(count_n2,0)+
				nvl(count_o2,0)+
				nvl(count_p2,0)+
				nvl(count_q2,0)+
				nvl(count_r2,0)+
				nvl(count_s2,0)+
				nvl(count_t2,0)+
				nvl(count_u2,0)+
				nvl(count_v2,0)+
				nvl(count_w2,0)+
				nvl(count_x2,0)+
				nvl(count_y2,0))='0'
				then 1 else 
				nvl(count_a2,0)+
				nvl(count_b2,0)+
				nvl(count_c2,0)+
				nvl(count_d2,0)+
				nvl(count_e2,0)+
				nvl(count_f2,0)+
				nvl(count_g2,0)+
				nvl(count_h2,0)+
				nvl(count_i2,0)+
				nvl(count_j2,0)+
				nvl(count_k2,0)+
				nvl(count_l2,0)+
				nvl(count_m2,0)+
				nvl(count_n2,0)+
				nvl(count_o2,0)+
				nvl(count_p2,0)+
				nvl(count_q2,0)+
				nvl(count_r2,0)+
				nvl(count_s2,0)+
				nvl(count_t2,0)+
				nvl(count_u2,0)+
				nvl(count_v2,0)+
				nvl(count_w2,0)+
				nvl(count_x2,0)+
				nvl(count_y2,0) end)
				 * 100,1) as hvalue26
				
				 from (SELECT 	'전체' as HGRK_DEPT_CDNM
				,'평균' as DSPSR_CHRG_DEPT
				,'' as DEPT_CD, 
	
	CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CA' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CA' and C.ATTD_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_a1
	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CA' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CA' then 1 else 0 end)) else null end as count_a2
	
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CB' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CB' and C.ATTD_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_b1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CB' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CB' then 1 else 0 end)) else null end as count_b2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CC' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CC' and C.ATTD_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_c1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CC' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CC' then 1 else 0 end)) else null end as count_c2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CD' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CD' and C.ATTD_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_d1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CD' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CD' then 1 else 0 end)) else null end as count_d2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CE' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CE' and C.ATTD_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_e1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CE' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CE' then 1 else 0 end)) else null end as count_e2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CF' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CF' and C.ATTD_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_f1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CF' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CF' then 1 else 0 end)) else null end as count_f2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CG' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CG' and C.ATTD_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_g1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CG' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CG' then 1 else 0 end)) else null end as count_g2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CH' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CH' and C.ATTD_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_h1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CH' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CH' then 1 else 0 end)) else null end as count_h2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CI' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CI' and C.ATTD_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_i1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CI' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CI' then 1 else 0 end)) else null end as count_i2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CJ' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CJ' and C.ATTD_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_j1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CJ' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CJ' then 1 else 0 end)) else null end as count_j2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CK' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CK' and C.ATTD_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_k1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CK' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CK' then 1 else 0 end)) else null end as count_k2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CL' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CL' and C.ATTD_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_l1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CL' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CL' then 1 else 0 end)) else null end as count_l2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CM' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CM' and C.ATTD_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_m1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CM' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CM' then 1 else 0 end)) else null end as count_m2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CN' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CN' and C.ATTD_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_n1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CN' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CN' then 1 else 0 end)) else null end as count_n2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CO' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CO' and C.ATTD_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_o1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CO' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CO' then 1 else 0 end)) else null end as count_o2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CP' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CP' and C.ATTD_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_p1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CP' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CP' then 1 else 0 end)) else null end as count_p2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CQ' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CQ' and C.ATTD_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_q1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CQ' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CQ' then 1 else 0 end)) else null end as count_q2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CR' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CR' and C.ATTD_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_r1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CR' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='CR' then 1 else 0 end)) else null end as count_r2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DA' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DA' and C.ATTD_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_s1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DA' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DA' then 1 else 0 end)) else null end as count_s2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DB' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DB' and C.ATTD_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_t1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DB' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DB' then 1 else 0 end)) else null end as count_t2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DC' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DC' and C.ATTD_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_u1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DC' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DC' then 1 else 0 end)) else null end as count_u2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DD' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DD' and C.ATTD_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_v1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DD' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DD' then 1 else 0 end)) else null end as count_v2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DE' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DE' and C.ATTD_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_w1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DE' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DE' then 1 else 0 end)) else null end as count_w2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DF' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DF' and C.ATTD_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_x1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DF' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DF' then 1 else 0 end)) else null end as count_x2
	
		, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DG' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DG' and C.ATTD_SFT_CD in('A','D') then 1 else 0 end)) else null end as count_y1
	, CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DG' THEN 1 ELSE 0 END) > 0 THEN
	(sum(case when I.DSFT_TYP_CD='DG' then 1 else 0 end)) else null end as count_y2
	
	        FROM TBL_DSFT_ACPN_PROC A					  		   
			        LEFT JOIN TBL_HC_HIST C
			               ON A.DSFT_ACPN_SEQ_NO = C.DSFT_ACPN_SEQ_NO		  
			        LEFT JOIN TBL_CRPN_CUST_BASE D
			       		   ON A.ORGN_PTR_ST_CD = D.CUST_ID        	    	  
			        LEFT JOIN TBL_USR B
			       		   ON A.DSPSR_ID = B.USR_ID 
			        LEFT JOIN TBL_HR_EMP_CD F
			       		   ON A.DSPSR_ID = F.EMP_NO
			        LEFT JOIN TBL_HR_DEPT_CD G 
			       		   ON F.BLNG_DEPT_CD = G.DEPT_CD
			        LEFT JOIN TBL_SAP_CD H	
			       		   ON (A.ORGN_ENTR_DV_CD = H.CD_ID AND H.CD_CLAS_CD = '1')	
			        LEFT JOIN TBL_DSFT_TAXN_TYP_CD I
			       		   ON A.DSFT_TAXN_TYP_CD = I.DSFT_TAXN_TYP_CD
			       		   
			WHERE (A.DEL_YN = 'N' OR A.DEL_YN IS NULL)	
			and (A.DSPSR_YN_OB_CNTR='N' or A.DSPSR_YN_OB_CNTR is null )	
              and (A.HC_YN ='Y')
	
	       		<dynamic>
	       			<!-- 년도별 -->   				    	
		    	    <isEqual property="cmb_gubun" compareValue="1">              
		                and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'                                                                  
		            </isEqual>
		            <!--  -->
		            <isEqual property="cmb_gubun" compareValue="2">
		            	<isEmpty property="cmb_half">
		            		and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'
		            	</isEmpty>              
		                <isEqual property="cmb_half" compareValue="1">
		                	and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0632000000'                                                                  
						</isEqual>	 
						<isEqual property="cmb_half" compareValue="2">
							and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '1232000000'
						</isEqual>	 
		            </isEqual>	 
		            <isEqual property="cmb_gubun" compareValue="3"> 
		            	<isEmpty>
							and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'	            	
		            	</isEmpty>    
		           		<isEqual property="cmb_qua" compareValue="1">
		           			and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0332000000'   
		           	  	</isEqual>
		           	  	<isEqual property="cmb_qua" compareValue="2">
		           	   		and A.ACPN_DTM between #time_key# || '0400000000' and #time_key# || '0632000000'   
		           	  	</isEqual>	 
		           	  	<isEqual property="cmb_qua" compareValue="3">
		           	   		and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '0932000000'   
		           	  	</isEqual>	 
	           	  		<isEqual property="cmb_qua" compareValue="4">
		           	   		and A.ACPN_DTM between #time_key# || '1000000000' and #time_key# || '1232000000'   
		           	  	</isEqual>	 	 
	            	</isEqual>	 				            
		    	 	<isEqual property="cmb_gubun" compareValue="4">              
		            	and A.ACPN_DTM between #time_key# || '00000000' and #time_key# || '32000000'                                                                  
		         	</isEqual>	
		    	 	<isEqual property="cmb_gubun" compareValue="5">              
		                and A.ACPN_DTM between #time_key# || '000000' and #time_key2# || '240000'                                                                  
		         	</isEqual>
				
					<!-- 불만유형이 전체일 때는 두가지 경우 존재(전체, 품질&혼유)		-->				
					<isEmpty property="dsft_typ_cd">
						<isEqual property="dsft_typ_tot_gbn" compareValue="2">
							AND A.DSFT_TYP_CD IN ('CA','CK')
						</isEqual>
					</isEmpty>
				  	<isNotEmpty prepend="AND" property="dsft_typ_cd">				<!-- 불만유형		-->
				    	A.DSFT_TYP_CD = #dsft_typ_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dsft_taxn_typ_cd">			<!-- 불만세부유형		-->
				    	A.DSFT_TAXN_TYP_CD = #dsft_taxn_typ_cd#
				  	</isNotEmpty>
			  		<isNotEmpty prepend="AND" property="orgn_ptr_st_cd">			<!-- 불만발생업체코드(가맹점SAP코드) -->
					    A.ORGN_PTR_ST_CD = #orgn_ptr_st_cd#
				  	</isNotEmpty>
				    <isNotEmpty prepend="AND" property="conn_chnl_kind_cd">			<!-- 접촉채널	-->
					    A.CONN_CHNL_KIND_CD = #conn_chnl_kind_cd#
				    </isNotEmpty>			  	
				  	<isNotEmpty prepend="AND" property="hgrk_dept_cd">				<!-- 부문/본부 -->
					    G.HGRK_DEPT_CD = #hgrk_dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dept_cd">					<!-- 처리팀 -->
					    G.DEPT_CD = #dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dspsr_id_nm">				<!-- 처리자명 		-->
					    (B.USR_NM LIKE '%'|| #dspsr_id_nm# ||'%' OR F.EMP_NM LIKE '%'|| #dspsr_id_nm# ||'%')
				  	</isNotEmpty>
			 		<isEqual property="hc_yn" compareValue="Y"> 					<!-- 해피콜여부  -->
			 			AND A.HC_YN = 'Y'
			 		</isEqual>
				 	<isEqual property="hc_yn" compareValue="N"> 					<!-- 해피콜여부  -->
				 		AND (A.HC_YN = 'N' OR A.HC_YN IS NULL)
				 	</isEqual>
				  	<isNotEmpty prepend="AND" property="attd_sft_cd">				<!-- 태도만족도 		-->
				  		(A.HC_YN = 'Y' AND C.ATTD_SFT_CD = #attd_sft_cd#)
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="rslt_sft_cd">				<!-- 결과만족도 		-->
				  		(A.HC_YN = 'Y' AND C.RSLT_SFT_CD = #rslt_sft_cd#)
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="hc_uabl_rsn_cd">			<!-- 해피콜불가사유		-->
				  		A.HC_UABL_RSN_CD = #hc_uabl_rsn_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="prdct_cd">					<!-- 불만제품 		-->
					    A.PRDCT_CD = #prdct_cd#
				  	</isNotEmpty>			  				 	
				  	<isNotEmpty prepend="AND" property="prblm_penom_cd">			<!-- 현상 		-->
					    A.PRBLM_PENOM_CD = #prblm_penom_cd#
				  	</isNotEmpty>
			 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="1">  	<!-- 시료품질 점검결과		-->
			 			AND	A.VHCL_QLIT_DSFT_CAUS_CD_CUST IS NOT NULL
			 	  	</isEqual>
			 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="2">   	<!-- 시료품질 점검결과		-->
			 	  		AND	A.VHCL_QLIT_DSFT_CAUS_CD_PTR_ST IS NOT NULL
			 	  	</isEqual>
				  	<isNotEmpty prepend="AND" property="vhcl_biztr_qlit_dsft_typ_cd">			<!-- 품질불만유형 		-->
					    A.VHCL_BIZTR_QLIT_DSFT_TYP_CD = #vhcl_biztr_qlit_dsft_typ_cd#
				  	</isNotEmpty>
				 	<isEqual property="vhcl_biztr_yn" compareValue="Y"> 			<!-- Kixx 품질서비스차량 출동 -->
				 		AND A.VHCL_BIZTR_YN = 'Y'
				 	</isEqual>
				 	<isEqual property="vhcl_biztr_yn" compareValue="N"> 			<!-- Kixx 품질서비스차량 출동 -->
				 		AND (A.VHCL_BIZTR_YN = 'N' OR A.VHCL_BIZTR_YN IS NULL)
				 	</isEqual>		 	  	
				 	<isEqual property="rwrd_yn" compareValue="Y"> 					<!-- 보상여부 -->
				 		AND A.RWRD_YN = 'Y'
				 	</isEqual>
				 	<isEqual property="rwrd_yn" compareValue="N"> 					<!-- 보상여부 -->
				 		AND (A.RWRD_YN = 'N' OR A.RWRD_YN IS NULL)
				 	</isEqual>
				 	
				 	<isEqual property="cps_amt_gbn" compareValue="1"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 주유소 보상금 1만원 미만-->
				 			AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 주유소 보상금 1만원 ~ 10만원-->
				 			AND (A.PTR_ST_CPS_AMT <![CDATA[>=]]> 10000 AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 주유소 보상금 10만원 초과-->
				 			AND A.PTR_ST_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	<isEqual property="cps_amt_gbn" compareValue="2"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 회사 보상금 1만원 미만-->
				 			AND A.CO_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 회사 보상금 1만원 ~ 10만원-->
				 			AND (A.CO_CPS_AMT <![CDATA[>=]]> 10000 AND A.CO_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 회사 보상금 10만원 초과-->
				 			AND A.CO_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	<isEqual property="cps_amt_gbn" compareValue="3"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 총 보상금 1만원 미만-->
				 			AND A.TOT_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 총 보상금 1만원 ~ 10만원-->
				 			AND (A.TOT_CPS_AMT <![CDATA[>=]]> 10000 AND A.TOT_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 총 보상금 10만원 초과-->
				 			AND A.TOT_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	
					<!--처리자구분에 체크항목이 하나도 없는 경우, 전체데이터가 조회된다.-->
				 	<isEqual property="cmp_handler" compareValue="1">   
				 		AND	A.DSPSR_YN_CNSLR = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="2">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="3">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="4">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="5">   
				 		AND	A.DSPSR_YN_DSFT_CHRG = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="6">   
				 		AND	A.DSPSR_YN_PART_HD = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="7">   
				 		AND	(A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
	       		</dynamic>  
		
		 
				)
	 	
	 	</select> 	
 	<select id="Get_CMP_SELECT3" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
 		select HGRK_DEPT_CDNM
				,DSPSR_CHRG_DEPT
				,DEPT_CD
				,nvl(count_a1,0) as count_a1
				,nvl(count_a2,0) as count_a2
				,nvl(count_a3,0) as count_a3
				,nvl(count_a4,0) as count_a4
				,nvl(count_a5,0) as count_a5
				
				,nvl(count_b1,0) as count_b1
				,nvl(count_b2,0) as count_b2
				,nvl(count_b3,0) as count_b3
				,nvl(count_b4,0) as count_b4
				,nvl(count_b5,0) as count_b5
				                            
				,nvl(count_c1,0) as count_c1
				,nvl(count_c2,0) as count_c2
				,nvl(count_c3,0) as count_c3
				,nvl(count_c4,0) as count_c4
				,nvl(count_c5,0) as count_c5
				                            
				,nvl(count_d1,0) as count_d1
				,nvl(count_d2,0) as count_d2
				,nvl(count_d3,0) as count_d3
				,nvl(count_d4,0) as count_d4
				,nvl(count_d5,0) as count_d5
				                            
				,nvl(count_e1,0) as count_e1
				,nvl(count_e2,0) as count_e2
				,nvl(count_e3,0) as count_e3
				,nvl(count_e4,0) as count_e4
				,nvl(count_e5,0) as count_e5
				                            
				,nvl(count_f1,0) as count_f1
				,nvl(count_f2,0) as count_f2
				,nvl(count_f3,0) as count_f3
				,nvl(count_f4,0) as count_f4
				,nvl(count_f5,0) as count_f5
				                            
				,nvl(count_g1,0) as count_g1
				,nvl(count_g2,0) as count_g2
				,nvl(count_g3,0) as count_g3
				,nvl(count_g4,0) as count_g4
				,nvl(count_g5,0) as count_g5
				                            
				,nvl(count_h1,0) as count_h1
				,nvl(count_h2,0) as count_h2
				,nvl(count_h3,0) as count_h3
				,nvl(count_h4,0) as count_h4
				,nvl(count_h5,0) as count_h5
				                            
				,nvl(count_i1,0) as count_i1
				,nvl(count_i2,0) as count_i2
				,nvl(count_i3,0) as count_i3
				,nvl(count_i4,0) as count_i4
				,nvl(count_i5,0) as count_i5
				                            
				,nvl(count_j1,0) as count_j1
				,nvl(count_j2,0) as count_j2
				,nvl(count_j3,0) as count_j3
				,nvl(count_j4,0) as count_j4
				,nvl(count_j5,0) as count_j5
				                            
				,nvl(count_k1,0) as count_k1
				,nvl(count_k2,0) as count_k2
				,nvl(count_k3,0) as count_k3
				,nvl(count_k4,0) as count_k4
				,nvl(count_k5,0) as count_k5
				                            
				,nvl(count_l1,0) as count_l1
				,nvl(count_l2,0) as count_l2
				,nvl(count_l3,0) as count_l3
				,nvl(count_l4,0) as count_l4
				,nvl(count_l5,0) as count_l5
				                            
				,nvl(count_m1,0) as count_m1
				,nvl(count_m2,0) as count_m2
				,nvl(count_m3,0) as count_m3
				,nvl(count_m4,0) as count_m4
				,nvl(count_m5,0) as count_m5
				                            
				,nvl(count_n1,0) as count_n1
				,nvl(count_n2,0) as count_n2
				,nvl(count_n3,0) as count_n3
				,nvl(count_n4,0) as count_n4
				,nvl(count_n5,0) as count_n5
				                            
				,nvl(count_o1,0) as count_o1
				,nvl(count_o2,0) as count_o2
				,nvl(count_o3,0) as count_o3
				,nvl(count_o4,0) as count_o4
				,nvl(count_o5,0) as count_o5
				                            
				,nvl(count_p1,0) as count_p1
				,nvl(count_p2,0) as count_p2
				,nvl(count_p3,0) as count_p3
				,nvl(count_p4,0) as count_p4
				,nvl(count_p5,0) as count_p5
				                            
				,nvl(count_q1,0) as count_q1
				,nvl(count_q2,0) as count_q2
				,nvl(count_q3,0) as count_q3
				,nvl(count_q4,0) as count_q4
				,nvl(count_q5,0) as count_q5
				                            
				,nvl(count_r1,0) as count_r1
				,nvl(count_r2,0) as count_r2
				,nvl(count_r3,0) as count_r3
				,nvl(count_r4,0) as count_r4
				,nvl(count_r5,0) as count_r5
				                            
				,nvl(count_s1,0) as count_s1
				,nvl(count_s2,0) as count_s2
				,nvl(count_s3,0) as count_s3
				,nvl(count_s4,0) as count_s4
				,nvl(count_s5,0) as count_s5
				                            
				,nvl(count_t1,0) as count_t1
				,nvl(count_t2,0) as count_t2
				,nvl(count_t3,0) as count_t3
				,nvl(count_t4,0) as count_t4
				,nvl(count_t5,0) as count_t5
				                            
				,nvl(count_u1,0) as count_u1
				,nvl(count_u2,0) as count_u2
				,nvl(count_u3,0) as count_u3
				,nvl(count_u4,0) as count_u4
				,nvl(count_u5,0) as count_u5
				                            
				,nvl(count_v1,0) as count_v1
				,nvl(count_v2,0) as count_v2
				,nvl(count_v3,0) as count_v3
				,nvl(count_v4,0) as count_v4
				,nvl(count_v5,0) as count_v5
				                            
				,nvl(count_w1,0) as count_w1
				,nvl(count_w2,0) as count_w2
				,nvl(count_w3,0) as count_w3
				,nvl(count_w4,0) as count_w4
				,nvl(count_w5,0) as count_w5
				                            
				,nvl(count_x1,0) as count_x1
				,nvl(count_x2,0) as count_x2
				,nvl(count_x3,0) as count_x3
				,nvl(count_x4,0) as count_x4
				,nvl(count_x5,0) as count_x5
				                            
				,nvl(count_y1,0) as count_y1
				,nvl(count_y2,0) as count_y2
				,nvl(count_y3,0) as count_y3
				,nvl(count_y4,0) as count_y4
				,nvl(count_y5,0) as count_y5
				                            
				,nvl(count_z1,0) as count_z1
				,nvl(count_z2,0) as count_z2
				,nvl(count_z3,0) as count_z3
				,nvl(count_z4,0) as count_z4
				,nvl(count_z5,0) as count_z5
 		
 		from ( SELECT 	HGRK_DEPT_CDNM
				,DSPSR_CHRG_DEPT
				,DEPT_CD, 
	
    	CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CA' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CA' and C.RSLT_SFT_CD in('A') then 1 else 0 end)) else null end as count_a2
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CA' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CA' and C.RSLT_SFT_CD in('B') then 1 else 0 end)) else null end as count_a3
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CA' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CA' and C.RSLT_SFT_CD in('C') then 1 else 0 end)) else null end as count_a4
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CA' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CA' and C.RSLT_SFT_CD in('D') then 1 else 0 end)) else null end as count_a1
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CA' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CA' and C.RSLT_SFT_CD in('E') then 1 else 0 end)) else null end as count_a5
	
    	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CB' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CB' and C.RSLT_SFT_CD in('A') then 1 else 0 end)) else null end as count_b2
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CB' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CB' and C.RSLT_SFT_CD in('B') then 1 else 0 end)) else null end as count_b3
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CB' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CB' and C.RSLT_SFT_CD in('C') then 1 else 0 end)) else null end as count_b4
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CB' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CB' and C.RSLT_SFT_CD in('D') then 1 else 0 end)) else null end as count_b1
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CB' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CB' and C.RSLT_SFT_CD in('E') then 1 else 0 end)) else null end as count_b5
	
        ,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CC' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CC' and C.RSLT_SFT_CD in('A') then 1 else 0 end)) else null end as count_c2
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CC' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CC' and C.RSLT_SFT_CD in('B') then 1 else 0 end)) else null end as count_c3
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CC' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CC' and C.RSLT_SFT_CD in('C') then 1 else 0 end)) else null end as count_c4
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CC' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CC' and C.RSLT_SFT_CD in('D') then 1 else 0 end)) else null end as count_c1
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CC' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CC' and C.RSLT_SFT_CD in('E') then 1 else 0 end)) else null end as count_c5
		
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CD' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CD' and C.RSLT_SFT_CD in('A') then 1 else 0 end)) else null end as count_d2
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CD' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CD' and C.RSLT_SFT_CD in('B') then 1 else 0 end)) else null end as count_d3
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CD' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CD' and C.RSLT_SFT_CD in('C') then 1 else 0 end)) else null end as count_d4
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CD' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CD' and C.RSLT_SFT_CD in('D') then 1 else 0 end)) else null end as count_d1
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CD' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CD' and C.RSLT_SFT_CD in('E') then 1 else 0 end)) else null end as count_d5
		
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CE' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CE' and C.RSLT_SFT_CD in('A') then 1 else 0 end)) else null end as count_e2
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CE' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CE' and C.RSLT_SFT_CD in('B') then 1 else 0 end)) else null end as count_e3
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CE' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CE' and C.RSLT_SFT_CD in('C') then 1 else 0 end)) else null end as count_e4
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CE' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CE' and C.RSLT_SFT_CD in('D') then 1 else 0 end)) else null end as count_e1
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CE' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CE' and C.RSLT_SFT_CD in('E') then 1 else 0 end)) else null end as count_e5
		
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CF' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CF' and C.RSLT_SFT_CD in('A') then 1 else 0 end)) else null end as count_f2
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CF' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CF' and C.RSLT_SFT_CD in('B') then 1 else 0 end)) else null end as count_f3
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CF' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CF' and C.RSLT_SFT_CD in('C') then 1 else 0 end)) else null end as count_f4
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CF' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CF' and C.RSLT_SFT_CD in('D') then 1 else 0 end)) else null end as count_f1
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CF' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CF' and C.RSLT_SFT_CD in('E') then 1 else 0 end)) else null end as count_f5
		
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CG' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CG' and C.RSLT_SFT_CD in('A') then 1 else 0 end)) else null end as count_g2
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CG' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CG' and C.RSLT_SFT_CD in('B') then 1 else 0 end)) else null end as count_g3
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CG' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CG' and C.RSLT_SFT_CD in('C') then 1 else 0 end)) else null end as count_g4
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CG' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CG' and C.RSLT_SFT_CD in('D') then 1 else 0 end)) else null end as count_g1
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CG' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CG' and C.RSLT_SFT_CD in('E') then 1 else 0 end)) else null end as count_g5
		
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CH' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CH' and C.RSLT_SFT_CD in('A') then 1 else 0 end)) else null end as count_h2
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CH' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CH' and C.RSLT_SFT_CD in('B') then 1 else 0 end)) else null end as count_h3
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CH' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CH' and C.RSLT_SFT_CD in('C') then 1 else 0 end)) else null end as count_h4
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CH' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CH' and C.RSLT_SFT_CD in('D') then 1 else 0 end)) else null end as count_h1
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CH' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CH' and C.RSLT_SFT_CD in('E') then 1 else 0 end)) else null end as count_h5
		
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CI' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CI' and C.RSLT_SFT_CD in('A') then 1 else 0 end)) else null end as count_i2
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CI' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CI' and C.RSLT_SFT_CD in('B') then 1 else 0 end)) else null end as count_i3
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CI' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CI' and C.RSLT_SFT_CD in('C') then 1 else 0 end)) else null end as count_i4
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CI' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CI' and C.RSLT_SFT_CD in('D') then 1 else 0 end)) else null end as count_i1
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CI' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CI' and C.RSLT_SFT_CD in('E') then 1 else 0 end)) else null end as count_i5
		
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CJ' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CJ' and C.RSLT_SFT_CD in('A') then 1 else 0 end)) else null end as count_j2
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CJ' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CJ' and C.RSLT_SFT_CD in('B') then 1 else 0 end)) else null end as count_j3
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CJ' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CJ' and C.RSLT_SFT_CD in('C') then 1 else 0 end)) else null end as count_j4
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CJ' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CJ' and C.RSLT_SFT_CD in('D') then 1 else 0 end)) else null end as count_j1
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CJ' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CJ' and C.RSLT_SFT_CD in('E') then 1 else 0 end)) else null end as count_j5
		
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CK' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CK' and C.RSLT_SFT_CD in('A') then 1 else 0 end)) else null end as count_k2
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CK' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CK' and C.RSLT_SFT_CD in('B') then 1 else 0 end)) else null end as count_k3
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CK' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CK' and C.RSLT_SFT_CD in('C') then 1 else 0 end)) else null end as count_k4
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CK' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CK' and C.RSLT_SFT_CD in('D') then 1 else 0 end)) else null end as count_k1
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CK' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CK' and C.RSLT_SFT_CD in('E') then 1 else 0 end)) else null end as count_k5
		
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CL' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CL' and C.RSLT_SFT_CD in('A') then 1 else 0 end)) else null end as count_l2
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CL' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CL' and C.RSLT_SFT_CD in('B') then 1 else 0 end)) else null end as count_l3
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CL' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CL' and C.RSLT_SFT_CD in('C') then 1 else 0 end)) else null end as count_l4
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CL' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CL' and C.RSLT_SFT_CD in('D') then 1 else 0 end)) else null end as count_l1
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CL' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CL' and C.RSLT_SFT_CD in('E') then 1 else 0 end)) else null end as count_l5
		
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CM' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CM' and C.RSLT_SFT_CD in('A') then 1 else 0 end)) else null end as count_m2
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CM' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CM' and C.RSLT_SFT_CD in('B') then 1 else 0 end)) else null end as count_m3
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CM' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CM' and C.RSLT_SFT_CD in('C') then 1 else 0 end)) else null end as count_m4
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CM' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CM' and C.RSLT_SFT_CD in('D') then 1 else 0 end)) else null end as count_m1
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CM' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CM' and C.RSLT_SFT_CD in('E') then 1 else 0 end)) else null end as count_m5
		
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CN' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CN' and C.RSLT_SFT_CD in('A') then 1 else 0 end)) else null end as count_n2
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CN' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CN' and C.RSLT_SFT_CD in('B') then 1 else 0 end)) else null end as count_n3
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CN' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CN' and C.RSLT_SFT_CD in('C') then 1 else 0 end)) else null end as count_n4
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CN' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CN' and C.RSLT_SFT_CD in('D') then 1 else 0 end)) else null end as count_n1
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CN' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CN' and C.RSLT_SFT_CD in('E') then 1 else 0 end)) else null end as count_n5
		
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CO' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CO' and C.RSLT_SFT_CD in('A') then 1 else 0 end)) else null end as count_o2
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CO' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CO' and C.RSLT_SFT_CD in('B') then 1 else 0 end)) else null end as count_o3
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CO' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CO' and C.RSLT_SFT_CD in('C') then 1 else 0 end)) else null end as count_o4
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CO' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CO' and C.RSLT_SFT_CD in('D') then 1 else 0 end)) else null end as count_o1
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CO' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CO' and C.RSLT_SFT_CD in('E') then 1 else 0 end)) else null end as count_o5
		
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CP' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CP' and C.RSLT_SFT_CD in('A') then 1 else 0 end)) else null end as count_p2
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CP' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CP' and C.RSLT_SFT_CD in('B') then 1 else 0 end)) else null end as count_p3
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CP' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CP' and C.RSLT_SFT_CD in('C') then 1 else 0 end)) else null end as count_p4
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CP' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CP' and C.RSLT_SFT_CD in('D') then 1 else 0 end)) else null end as count_p1
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CP' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CP' and C.RSLT_SFT_CD in('E') then 1 else 0 end)) else null end as count_p5
		
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CQ' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CQ' and C.RSLT_SFT_CD in('A') then 1 else 0 end)) else null end as count_q2
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CQ' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CQ' and C.RSLT_SFT_CD in('B') then 1 else 0 end)) else null end as count_q3
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CQ' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CQ' and C.RSLT_SFT_CD in('C') then 1 else 0 end)) else null end as count_q4
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CQ' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CQ' and C.RSLT_SFT_CD in('D') then 1 else 0 end)) else null end as count_q1
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CQ' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CQ' and C.RSLT_SFT_CD in('E') then 1 else 0 end)) else null end as count_q5
		
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CR' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CR' and C.RSLT_SFT_CD in('A') then 1 else 0 end)) else null end as count_r2
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CR' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CR' and C.RSLT_SFT_CD in('B') then 1 else 0 end)) else null end as count_r3
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CR' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CR' and C.RSLT_SFT_CD in('C') then 1 else 0 end)) else null end as count_r4
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CR' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CR' and C.RSLT_SFT_CD in('D') then 1 else 0 end)) else null end as count_r1
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CR' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CR' and C.RSLT_SFT_CD in('E') then 1 else 0 end)) else null end as count_r5
		
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DA' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DA' and C.RSLT_SFT_CD in('A') then 1 else 0 end)) else null end as count_s2
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DA' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DA' and C.RSLT_SFT_CD in('B') then 1 else 0 end)) else null end as count_s3
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DA' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DA' and C.RSLT_SFT_CD in('C') then 1 else 0 end)) else null end as count_s4
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DA' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DA' and C.RSLT_SFT_CD in('D') then 1 else 0 end)) else null end as count_s1
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DA' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DA' and C.RSLT_SFT_CD in('E') then 1 else 0 end)) else null end as count_s5
		
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DB' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DB' and C.RSLT_SFT_CD in('A') then 1 else 0 end)) else null end as count_t2
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DB' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DB' and C.RSLT_SFT_CD in('B') then 1 else 0 end)) else null end as count_t3
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DB' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DB' and C.RSLT_SFT_CD in('C') then 1 else 0 end)) else null end as count_t4
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DB' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DB' and C.RSLT_SFT_CD in('D') then 1 else 0 end)) else null end as count_t1
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DB' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DB' and C.RSLT_SFT_CD in('E') then 1 else 0 end)) else null end as count_t5
		
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DC' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DC' and C.RSLT_SFT_CD in('A') then 1 else 0 end)) else null end as count_u2
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DC' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DC' and C.RSLT_SFT_CD in('B') then 1 else 0 end)) else null end as count_u3
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DC' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DC' and C.RSLT_SFT_CD in('C') then 1 else 0 end)) else null end as count_u4
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DC' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DC' and C.RSLT_SFT_CD in('D') then 1 else 0 end)) else null end as count_u1
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DC' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DC' and C.RSLT_SFT_CD in('E') then 1 else 0 end)) else null end as count_u5
		
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DD' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DD' and C.RSLT_SFT_CD in('A') then 1 else 0 end)) else null end as count_v2
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DD' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DD' and C.RSLT_SFT_CD in('B') then 1 else 0 end)) else null end as count_v3
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DD' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DD' and C.RSLT_SFT_CD in('C') then 1 else 0 end)) else null end as count_v4
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DD' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DD' and C.RSLT_SFT_CD in('D') then 1 else 0 end)) else null end as count_v1
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DD' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DD' and C.RSLT_SFT_CD in('E') then 1 else 0 end)) else null end as count_v5
		
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DE' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DE' and C.RSLT_SFT_CD in('A') then 1 else 0 end)) else null end as count_w2
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DE' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DE' and C.RSLT_SFT_CD in('B') then 1 else 0 end)) else null end as count_w3
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DE' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DE' and C.RSLT_SFT_CD in('C') then 1 else 0 end)) else null end as count_w4
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DE' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DE' and C.RSLT_SFT_CD in('D') then 1 else 0 end)) else null end as count_w1
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DE' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DE' and C.RSLT_SFT_CD in('E') then 1 else 0 end)) else null end as count_w5
		
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DF' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DF' and C.RSLT_SFT_CD in('A') then 1 else 0 end)) else null end as count_x2
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DF' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DF' and C.RSLT_SFT_CD in('B') then 1 else 0 end)) else null end as count_x3
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DF' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DF' and C.RSLT_SFT_CD in('C') then 1 else 0 end)) else null end as count_x4
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DF' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DF' and C.RSLT_SFT_CD in('D') then 1 else 0 end)) else null end as count_x1
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DF' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DF' and C.RSLT_SFT_CD in('E') then 1 else 0 end)) else null end as count_x5
		
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DG' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DG' and C.RSLT_SFT_CD in('A') then 1 else 0 end)) else null end as count_y2
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DG' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DG' and C.RSLT_SFT_CD in('B') then 1 else 0 end)) else null end as count_y3
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DG' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DG' and C.RSLT_SFT_CD in('C') then 1 else 0 end)) else null end as count_y4
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DG' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DG' and C.RSLT_SFT_CD in('D') then 1 else 0 end)) else null end as count_y1
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DG' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DG' and C.RSLT_SFT_CD in('E') then 1 else 0 end)) else null end as count_y5
		
		,
		(sum(case when C.RSLT_SFT_CD in('A') then 1 else 0 end)) as count_z2
		,
		(sum(case when C.RSLT_SFT_CD in('B') then 1 else 0 end)) as count_z3
		,
		(sum(case when C.RSLT_SFT_CD in('C') then 1 else 0 end)) as count_z4
		,
		(sum(case when C.RSLT_SFT_CD in('D') then 1 else 0 end)) as count_z1
		,
		(sum(case when C.RSLT_SFT_CD in('E') then 1 else 0 end)) as count_z5
	        FROM TBL_DSFT_ACPN_PROC A					  		   
			        LEFT JOIN TBL_HC_HIST C
			               ON A.DSFT_ACPN_SEQ_NO = C.DSFT_ACPN_SEQ_NO		  
			        LEFT JOIN TBL_CRPN_CUST_BASE D
			       		   ON A.ORGN_PTR_ST_CD = D.CUST_ID        	    	  
			        LEFT JOIN TBL_USR B
			       		   ON A.DSPSR_ID = B.USR_ID 
			        LEFT JOIN TBL_HR_EMP_CD F
			       		   ON A.DSPSR_ID = F.EMP_NO
			        LEFT JOIN TBL_HR_DEPT_CD G 
			       		   ON F.BLNG_DEPT_CD = G.DEPT_CD
			        LEFT JOIN TBL_SAP_CD H	
			       		   ON (A.ORGN_ENTR_DV_CD = H.CD_ID AND H.CD_CLAS_CD = '1')	
			        LEFT JOIN TBL_DSFT_TAXN_TYP_CD I
			       		   ON A.DSFT_TAXN_TYP_CD = I.DSFT_TAXN_TYP_CD
			       		   
			WHERE (A.DEL_YN = 'N' OR A.DEL_YN IS NULL)	
			and (A.DSPSR_YN_OB_CNTR='N' or A.DSPSR_YN_OB_CNTR is null )	
              and (A.HC_YN ='Y')
                    
               	<dynamic>
	       			<!-- 년도별 -->   				    	
		    	    <isEqual property="cmb_gubun" compareValue="1">              
		                and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'                                                                  
		            </isEqual>
		            <!--  -->
		            <isEqual property="cmb_gubun" compareValue="2">
		            	<isEmpty property="cmb_half">
		            		and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'
		            	</isEmpty>              
		                <isEqual property="cmb_half" compareValue="1">
		                	and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0632000000'                                                                  
						</isEqual>	 
						<isEqual property="cmb_half" compareValue="2">
							and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '1232000000'
						</isEqual>	 
		            </isEqual>	 
		            <isEqual property="cmb_gubun" compareValue="3"> 
		            	<isEmpty>
							and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'	            	
		            	</isEmpty>    
		           		<isEqual property="cmb_qua" compareValue="1">
		           			and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0332000000'   
		           	  	</isEqual>
		           	  	<isEqual property="cmb_qua" compareValue="2">
		           	   		and A.ACPN_DTM between #time_key# || '0400000000' and #time_key# || '0632000000'   
		           	  	</isEqual>	 
		           	  	<isEqual property="cmb_qua" compareValue="3">
		           	   		and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '0932000000'   
		           	  	</isEqual>	 
	           	  		<isEqual property="cmb_qua" compareValue="4">
		           	   		and A.ACPN_DTM between #time_key# || '1000000000' and #time_key# || '1232000000'   
		           	  	</isEqual>	 	 
	            	</isEqual>	 				            
		    	 	<isEqual property="cmb_gubun" compareValue="4">              
		            	and A.ACPN_DTM between #time_key# || '00000000' and #time_key# || '32000000'                                                                  
		         	</isEqual>	
		    	 	<isEqual property="cmb_gubun" compareValue="5">              
		                and A.ACPN_DTM between #time_key# || '000000' and #time_key2# || '240000'                                                                  
		         	</isEqual>
				
					<!-- 불만유형이 전체일 때는 두가지 경우 존재(전체, 품질&혼유)		-->				
					<isEmpty property="dsft_typ_cd">
						<isEqual property="dsft_typ_tot_gbn" compareValue="2">
							AND A.DSFT_TYP_CD IN ('CA','CK')
						</isEqual>
					</isEmpty>
				  	<isNotEmpty prepend="AND" property="dsft_typ_cd">				<!-- 불만유형		-->
				    	A.DSFT_TYP_CD = #dsft_typ_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dsft_taxn_typ_cd">			<!-- 불만세부유형		-->
				    	A.DSFT_TAXN_TYP_CD = #dsft_taxn_typ_cd#
				  	</isNotEmpty>
			  		<isNotEmpty prepend="AND" property="orgn_ptr_st_cd">			<!-- 불만발생업체코드(가맹점SAP코드) -->
					    A.ORGN_PTR_ST_CD = #orgn_ptr_st_cd#
				  	</isNotEmpty>
				    <isNotEmpty prepend="AND" property="conn_chnl_kind_cd">			<!-- 접촉채널	-->
					    A.CONN_CHNL_KIND_CD = #conn_chnl_kind_cd#
				    </isNotEmpty>			  	
				  	<isNotEmpty prepend="AND" property="hgrk_dept_cd">				<!-- 부문/본부 -->
					    G.HGRK_DEPT_CD = #hgrk_dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dept_cd">					<!-- 처리팀 -->
					    G.DEPT_CD = #dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dspsr_id_nm">				<!-- 처리자명 		-->
					    (B.USR_NM LIKE '%'|| #dspsr_id_nm# ||'%' OR F.EMP_NM LIKE '%'|| #dspsr_id_nm# ||'%')
				  	</isNotEmpty>
			 		<isEqual property="hc_yn" compareValue="Y"> 					<!-- 해피콜여부  -->
			 			AND A.HC_YN = 'Y'
			 		</isEqual>
				 	<isEqual property="hc_yn" compareValue="N"> 					<!-- 해피콜여부  -->
				 		AND (A.HC_YN = 'N' OR A.HC_YN IS NULL)
				 	</isEqual>
				  	<isNotEmpty prepend="AND" property="attd_sft_cd">				<!-- 태도만족도 		-->
				  		(A.HC_YN = 'Y' AND C.ATTD_SFT_CD = #attd_sft_cd#)
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="rslt_sft_cd">				<!-- 결과만족도 		-->
				  		(A.HC_YN = 'Y' AND C.RSLT_SFT_CD = #rslt_sft_cd#)
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="hc_uabl_rsn_cd">			<!-- 해피콜불가사유		-->
				  		A.HC_UABL_RSN_CD = #hc_uabl_rsn_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="prdct_cd">					<!-- 불만제품 		-->
					    A.PRDCT_CD = #prdct_cd#
				  	</isNotEmpty>			  				 	
				  	<isNotEmpty prepend="AND" property="prblm_penom_cd">			<!-- 현상 		-->
					    A.PRBLM_PENOM_CD = #prblm_penom_cd#
				  	</isNotEmpty>
			 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="1">  	<!-- 시료품질 점검결과		-->
			 			AND	A.VHCL_QLIT_DSFT_CAUS_CD_CUST IS NOT NULL
			 	  	</isEqual>
			 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="2">   	<!-- 시료품질 점검결과		-->
			 	  		AND	A.VHCL_QLIT_DSFT_CAUS_CD_PTR_ST IS NOT NULL
			 	  	</isEqual>
				  	<isNotEmpty prepend="AND" property="vhcl_biztr_qlit_dsft_typ_cd">			<!-- 품질불만유형 		-->
					    A.VHCL_BIZTR_QLIT_DSFT_TYP_CD = #vhcl_biztr_qlit_dsft_typ_cd#
				  	</isNotEmpty>
				 	<isEqual property="vhcl_biztr_yn" compareValue="Y"> 			<!-- Kixx 품질서비스차량 출동 -->
				 		AND A.VHCL_BIZTR_YN = 'Y'
				 	</isEqual>
				 	<isEqual property="vhcl_biztr_yn" compareValue="N"> 			<!-- Kixx 품질서비스차량 출동 -->
				 		AND (A.VHCL_BIZTR_YN = 'N' OR A.VHCL_BIZTR_YN IS NULL)
				 	</isEqual>		 	  	
				 	<isEqual property="rwrd_yn" compareValue="Y"> 					<!-- 보상여부 -->
				 		AND A.RWRD_YN = 'Y'
				 	</isEqual>
				 	<isEqual property="rwrd_yn" compareValue="N"> 					<!-- 보상여부 -->
				 		AND (A.RWRD_YN = 'N' OR A.RWRD_YN IS NULL)
				 	</isEqual>
				 	
				 	<isEqual property="cps_amt_gbn" compareValue="1"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 주유소 보상금 1만원 미만-->
				 			AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 주유소 보상금 1만원 ~ 10만원-->
				 			AND (A.PTR_ST_CPS_AMT <![CDATA[>=]]> 10000 AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 주유소 보상금 10만원 초과-->
				 			AND A.PTR_ST_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	<isEqual property="cps_amt_gbn" compareValue="2"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 회사 보상금 1만원 미만-->
				 			AND A.CO_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 회사 보상금 1만원 ~ 10만원-->
				 			AND (A.CO_CPS_AMT <![CDATA[>=]]> 10000 AND A.CO_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 회사 보상금 10만원 초과-->
				 			AND A.CO_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	<isEqual property="cps_amt_gbn" compareValue="3"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 총 보상금 1만원 미만-->
				 			AND A.TOT_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 총 보상금 1만원 ~ 10만원-->
				 			AND (A.TOT_CPS_AMT <![CDATA[>=]]> 10000 AND A.TOT_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 총 보상금 10만원 초과-->
				 			AND A.TOT_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	
					<!--처리자구분에 체크항목이 하나도 없는 경우, 전체데이터가 조회된다.-->
				 	<isEqual property="cmp_handler" compareValue="1">   
				 		AND	A.DSPSR_YN_CNSLR = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="2">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="3">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="4">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="5">   
				 		AND	A.DSPSR_YN_DSFT_CHRG = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="6">   
				 		AND	A.DSPSR_YN_PART_HD = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="7">   
				 		AND	(A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
	       		</dynamic>       
                    
               group by HGRK_DEPT_CDNM
				,DSPSR_CHRG_DEPT
				,DEPT_CD )
 	
 </select>
 
 <select id="Get_CMP_SELECT4" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
 		select HGRK_DEPT_CDNM
				,DSPSR_CHRG_DEPT
				,DEPT_CD
				,nvl(count_a1,0) as count_a1
				,nvl(count_a2,0) as count_a2
				,nvl(count_a3,0) as count_a3
				,nvl(count_a4,0) as count_a4
				,nvl(count_a5,0) as count_a5
				
				,nvl(count_b1,0) as count_b1
				,nvl(count_b2,0) as count_b2
				,nvl(count_b3,0) as count_b3
				,nvl(count_b4,0) as count_b4
				,nvl(count_b5,0) as count_b5
				                            
				,nvl(count_c1,0) as count_c1
				,nvl(count_c2,0) as count_c2
				,nvl(count_c3,0) as count_c3
				,nvl(count_c4,0) as count_c4
				,nvl(count_c5,0) as count_c5
				                            
				,nvl(count_d1,0) as count_d1
				,nvl(count_d2,0) as count_d2
				,nvl(count_d3,0) as count_d3
				,nvl(count_d4,0) as count_d4
				,nvl(count_d5,0) as count_d5
				                            
				,nvl(count_e1,0) as count_e1
				,nvl(count_e2,0) as count_e2
				,nvl(count_e3,0) as count_e3
				,nvl(count_e4,0) as count_e4
				,nvl(count_e5,0) as count_e5
				                            
				,nvl(count_f1,0) as count_f1
				,nvl(count_f2,0) as count_f2
				,nvl(count_f3,0) as count_f3
				,nvl(count_f4,0) as count_f4
				,nvl(count_f5,0) as count_f5
				                            
				,nvl(count_g1,0) as count_g1
				,nvl(count_g2,0) as count_g2
				,nvl(count_g3,0) as count_g3
				,nvl(count_g4,0) as count_g4
				,nvl(count_g5,0) as count_g5
				                            
				,nvl(count_h1,0) as count_h1
				,nvl(count_h2,0) as count_h2
				,nvl(count_h3,0) as count_h3
				,nvl(count_h4,0) as count_h4
				,nvl(count_h5,0) as count_h5
				                            
				,nvl(count_i1,0) as count_i1
				,nvl(count_i2,0) as count_i2
				,nvl(count_i3,0) as count_i3
				,nvl(count_i4,0) as count_i4
				,nvl(count_i5,0) as count_i5
				                            
				,nvl(count_j1,0) as count_j1
				,nvl(count_j2,0) as count_j2
				,nvl(count_j3,0) as count_j3
				,nvl(count_j4,0) as count_j4
				,nvl(count_j5,0) as count_j5
				                            
				,nvl(count_k1,0) as count_k1
				,nvl(count_k2,0) as count_k2
				,nvl(count_k3,0) as count_k3
				,nvl(count_k4,0) as count_k4
				,nvl(count_k5,0) as count_k5
				                            
				,nvl(count_l1,0) as count_l1
				,nvl(count_l2,0) as count_l2
				,nvl(count_l3,0) as count_l3
				,nvl(count_l4,0) as count_l4
				,nvl(count_l5,0) as count_l5
				                            
				,nvl(count_m1,0) as count_m1
				,nvl(count_m2,0) as count_m2
				,nvl(count_m3,0) as count_m3
				,nvl(count_m4,0) as count_m4
				,nvl(count_m5,0) as count_m5
				                            
				,nvl(count_n1,0) as count_n1
				,nvl(count_n2,0) as count_n2
				,nvl(count_n3,0) as count_n3
				,nvl(count_n4,0) as count_n4
				,nvl(count_n5,0) as count_n5
				                            
				,nvl(count_o1,0) as count_o1
				,nvl(count_o2,0) as count_o2
				,nvl(count_o3,0) as count_o3
				,nvl(count_o4,0) as count_o4
				,nvl(count_o5,0) as count_o5
				                            
				,nvl(count_p1,0) as count_p1
				,nvl(count_p2,0) as count_p2
				,nvl(count_p3,0) as count_p3
				,nvl(count_p4,0) as count_p4
				,nvl(count_p5,0) as count_p5
				                            
				,nvl(count_q1,0) as count_q1
				,nvl(count_q2,0) as count_q2
				,nvl(count_q3,0) as count_q3
				,nvl(count_q4,0) as count_q4
				,nvl(count_q5,0) as count_q5
				                            
				,nvl(count_r1,0) as count_r1
				,nvl(count_r2,0) as count_r2
				,nvl(count_r3,0) as count_r3
				,nvl(count_r4,0) as count_r4
				,nvl(count_r5,0) as count_r5
				                            
				,nvl(count_s1,0) as count_s1
				,nvl(count_s2,0) as count_s2
				,nvl(count_s3,0) as count_s3
				,nvl(count_s4,0) as count_s4
				,nvl(count_s5,0) as count_s5
				                            
				,nvl(count_t1,0) as count_t1
				,nvl(count_t2,0) as count_t2
				,nvl(count_t3,0) as count_t3
				,nvl(count_t4,0) as count_t4
				,nvl(count_t5,0) as count_t5
				                            
				,nvl(count_u1,0) as count_u1
				,nvl(count_u2,0) as count_u2
				,nvl(count_u3,0) as count_u3
				,nvl(count_u4,0) as count_u4
				,nvl(count_u5,0) as count_u5
				                            
				,nvl(count_v1,0) as count_v1
				,nvl(count_v2,0) as count_v2
				,nvl(count_v3,0) as count_v3
				,nvl(count_v4,0) as count_v4
				,nvl(count_v5,0) as count_v5
				                            
				,nvl(count_w1,0) as count_w1
				,nvl(count_w2,0) as count_w2
				,nvl(count_w3,0) as count_w3
				,nvl(count_w4,0) as count_w4
				,nvl(count_w5,0) as count_w5
				                            
				,nvl(count_x1,0) as count_x1
				,nvl(count_x2,0) as count_x2
				,nvl(count_x3,0) as count_x3
				,nvl(count_x4,0) as count_x4
				,nvl(count_x5,0) as count_x5
				                            
				,nvl(count_y1,0) as count_y1
				,nvl(count_y2,0) as count_y2
				,nvl(count_y3,0) as count_y3
				,nvl(count_y4,0) as count_y4
				,nvl(count_y5,0) as count_y5
				                            
				,nvl(count_z1,0) as count_z1
				,nvl(count_z2,0) as count_z2
				,nvl(count_z3,0) as count_z3
				,nvl(count_z4,0) as count_z4
				,nvl(count_z5,0) as count_z5
 		from 
 		( SELECT 	HGRK_DEPT_CDNM
				,DSPSR_CHRG_DEPT
				,DEPT_CD, 
	
    	CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CA' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CA' and C.ATTD_SFT_CD in('A') then 1 else 0 end)) else null end as count_a2
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CA' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CA' and C.ATTD_SFT_CD in('B') then 1 else 0 end)) else null end as count_a3
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CA' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CA' and C.ATTD_SFT_CD in('C') then 1 else 0 end)) else null end as count_a4
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CA' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CA' and C.ATTD_SFT_CD in('D') then 1 else 0 end)) else null end as count_a1
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CA' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CA' and C.ATTD_SFT_CD in('E') then 1 else 0 end)) else null end as count_a5
	
    	,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CB' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CB' and C.ATTD_SFT_CD in('A') then 1 else 0 end)) else null end as count_b2
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CB' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CB' and C.ATTD_SFT_CD in('B') then 1 else 0 end)) else null end as count_b3
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CB' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CB' and C.ATTD_SFT_CD in('C') then 1 else 0 end)) else null end as count_b4
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CB' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CB' and C.ATTD_SFT_CD in('D') then 1 else 0 end)) else null end as count_b1
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CB' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CB' and C.ATTD_SFT_CD in('E') then 1 else 0 end)) else null end as count_b5
	
        ,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CC' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CC' and C.ATTD_SFT_CD in('A') then 1 else 0 end)) else null end as count_c2
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CC' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CC' and C.ATTD_SFT_CD in('B') then 1 else 0 end)) else null end as count_c3
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CC' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CC' and C.ATTD_SFT_CD in('C') then 1 else 0 end)) else null end as count_c4
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CC' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CC' and C.ATTD_SFT_CD in('D') then 1 else 0 end)) else null end as count_c1
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CC' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CC' and C.ATTD_SFT_CD in('E') then 1 else 0 end)) else null end as count_c5
		
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CD' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CD' and C.ATTD_SFT_CD in('A') then 1 else 0 end)) else null end as count_d2
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CD' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CD' and C.ATTD_SFT_CD in('B') then 1 else 0 end)) else null end as count_d3
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CD' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CD' and C.ATTD_SFT_CD in('C') then 1 else 0 end)) else null end as count_d4
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CD' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CD' and C.ATTD_SFT_CD in('D') then 1 else 0 end)) else null end as count_d1
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CD' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CD' and C.ATTD_SFT_CD in('E') then 1 else 0 end)) else null end as count_d5
		
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CE' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CE' and C.ATTD_SFT_CD in('A') then 1 else 0 end)) else null end as count_e2
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CE' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CE' and C.ATTD_SFT_CD in('B') then 1 else 0 end)) else null end as count_e3
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CE' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CE' and C.ATTD_SFT_CD in('C') then 1 else 0 end)) else null end as count_e4
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CE' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CE' and C.ATTD_SFT_CD in('D') then 1 else 0 end)) else null end as count_e1
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CE' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CE' and C.ATTD_SFT_CD in('E') then 1 else 0 end)) else null end as count_e5
		
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CF' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CF' and C.ATTD_SFT_CD in('A') then 1 else 0 end)) else null end as count_f2
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CF' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CF' and C.ATTD_SFT_CD in('B') then 1 else 0 end)) else null end as count_f3
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CF' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CF' and C.ATTD_SFT_CD in('C') then 1 else 0 end)) else null end as count_f4
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CF' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CF' and C.ATTD_SFT_CD in('D') then 1 else 0 end)) else null end as count_f1
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CF' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CF' and C.ATTD_SFT_CD in('E') then 1 else 0 end)) else null end as count_f5
		
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CG' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CG' and C.ATTD_SFT_CD in('A') then 1 else 0 end)) else null end as count_g2
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CG' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CG' and C.ATTD_SFT_CD in('B') then 1 else 0 end)) else null end as count_g3
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CG' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CG' and C.ATTD_SFT_CD in('C') then 1 else 0 end)) else null end as count_g4
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CG' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CG' and C.ATTD_SFT_CD in('D') then 1 else 0 end)) else null end as count_g1
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CG' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CG' and C.ATTD_SFT_CD in('E') then 1 else 0 end)) else null end as count_g5
		
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CH' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CH' and C.ATTD_SFT_CD in('A') then 1 else 0 end)) else null end as count_h2
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CH' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CH' and C.ATTD_SFT_CD in('B') then 1 else 0 end)) else null end as count_h3
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CH' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CH' and C.ATTD_SFT_CD in('C') then 1 else 0 end)) else null end as count_h4
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CH' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CH' and C.ATTD_SFT_CD in('D') then 1 else 0 end)) else null end as count_h1
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CH' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CH' and C.ATTD_SFT_CD in('E') then 1 else 0 end)) else null end as count_h5
		
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CI' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CI' and C.ATTD_SFT_CD in('A') then 1 else 0 end)) else null end as count_i2
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CI' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CI' and C.ATTD_SFT_CD in('B') then 1 else 0 end)) else null end as count_i3
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CI' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CI' and C.ATTD_SFT_CD in('C') then 1 else 0 end)) else null end as count_i4
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CI' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CI' and C.ATTD_SFT_CD in('D') then 1 else 0 end)) else null end as count_i1
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CI' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CI' and C.ATTD_SFT_CD in('E') then 1 else 0 end)) else null end as count_i5
		
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CJ' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CJ' and C.ATTD_SFT_CD in('A') then 1 else 0 end)) else null end as count_j2
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CJ' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CJ' and C.ATTD_SFT_CD in('B') then 1 else 0 end)) else null end as count_j3
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CJ' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CJ' and C.ATTD_SFT_CD in('C') then 1 else 0 end)) else null end as count_j4
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CJ' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CJ' and C.ATTD_SFT_CD in('D') then 1 else 0 end)) else null end as count_j1
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CJ' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CJ' and C.ATTD_SFT_CD in('E') then 1 else 0 end)) else null end as count_j5
		
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CK' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CK' and C.ATTD_SFT_CD in('A') then 1 else 0 end)) else null end as count_k2
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CK' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CK' and C.ATTD_SFT_CD in('B') then 1 else 0 end)) else null end as count_k3
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CK' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CK' and C.ATTD_SFT_CD in('C') then 1 else 0 end)) else null end as count_k4
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CK' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CK' and C.ATTD_SFT_CD in('D') then 1 else 0 end)) else null end as count_k1
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CK' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CK' and C.ATTD_SFT_CD in('E') then 1 else 0 end)) else null end as count_k5
		
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CL' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CL' and C.ATTD_SFT_CD in('A') then 1 else 0 end)) else null end as count_l2
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CL' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CL' and C.ATTD_SFT_CD in('B') then 1 else 0 end)) else null end as count_l3
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CL' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CL' and C.ATTD_SFT_CD in('C') then 1 else 0 end)) else null end as count_l4
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CL' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CL' and C.ATTD_SFT_CD in('D') then 1 else 0 end)) else null end as count_l1
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CL' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CL' and C.ATTD_SFT_CD in('E') then 1 else 0 end)) else null end as count_l5
		
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CM' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CM' and C.ATTD_SFT_CD in('A') then 1 else 0 end)) else null end as count_m2
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CM' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CM' and C.ATTD_SFT_CD in('B') then 1 else 0 end)) else null end as count_m3
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CM' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CM' and C.ATTD_SFT_CD in('C') then 1 else 0 end)) else null end as count_m4
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CM' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CM' and C.ATTD_SFT_CD in('D') then 1 else 0 end)) else null end as count_m1
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CM' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CM' and C.ATTD_SFT_CD in('E') then 1 else 0 end)) else null end as count_m5
		
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CN' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CN' and C.ATTD_SFT_CD in('A') then 1 else 0 end)) else null end as count_n2
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CN' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CN' and C.ATTD_SFT_CD in('B') then 1 else 0 end)) else null end as count_n3
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CN' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CN' and C.ATTD_SFT_CD in('C') then 1 else 0 end)) else null end as count_n4
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CN' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CN' and C.ATTD_SFT_CD in('D') then 1 else 0 end)) else null end as count_n1
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CN' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CN' and C.ATTD_SFT_CD in('E') then 1 else 0 end)) else null end as count_n5
		
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CO' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CO' and C.ATTD_SFT_CD in('A') then 1 else 0 end)) else null end as count_o2
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CO' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CO' and C.ATTD_SFT_CD in('B') then 1 else 0 end)) else null end as count_o3
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CO' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CO' and C.ATTD_SFT_CD in('C') then 1 else 0 end)) else null end as count_o4
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CO' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CO' and C.ATTD_SFT_CD in('D') then 1 else 0 end)) else null end as count_o1
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CO' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CO' and C.ATTD_SFT_CD in('E') then 1 else 0 end)) else null end as count_o5
		
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CP' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CP' and C.ATTD_SFT_CD in('A') then 1 else 0 end)) else null end as count_p2
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CP' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CP' and C.ATTD_SFT_CD in('B') then 1 else 0 end)) else null end as count_p3
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CP' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CP' and C.ATTD_SFT_CD in('C') then 1 else 0 end)) else null end as count_p4
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CP' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CP' and C.ATTD_SFT_CD in('D') then 1 else 0 end)) else null end as count_p1
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CP' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CP' and C.ATTD_SFT_CD in('E') then 1 else 0 end)) else null end as count_p5
		
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CQ' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CQ' and C.ATTD_SFT_CD in('A') then 1 else 0 end)) else null end as count_q2
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CQ' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CQ' and C.ATTD_SFT_CD in('B') then 1 else 0 end)) else null end as count_q3
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CQ' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CQ' and C.ATTD_SFT_CD in('C') then 1 else 0 end)) else null end as count_q4
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CQ' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CQ' and C.ATTD_SFT_CD in('D') then 1 else 0 end)) else null end as count_q1
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CQ' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CQ' and C.ATTD_SFT_CD in('E') then 1 else 0 end)) else null end as count_q5
		
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CR' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CR' and C.ATTD_SFT_CD in('A') then 1 else 0 end)) else null end as count_r2
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CR' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CR' and C.ATTD_SFT_CD in('B') then 1 else 0 end)) else null end as count_r3
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CR' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CR' and C.ATTD_SFT_CD in('C') then 1 else 0 end)) else null end as count_r4
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CR' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CR' and C.ATTD_SFT_CD in('D') then 1 else 0 end)) else null end as count_r1
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='CR' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='CR' and C.ATTD_SFT_CD in('E') then 1 else 0 end)) else null end as count_r5
		
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DA' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DA' and C.ATTD_SFT_CD in('A') then 1 else 0 end)) else null end as count_s2
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DA' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DA' and C.ATTD_SFT_CD in('B') then 1 else 0 end)) else null end as count_s3
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DA' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DA' and C.ATTD_SFT_CD in('C') then 1 else 0 end)) else null end as count_s4
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DA' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DA' and C.ATTD_SFT_CD in('D') then 1 else 0 end)) else null end as count_s1
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DA' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DA' and C.ATTD_SFT_CD in('E') then 1 else 0 end)) else null end as count_s5
		
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DB' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DB' and C.ATTD_SFT_CD in('A') then 1 else 0 end)) else null end as count_t2
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DB' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DB' and C.ATTD_SFT_CD in('B') then 1 else 0 end)) else null end as count_t3
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DB' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DB' and C.ATTD_SFT_CD in('C') then 1 else 0 end)) else null end as count_t4
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DB' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DB' and C.ATTD_SFT_CD in('D') then 1 else 0 end)) else null end as count_t1
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DB' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DB' and C.ATTD_SFT_CD in('E') then 1 else 0 end)) else null end as count_t5
		
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DC' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DC' and C.ATTD_SFT_CD in('A') then 1 else 0 end)) else null end as count_u2
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DC' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DC' and C.ATTD_SFT_CD in('B') then 1 else 0 end)) else null end as count_u3
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DC' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DC' and C.ATTD_SFT_CD in('C') then 1 else 0 end)) else null end as count_u4
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DC' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DC' and C.ATTD_SFT_CD in('D') then 1 else 0 end)) else null end as count_u1
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DC' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DC' and C.ATTD_SFT_CD in('E') then 1 else 0 end)) else null end as count_u5
		
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DD' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DD' and C.ATTD_SFT_CD in('A') then 1 else 0 end)) else null end as count_v2
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DD' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DD' and C.ATTD_SFT_CD in('B') then 1 else 0 end)) else null end as count_v3
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DD' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DD' and C.ATTD_SFT_CD in('C') then 1 else 0 end)) else null end as count_v4
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DD' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DD' and C.ATTD_SFT_CD in('D') then 1 else 0 end)) else null end as count_v1
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DD' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DD' and C.ATTD_SFT_CD in('E') then 1 else 0 end)) else null end as count_v5
		
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DE' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DE' and C.ATTD_SFT_CD in('A') then 1 else 0 end)) else null end as count_w2
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DE' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DE' and C.ATTD_SFT_CD in('B') then 1 else 0 end)) else null end as count_w3
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DE' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DE' and C.ATTD_SFT_CD in('C') then 1 else 0 end)) else null end as count_w4
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DE' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DE' and C.ATTD_SFT_CD in('D') then 1 else 0 end)) else null end as count_w1
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DE' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DE' and C.ATTD_SFT_CD in('E') then 1 else 0 end)) else null end as count_w5
		
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DF' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DF' and C.ATTD_SFT_CD in('A') then 1 else 0 end)) else null end as count_x2
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DF' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DF' and C.ATTD_SFT_CD in('B') then 1 else 0 end)) else null end as count_x3
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DF' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DF' and C.ATTD_SFT_CD in('C') then 1 else 0 end)) else null end as count_x4
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DF' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DF' and C.ATTD_SFT_CD in('D') then 1 else 0 end)) else null end as count_x1
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DF' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DF' and C.ATTD_SFT_CD in('E') then 1 else 0 end)) else null end as count_x5
		
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DG' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DG' and C.ATTD_SFT_CD in('A') then 1 else 0 end)) else null end as count_y2
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DG' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DG' and C.ATTD_SFT_CD in('B') then 1 else 0 end)) else null end as count_y3
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DG' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DG' and C.ATTD_SFT_CD in('C') then 1 else 0 end)) else null end as count_y4
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DG' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DG' and C.ATTD_SFT_CD in('D') then 1 else 0 end)) else null end as count_y1
		,CASE WHEN SUM(CASE WHEN I.DSFT_TYP_CD='DG' THEN 1 ELSE 0 END) > 0 THEN
		(sum(case when I.DSFT_TYP_CD='DG' and C.ATTD_SFT_CD in('E') then 1 else 0 end)) else null end as count_y5
		
		,
		(sum(case when C.ATTD_SFT_CD in('A') then 1 else 0 end)) as count_z2
		,
		(sum(case when C.ATTD_SFT_CD in('B') then 1 else 0 end)) as count_z3
		,
		(sum(case when C.ATTD_SFT_CD in('C') then 1 else 0 end)) as count_z4
		,
		(sum(case when C.ATTD_SFT_CD in('D') then 1 else 0 end)) as count_z1
		,
		(sum(case when C.ATTD_SFT_CD in('E') then 1 else 0 end)) as count_z5
	        FROM TBL_DSFT_ACPN_PROC A					  		   
			        LEFT JOIN TBL_HC_HIST C
			               ON A.DSFT_ACPN_SEQ_NO = C.DSFT_ACPN_SEQ_NO		  
			        LEFT JOIN TBL_CRPN_CUST_BASE D
			       		   ON A.ORGN_PTR_ST_CD = D.CUST_ID        	    	  
			        LEFT JOIN TBL_USR B
			       		   ON A.DSPSR_ID = B.USR_ID 
			        LEFT JOIN TBL_HR_EMP_CD F
			       		   ON A.DSPSR_ID = F.EMP_NO
			        LEFT JOIN TBL_HR_DEPT_CD G 
			       		   ON F.BLNG_DEPT_CD = G.DEPT_CD
			        LEFT JOIN TBL_SAP_CD H	
			       		   ON (A.ORGN_ENTR_DV_CD = H.CD_ID AND H.CD_CLAS_CD = '1')	
			        LEFT JOIN TBL_DSFT_TAXN_TYP_CD I
			       		   ON A.DSFT_TAXN_TYP_CD = I.DSFT_TAXN_TYP_CD
			       		   
			WHERE (A.DEL_YN = 'N' OR A.DEL_YN IS NULL)	
			and (A.DSPSR_YN_OB_CNTR='N' or A.DSPSR_YN_OB_CNTR is null )	
              and (A.HC_YN ='Y')
                    
               	<dynamic>
	       			<!-- 년도별 -->   				    	
		    	    <isEqual property="cmb_gubun" compareValue="1">              
		                and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'                                                                  
		            </isEqual>
		            <!--  -->
		            <isEqual property="cmb_gubun" compareValue="2">
		            	<isEmpty property="cmb_half">
		            		and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'
		            	</isEmpty>              
		                <isEqual property="cmb_half" compareValue="1">
		                	and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0632000000'                                                                  
						</isEqual>	 
						<isEqual property="cmb_half" compareValue="2">
							and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '1232000000'
						</isEqual>	 
		            </isEqual>	 
		            <isEqual property="cmb_gubun" compareValue="3"> 
		            	<isEmpty>
							and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'	            	
		            	</isEmpty>    
		           		<isEqual property="cmb_qua" compareValue="1">
		           			and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0332000000'   
		           	  	</isEqual>
		           	  	<isEqual property="cmb_qua" compareValue="2">
		           	   		and A.ACPN_DTM between #time_key# || '0400000000' and #time_key# || '0632000000'   
		           	  	</isEqual>	 
		           	  	<isEqual property="cmb_qua" compareValue="3">
		           	   		and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '0932000000'   
		           	  	</isEqual>	 
	           	  		<isEqual property="cmb_qua" compareValue="4">
		           	   		and A.ACPN_DTM between #time_key# || '1000000000' and #time_key# || '1232000000'   
		           	  	</isEqual>	 	 
	            	</isEqual>	 				            
		    	 	<isEqual property="cmb_gubun" compareValue="4">              
		            	and A.ACPN_DTM between #time_key# || '00000000' and #time_key# || '32000000'                                                                  
		         	</isEqual>	
		    	 	<isEqual property="cmb_gubun" compareValue="5">              
		                and A.ACPN_DTM between #time_key# || '000000' and #time_key2# || '240000'                                                                  
		         	</isEqual>
				
					<!-- 불만유형이 전체일 때는 두가지 경우 존재(전체, 품질&혼유)		-->				
					<isEmpty property="dsft_typ_cd">
						<isEqual property="dsft_typ_tot_gbn" compareValue="2">
							AND A.DSFT_TYP_CD IN ('CA','CK')
						</isEqual>
					</isEmpty>
				  	<isNotEmpty prepend="AND" property="dsft_typ_cd">				<!-- 불만유형		-->
				    	A.DSFT_TYP_CD = #dsft_typ_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dsft_taxn_typ_cd">			<!-- 불만세부유형		-->
				    	A.DSFT_TAXN_TYP_CD = #dsft_taxn_typ_cd#
				  	</isNotEmpty>
			  		<isNotEmpty prepend="AND" property="orgn_ptr_st_cd">			<!-- 불만발생업체코드(가맹점SAP코드) -->
					    A.ORGN_PTR_ST_CD = #orgn_ptr_st_cd#
				  	</isNotEmpty>
				    <isNotEmpty prepend="AND" property="conn_chnl_kind_cd">			<!-- 접촉채널	-->
					    A.CONN_CHNL_KIND_CD = #conn_chnl_kind_cd#
				    </isNotEmpty>			  	
				  	<isNotEmpty prepend="AND" property="hgrk_dept_cd">				<!-- 부문/본부 -->
					    G.HGRK_DEPT_CD = #hgrk_dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dept_cd">					<!-- 처리팀 -->
					    G.DEPT_CD = #dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dspsr_id_nm">				<!-- 처리자명 		-->
					    (B.USR_NM LIKE '%'|| #dspsr_id_nm# ||'%' OR F.EMP_NM LIKE '%'|| #dspsr_id_nm# ||'%')
				  	</isNotEmpty>
			 		<isEqual property="hc_yn" compareValue="Y"> 					<!-- 해피콜여부  -->
			 			AND A.HC_YN = 'Y'
			 		</isEqual>
				 	<isEqual property="hc_yn" compareValue="N"> 					<!-- 해피콜여부  -->
				 		AND (A.HC_YN = 'N' OR A.HC_YN IS NULL)
				 	</isEqual>
				  	<isNotEmpty prepend="AND" property="attd_sft_cd">				<!-- 태도만족도 		-->
				  		(A.HC_YN = 'Y' AND C.ATTD_SFT_CD = #attd_sft_cd#)
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="rslt_sft_cd">				<!-- 결과만족도 		-->
				  		(A.HC_YN = 'Y' AND C.RSLT_SFT_CD = #rslt_sft_cd#)
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="hc_uabl_rsn_cd">			<!-- 해피콜불가사유		-->
				  		A.HC_UABL_RSN_CD = #hc_uabl_rsn_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="prdct_cd">					<!-- 불만제품 		-->
					    A.PRDCT_CD = #prdct_cd#
				  	</isNotEmpty>			  				 	
				  	<isNotEmpty prepend="AND" property="prblm_penom_cd">			<!-- 현상 		-->
					    A.PRBLM_PENOM_CD = #prblm_penom_cd#
				  	</isNotEmpty>
			 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="1">  	<!-- 시료품질 점검결과		-->
			 			AND	A.VHCL_QLIT_DSFT_CAUS_CD_CUST IS NOT NULL
			 	  	</isEqual>
			 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="2">   	<!-- 시료품질 점검결과		-->
			 	  		AND	A.VHCL_QLIT_DSFT_CAUS_CD_PTR_ST IS NOT NULL
			 	  	</isEqual>
				  	<isNotEmpty prepend="AND" property="vhcl_biztr_qlit_dsft_typ_cd">			<!-- 품질불만유형 		-->
					    A.VHCL_BIZTR_QLIT_DSFT_TYP_CD = #vhcl_biztr_qlit_dsft_typ_cd#
				  	</isNotEmpty>
				 	<isEqual property="vhcl_biztr_yn" compareValue="Y"> 			<!-- Kixx 품질서비스차량 출동 -->
				 		AND A.VHCL_BIZTR_YN = 'Y'
				 	</isEqual>
				 	<isEqual property="vhcl_biztr_yn" compareValue="N"> 			<!-- Kixx 품질서비스차량 출동 -->
				 		AND (A.VHCL_BIZTR_YN = 'N' OR A.VHCL_BIZTR_YN IS NULL)
				 	</isEqual>		 	  	
				 	<isEqual property="rwrd_yn" compareValue="Y"> 					<!-- 보상여부 -->
				 		AND A.RWRD_YN = 'Y'
				 	</isEqual>
				 	<isEqual property="rwrd_yn" compareValue="N"> 					<!-- 보상여부 -->
				 		AND (A.RWRD_YN = 'N' OR A.RWRD_YN IS NULL)
				 	</isEqual>
				 	
				 	<isEqual property="cps_amt_gbn" compareValue="1"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 주유소 보상금 1만원 미만-->
				 			AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 주유소 보상금 1만원 ~ 10만원-->
				 			AND (A.PTR_ST_CPS_AMT <![CDATA[>=]]> 10000 AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 주유소 보상금 10만원 초과-->
				 			AND A.PTR_ST_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	<isEqual property="cps_amt_gbn" compareValue="2"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 회사 보상금 1만원 미만-->
				 			AND A.CO_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 회사 보상금 1만원 ~ 10만원-->
				 			AND (A.CO_CPS_AMT <![CDATA[>=]]> 10000 AND A.CO_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 회사 보상금 10만원 초과-->
				 			AND A.CO_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	<isEqual property="cps_amt_gbn" compareValue="3"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 총 보상금 1만원 미만-->
				 			AND A.TOT_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 총 보상금 1만원 ~ 10만원-->
				 			AND (A.TOT_CPS_AMT <![CDATA[>=]]> 10000 AND A.TOT_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 총 보상금 10만원 초과-->
				 			AND A.TOT_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	
					<!--처리자구분에 체크항목이 하나도 없는 경우, 전체데이터가 조회된다.-->
				 	<isEqual property="cmp_handler" compareValue="1">   
				 		AND	A.DSPSR_YN_CNSLR = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="2">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="3">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="4">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="5">   
				 		AND	A.DSPSR_YN_DSFT_CHRG = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="6">   
				 		AND	A.DSPSR_YN_PART_HD = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="7">   
				 		AND	(A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
	       		</dynamic>       
                    
               group by HGRK_DEPT_CDNM
				,DSPSR_CHRG_DEPT
				,DEPT_CD 
				order by 
				HGRK_DEPT_CDNM
				,DSPSR_CHRG_DEPT
				,DEPT_CD )
 	
 </select>
 <select id="Get_CMP_SELECT5" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
 
 select 	HGRK_DEPT_CDNM
				,DSPSR_CHRG_DEPT
				,DEPT_CD, 
				round((count_a1+count_a2) /
				 (case when 
				 nvl(count_a1,0)+nvl(count_a2,0)+nvl(count_a3,0)+nvl(count_a4,0)+nvl(count_a5,0)='0' then 1 else 
				 nvl(count_a1,0)+nvl(count_a2,0)+nvl(count_a3,0)+nvl(count_a4,0)+nvl(count_a5,0)
				 end)*100,1) as count_tot1
				,round((count_b1+count_b2) /
				 (case when 
				 nvl(count_b1,0)+nvl(count_b2,0)+nvl(count_b3,0)+nvl(count_b4,0)+nvl(count_b5,0)='0' then 1 else 
				 nvl(count_b1,0)+nvl(count_b2,0)+nvl(count_b3,0)+nvl(count_b4,0)+nvl(count_b5,0)
				 end)*100,1) as count_tot2
				,round((count_a1+count_a2+count_b1+count_b2) /
				 (case when 
				 nvl(count_a1,0)+nvl(count_a2,0)+nvl(count_a3,0)+nvl(count_a4,0)+nvl(count_a5,0)+
				 nvl(count_b1,0)+nvl(count_b2,0)+nvl(count_b3,0)+nvl(count_b4,0)+nvl(count_b5,0) ='0' then 1 else 
                 nvl(count_a1,0)+nvl(count_a2,0)+nvl(count_a3,0)+nvl(count_a4,0)+nvl(count_a5,0)+
				 nvl(count_b1,0)+nvl(count_b2,0)+nvl(count_b3,0)+nvl(count_b4,0)+nvl(count_b5,0)
				 end)*100,1) as count_tota
				 
				 
				 ,count_a1+count_a2+count_b1+count_b2 as countq1
				 ,nvl(count_a1,0)+nvl(count_a2,0)+nvl(count_a3,0)+nvl(count_a4,0)+nvl(count_a5,0)+
				 nvl(count_b1,0)+nvl(count_b2,0)+nvl(count_b3,0)+nvl(count_b4,0)+nvl(count_b5,0) as countq2
				
				 from (	 SELECT 	HGRK_DEPT_CDNM
				,DSPSR_CHRG_DEPT
				,DEPT_CD, 
	
	
	(sum(case when C.ATTD_SFT_CD ='D' then 1 else 0 end)) as count_a1
	,(sum(case when C.ATTD_SFT_CD ='A' then 1 else 0 end)) as count_a2
	,(sum(case when C.ATTD_SFT_CD ='B' then 1 else 0 end)) as count_a3
	,(sum(case when C.ATTD_SFT_CD ='C' then 1 else 0 end)) as count_a4
	,(sum(case when C.ATTD_SFT_CD ='E' then 1 else 0 end)) as count_a5
	,(sum(case when C.ATTD_SFT_CD is not null then 1 else 0 end)) as count_a6,
 	(sum(case when C.RSLT_SFT_CD ='D' then 1 else 0 end)) as count_b1
	,(sum(case when C.RSLT_SFT_CD ='A' then 1 else 0 end)) as count_b2
	,(sum(case when C.RSLT_SFT_CD ='B' then 1 else 0 end)) as count_b3
	,(sum(case when C.RSLT_SFT_CD ='C' then 1 else 0 end)) as count_b4
	,(sum(case when C.RSLT_SFT_CD ='E' then 1 else 0 end)) as count_b5
	,(sum(case when C.RSLT_SFT_CD is not null then 1 else 0 end)) as count_b6
	
	        FROM TBL_DSFT_ACPN_PROC A					  		   
			        LEFT JOIN TBL_HC_HIST C
			               ON A.DSFT_ACPN_SEQ_NO = C.DSFT_ACPN_SEQ_NO		  
			        LEFT JOIN TBL_CRPN_CUST_BASE D
			       		   ON A.ORGN_PTR_ST_CD = D.CUST_ID        	    	  
			        LEFT JOIN TBL_USR B
			       		   ON A.DSPSR_ID = B.USR_ID 
			        LEFT JOIN TBL_HR_EMP_CD F
			       		   ON A.DSPSR_ID = F.EMP_NO
			        LEFT JOIN TBL_HR_DEPT_CD G 
			       		   ON F.BLNG_DEPT_CD = G.DEPT_CD
			        LEFT JOIN TBL_SAP_CD H	
			       		   ON (A.ORGN_ENTR_DV_CD = H.CD_ID AND H.CD_CLAS_CD = '1')	
			        LEFT JOIN TBL_DSFT_TAXN_TYP_CD I
			       		   ON A.DSFT_TAXN_TYP_CD = I.DSFT_TAXN_TYP_CD
			       		   
			WHERE (A.DEL_YN = 'N' OR A.DEL_YN IS NULL)	
			and (A.DSPSR_YN_OB_CNTR='N' or A.DSPSR_YN_OB_CNTR is null )	
              and (A.HC_YN ='Y')
 	  	<dynamic>
	       			<!-- 년도별 -->   				    	
		    	    <isEqual property="cmb_gubun" compareValue="1">              
		                and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'                                                                  
		            </isEqual>
		            <!--  -->
		            <isEqual property="cmb_gubun" compareValue="2">
		            	<isEmpty property="cmb_half">
		            		and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'
		            	</isEmpty>              
		                <isEqual property="cmb_half" compareValue="1">
		                	and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0632000000'                                                                  
						</isEqual>	 
						<isEqual property="cmb_half" compareValue="2">
							and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '1232000000'
						</isEqual>	 
		            </isEqual>	 
		            <isEqual property="cmb_gubun" compareValue="3"> 
		            	<isEmpty>
							and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'	            	
		            	</isEmpty>    
		           		<isEqual property="cmb_qua" compareValue="1">
		           			and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0332000000'   
		           	  	</isEqual>
		           	  	<isEqual property="cmb_qua" compareValue="2">
		           	   		and A.ACPN_DTM between #time_key# || '0400000000' and #time_key# || '0632000000'   
		           	  	</isEqual>	 
		           	  	<isEqual property="cmb_qua" compareValue="3">
		           	   		and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '0932000000'   
		           	  	</isEqual>	 
	           	  		<isEqual property="cmb_qua" compareValue="4">
		           	   		and A.ACPN_DTM between #time_key# || '1000000000' and #time_key# || '1232000000'   
		           	  	</isEqual>	 	 
	            	</isEqual>	 				            
		    	 	<isEqual property="cmb_gubun" compareValue="4">              
		            	and A.ACPN_DTM between #time_key# || '00000000' and #time_key# || '32000000'                                                                  
		         	</isEqual>	
		    	 	<isEqual property="cmb_gubun" compareValue="5">              
		                and A.ACPN_DTM between #time_key# || '000000' and #time_key2# || '240000'                                                                  
		         	</isEqual>
				
					<!-- 불만유형이 전체일 때는 두가지 경우 존재(전체, 품질&혼유)		-->				
					<isEmpty property="dsft_typ_cd">
						<isEqual property="dsft_typ_tot_gbn" compareValue="2">
							AND A.DSFT_TYP_CD IN ('CA','CK')
						</isEqual>
					</isEmpty>
				  	<isNotEmpty prepend="AND" property="dsft_typ_cd">				<!-- 불만유형		-->
				    	A.DSFT_TYP_CD = #dsft_typ_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dsft_taxn_typ_cd">			<!-- 불만세부유형		-->
				    	A.DSFT_TAXN_TYP_CD = #dsft_taxn_typ_cd#
				  	</isNotEmpty>
			  		<isNotEmpty prepend="AND" property="orgn_ptr_st_cd">			<!-- 불만발생업체코드(가맹점SAP코드) -->
					    A.ORGN_PTR_ST_CD = #orgn_ptr_st_cd#
				  	</isNotEmpty>
				    <isNotEmpty prepend="AND" property="conn_chnl_kind_cd">			<!-- 접촉채널	-->
					    A.CONN_CHNL_KIND_CD = #conn_chnl_kind_cd#
				    </isNotEmpty>			  	
				  	<isNotEmpty prepend="AND" property="hgrk_dept_cd">				<!-- 부문/본부 -->
					    G.HGRK_DEPT_CD = #hgrk_dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dept_cd">					<!-- 처리팀 -->
					    G.DEPT_CD = #dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dspsr_id_nm">				<!-- 처리자명 		-->
					    (B.USR_NM LIKE '%'|| #dspsr_id_nm# ||'%' OR F.EMP_NM LIKE '%'|| #dspsr_id_nm# ||'%')
				  	</isNotEmpty>
			 		<isEqual property="hc_yn" compareValue="Y"> 					<!-- 해피콜여부  -->
			 			AND A.HC_YN = 'Y'
			 		</isEqual>
				 	<isEqual property="hc_yn" compareValue="N"> 					<!-- 해피콜여부  -->
				 		AND (A.HC_YN = 'N' OR A.HC_YN IS NULL)
				 	</isEqual>
				  	<isNotEmpty prepend="AND" property="attd_sft_cd">				<!-- 태도만족도 		-->
				  		(A.HC_YN = 'Y' AND C.ATTD_SFT_CD = #attd_sft_cd#)
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="rslt_sft_cd">				<!-- 결과만족도 		-->
				  		(A.HC_YN = 'Y' AND C.RSLT_SFT_CD = #rslt_sft_cd#)
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="hc_uabl_rsn_cd">			<!-- 해피콜불가사유		-->
				  		A.HC_UABL_RSN_CD = #hc_uabl_rsn_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="prdct_cd">					<!-- 불만제품 		-->
					    A.PRDCT_CD = #prdct_cd#
				  	</isNotEmpty>			  				 	
				  	<isNotEmpty prepend="AND" property="prblm_penom_cd">			<!-- 현상 		-->
					    A.PRBLM_PENOM_CD = #prblm_penom_cd#
				  	</isNotEmpty>
			 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="1">  	<!-- 시료품질 점검결과		-->
			 			AND	A.VHCL_QLIT_DSFT_CAUS_CD_CUST IS NOT NULL
			 	  	</isEqual>
			 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="2">   	<!-- 시료품질 점검결과		-->
			 	  		AND	A.VHCL_QLIT_DSFT_CAUS_CD_PTR_ST IS NOT NULL
			 	  	</isEqual>
				  	<isNotEmpty prepend="AND" property="vhcl_biztr_qlit_dsft_typ_cd">			<!-- 품질불만유형 		-->
					    A.VHCL_BIZTR_QLIT_DSFT_TYP_CD = #vhcl_biztr_qlit_dsft_typ_cd#
				  	</isNotEmpty>
				 	<isEqual property="vhcl_biztr_yn" compareValue="Y"> 			<!-- Kixx 품질서비스차량 출동 -->
				 		AND A.VHCL_BIZTR_YN = 'Y'
				 	</isEqual>
				 	<isEqual property="vhcl_biztr_yn" compareValue="N"> 			<!-- Kixx 품질서비스차량 출동 -->
				 		AND (A.VHCL_BIZTR_YN = 'N' OR A.VHCL_BIZTR_YN IS NULL)
				 	</isEqual>		 	  	
				 	<isEqual property="rwrd_yn" compareValue="Y"> 					<!-- 보상여부 -->
				 		AND A.RWRD_YN = 'Y'
				 	</isEqual>
				 	<isEqual property="rwrd_yn" compareValue="N"> 					<!-- 보상여부 -->
				 		AND (A.RWRD_YN = 'N' OR A.RWRD_YN IS NULL)
				 	</isEqual>
				 	
				 	<isEqual property="cps_amt_gbn" compareValue="1"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 주유소 보상금 1만원 미만-->
				 			AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 주유소 보상금 1만원 ~ 10만원-->
				 			AND (A.PTR_ST_CPS_AMT <![CDATA[>=]]> 10000 AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 주유소 보상금 10만원 초과-->
				 			AND A.PTR_ST_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	<isEqual property="cps_amt_gbn" compareValue="2"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 회사 보상금 1만원 미만-->
				 			AND A.CO_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 회사 보상금 1만원 ~ 10만원-->
				 			AND (A.CO_CPS_AMT <![CDATA[>=]]> 10000 AND A.CO_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 회사 보상금 10만원 초과-->
				 			AND A.CO_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	<isEqual property="cps_amt_gbn" compareValue="3"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 총 보상금 1만원 미만-->
				 			AND A.TOT_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 총 보상금 1만원 ~ 10만원-->
				 			AND (A.TOT_CPS_AMT <![CDATA[>=]]> 10000 AND A.TOT_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 총 보상금 10만원 초과-->
				 			AND A.TOT_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	
					<!--처리자구분에 체크항목이 하나도 없는 경우, 전체데이터가 조회된다.-->
				 	<isEqual property="cmp_handler" compareValue="1">   
				 		AND	A.DSPSR_YN_CNSLR = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="2">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="3">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="4">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="5">   
				 		AND	A.DSPSR_YN_DSFT_CHRG = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="6">   
				 		AND	A.DSPSR_YN_PART_HD = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="7">   
				 		AND	(A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
	       		</dynamic>  
 	 
 	 group by HGRK_DEPT_CDNM
				,DSPSR_CHRG_DEPT
				,DEPT_CD order by  HGRK_DEPT_CDNM
				,DSPSR_CHRG_DEPT
				,DEPT_CD)
				
		union all
				
				        
			select 	'전체' as HGRK_DEPT_CDNM
				,'평균' as DSPSR_CHRG_DEPT
				,'' as DEPT_CD, 
				round((count_a1+count_a2) /
				 (case when 
				 nvl(count_a1,0)+nvl(count_a2,0)+nvl(count_a3,0)+nvl(count_a4,0)+nvl(count_a5,0)='0' then 1 else 
				 nvl(count_a1,0)+nvl(count_a2,0)+nvl(count_a3,0)+nvl(count_a4,0)+nvl(count_a5,0)
				 end)*100,1) as count_tot1
				,round((count_b1+count_b2) /
				 (case when 
				 nvl(count_b1,0)+nvl(count_b2,0)+nvl(count_b3,0)+nvl(count_b4,0)+nvl(count_b5,0)='0' then 1 else 
				 nvl(count_b1,0)+nvl(count_b2,0)+nvl(count_b3,0)+nvl(count_b4,0)+nvl(count_b5,0)
				 end)*100,1) as count_tot2
				,round((count_a1+count_a2+count_b1+count_b2) /
				 (case when 
				 nvl(count_a1,0)+nvl(count_a2,0)+nvl(count_a3,0)+nvl(count_a4,0)+nvl(count_a5,0)+
				 nvl(count_b1,0)+nvl(count_b2,0)+nvl(count_b3,0)+nvl(count_b4,0)+nvl(count_b5,0) ='0' then 1 else 
                 nvl(count_a1,0)+nvl(count_a2,0)+nvl(count_a3,0)+nvl(count_a4,0)+nvl(count_a5,0)+
				 nvl(count_b1,0)+nvl(count_b2,0)+nvl(count_b3,0)+nvl(count_b4,0)+nvl(count_b5,0)
				 end)*100,1) as count_tota
				 
				 
				 ,count_a1+count_a2+count_b1+count_b2 as countq1
				 ,nvl(count_a1,0)+nvl(count_a2,0)+nvl(count_a3,0)+nvl(count_a4,0)+nvl(count_a5,0)+
				 nvl(count_b1,0)+nvl(count_b2,0)+nvl(count_b3,0)+nvl(count_b4,0)+nvl(count_b5,0) as countq2
				
				
				 from (	 SELECT 	HGRK_DEPT_CDNM
				,DSPSR_CHRG_DEPT
				,DEPT_CD, 
	
	
	(sum(case when C.ATTD_SFT_CD ='D' then 1 else 0 end)) as count_a1
	,(sum(case when C.ATTD_SFT_CD ='A' then 1 else 0 end)) as count_a2
	,(sum(case when C.ATTD_SFT_CD ='B' then 1 else 0 end)) as count_a3
	,(sum(case when C.ATTD_SFT_CD ='C' then 1 else 0 end)) as count_a4
	,(sum(case when C.ATTD_SFT_CD ='E' then 1 else 0 end)) as count_a5
	,(sum(case when C.ATTD_SFT_CD is not null then 1 else 0 end)) as count_a6,
 	(sum(case when C.RSLT_SFT_CD ='D' then 1 else 0 end)) as count_b1
	,(sum(case when C.RSLT_SFT_CD ='A' then 1 else 0 end)) as count_b2
	,(sum(case when C.RSLT_SFT_CD ='B' then 1 else 0 end)) as count_b3
	,(sum(case when C.RSLT_SFT_CD ='C' then 1 else 0 end)) as count_b4
	,(sum(case when C.RSLT_SFT_CD ='E' then 1 else 0 end)) as count_b5
	,(sum(case when C.RSLT_SFT_CD is not null then 1 else 0 end)) as count_b6
	
	        FROM TBL_DSFT_ACPN_PROC A					  		   
			        LEFT JOIN TBL_HC_HIST C
			               ON A.DSFT_ACPN_SEQ_NO = C.DSFT_ACPN_SEQ_NO		  
			        LEFT JOIN TBL_CRPN_CUST_BASE D
			       		   ON A.ORGN_PTR_ST_CD = D.CUST_ID        	    	  
			        LEFT JOIN TBL_USR B
			       		   ON A.DSPSR_ID = B.USR_ID 
			        LEFT JOIN TBL_HR_EMP_CD F
			       		   ON A.DSPSR_ID = F.EMP_NO
			        LEFT JOIN TBL_HR_DEPT_CD G 
			       		   ON F.BLNG_DEPT_CD = G.DEPT_CD
			        LEFT JOIN TBL_SAP_CD H	
			       		   ON (A.ORGN_ENTR_DV_CD = H.CD_ID AND H.CD_CLAS_CD = '1')	
			        LEFT JOIN TBL_DSFT_TAXN_TYP_CD I
			       		   ON A.DSFT_TAXN_TYP_CD = I.DSFT_TAXN_TYP_CD
			       		   
			WHERE (A.DEL_YN = 'N' OR A.DEL_YN IS NULL)	
			and (A.DSPSR_YN_OB_CNTR='N' or A.DSPSR_YN_OB_CNTR is null )	
              and (A.HC_YN ='Y')
              
                	<dynamic>
	       			<!-- 년도별 -->   				    	
		    	    <isEqual property="cmb_gubun" compareValue="1">              
		                and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'                                                                  
		            </isEqual>
		            <!--  -->
		            <isEqual property="cmb_gubun" compareValue="2">
		            	<isEmpty property="cmb_half">
		            		and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'
		            	</isEmpty>              
		                <isEqual property="cmb_half" compareValue="1">
		                	and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0632000000'                                                                  
						</isEqual>	 
						<isEqual property="cmb_half" compareValue="2">
							and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '1232000000'
						</isEqual>	 
		            </isEqual>	 
		            <isEqual property="cmb_gubun" compareValue="3"> 
		            	<isEmpty>
							and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'	            	
		            	</isEmpty>    
		           		<isEqual property="cmb_qua" compareValue="1">
		           			and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0332000000'   
		           	  	</isEqual>
		           	  	<isEqual property="cmb_qua" compareValue="2">
		           	   		and A.ACPN_DTM between #time_key# || '0400000000' and #time_key# || '0632000000'   
		           	  	</isEqual>	 
		           	  	<isEqual property="cmb_qua" compareValue="3">
		           	   		and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '0932000000'   
		           	  	</isEqual>	 
	           	  		<isEqual property="cmb_qua" compareValue="4">
		           	   		and A.ACPN_DTM between #time_key# || '1000000000' and #time_key# || '1232000000'   
		           	  	</isEqual>	 	 
	            	</isEqual>	 				            
		    	 	<isEqual property="cmb_gubun" compareValue="4">              
		            	and A.ACPN_DTM between #time_key# || '00000000' and #time_key# || '32000000'                                                                  
		         	</isEqual>	
		    	 	<isEqual property="cmb_gubun" compareValue="5">              
		                and A.ACPN_DTM between #time_key# || '000000' and #time_key2# || '240000'                                                                  
		         	</isEqual>
				
					<!-- 불만유형이 전체일 때는 두가지 경우 존재(전체, 품질&혼유)		-->				
					<isEmpty property="dsft_typ_cd">
						<isEqual property="dsft_typ_tot_gbn" compareValue="2">
							AND A.DSFT_TYP_CD IN ('CA','CK')
						</isEqual>
					</isEmpty>
				  	<isNotEmpty prepend="AND" property="dsft_typ_cd">				<!-- 불만유형		-->
				    	A.DSFT_TYP_CD = #dsft_typ_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dsft_taxn_typ_cd">			<!-- 불만세부유형		-->
				    	A.DSFT_TAXN_TYP_CD = #dsft_taxn_typ_cd#
				  	</isNotEmpty>
			  		<isNotEmpty prepend="AND" property="orgn_ptr_st_cd">			<!-- 불만발생업체코드(가맹점SAP코드) -->
					    A.ORGN_PTR_ST_CD = #orgn_ptr_st_cd#
				  	</isNotEmpty>
				    <isNotEmpty prepend="AND" property="conn_chnl_kind_cd">			<!-- 접촉채널	-->
					    A.CONN_CHNL_KIND_CD = #conn_chnl_kind_cd#
				    </isNotEmpty>			  	
				  	<isNotEmpty prepend="AND" property="hgrk_dept_cd">				<!-- 부문/본부 -->
					    G.HGRK_DEPT_CD = #hgrk_dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dept_cd">					<!-- 처리팀 -->
					    G.DEPT_CD = #dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dspsr_id_nm">				<!-- 처리자명 		-->
					    (B.USR_NM LIKE '%'|| #dspsr_id_nm# ||'%' OR F.EMP_NM LIKE '%'|| #dspsr_id_nm# ||'%')
				  	</isNotEmpty>
			 		<isEqual property="hc_yn" compareValue="Y"> 					<!-- 해피콜여부  -->
			 			AND A.HC_YN = 'Y'
			 		</isEqual>
				 	<isEqual property="hc_yn" compareValue="N"> 					<!-- 해피콜여부  -->
				 		AND (A.HC_YN = 'N' OR A.HC_YN IS NULL)
				 	</isEqual>
				  	<isNotEmpty prepend="AND" property="attd_sft_cd">				<!-- 태도만족도 		-->
				  		(A.HC_YN = 'Y' AND C.ATTD_SFT_CD = #attd_sft_cd#)
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="rslt_sft_cd">				<!-- 결과만족도 		-->
				  		(A.HC_YN = 'Y' AND C.RSLT_SFT_CD = #rslt_sft_cd#)
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="hc_uabl_rsn_cd">			<!-- 해피콜불가사유		-->
				  		A.HC_UABL_RSN_CD = #hc_uabl_rsn_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="prdct_cd">					<!-- 불만제품 		-->
					    A.PRDCT_CD = #prdct_cd#
				  	</isNotEmpty>			  				 	
				  	<isNotEmpty prepend="AND" property="prblm_penom_cd">			<!-- 현상 		-->
					    A.PRBLM_PENOM_CD = #prblm_penom_cd#
				  	</isNotEmpty>
			 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="1">  	<!-- 시료품질 점검결과		-->
			 			AND	A.VHCL_QLIT_DSFT_CAUS_CD_CUST IS NOT NULL
			 	  	</isEqual>
			 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="2">   	<!-- 시료품질 점검결과		-->
			 	  		AND	A.VHCL_QLIT_DSFT_CAUS_CD_PTR_ST IS NOT NULL
			 	  	</isEqual>
				  	<isNotEmpty prepend="AND" property="vhcl_biztr_qlit_dsft_typ_cd">			<!-- 품질불만유형 		-->
					    A.VHCL_BIZTR_QLIT_DSFT_TYP_CD = #vhcl_biztr_qlit_dsft_typ_cd#
				  	</isNotEmpty>
				 	<isEqual property="vhcl_biztr_yn" compareValue="Y"> 			<!-- Kixx 품질서비스차량 출동 -->
				 		AND A.VHCL_BIZTR_YN = 'Y'
				 	</isEqual>
				 	<isEqual property="vhcl_biztr_yn" compareValue="N"> 			<!-- Kixx 품질서비스차량 출동 -->
				 		AND (A.VHCL_BIZTR_YN = 'N' OR A.VHCL_BIZTR_YN IS NULL)
				 	</isEqual>		 	  	
				 	<isEqual property="rwrd_yn" compareValue="Y"> 					<!-- 보상여부 -->
				 		AND A.RWRD_YN = 'Y'
				 	</isEqual>
				 	<isEqual property="rwrd_yn" compareValue="N"> 					<!-- 보상여부 -->
				 		AND (A.RWRD_YN = 'N' OR A.RWRD_YN IS NULL)
				 	</isEqual>
				 	
				 	<isEqual property="cps_amt_gbn" compareValue="1"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 주유소 보상금 1만원 미만-->
				 			AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 주유소 보상금 1만원 ~ 10만원-->
				 			AND (A.PTR_ST_CPS_AMT <![CDATA[>=]]> 10000 AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 주유소 보상금 10만원 초과-->
				 			AND A.PTR_ST_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	<isEqual property="cps_amt_gbn" compareValue="2"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 회사 보상금 1만원 미만-->
				 			AND A.CO_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 회사 보상금 1만원 ~ 10만원-->
				 			AND (A.CO_CPS_AMT <![CDATA[>=]]> 10000 AND A.CO_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 회사 보상금 10만원 초과-->
				 			AND A.CO_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	<isEqual property="cps_amt_gbn" compareValue="3"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 총 보상금 1만원 미만-->
				 			AND A.TOT_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 총 보상금 1만원 ~ 10만원-->
				 			AND (A.TOT_CPS_AMT <![CDATA[>=]]> 10000 AND A.TOT_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 총 보상금 10만원 초과-->
				 			AND A.TOT_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	
					<!--처리자구분에 체크항목이 하나도 없는 경우, 전체데이터가 조회된다.-->
				 	<isEqual property="cmp_handler" compareValue="1">   
				 		AND	A.DSPSR_YN_CNSLR = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="2">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="3">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="4">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="5">   
				 		AND	A.DSPSR_YN_DSFT_CHRG = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="6">   
				 		AND	A.DSPSR_YN_PART_HD = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="7">   
				 		AND	(A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
	       		</dynamic>  
              )
				 
 </select>
 <select id="Get_CMP_SELECT6" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
 	select 	HGRK_DEPT_CDNM
				,DSPSR_CHRG_DEPT
				,DEPT_CD, count_a1, count_a2, count_a3, count_a4, count_a5
				,count_b1, count_b2, count_b3, count_b4, count_b5, (count_a1+count_a2+count_a3+count_a4+count_a5+count_b1+count_b2+count_b3+count_b4+count_b5)/2 as count_tot
				
				 from (	 SELECT 	HGRK_DEPT_CDNM
				,DSPSR_CHRG_DEPT
				,DEPT_CD, 
	
	
	(sum(case when C.ATTD_SFT_CD ='D' then 1 else 0 end)) as count_a1
	,(sum(case when C.ATTD_SFT_CD ='A' then 1 else 0 end)) as count_a2
	,(sum(case when C.ATTD_SFT_CD ='B' then 1 else 0 end)) as count_a3
	,(sum(case when C.ATTD_SFT_CD ='C' then 1 else 0 end)) as count_a4
	,(sum(case when C.ATTD_SFT_CD ='E' then 1 else 0 end)) as count_a5
	,(sum(case when C.ATTD_SFT_CD is not null then 1 else 0 end)) as count_a6,
		(sum(case when C.RSLT_SFT_CD ='D' then 1 else 0 end)) as count_b1
	,(sum(case when C.RSLT_SFT_CD ='A' then 1 else 0 end)) as count_b2
	,(sum(case when C.RSLT_SFT_CD ='B' then 1 else 0 end)) as count_b3
	,(sum(case when C.RSLT_SFT_CD ='C' then 1 else 0 end)) as count_b4
	,(sum(case when C.RSLT_SFT_CD ='E' then 1 else 0 end)) as count_b5
	,(sum(case when C.RSLT_SFT_CD is not null then 1 else 0 end)) as count_b6
	
                                        
	
	        FROM TBL_DSFT_ACPN_PROC A					  		   
			        LEFT JOIN TBL_HC_HIST C
			               ON A.DSFT_ACPN_SEQ_NO = C.DSFT_ACPN_SEQ_NO		  
			        LEFT JOIN TBL_CRPN_CUST_BASE D
			       		   ON A.ORGN_PTR_ST_CD = D.CUST_ID        	    	  
			        LEFT JOIN TBL_USR B
			       		   ON A.DSPSR_ID = B.USR_ID 
			        LEFT JOIN TBL_HR_EMP_CD F
			       		   ON A.DSPSR_ID = F.EMP_NO
			        LEFT JOIN TBL_HR_DEPT_CD G 
			       		   ON F.BLNG_DEPT_CD = G.DEPT_CD
			        LEFT JOIN TBL_SAP_CD H	
			       		   ON (A.ORGN_ENTR_DV_CD = H.CD_ID AND H.CD_CLAS_CD = '1')	
			        LEFT JOIN TBL_DSFT_TAXN_TYP_CD I
			       		   ON A.DSFT_TAXN_TYP_CD = I.DSFT_TAXN_TYP_CD
			       		   
			WHERE (A.DEL_YN = 'N' OR A.DEL_YN IS NULL)	
			and (A.DSPSR_YN_OB_CNTR='N' or A.DSPSR_YN_OB_CNTR is null )	
              and (A.HC_YN ='Y')
 	  	<dynamic>
	       			<!-- 년도별 -->   				    	
		    	    <isEqual property="cmb_gubun" compareValue="1">              
		                and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'                                                                  
		            </isEqual>
		            <!--  -->
		            <isEqual property="cmb_gubun" compareValue="2">
		            	<isEmpty property="cmb_half">
		            		and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'
		            	</isEmpty>              
		                <isEqual property="cmb_half" compareValue="1">
		                	and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0632000000'                                                                  
						</isEqual>	 
						<isEqual property="cmb_half" compareValue="2">
							and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '1232000000'
						</isEqual>	 
		            </isEqual>	 
		            <isEqual property="cmb_gubun" compareValue="3"> 
		            	<isEmpty>
							and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'	            	
		            	</isEmpty>    
		           		<isEqual property="cmb_qua" compareValue="1">
		           			and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0332000000'   
		           	  	</isEqual>
		           	  	<isEqual property="cmb_qua" compareValue="2">
		           	   		and A.ACPN_DTM between #time_key# || '0400000000' and #time_key# || '0632000000'   
		           	  	</isEqual>	 
		           	  	<isEqual property="cmb_qua" compareValue="3">
		           	   		and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '0932000000'   
		           	  	</isEqual>	 
	           	  		<isEqual property="cmb_qua" compareValue="4">
		           	   		and A.ACPN_DTM between #time_key# || '1000000000' and #time_key# || '1232000000'   
		           	  	</isEqual>	 	 
	            	</isEqual>	 				            
		    	 	<isEqual property="cmb_gubun" compareValue="4">              
		            	and A.ACPN_DTM between #time_key# || '00000000' and #time_key# || '32000000'                                                                  
		         	</isEqual>	
		    	 	<isEqual property="cmb_gubun" compareValue="5">              
		                and A.ACPN_DTM between #time_key# || '000000' and #time_key2# || '240000'                                                                  
		         	</isEqual>
				
					<!-- 불만유형이 전체일 때는 두가지 경우 존재(전체, 품질&혼유)		-->				
					<isEmpty property="dsft_typ_cd">
						<isEqual property="dsft_typ_tot_gbn" compareValue="2">
							AND A.DSFT_TYP_CD IN ('CA','CK')
						</isEqual>
					</isEmpty>
				  	<isNotEmpty prepend="AND" property="dsft_typ_cd">				<!-- 불만유형		-->
				    	A.DSFT_TYP_CD = #dsft_typ_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dsft_taxn_typ_cd">			<!-- 불만세부유형		-->
				    	A.DSFT_TAXN_TYP_CD = #dsft_taxn_typ_cd#
				  	</isNotEmpty>
			  		<isNotEmpty prepend="AND" property="orgn_ptr_st_cd">			<!-- 불만발생업체코드(가맹점SAP코드) -->
					    A.ORGN_PTR_ST_CD = #orgn_ptr_st_cd#
				  	</isNotEmpty>
				    <isNotEmpty prepend="AND" property="conn_chnl_kind_cd">			<!-- 접촉채널	-->
					    A.CONN_CHNL_KIND_CD = #conn_chnl_kind_cd#
				    </isNotEmpty>			  	
				  	<isNotEmpty prepend="AND" property="hgrk_dept_cd">				<!-- 부문/본부 -->
					    G.HGRK_DEPT_CD = #hgrk_dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dept_cd">					<!-- 처리팀 -->
					    G.DEPT_CD = #dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dspsr_id_nm">				<!-- 처리자명 		-->
					    (B.USR_NM LIKE '%'|| #dspsr_id_nm# ||'%' OR F.EMP_NM LIKE '%'|| #dspsr_id_nm# ||'%')
				  	</isNotEmpty>
			 		<isEqual property="hc_yn" compareValue="Y"> 					<!-- 해피콜여부  -->
			 			AND A.HC_YN = 'Y'
			 		</isEqual>
				 	<isEqual property="hc_yn" compareValue="N"> 					<!-- 해피콜여부  -->
				 		AND (A.HC_YN = 'N' OR A.HC_YN IS NULL)
				 	</isEqual>
				  	<isNotEmpty prepend="AND" property="attd_sft_cd">				<!-- 태도만족도 		-->
				  		(A.HC_YN = 'Y' AND C.ATTD_SFT_CD = #attd_sft_cd#)
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="rslt_sft_cd">				<!-- 결과만족도 		-->
				  		(A.HC_YN = 'Y' AND C.RSLT_SFT_CD = #rslt_sft_cd#)
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="hc_uabl_rsn_cd">			<!-- 해피콜불가사유		-->
				  		A.HC_UABL_RSN_CD = #hc_uabl_rsn_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="prdct_cd">					<!-- 불만제품 		-->
					    A.PRDCT_CD = #prdct_cd#
				  	</isNotEmpty>			  				 	
				  	<isNotEmpty prepend="AND" property="prblm_penom_cd">			<!-- 현상 		-->
					    A.PRBLM_PENOM_CD = #prblm_penom_cd#
				  	</isNotEmpty>
			 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="1">  	<!-- 시료품질 점검결과		-->
			 			AND	A.VHCL_QLIT_DSFT_CAUS_CD_CUST IS NOT NULL
			 	  	</isEqual>
			 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="2">   	<!-- 시료품질 점검결과		-->
			 	  		AND	A.VHCL_QLIT_DSFT_CAUS_CD_PTR_ST IS NOT NULL
			 	  	</isEqual>
				  	<isNotEmpty prepend="AND" property="vhcl_biztr_qlit_dsft_typ_cd">			<!-- 품질불만유형 		-->
					    A.VHCL_BIZTR_QLIT_DSFT_TYP_CD = #vhcl_biztr_qlit_dsft_typ_cd#
				  	</isNotEmpty>
				 	<isEqual property="vhcl_biztr_yn" compareValue="Y"> 			<!-- Kixx 품질서비스차량 출동 -->
				 		AND A.VHCL_BIZTR_YN = 'Y'
				 	</isEqual>
				 	<isEqual property="vhcl_biztr_yn" compareValue="N"> 			<!-- Kixx 품질서비스차량 출동 -->
				 		AND (A.VHCL_BIZTR_YN = 'N' OR A.VHCL_BIZTR_YN IS NULL)
				 	</isEqual>		 	  	
				 	<isEqual property="rwrd_yn" compareValue="Y"> 					<!-- 보상여부 -->
				 		AND A.RWRD_YN = 'Y'
				 	</isEqual>
				 	<isEqual property="rwrd_yn" compareValue="N"> 					<!-- 보상여부 -->
				 		AND (A.RWRD_YN = 'N' OR A.RWRD_YN IS NULL)
				 	</isEqual>
				 	
				 	<isEqual property="cps_amt_gbn" compareValue="1"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 주유소 보상금 1만원 미만-->
				 			AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 주유소 보상금 1만원 ~ 10만원-->
				 			AND (A.PTR_ST_CPS_AMT <![CDATA[>=]]> 10000 AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 주유소 보상금 10만원 초과-->
				 			AND A.PTR_ST_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	<isEqual property="cps_amt_gbn" compareValue="2"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 회사 보상금 1만원 미만-->
				 			AND A.CO_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 회사 보상금 1만원 ~ 10만원-->
				 			AND (A.CO_CPS_AMT <![CDATA[>=]]> 10000 AND A.CO_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 회사 보상금 10만원 초과-->
				 			AND A.CO_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	<isEqual property="cps_amt_gbn" compareValue="3"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 총 보상금 1만원 미만-->
				 			AND A.TOT_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 총 보상금 1만원 ~ 10만원-->
				 			AND (A.TOT_CPS_AMT <![CDATA[>=]]> 10000 AND A.TOT_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 총 보상금 10만원 초과-->
				 			AND A.TOT_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	
					<!--처리자구분에 체크항목이 하나도 없는 경우, 전체데이터가 조회된다.-->
				 	<isEqual property="cmp_handler" compareValue="1">   
				 		AND	A.DSPSR_YN_CNSLR = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="2">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="3">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="4">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="5">   
				 		AND	A.DSPSR_YN_DSFT_CHRG = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="6">   
				 		AND	A.DSPSR_YN_PART_HD = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="7">   
				 		AND	(A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
	       		</dynamic>  
 	 
 	 group by HGRK_DEPT_CDNM
				,DSPSR_CHRG_DEPT
				,DEPT_CD order by  HGRK_DEPT_CDNM
				,DSPSR_CHRG_DEPT
				,DEPT_CD)
				 
				 
 </select>
 </sqlMap>
