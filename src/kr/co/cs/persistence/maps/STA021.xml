<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="STA021">	

<!--  콤보박스 년도 조회  -->
 	<select id="Get_YearTerm_SELECT" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
	SELECT SUBSTR(BASC_DT, 1, 4) AS CODE
	     , SUBSTR(BASC_DT, 1, 4) AS CODE_NM
	     , ''   AS HIG_CODE
	  FROM TBL_BUSSDD_INFO
	 WHERE BASC_DT BETWEEN TO_CHAR(SYSDATE - (365*10), 'YYYYMMDD') AND TO_CHAR(SYSDATE, 'YYYYMMDD')
	GROUP BY SUBSTR(BASC_DT, 1, 4)
	ORDER BY SUBSTR(BASC_DT, 1, 4)
	</select>

<!--  지정일자가 속한 주의 시작일자,종료일자조회  -->
 	<select id="Get_WeekFromTo_SELECT" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
		SELECT TO_CHAR((TO_DATE(#from_dt#, 'YYYYMMDD') - (WDAY - 1)), 'YYYYMMDD') AS FROM_DT_WEEK,
			   TO_CHAR((TO_DATE(#from_dt#, 'YYYYMMDD') + (7 - WDAY)), 'YYYYMMDD') AS TO_DT_WEEK
		  FROM TBL_BUSSDD_INFO 
		 WHERE GRP_CD  = 'BNS'
		   AND BASC_DT = #from_dt#
	</select>

<!--  상담사별 콜 통계 (일/주/월) -->
 	<select id="Get_AgentCallStat_SELECT" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
		SELECT DATA_GB
		     , GRP_CDNM
		     , USR_NM
		     , BASC_DT
		     , DAY_NM
		     , INBND_N
		     , LPAD(FLOOR(AVR_INBND_TM/3600), 2, '0')||':'||
			   LPAD(FLOOR(MOD(AVR_INBND_TM, 3600) / 60), 2, '0')||':'||
			   LPAD(ROUND(MOD(MOD(AVR_INBND_TM, 3600), 60), 0), 2, '0') AS AVR_INBND_TM
		     , OTBND_N
		     , DIALING_N
		     , LPAD(FLOOR(AVR_OTBND_TM/3600), 2, '0')||':'||
			   LPAD(FLOOR(MOD(AVR_OTBND_TM, 3600) / 60), 2, '0')||':'||
			   LPAD(ROUND(MOD(MOD(AVR_OTBND_TM, 3600), 60), 0), 2, '0') AS AVR_OTBND_TM
		     , LPAD(FLOOR(TM_1/3600), 2, '0')||':'||
			   LPAD(FLOOR(MOD(TM_1, 3600) / 60), 2, '0')||':'||
			   LPAD(ROUND(MOD(MOD(TM_1, 3600), 60), 0), 2, '0') AS TM_1
		     , LPAD(FLOOR(TM_2/3600), 2, '0')||':'||
			   LPAD(FLOOR(MOD(TM_2, 3600) / 60), 2, '0')||':'||
			   LPAD(ROUND(MOD(MOD(TM_2, 3600), 60), 0), 2, '0') AS TM_2
		     , LPAD(FLOOR(TM_3/3600), 2, '0')||':'||
			   LPAD(FLOOR(MOD(TM_3, 3600) / 60), 2, '0')||':'||
			   LPAD(ROUND(MOD(MOD(TM_3, 3600), 60), 0), 2, '0') AS TM_3
		     , LPAD(FLOOR(TM_4/3600), 2, '0')||':'||
			   LPAD(FLOOR(MOD(TM_4, 3600) / 60), 2, '0')||':'||
			   LPAD(ROUND(MOD(MOD(TM_4, 3600), 60), 0), 2, '0') AS TM_4
		     , LPAD(FLOOR(TM_5/3600), 2, '0')||':'||
			   LPAD(FLOOR(MOD(TM_5, 3600) / 60), 2, '0')||':'||
			   LPAD(ROUND(MOD(MOD(TM_5, 3600), 60), 0), 2, '0') AS TM_5
		     , LPAD(FLOOR(TM_SUM/3600), 2, '0')||':'||
			   LPAD(FLOOR(MOD(TM_SUM, 3600) / 60), 2, '0')||':'||
			   LPAD(ROUND(MOD(MOD(TM_SUM, 3600), 60), 0), 2, '0') AS TM_SUM
		     , LPAD(FLOOR(READY_TM/3600), 2, '0')||':'||
			   LPAD(FLOOR(MOD(READY_TM, 3600) / 60), 2, '0')||':'||
			   LPAD(ROUND(MOD(MOD(READY_TM, 3600), 60), 0), 2, '0') AS READY_TM
		     , LPAD(FLOOR(REST_TM/3600), 2, '0')||':'||
			   LPAD(FLOOR(MOD(REST_TM, 3600) / 60), 2, '0')||':'||
			   LPAD(ROUND(MOD(MOD(REST_TM, 3600), 60), 0), 2, '0') AS REST_TM
		     , LPAD(FLOOR(MEAL_TM/3600), 2, '0')||':'||
			   LPAD(FLOOR(MOD(MEAL_TM, 3600) / 60), 2, '0')||':'||
			   LPAD(ROUND(MOD(MOD(MEAL_TM, 3600), 60), 0), 2, '0') AS MEAL_TM
			   
			 , LPAD(FLOOR((MEAL_TM+REST_TM)/3600), 2, '0')||':'||
			   LPAD(FLOOR(MOD((MEAL_TM+REST_TM), 3600) / 60), 2, '0')||':'||
			   LPAD(ROUND(MOD(MOD((MEAL_TM+REST_TM), 3600), 60), 0), 2, '0') AS GDATA
			    
		     , LPAD(FLOOR(LOGIN_TM/3600), 2, '0')||':'||
			   LPAD(FLOOR(MOD(LOGIN_TM, 3600) / 60), 2, '0')||':'||
			   LPAD(ROUND(MOD(MOD(LOGIN_TM, 3600), 60), 0), 2, '0') AS LOGIN_TM
			   
		     , LPAD(FLOOR(AVR_RING_DRTM/3600), 2, '0')||':'||
			   LPAD(FLOOR(MOD(AVR_RING_DRTM, 3600) / 60), 2, '0')||':'||
			   LPAD(ROUND(MOD(MOD(AVR_RING_DRTM, 3600), 60), 0), 2, '0') AS AVR_RING_DRTM    
	         , ROUND(DECODE(REQ_N,0,0,INBND_N/REQ_N*100),1) AS ANSW_RATE
	         , ROUND(DECODE(INBND_N,0,0,SVC_LEVEL_N/INBND_N*100),1) AS SVC_LEVEL
		FROM
		(
				SELECT CASE WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NOT NULL AND BASC_DT IS NULL THEN 'US'
				            WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NULL AND BASC_DT IS NULL THEN 'PS'
				            WHEN GRP_CD IS NOT NULL AND PART_CD IS NULL AND USR_ID IS NULL AND BASC_DT IS NULL THEN 'GS'
				            WHEN GRP_CD IS NULL AND PART_CD IS NULL AND USR_ID IS NULL AND BASC_DT IS NULL THEN 'TS'
				            ELSE 'D' END AS DATA_GB
				     , CASE WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NOT NULL AND BASC_DT IS NULL THEN '(상담사소계)'
				            WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NULL AND BASC_DT IS NULL THEN '(파트소계)'||MAX(PART_CDNM)
				            WHEN GRP_CD IS NOT NULL AND PART_CD IS NULL AND USR_ID IS NULL AND BASC_DT IS NULL THEN '(그룹소계)'||MAX(GRP_CDNM)
				            WHEN GRP_CD IS NULL AND PART_CD IS NULL AND USR_ID IS NULL AND BASC_DT IS NULL THEN '합계'
				            ELSE MAX(PART_CDNM) END  AS GRP_CDNM
				     , CASE WHEN BASC_DT IS NULL THEN ''
				            ELSE MAX(USR_NM) END AS USR_NM
				     , BASC_DT
				     , CASE WHEN BASC_DT IS NULL THEN ''
		                    ELSE MAX(DAY_NM) END AS DAY_NM
				     , SUM(INBND_N)      AS INBND_N
		             , CASE WHEN SUM(AVR_INBND_TM) > 0 THEN ROUND(SUM(AVR_INBND_TM)/SUM(AVR_INBND_TM_CNT),0) ELSE 0 END AS AVR_INBND_TM
				     , SUM(OTBND_N)      AS OTBND_N 
				     , SUM(DIALING_N)      AS DIALING_N				     
		             , CASE WHEN SUM(AVR_OTBND_TM) > 0 THEN ROUND(SUM(AVR_OTBND_TM)/SUM(AVR_OTBND_TM_CNT),0) ELSE 0 END AS AVR_OTBND_TM
		             , CASE WHEN SUM(TM_1) > 0 THEN ROUND(SUM(TM_1)/SUM(TM_1_CNT),0) ELSE 0 END AS TM_1
		             , CASE WHEN SUM(TM_2) > 0 THEN ROUND(SUM(TM_2)/SUM(TM_2_CNT),0) ELSE 0 END AS TM_2
		             , CASE WHEN SUM(TM_3) > 0 THEN ROUND(SUM(TM_3)/SUM(TM_3_CNT),0) ELSE 0 END AS TM_3
		             , CASE WHEN SUM(TM_4) > 0 THEN ROUND(SUM(TM_4)/SUM(TM_4_CNT),0) ELSE 0 END AS TM_4
		             , CASE WHEN SUM(TM_5) > 0 THEN ROUND(SUM(TM_5)/SUM(TM_5_CNT),0) ELSE 0 END AS TM_5
		             , CASE WHEN SUM(TM_SUM) > 0 THEN ROUND(SUM(TM_SUM)/SUM(TM_SUM_CNT),0) ELSE 0 END AS TM_SUM
		             , CASE WHEN SUM(READY_TM) > 0 THEN ROUND(SUM(READY_TM)/SUM(READY_TM_CNT),0) ELSE 0 END AS READY_TM
		             , CASE WHEN SUM(REST_TM) > 0 THEN ROUND(SUM(REST_TM)/SUM(REST_TM_CNT),0) ELSE 0 END AS REST_TM
		             , CASE WHEN SUM(MEAL_TM) > 0 THEN ROUND(SUM(MEAL_TM)/SUM(MEAL_TM_CNT),0) ELSE 0 END AS MEAL_TM
		             , CASE WHEN SUM(LOGIN_TM) > 0 THEN ROUND(SUM(LOGIN_TM)/SUM(LOGIN_TM_CNT),0) ELSE 0 END AS LOGIN_TM
		             , CASE WHEN SUM(AVR_RING_DRTM) > 0 THEN ROUND(SUM(AVR_RING_DRTM)/SUM(AVR_RING_DRTM_CNT),0) ELSE 0 END AS AVR_RING_DRTM        
		     		 , SUM(TT.REQ_N)      AS REQ_N
		     		 , SUM(TT.SVC_LEVEL_N)  AS SVC_LEVEL_N  		             
				  FROM 
				     (
						SELECT T1.GRP_CD
						     , T1.PART_CD
						     , T1.GRP_CDNM
						     , T1.PART_CDNM
						     , T1.USR_ID
						     , T1.USR_NM
						     , T1.BASC_DT
						     , T1.DAY_NM
				     		 , NVL(T2.INBND_HOUSE, 0)  AS INBND_N
						     , NVL(T2.AVR_INBND_TM, 0) AS AVR_INBND_TM
						     , CASE WHEN NVL(T2.AVR_INBND_TM, 0) = 0 THEN 0 ELSE 1 END AS AVR_INBND_TM_CNT
						     , NVL(T2.OTBND_HOUSE, 0)  AS OTBND_N
						     , NVL(T2.DIALING_NCNT, 0)  AS DIALING_N
						     , NVL(T2.AVR_OTBND_TM, 0) AS AVR_OTBND_TM
						     , CASE WHEN NVL(T2.AVR_OTBND_TM, 0) = 0 THEN 0 ELSE 1 END AS AVR_OTBND_TM_CNT
						     , NVL(T2.TM_1, 0)    AS TM_1
						     , CASE WHEN NVL(T2.TM_1, 0) = 0 THEN 0 ELSE 1 END AS TM_1_CNT
						     , NVL(T2.TM_2, 0)    AS TM_2
						     , CASE WHEN NVL(T2.TM_2, 0) = 0 THEN 0 ELSE 1 END AS TM_2_CNT
						     , NVL(T2.TM_3, 0)    AS TM_3
						     , CASE WHEN NVL(T2.TM_3, 0) = 0 THEN 0 ELSE 1 END AS TM_3_CNT
						     , NVL(T2.TM_4, 0)    AS TM_4
						     , CASE WHEN NVL(T2.TM_4, 0) = 0 THEN 0 ELSE 1 END AS TM_4_CNT
						     , NVL(T2.TM_5, 0)    AS TM_5
						     , CASE WHEN NVL(T2.TM_5, 0) = 0 THEN 0 ELSE 1 END AS TM_5_CNT
						     , NVL(T2.TM_SUM, 0)  AS TM_SUM
						     , CASE WHEN NVL(T2.TM_SUM, 0) = 0 THEN 0 ELSE 1 END AS TM_SUM_CNT
						     , NVL(T2.READY_TM, 0)  AS READY_TM
						     , CASE WHEN NVL(T2.READY_TM, 0) = 0 THEN 0 ELSE 1 END AS READY_TM_CNT
						     , NVL(T2.REST_TM, 0)   AS REST_TM
						     , CASE WHEN NVL(T2.REST_TM, 0) = 0 THEN 0 ELSE 1 END  AS REST_TM_CNT
						     , NVL(T2.MEAL_TM, 0)   AS MEAL_TM
						     , CASE WHEN NVL(T2.MEAL_TM, 0) = 0 THEN 0 ELSE 1 END  AS MEAL_TM_CNT
						     , NVL(T2.LOGIN_TM, 0)  AS LOGIN_TM
						     , CASE WHEN NVL(T2.LOGIN_TM, 0) = 0 THEN 0 ELSE 1 END AS LOGIN_TM_CNT
					     	 , NVL(T2.AVR_RING_DRTM, 0)  AS AVR_RING_DRTM			                     
						     , CASE WHEN NVL(T2.AVR_RING_DRTM, 0) = 0 THEN 0 ELSE 1 END AS AVR_RING_DRTM_CNT
				     		 , NVL(T2.REQ_N, 0)  AS REQ_N
				     		 , NVL(T2.SVC_LEVEL_N, 0)  AS SVC_LEVEL_N						     
						FROM 
						(
							SELECT A.GRP_CD
							     , A.PART_CD
							     , B.GRP_CDNM
							     , C.PART_CDNM
							     , A.USR_ID
							     , A.USR_NM
							     , D.BASC_DT
							     , E.SMLCLAS_CDNM AS DAY_NM
							  FROM TBL_USR A
							     , TBL_GRP_CD B
							     , TBL_PART_CD C
							     , TBL_BUSSDD_INFO D
							     , TBL_UNFYCD_SMLCLAS E
							 WHERE A.GRP_CD  = B.GRP_CD
							   AND A.PART_CD = C.PART_CD
							   AND A.GRP_CD  = D.GRP_CD
							<isNotEmpty property="grp_cd">
					    	   AND A.GRP_CD = #grp_cd#
					   		</isNotEmpty>
					   		<isNotEmpty property="part_cd">
					    	   AND A.PART_CD = #part_cd#
					   		</isNotEmpty>
					   		<isNotEmpty property="usr_id">
					    	   AND A.USR_ID = #usr_id#
					   		</isNotEmpty>
							   AND D.WDAY    = E.SMLCLAS_CD
					   		   AND E.LRGCLAS_CD = 'NW110'
							   <!-- 20120903 수정 -->
							   AND (A.QUAL_LOSS_DD IS NULL OR A.QUAL_LOSS_DD > #to_dt#)
							   <!-- AND A.CTI_USE_YN = 'Y' -->
					   		<isNotEmpty property="month_std_dt">
							   AND D.BASC_DT BETWEEN SUBSTR(#month_std_dt#,1,6)||'01' AND TO_CHAR(LAST_DAY(TO_DATE(#month_std_dt#, 'YYYYMMDD')), 'YYYYMMDD')
					   		</isNotEmpty>
					   		<isNotEmpty property="from_dt">
							   AND D.BASC_DT BETWEEN #from_dt# AND #to_dt#
					   		</isNotEmpty>
							ORDER BY A.GRP_CD, A.PART_CD, A.USR_ID
							) T1,
							(
							SELECT TIME_KEY AS WORK_DAY
							     , USR_ID
							     , INBND_HOUSE
							     , CASE WHEN INBND_HOUSE = 0 THEN 0
							            ELSE ROUND(INBND_DRTM / INBND_HOUSE, 1)
							            END  AS AVR_INBND_TM
							     , OTBND_HOUSE
							     , DIALING_NCNT
							     , CASE WHEN OTBND_HOUSE = 0 THEN 0
							            ELSE ROUND(OTBND_DRTM / OTBND_HOUSE, 1)
							            END  AS AVR_OTBND_TM
							     , AF_PROC_DRTM       AS TM_1
							     , CLE_SEAT_DRTM_EML  AS TM_2
							     , CLE_SEAT_DRTM_DSFT AS TM_3
							     , CLE_SEAT_DRTM_COCH AS TM_4
							     , CLE_SEAT_DRTM_EDU  AS TM_5
							     , AF_PROC_DRTM + CLE_SEAT_DRTM_EML + CLE_SEAT_DRTM_DSFT + CLE_SEAT_DRTM_COCH + CLE_SEAT_DRTM_EDU AS TM_SUM
							     , TOT_LRGEXST_DRTM   AS READY_TM
							     , CLE_SEAT_DRTM_REST AS REST_TM
							     , CLE_SEAT_DRTM_MEAL AS MEAL_TM
							     , WKG_DRTM           AS LOGIN_TM
			        			 , CASE WHEN TEL_RING_DRTM = 0 THEN 0  ELSE ROUND(TEL_RING_DRTM / TEL_RING_NCNT, 1) END  AS AVR_RING_DRTM  
 			                     , REQ_NCNT AS REQ_N                              
			                     , SEC20_IN_CNNT_NCNT AS SVC_LEVEL_N  							     
							  FROM TBL_BT_CTI_RPT_DT
							<isNotEmpty property="month_std_dt">
					 		 WHERE TIME_KEY BETWEEN SUBSTR(#month_std_dt#,1,6)||'01' AND TO_CHAR(LAST_DAY(TO_DATE(#month_std_dt#, 'YYYYMMDD')), 'YYYYMMDD')
		   					</isNotEmpty>
							<isNotEmpty property="from_dt">
					 		 WHERE TIME_KEY BETWEEN #from_dt# AND #to_dt#
		   					</isNotEmpty>
							ORDER BY USR_ID
							) T2
						WHERE T1.USR_ID  = T2.USR_ID(+)
						  AND T1.BASC_DT = T2.WORK_DAY(+)
						ORDER BY T1.GRP_CD, T1.PART_CD, T1.USR_ID, T1.BASC_DT
				    ) TT
				    GROUP BY ROLLUP(GRP_CD, PART_CD, USR_ID, BASC_DT)
		)
	<isNotEmpty property="srch_gb">
	  <isEqual property="srch_gb" compareValue="MM">
		WHERE DATA_GB IN ('D','US','PS','GS','TS')
	  </isEqual>
	  <isEqual property="srch_gb" compareValue="ww">
		WHERE DATA_GB IN ('D','US','PS','GS','TS')
	  </isEqual>
	  <isEqual property="srch_gb" compareValue="DD">
	  	<isNotEmpty property="disp_gb">
	  	  <isEqual property="disp_gb" compareValue="01">
			WHERE DATA_GB IN ('D','PS','GS','TS')
		  </isEqual>
	  	  <isEqual property="disp_gb" compareValue="02">
			WHERE DATA_GB IN ('D','US','PS','GS','TS')
		  </isEqual>
		</isNotEmpty>
	  </isEqual>
	</isNotEmpty>
	</select>

<!--  메일 콜 통계 (일/주/월) -->
 	<select id="Get_AgentMailStat_SELECT" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
		SELECT DATA_GB
		     , GRP_CDNM
		     , USR_NM
		     , BASC_DT
		     , DAY_NM
		    ,  NVL(Q,0) AS Q
             , NVL(Q1,0) AS Q1
             , NVL(CEIL((Q1/Q)*100),0)||'%' AS SUCC
		 FROM
		(
				SELECT CASE WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NOT NULL AND BASC_DT IS NULL THEN 'US'
				            WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NULL AND BASC_DT IS NULL THEN 'PS'
				            WHEN GRP_CD IS NOT NULL AND PART_CD IS NULL AND USR_ID IS NULL AND BASC_DT IS NULL THEN 'GS'
				            WHEN GRP_CD IS NULL AND PART_CD IS NULL AND USR_ID IS NULL AND BASC_DT IS NULL THEN 'TS'
				            ELSE 'D' END AS DATA_GB
				     , CASE WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NOT NULL AND BASC_DT IS NULL THEN '(상담사소계)'
				            WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NULL AND BASC_DT IS NULL THEN '(파트소계)'||MAX(PART_CDNM)
				            WHEN GRP_CD IS NOT NULL AND PART_CD IS NULL AND USR_ID IS NULL AND BASC_DT IS NULL THEN '(그룹소계)'||MAX(GRP_CDNM)
				            WHEN GRP_CD IS NULL AND PART_CD IS NULL AND USR_ID IS NULL AND BASC_DT IS NULL THEN '합계'
				            ELSE MAX(PART_CDNM) END  AS GRP_CDNM
				     , CASE WHEN BASC_DT IS NULL THEN ''
				            ELSE MAX(USR_NM) END AS USR_NM
				     , BASC_DT
				     , CASE WHEN BASC_DT IS NULL THEN ''
		                    ELSE MAX(DAY_NM) END AS DAY_NM
				     , SUM(Q) AS Q		
				     , SUM(Q1) AS Q1                   
				  FROM 
				     (
						SELECT T1.GRP_CD
						     , T1.PART_CD
						     , T1.GRP_CDNM
						     , T1.PART_CDNM
						     , T1.USR_ID
						     , T1.USR_NM
						     , T1.BASC_DT
						     , T1.DAY_NM
				     		 , T2.Q
				     		 , T2.Q1			     
						FROM 
						(
							SELECT A.GRP_CD
							     , A.PART_CD
							     , B.GRP_CDNM
							     , C.PART_CDNM
							     , A.USR_ID
							     , A.USR_NM
							     , D.BASC_DT
							     , E.SMLCLAS_CDNM AS DAY_NM
							  FROM TBL_USR A
							     , TBL_GRP_CD B
							     , TBL_PART_CD C
							     , TBL_BUSSDD_INFO D
							     , TBL_UNFYCD_SMLCLAS E
							 WHERE A.GRP_CD  = B.GRP_CD
							   AND A.PART_CD = C.PART_CD
							   AND A.GRP_CD  = D.GRP_CD
							<isNotEmpty property="grp_cd">
					    	   AND A.GRP_CD = #grp_cd#
					   		</isNotEmpty>
					   		<isNotEmpty property="part_cd">
					    	   AND A.PART_CD = #part_cd#
					   		</isNotEmpty>
					   		<isNotEmpty property="usr_id">
					    	   AND A.USR_ID = #usr_id#
					   		</isNotEmpty>
							   AND D.WDAY    = E.SMLCLAS_CD
					   		   AND E.LRGCLAS_CD = 'NW110'
							   <!-- AND A.CTI_USE_YN = 'Y' -->
					   		<isNotEmpty property="month_std_dt">
							   AND D.BASC_DT BETWEEN SUBSTR(#month_std_dt#,1,6)||'01' AND TO_CHAR(LAST_DAY(TO_DATE(#month_std_dt#, 'YYYYMMDD')), 'YYYYMMDD')
							   AND (A.QUAL_LOSS_DD IS NULL OR (SUBSTR(A.QUAL_LOSS_DD,0,6) >  SUBSTR(#month_std_dt#,0,6)))
					   		</isNotEmpty>
					   		<isNotEmpty property="from_dt">
							   AND D.BASC_DT BETWEEN #from_dt# AND #to_dt#
							   AND (A.QUAL_LOSS_DD IS NULL OR (A.QUAL_LOSS_DD BETWEEN #from_dt# AND #to_dt#))
					   		</isNotEmpty>
							ORDER BY A.GRP_CD, A.PART_CD, A.USR_ID
							) T1,
							(
							SELECT SUBSTR(PROC_DTM,0,8) AS WORK_DAY
                                 , B.GRP_CD
                                 , B.PART_CD  
                                 , A.ASGN_CNSLR_ID 
                                 , COUNT(*) AS Q  
                                 , SUM(CASE WHEN PROC_ST_CD = 'Y' THEN 1 END) AS Q1                                                                                                               
                              FROM TBL_EML_ASGN_LOG A
                                 , TBL_USR B
                              WHERE A.ASGN_CNSLR_ID = B.USR_ID
                              AND A.RSV_SEQ_NO like 'CAM080%'
							<isNotEmpty property="month_std_dt">
					 		 AND SUBSTR(PROC_DTM,0,8)  BETWEEN SUBSTR(#month_std_dt#,1,6)||'01' AND TO_CHAR(LAST_DAY(TO_DATE(#month_std_dt#, 'YYYYMMDD')), 'YYYYMMDD')
		   					</isNotEmpty>
							<isNotEmpty property="from_dt">
					 		 AND SUBSTR(PROC_DTM,0,8)  BETWEEN #from_dt# AND #to_dt#
		   					</isNotEmpty>
		   					GROUP BY SUBSTR(PROC_DTM,0,8), B.GRP_CD, B.PART_CD, A.ASGN_CNSLR_ID
                            ORDER BY SUBSTR(PROC_DTM,0,8), B.GRP_CD, B.PART_CD
							) T2
						WHERE T1.USR_ID  = T2.ASGN_CNSLR_ID(+)
						  AND T1.BASC_DT = T2.WORK_DAY(+)
						ORDER BY T1.GRP_CD, T1.PART_CD, T1.USR_ID, T1.BASC_DT
				    ) TT
				    GROUP BY ROLLUP(GRP_CD, PART_CD, USR_ID, BASC_DT)
		)
	<isNotEmpty property="srch_gb">
	  <isEqual property="srch_gb" compareValue="MM">
		WHERE DATA_GB IN ('D','US','PS','GS','TS')
	  </isEqual>
	  <isEqual property="srch_gb" compareValue="ww">
		WHERE DATA_GB IN ('D','US','PS','GS','TS')
	  </isEqual>
	  <isEqual property="srch_gb" compareValue="DD">
	  	<isNotEmpty property="disp_gb">
	  	  <isEqual property="disp_gb" compareValue="01">
			WHERE DATA_GB IN ('D','PS','GS','TS')
		  </isEqual>
	  	  <isEqual property="disp_gb" compareValue="02">
			WHERE DATA_GB IN ('D','US','PS','GS','TS')
		  </isEqual>
		</isNotEmpty>
	  </isEqual>
	</isNotEmpty>
	</select>	

<!--  상담원별 콜백 통계 (일/주/월) -->
 	<select id="Get_AgentCBStat_SELECT" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
		SELECT DATA_GB
		     , GRP_CDNM
		     , USR_NM
		     , BASC_DT
		     , DAY_NM
		     , NVL(Q,0) AS Q
		     , NVL(ETC1,0) AS ETC1
             , NVL(ETC2,0) AS ETC2
             , NVL(ETC3,0) AS ETC3
             , NVL(ETC4,0) AS ETC4
             , NVL(ETC5,0) AS ETC5
             , NVL(ETC6,0) AS ETC6
             , NVL(ETC7,0) AS ETC7
             , NVL(ETC8,0) AS ETC8 
		 FROM
		(
				SELECT CASE WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NOT NULL AND BASC_DT IS NULL THEN 'US'
				            WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NULL AND BASC_DT IS NULL THEN 'PS'
				            WHEN GRP_CD IS NOT NULL AND PART_CD IS NULL AND USR_ID IS NULL AND BASC_DT IS NULL THEN 'GS'
				            WHEN GRP_CD IS NULL AND PART_CD IS NULL AND USR_ID IS NULL AND BASC_DT IS NULL THEN 'TS'
				            ELSE 'D' END AS DATA_GB
				     , CASE WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NOT NULL AND BASC_DT IS NULL THEN '(상담사소계)'
				            WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NULL AND BASC_DT IS NULL THEN '(파트소계)'||MAX(PART_CDNM)
				            WHEN GRP_CD IS NOT NULL AND PART_CD IS NULL AND USR_ID IS NULL AND BASC_DT IS NULL THEN '(그룹소계)'||MAX(GRP_CDNM)
				            WHEN GRP_CD IS NULL AND PART_CD IS NULL AND USR_ID IS NULL AND BASC_DT IS NULL THEN '합계'
				            ELSE MAX(PART_CDNM) END  AS GRP_CDNM
				     , CASE WHEN BASC_DT IS NULL THEN ''
				            ELSE MAX(USR_NM) END AS USR_NM
				     , BASC_DT
				     , CASE WHEN BASC_DT IS NULL THEN ''
		                    ELSE MAX(DAY_NM) END AS DAY_NM
		            , SUM(Q) AS Q        
				    , SUM(ETC1) AS ETC1
                    , SUM(ETC2) AS ETC2
                    , SUM(ETC3) AS ETC3
                    , SUM(ETC4) AS ETC4
                    , SUM(ETC5) AS ETC5
                    , SUM(ETC6) AS ETC6
                    , SUM(ETC7) AS ETC7
                    , SUM(ETC8) AS ETC8               
				  FROM 
				     (
						SELECT T1.GRP_CD
						     , T1.PART_CD
						     , T1.GRP_CDNM
						     , T1.PART_CDNM
						     , T1.USR_ID
						     , T1.USR_NM
						     , T1.BASC_DT
						     , T1.DAY_NM
						     , T2.Q
				     	     , T2.ETC1
                             , T2.ETC2
                             , T2.ETC3
                             , T2.ETC4
                             , T2.ETC5
                             , T2.ETC6
                             , T2.ETC7
                             , T2.ETC8    		     
						FROM 
						(
							SELECT A.GRP_CD
							     , A.PART_CD
							     , B.GRP_CDNM
							     , C.PART_CDNM
							     , A.USR_ID
							     , A.USR_NM
							     , D.BASC_DT
							     , E.SMLCLAS_CDNM AS DAY_NM
							  FROM TBL_USR A
							     , TBL_GRP_CD B
							     , TBL_PART_CD C
							     , TBL_BUSSDD_INFO D
							     , TBL_UNFYCD_SMLCLAS E
							 WHERE A.GRP_CD  = B.GRP_CD
							   AND A.PART_CD = C.PART_CD
							   AND A.GRP_CD  = D.GRP_CD
							<isNotEmpty property="grp_cd">
					    	   AND A.GRP_CD = #grp_cd#
					   		</isNotEmpty>
					   		<isNotEmpty property="part_cd">
					    	   AND A.PART_CD = #part_cd#
					   		</isNotEmpty>
					   		<isNotEmpty property="usr_id">
					    	   AND A.USR_ID = #usr_id#
					   		</isNotEmpty>
							   AND D.WDAY    = E.SMLCLAS_CD
					   		   AND E.LRGCLAS_CD = 'NW110'
							   <!-- AND A.CTI_USE_YN = 'Y' -->
					   		<isNotEmpty property="month_std_dt">
							   AND D.BASC_DT BETWEEN SUBSTR(#month_std_dt#,1,6)||'01' AND TO_CHAR(LAST_DAY(TO_DATE(#month_std_dt#, 'YYYYMMDD')), 'YYYYMMDD')
							   AND (A.QUAL_LOSS_DD IS NULL OR (SUBSTR(A.QUAL_LOSS_DD,0,6) >  SUBSTR(#month_std_dt#,0,6)))
					   		</isNotEmpty>
					   		<isNotEmpty property="from_dt">
							   AND D.BASC_DT BETWEEN #from_dt# AND #to_dt#
							   AND (A.QUAL_LOSS_DD IS NULL OR (A.QUAL_LOSS_DD BETWEEN #from_dt# AND #to_dt#))
					   		</isNotEmpty>
							ORDER BY A.GRP_CD, A.PART_CD, A.USR_ID
							) T1,
							(
							SELECT SUBSTR(A.PROC_DT,0,8) AS WORK_DAY
                                 , B.GRP_CD
                                 , B.PART_CD  
                                 , A.ASSGN_ID 
                                 , COUNT(*) AS Q  
                                 , SUM(DECODE(A.CUR_TYP_CD , '01', 1,0)) AS ETC1   <!--통화성공-->
                                 , SUM(DECODE(A.CUR_TYP_CD , '22', 1,0)) AS ETC2   <!--미수신-->
                                 , SUM(DECODE(A.CUR_TYP_CD , '21', 1,0)) AS ETC3   <!--통화중-->
                                 , SUM(DECODE(A.CUR_TYP_CD , '13', 1,0)) AS ETC4   <!--결번-->
                                 , SUM(DECODE(A.CUR_TYP_CD , '12', 1,0)) AS ETC5   <!--거부-->
                                 , SUM(DECODE(A.CUR_TYP_CD , '11', 1,0)) AS ETC6   <!--재시도요청-->
                                 , SUM(DECODE(A.CUR_TYP_CD , '99', 1,0)) AS ETC7   <!--기타-->
                                 , SUM(DECODE(A.CUR_TYP_CD , '23', 1,0)) AS ETC8   <!--오번호-->                                                                                                                                   
                              FROM TBL_CALLBACK_HIST A
                                 , TBL_USR B
                              WHERE A.ASSGN_ID = B.USR_ID                           
							<isNotEmpty property="month_std_dt">
					 		 AND SUBSTR(A.PROC_DT,0,8)  BETWEEN SUBSTR(#month_std_dt#,1,6)||'01' AND TO_CHAR(LAST_DAY(TO_DATE(#month_std_dt#, 'YYYYMMDD')), 'YYYYMMDD')
		   					</isNotEmpty>
							<isNotEmpty property="from_dt">
					 		 AND SUBSTR(A.PROC_DT,0,8)  BETWEEN #from_dt# AND #to_dt#
		   					</isNotEmpty>
		   					GROUP BY SUBSTR(A.PROC_DT,0,8), B.GRP_CD, B.PART_CD, A.ASSGN_ID
                            ORDER BY SUBSTR(A.PROC_DT,0,8), B.GRP_CD, B.PART_CD
							) T2
						WHERE T1.USR_ID  = T2.ASSGN_ID(+)
						  AND T1.BASC_DT = T2.WORK_DAY(+)
						ORDER BY T1.GRP_CD, T1.PART_CD, T1.USR_ID, T1.BASC_DT
				    ) TT
				    GROUP BY ROLLUP(GRP_CD, PART_CD, USR_ID, BASC_DT)
		)
	<isNotEmpty property="srch_gb">
	  <isEqual property="srch_gb" compareValue="MM">
		WHERE DATA_GB IN ('D','US','PS','GS','TS')
	  </isEqual>
	  <isEqual property="srch_gb" compareValue="ww">
		WHERE DATA_GB IN ('D','US','PS','GS','TS')
	  </isEqual>
	  <isEqual property="srch_gb" compareValue="DD">
	  	<isNotEmpty property="disp_gb">
	  	  <isEqual property="disp_gb" compareValue="01">
			WHERE DATA_GB IN ('D','PS','GS','TS')
		  </isEqual>
	  	  <isEqual property="disp_gb" compareValue="02">
			WHERE DATA_GB IN ('D','US','PS','GS','TS')
		  </isEqual>
		</isNotEmpty>
	  </isEqual>
	</isNotEmpty>
	</select>	

	
<!--  상담사별 콜 통계 (분기) -->
 	<select id="Get_AgentCallStat_QT_SELECT" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
		SELECT DATA_GB
		     , GRP_CDNM
		     , USR_NM
		     , CASE WHEN QT IS NULL THEN '' ELSE QT END AS BASC_DT
		     , CASE WHEN QT IS NULL THEN '' ELSE SUBSTR(QT,1,4)||'년'||SUBSTR(QT,6,1)||'분기' END AS DAY_NM
		     , INBND_N
		     , LPAD(FLOOR(AVR_INBND_TM/3600), 2, '0')||':'||
			   LPAD(FLOOR(MOD(AVR_INBND_TM, 3600) / 60), 2, '0')||':'||
			   LPAD(ROUND(MOD(MOD(AVR_INBND_TM, 3600), 60), 0), 2, '0') AS AVR_INBND_TM
		     , OTBND_N
		     , DIALING_N
		     , LPAD(FLOOR(AVR_OTBND_TM/3600), 2, '0')||':'||
			   LPAD(FLOOR(MOD(AVR_OTBND_TM, 3600) / 60), 2, '0')||':'||
			   LPAD(ROUND(MOD(MOD(AVR_OTBND_TM, 3600), 60), 0), 2, '0') AS AVR_OTBND_TM
		     , LPAD(FLOOR(TM_1/3600), 2, '0')||':'||
			   LPAD(FLOOR(MOD(TM_1, 3600) / 60), 2, '0')||':'||
			   LPAD(ROUND(MOD(MOD(TM_1, 3600), 60), 0), 2, '0') AS TM_1
		     , LPAD(FLOOR(TM_2/3600), 2, '0')||':'||
			   LPAD(FLOOR(MOD(TM_2, 3600) / 60), 2, '0')||':'||
			   LPAD(ROUND(MOD(MOD(TM_2, 3600), 60), 0), 2, '0') AS TM_2
		     , LPAD(FLOOR(TM_3/3600), 2, '0')||':'||
			   LPAD(FLOOR(MOD(TM_3, 3600) / 60), 2, '0')||':'||
			   LPAD(ROUND(MOD(MOD(TM_3, 3600), 60), 0), 2, '0') AS TM_3
		     , LPAD(FLOOR(TM_4/3600), 2, '0')||':'||
			   LPAD(FLOOR(MOD(TM_4, 3600) / 60), 2, '0')||':'||
			   LPAD(ROUND(MOD(MOD(TM_4, 3600), 60), 0), 2, '0') AS TM_4
		     , LPAD(FLOOR(TM_5/3600), 2, '0')||':'||
			   LPAD(FLOOR(MOD(TM_5, 3600) / 60), 2, '0')||':'||
			   LPAD(ROUND(MOD(MOD(TM_5, 3600), 60), 0), 2, '0') AS TM_5
		     , LPAD(FLOOR(TM_SUM/3600), 2, '0')||':'||
			   LPAD(FLOOR(MOD(TM_SUM, 3600) / 60), 2, '0')||':'||
			   LPAD(ROUND(MOD(MOD(TM_SUM, 3600), 60), 0), 2, '0') AS TM_SUM
		     , LPAD(FLOOR(READY_TM/3600), 2, '0')||':'||
			   LPAD(FLOOR(MOD(READY_TM, 3600) / 60), 2, '0')||':'||
			   LPAD(ROUND(MOD(MOD(READY_TM, 3600), 60), 0), 2, '0') AS READY_TM
		     , LPAD(FLOOR(REST_TM/3600), 2, '0')||':'||
			   LPAD(FLOOR(MOD(REST_TM, 3600) / 60), 2, '0')||':'||
			   LPAD(ROUND(MOD(MOD(REST_TM, 3600), 60), 0), 2, '0') AS REST_TM
		     , LPAD(FLOOR(MEAL_TM/3600), 2, '0')||':'||
			   LPAD(FLOOR(MOD(MEAL_TM, 3600) / 60), 2, '0')||':'||
			   LPAD(ROUND(MOD(MOD(MEAL_TM, 3600), 60), 0), 2, '0') AS MEAL_TM
			   
			 , LPAD(FLOOR((MEAL_TM+REST_TM)/3600), 2, '0')||':'||
			   LPAD(FLOOR(MOD((MEAL_TM+REST_TM), 3600) / 60), 2, '0')||':'||
			   LPAD(ROUND(MOD(MOD((MEAL_TM+REST_TM), 3600), 60), 0), 2, '0') AS GDATA
			     
		     , LPAD(FLOOR(LOGIN_TM/3600), 2, '0')||':'||
			   LPAD(FLOOR(MOD(LOGIN_TM, 3600) / 60), 2, '0')||':'||
			   LPAD(ROUND(MOD(MOD(LOGIN_TM, 3600), 60), 0), 2, '0') AS LOGIN_TM
			   
		     , LPAD(FLOOR(AVR_RING_DRTM/3600), 2, '0')||':'||
			   LPAD(FLOOR(MOD(AVR_RING_DRTM, 3600) / 60), 2, '0')||':'||
			   LPAD(ROUND(MOD(MOD(AVR_RING_DRTM, 3600), 60), 0), 2, '0') AS AVR_RING_DRTM    
	         , ROUND(DECODE(REQ_N,0,0,INBND_N/REQ_N*100),1) AS ANSW_RATE
	         , ROUND(DECODE(INBND_N,0,0,SVC_LEVEL_N/INBND_N*100),1) AS SVC_LEVEL	   
		FROM
		(
				SELECT CASE WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NOT NULL AND QT IS NULL THEN 'US'
				            WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NULL AND QT IS NULL THEN 'PS'
				            WHEN GRP_CD IS NOT NULL AND PART_CD IS NULL AND USR_ID IS NULL AND QT IS NULL THEN 'GS'
				            WHEN GRP_CD IS NULL AND PART_CD IS NULL AND USR_ID IS NULL AND QT IS NULL THEN 'TS'
				            ELSE 'D' END AS DATA_GB
				     , CASE WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NOT NULL AND QT IS NULL THEN '(상담사소계)'
				            WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NULL AND QT IS NULL THEN '(파트소계)'||MAX(PART_CDNM)
				            WHEN GRP_CD IS NOT NULL AND PART_CD IS NULL AND USR_ID IS NULL AND QT IS NULL THEN '(그룹소계)'||MAX(GRP_CDNM)
				            WHEN GRP_CD IS NULL AND PART_CD IS NULL AND USR_ID IS NULL AND QT IS NULL THEN '합계'
				            ELSE MAX(PART_CDNM) END  AS GRP_CDNM
				     , CASE WHEN QT IS NULL THEN ''
				            ELSE MAX(USR_NM) END AS USR_NM
				     , QT
				     , SUM(INBND_N)      AS INBND_N
		             , CASE WHEN SUM(AVR_INBND_TM) > 0 THEN ROUND(SUM(AVR_INBND_TM)/SUM(AVR_INBND_TM_CNT),0) ELSE 0 END AS AVR_INBND_TM
				     , SUM(OTBND_N)      AS OTBND_N
				     , SUM(DIALING_N)      AS DIALING_N	
		             , CASE WHEN SUM(AVR_OTBND_TM) > 0 THEN ROUND(SUM(AVR_OTBND_TM)/SUM(AVR_OTBND_TM_CNT),0) ELSE 0 END AS AVR_OTBND_TM
		             , CASE WHEN SUM(TM_1) > 0 THEN ROUND(SUM(TM_1)/SUM(TM_1_CNT),0) ELSE 0 END AS TM_1
		             , CASE WHEN SUM(TM_2) > 0 THEN ROUND(SUM(TM_2)/SUM(TM_2_CNT),0) ELSE 0 END AS TM_2
		             , CASE WHEN SUM(TM_3) > 0 THEN ROUND(SUM(TM_3)/SUM(TM_3_CNT),0) ELSE 0 END AS TM_3
		             , CASE WHEN SUM(TM_4) > 0 THEN ROUND(SUM(TM_4)/SUM(TM_4_CNT),0) ELSE 0 END AS TM_4
		             , CASE WHEN SUM(TM_5) > 0 THEN ROUND(SUM(TM_5)/SUM(TM_5_CNT),0) ELSE 0 END AS TM_5
		             , CASE WHEN SUM(TM_SUM) > 0 THEN ROUND(SUM(TM_SUM)/SUM(TM_SUM_CNT),0) ELSE 0 END AS TM_SUM
		             , CASE WHEN SUM(READY_TM) > 0 THEN ROUND(SUM(READY_TM)/SUM(READY_TM_CNT),0) ELSE 0 END AS READY_TM
		             , CASE WHEN SUM(REST_TM) > 0 THEN ROUND(SUM(REST_TM)/SUM(REST_TM_CNT),0) ELSE 0 END AS REST_TM
		             , CASE WHEN SUM(MEAL_TM) > 0 THEN ROUND(SUM(MEAL_TM)/SUM(MEAL_TM_CNT),0) ELSE 0 END AS MEAL_TM
		             , CASE WHEN SUM(LOGIN_TM) > 0 THEN ROUND(SUM(LOGIN_TM)/SUM(LOGIN_TM_CNT),0) ELSE 0 END AS LOGIN_TM
		             , CASE WHEN SUM(AVR_RING_DRTM) > 0 THEN ROUND(SUM(AVR_RING_DRTM)/SUM(AVR_RING_DRTM_CNT),0) ELSE 0 END AS AVR_RING_DRTM        
		     		 , SUM(TT.REQ_N)      AS REQ_N
		     		 , SUM(TT.SVC_LEVEL_N)  AS SVC_LEVEL_N		             
				  FROM 
				     (
						SELECT T1.GRP_CD
						     , T1.PART_CD
						     , T1.GRP_CDNM
						     , T1.PART_CDNM
						     , T1.USR_ID
						     , T1.USR_NM
						     , T1.QT
				     		 , NVL(T2.INBND_HOUSE, 0)  AS INBND_N
						     , NVL(T2.AVR_INBND_TM, 0) AS AVR_INBND_TM
						     , CASE WHEN NVL(T2.AVR_INBND_TM, 0) = 0 THEN 0 ELSE 1 END AS AVR_INBND_TM_CNT
						     , NVL(T2.OTBND_HOUSE, 0)  AS OTBND_N
			     		     , NVL(T2.DIALING_NCNT, 0)  AS DIALING_N
						     , NVL(T2.AVR_OTBND_TM, 0) AS AVR_OTBND_TM				
						     , CASE WHEN NVL(T2.AVR_OTBND_TM, 0) = 0 THEN 0 ELSE 1 END AS AVR_OTBND_TM_CNT
						     , NVL(T2.TM_1, 0)    AS TM_1
						     , CASE WHEN NVL(T2.TM_1, 0) = 0 THEN 0 ELSE 1 END AS TM_1_CNT
						     , NVL(T2.TM_2, 0)    AS TM_2
						     , CASE WHEN NVL(T2.TM_2, 0) = 0 THEN 0 ELSE 1 END AS TM_2_CNT
						     , NVL(T2.TM_3, 0)    AS TM_3
						     , CASE WHEN NVL(T2.TM_3, 0) = 0 THEN 0 ELSE 1 END AS TM_3_CNT
						     , NVL(T2.TM_4, 0)    AS TM_4
						     , CASE WHEN NVL(T2.TM_4, 0) = 0 THEN 0 ELSE 1 END AS TM_4_CNT
						     , NVL(T2.TM_5, 0)    AS TM_5
						     , CASE WHEN NVL(T2.TM_5, 0) = 0 THEN 0 ELSE 1 END AS TM_5_CNT
						     , NVL(T2.TM_SUM, 0)  AS TM_SUM
						     , CASE WHEN NVL(T2.TM_SUM, 0) = 0 THEN 0 ELSE 1 END AS TM_SUM_CNT
						     , NVL(T2.READY_TM, 0)  AS READY_TM
						     , CASE WHEN NVL(T2.READY_TM, 0) = 0 THEN 0 ELSE 1 END AS READY_TM_CNT
						     , NVL(T2.REST_TM, 0)   AS REST_TM
						     , CASE WHEN NVL(T2.REST_TM, 0) = 0 THEN 0 ELSE 1 END  AS REST_TM_CNT
						     , NVL(T2.MEAL_TM, 0)   AS MEAL_TM
						     , CASE WHEN NVL(T2.MEAL_TM, 0) = 0 THEN 0 ELSE 1 END  AS MEAL_TM_CNT
						     , NVL(T2.LOGIN_TM, 0)  AS LOGIN_TM
						     , CASE WHEN NVL(T2.LOGIN_TM, 0) = 0 THEN 0 ELSE 1 END AS LOGIN_TM_CNT
					     	 , NVL(T2.AVR_RING_DRTM, 0)  AS AVR_RING_DRTM			                     
						     , CASE WHEN NVL(T2.AVR_RING_DRTM, 0) = 0 THEN 0 ELSE 1 END AS AVR_RING_DRTM_CNT
				     		 , NVL(T2.REQ_N, 0)  AS REQ_N
				     		 , NVL(T2.SVC_LEVEL_N, 0)  AS SVC_LEVEL_N						     
						FROM 
						(
							SELECT A.GRP_CD
					     		, A.PART_CD
					     		, B.GRP_CDNM
					     		, C.PART_CDNM
					     		, A.USR_ID
					     		, A.USR_NM
					     		, D.QT
					  		FROM TBL_USR A
					     		, TBL_GRP_CD B
					     		, TBL_PART_CD C
					     		, ( SELECT #std_year#||'Q1' AS QT FROM DUAL
                            		UNION
                            		SELECT #std_year#||'Q2' AS QT FROM DUAL
                            		UNION
                            		SELECT #std_year#||'Q3' AS QT FROM DUAL
                            		UNION
                            		SELECT #std_year#||'Q4' AS QT FROM DUAL) D
					 		WHERE A.GRP_CD  = B.GRP_CD
					   		  AND A.PART_CD = C.PART_CD
							<isNotEmpty property="grp_cd">
					    	  AND A.GRP_CD = #grp_cd#
					   		</isNotEmpty>
					   		<isNotEmpty property="part_cd">
					    	   AND A.PART_CD = #part_cd#
					   		</isNotEmpty>
					   		<isNotEmpty property="usr_id">
					    	   AND A.USR_ID = #usr_id#
					   		</isNotEmpty>
					   		<!-- 퇴사자도 통계에 포함되게 변경 -->
					   		AND (A.QUAL_LOSS_DD IS NULL OR (A.QUAL_LOSS_DD > #std_year# || '01' OR A.QUAL_LOSS_DD = #std_year# || '01' ))
					   		<!-- AND A.CTI_USE_YN = 'Y' -->
							ORDER BY A.GRP_CD, A.PART_CD, A.USR_ID, D.QT
							) T1,
							(
							SELECT TIME_KEY AS QT
							     , USR_ID
							     , INBND_HOUSE
							     , CASE WHEN INBND_HOUSE = 0 THEN 0
							            ELSE ROUND(INBND_DRTM / INBND_HOUSE, 1)
							            END  AS AVR_INBND_TM
							     , OTBND_HOUSE
							     , DIALING_NCNT
							     , CASE WHEN OTBND_HOUSE = 0 THEN 0
							            ELSE ROUND(OTBND_DRTM / OTBND_HOUSE, 1)
							            END  AS AVR_OTBND_TM
							     , AF_PROC_DRTM       AS TM_1
							     , CLE_SEAT_DRTM_EML  AS TM_2
							     , CLE_SEAT_DRTM_DSFT AS TM_3
							     , CLE_SEAT_DRTM_COCH AS TM_4
							     , CLE_SEAT_DRTM_EDU  AS TM_5
							     , AF_PROC_DRTM + CLE_SEAT_DRTM_EML + CLE_SEAT_DRTM_DSFT + CLE_SEAT_DRTM_COCH + CLE_SEAT_DRTM_EDU AS TM_SUM
							     , TOT_LRGEXST_DRTM   AS READY_TM
							     , CLE_SEAT_DRTM_REST AS REST_TM
							     , CLE_SEAT_DRTM_MEAL AS MEAL_TM
							     , WKG_DRTM           AS LOGIN_TM
			        			 , CASE WHEN TEL_RING_DRTM = 0 THEN 0  ELSE ROUND(TEL_RING_DRTM / TEL_RING_NCNT, 1) END  AS AVR_RING_DRTM  
 			                     , REQ_NCNT AS REQ_N                               
			                     , SEC20_IN_CNNT_NCNT AS SVC_LEVEL_N  							     
							  FROM TBL_BT_CTI_RPT_QT
					 		 WHERE TIME_KEY BETWEEN #std_year#||'Q1' AND #std_year#||'Q4'
							ORDER BY USR_ID
							) T2
						WHERE T1.USR_ID = T2.USR_ID(+)
						  AND T1.QT     = T2.QT(+)
						ORDER BY T1.GRP_CD, T1.PART_CD, T1.USR_ID, T1.QT
				    ) TT
				    GROUP BY ROLLUP(GRP_CD, PART_CD, USR_ID, QT)
		)
		WHERE DATA_GB IN ('D','US','PS','GS','TS')
	</select>

<!--  상담사별 콜 통계 (분기) -->
 	<select id="Get_AgentMailStat_QT_SELECT" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
		SELECT DATA_GB
		     , GRP_CDNM
		     , USR_NM
		     , CASE WHEN QT IS NULL THEN '' ELSE QT END AS BASC_DT
		     , CASE WHEN QT IS NULL THEN '' ELSE SUBSTR(QT,1,4)||'년'||SUBSTR(QT,6,1)||'분기' END AS DAY_NM
		     , NVL(Q,0) AS Q 
		     , NVL(Q1,0) AS Q1
		     , NVL(CEIL((Q1/Q)*100),0)||'%'  AS SUCC
		FROM
		(
				SELECT CASE WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NOT NULL AND QT IS NULL THEN 'US'
				            WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NULL AND QT IS NULL THEN 'PS'
				            WHEN GRP_CD IS NOT NULL AND PART_CD IS NULL AND USR_ID IS NULL AND QT IS NULL THEN 'GS'
				            WHEN GRP_CD IS NULL AND PART_CD IS NULL AND USR_ID IS NULL AND QT IS NULL THEN 'TS'
				            ELSE 'D' END AS DATA_GB
				     , CASE WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NOT NULL AND QT IS NULL THEN '(상담사소계)'
				            WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NULL AND QT IS NULL THEN '(파트소계)'||MAX(PART_CDNM)
				            WHEN GRP_CD IS NOT NULL AND PART_CD IS NULL AND USR_ID IS NULL AND QT IS NULL THEN '(그룹소계)'||MAX(GRP_CDNM)
				            WHEN GRP_CD IS NULL AND PART_CD IS NULL AND USR_ID IS NULL AND QT IS NULL THEN '합계'
				            ELSE MAX(PART_CDNM) END  AS GRP_CDNM
				     , CASE WHEN QT IS NULL THEN ''
				            ELSE MAX(USR_NM) END AS USR_NM
				     , QT
				    , SUM(Q) AS Q
				    , SUM(Q1) AS Q1	             
				  FROM 
				     (
						SELECT T1.GRP_CD
						     , T1.PART_CD
						     , T1.GRP_CDNM
						     , T1.PART_CDNM
						     , T1.USR_ID
						     , T1.USR_NM
						     , T1.QT
				     		 , T2.Q	
				     		 , T2.Q1			     
						FROM 
						(
							SELECT A.GRP_CD
					     		, A.PART_CD
					     		, B.GRP_CDNM
					     		, C.PART_CDNM
					     		, A.USR_ID
					     		, A.USR_NM
					     		, D.QT
					  		FROM TBL_USR A
					     		, TBL_GRP_CD B
					     		, TBL_PART_CD C
					     		, ( SELECT #std_year#||'Q1' AS QT FROM DUAL
                            		UNION
                            		SELECT #std_year#||'Q2' AS QT FROM DUAL
                            		UNION
                            		SELECT #std_year#||'Q3' AS QT FROM DUAL
                            		UNION
                            		SELECT #std_year#||'Q4' AS QT FROM DUAL) D
					 		WHERE A.GRP_CD  = B.GRP_CD
					   		  AND A.PART_CD = C.PART_CD
							<isNotEmpty property="grp_cd">
					    	  AND A.GRP_CD = #grp_cd#
					   		</isNotEmpty>
					   		<isNotEmpty property="part_cd">
					    	   AND A.PART_CD = #part_cd#
					   		</isNotEmpty>
					   		<isNotEmpty property="usr_id">
					    	   AND A.USR_ID = #usr_id#
					   		</isNotEmpty>
					   		<!-- 퇴사자도 통계에 포함되게 변경 -->
					   		AND (A.QUAL_LOSS_DD IS NULL OR SUBSTR(A.QUAL_LOSS_DD,0,4) = #std_year# )
					   		<!-- AND A.CTI_USE_YN = 'Y' -->
							ORDER BY A.GRP_CD, A.PART_CD, A.USR_ID, D.QT
							) T1,
							(
							SELECT (#std_year#||'Q1') AS QT,ASGN_CNSLR_ID ,SUM(CASE WHEN SUBSTR(PROC_DTM,5,2) <![CDATA[<]]> '04' THEN 1 END) AS Q  ,SUM(CASE WHEN SUBSTR(PROC_DTM,5,2) <![CDATA[<]]>  '04' AND PROC_ST_CD = 'Y' THEN 1 END) AS Q1 FROM TBL_EML_ASGN_LOG WHERE  SUBSTR(PROC_DTM,0,4 )=  #std_year# AND RSV_SEQ_NO like 'CAM080%'  GROUP BY ASGN_CNSLR_ID
                                UNION  
                                SELECT (#std_year#||'Q2') AS QT,ASGN_CNSLR_ID ,SUM(CASE WHEN SUBSTR(PROC_DTM,5,2) <![CDATA[>]]>  '03' AND SUBSTR(PROC_DTM,5,2) <![CDATA[<]]>  '07' THEN 1 END) AS Q ,SUM(CASE WHEN SUBSTR(PROC_DTM,5,2) <![CDATA[>]]> '03' AND SUBSTR(PROC_DTM,5,2) <![CDATA[<]]>  '07' AND PROC_ST_CD = 'Y' THEN 1 END) AS Q1  FROM TBL_EML_ASGN_LOG WHERE SUBSTR(PROC_DTM,0,4 )=  #std_year# AND RSV_SEQ_NO like 'CAM080%'  GROUP BY ASGN_CNSLR_ID
                                UNION
                                SELECT (#std_year#||'Q3') AS QT,ASGN_CNSLR_ID ,SUM(CASE WHEN SUBSTR(PROC_DTM,5,2) <![CDATA[>]]>  '06' AND SUBSTR(PROC_DTM,5,2) <![CDATA[<]]> '10' THEN 1 END) AS Q,SUM(CASE WHEN SUBSTR(PROC_DTM,5,2) <![CDATA[>]]>  '06' AND SUBSTR(PROC_DTM,5,2) <![CDATA[<]]> '10' AND PROC_ST_CD = 'Y' THEN 1 END) AS Q1 FROM TBL_EML_ASGN_LOG WHERE  SUBSTR(PROC_DTM,0,4 )=  #std_year# AND RSV_SEQ_NO like 'CAM080%' GROUP BY ASGN_CNSLR_ID
                                UNION
                                SELECT (#std_year#||'Q4') AS QT,ASGN_CNSLR_ID ,SUM(CASE WHEN SUBSTR(PROC_DTM,5,2) <![CDATA[>]]>  '09' AND SUBSTR(PROC_DTM,5,2) <![CDATA[<]]> '13' THEN 1 END) AS Q,SUM(CASE WHEN SUBSTR(PROC_DTM,5,2) <![CDATA[>]]>  '09' AND SUBSTR(PROC_DTM,5,2) <![CDATA[<]]> '13' AND PROC_ST_CD = 'Y' THEN 1 END) AS Q1  FROM TBL_EML_ASGN_LOG WHERE  SUBSTR(PROC_DTM,0,4 )=  #std_year# AND RSV_SEQ_NO like 'CAM080%' GROUP BY ASGN_CNSLR_ID
							) T2
						WHERE T1.USR_ID = T2.ASGN_CNSLR_ID(+)
						  AND T1.QT     = T2.QT(+)
						ORDER BY T1.GRP_CD, T1.PART_CD, T1.USR_ID, T1.QT
				    ) TT
				    GROUP BY ROLLUP(GRP_CD, PART_CD, USR_ID, QT)
		)
		WHERE DATA_GB IN ('D','US','PS','GS','TS')
	</select>	
	
	<!--  상담사별 콜백 통계 (분기) -->
 	<select id="Get_AgentCBStat_QT_SELECT" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
		SELECT DATA_GB
             , GRP_CDNM
             , USR_NM
             , CASE WHEN QT IS NULL THEN '' ELSE QT END AS BASC_DT
             , CASE WHEN QT IS NULL THEN '' ELSE SUBSTR(QT,1,4)||'년'||SUBSTR(QT,6,1)||'분기' END AS DAY_NM
			 , NVL(Q,0) AS Q
             , NVL(ETC1,0) AS ETC1
             , NVL(ETC2,0) AS ETC2
             , NVL(ETC3,0) AS ETC3
             , NVL(ETC4,0) AS ETC4
             , NVL(ETC5,0) AS ETC5
             , NVL(ETC6,0) AS ETC6
             , NVL(ETC7,0) AS ETC7
             , NVL(ETC8,0) AS ETC8 
        FROM
        (
                SELECT CASE WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NOT NULL AND QT IS NULL THEN 'US'
                            WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NULL AND QT IS NULL THEN 'PS'
                            WHEN GRP_CD IS NOT NULL AND PART_CD IS NULL AND USR_ID IS NULL AND QT IS NULL THEN 'GS'
                            WHEN GRP_CD IS NULL AND PART_CD IS NULL AND USR_ID IS NULL AND QT IS NULL THEN 'TS'
                            ELSE 'D' END AS DATA_GB
                     , CASE WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NOT NULL AND QT IS NULL THEN '(상담사소계)'
                            WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NULL AND QT IS NULL THEN '(파트소계)'||MAX(PART_CDNM)
                            WHEN GRP_CD IS NOT NULL AND PART_CD IS NULL AND USR_ID IS NULL AND QT IS NULL THEN '(그룹소계)'||MAX(GRP_CDNM)
                            WHEN GRP_CD IS NULL AND PART_CD IS NULL AND USR_ID IS NULL AND QT IS NULL THEN '합계'
                            ELSE MAX(PART_CDNM) END  AS GRP_CDNM
                     , CASE WHEN QT IS NULL THEN ''
                            ELSE MAX(USR_NM) END AS USR_NM
                     , QT
                    , SUM(Q) AS Q
                    , SUM(ETC1) AS ETC1
                    , SUM(ETC2) AS ETC2
                    , SUM(ETC3) AS ETC3
                    , SUM(ETC4) AS ETC4
                    , SUM(ETC5) AS ETC5
                    , SUM(ETC6) AS ETC6
                    , SUM(ETC7) AS ETC7
                    , SUM(ETC8) AS ETC8                 
                  FROM 
                     (
                        SELECT T1.GRP_CD
                             , T1.PART_CD
                             , T1.GRP_CDNM
                             , T1.PART_CDNM
                             , T1.USR_ID
                             , T1.USR_NM
                             , T1.QT
                             , T2.Q                             
                             , T2.ETC1
                             , T2.ETC2
                             , T2.ETC3
                             , T2.ETC4
                             , T2.ETC5
                             , T2.ETC6
                             , T2.ETC7
                             , T2.ETC8                                             
                        FROM 
                        (
                            SELECT A.GRP_CD
                                 , A.PART_CD
                                 , B.GRP_CDNM
                                 , C.PART_CDNM
                                 , A.USR_ID
                                 , A.USR_NM
                                 , D.QT
                              FROM TBL_USR A
                                 , TBL_GRP_CD B
                                 , TBL_PART_CD C
                                 , ( SELECT #std_year#||'Q1' AS QT FROM DUAL
                                    UNION
                                    SELECT #std_year#||'Q2' AS QT FROM DUAL
                                    UNION
                                    SELECT #std_year#||'Q3' AS QT FROM DUAL
                                    UNION
                                    SELECT #std_year#||'Q4' AS QT FROM DUAL) D
                             WHERE A.GRP_CD  = B.GRP_CD
                                 AND A.PART_CD = C.PART_CD
                            <isNotEmpty property="grp_cd">
                              AND A.GRP_CD = #grp_cd#
                               </isNotEmpty>
                               <isNotEmpty property="part_cd">
                               AND A.PART_CD = #part_cd#
                               </isNotEmpty>
                               <isNotEmpty property="usr_id">
                               AND A.USR_ID = #usr_id#
                               </isNotEmpty>
                               <!-- 퇴사자도 통계에 포함되게 변경 -->
                               AND (A.QUAL_LOSS_DD IS NULL OR SUBSTR(A.QUAL_LOSS_DD,0,4) = #std_year# )
                               <!-- AND A.CTI_USE_YN = 'Y' -->
                            ORDER BY A.GRP_CD, A.PART_CD, A.USR_ID, D.QT
                            ) T1,
                            (
                            SELECT (#std_year# ||'Q1') AS QT,
                                    ASSGN_ID ,    
                                    COUNT(*) AS Q,                                
                                    SUM(CASE WHEN SUBSTR(PROC_DT,5,2) <![CDATA[<]]>  '04' AND CUR_TYP_CD = '01' THEN 1 END) AS ETC1,
                                    SUM(CASE WHEN SUBSTR(PROC_DT,5,2) <![CDATA[<]]>  '04' AND CUR_TYP_CD = '22' THEN 1 END) AS ETC2,
                                    SUM(CASE WHEN SUBSTR(PROC_DT,5,2) <![CDATA[<]]>  '04' AND CUR_TYP_CD = '21' THEN 1 END) AS ETC3,
                                    SUM(CASE WHEN SUBSTR(PROC_DT,5,2) <![CDATA[<]]>  '04' AND CUR_TYP_CD = '13' THEN 1 END) AS ETC4,
                                    SUM(CASE WHEN SUBSTR(PROC_DT,5,2) <![CDATA[<]]>  '04' AND CUR_TYP_CD = '12' THEN 1 END) AS ETC5,
                                    SUM(CASE WHEN SUBSTR(PROC_DT,5,2) <![CDATA[<]]>  '04' AND CUR_TYP_CD = '11' THEN 1 END) AS ETC6,
                                    SUM(CASE WHEN SUBSTR(PROC_DT,5,2) <![CDATA[<]]>  '04' AND CUR_TYP_CD = '99' THEN 1 END) AS ETC7,
                                    SUM(CASE WHEN SUBSTR(PROC_DT,5,2) <![CDATA[<]]>  '04' AND CUR_TYP_CD = '23' THEN 1 END) AS ETC8                 
                                FROM TBL_CALLBACK_HIST 
                                WHERE 1=1  
                                AND SUBSTR(PROC_DT,0,4 )=  #std_year#         
                                GROUP BY ASSGN_ID
                                UNION
                                SELECT (#std_year# ||'Q2') AS QT,
                                    ASSGN_ID ,         
                                    COUNT(*) AS Q,                           
                                    SUM(CASE WHEN SUBSTR(PROC_DT,5,2) <![CDATA[>]]> '04' AND SUBSTR(PROC_DT,5,2)<![CDATA[>]]> '07' AND CUR_TYP_CD = '01' THEN 1 END) AS ETC1,
                                    SUM(CASE WHEN SUBSTR(PROC_DT,5,2) <![CDATA[>]]> '04' AND SUBSTR(PROC_DT,5,2) <![CDATA[>]]> '07' AND CUR_TYP_CD = '22' THEN 1 END) AS ETC2,
                                    SUM(CASE WHEN SUBSTR(PROC_DT,5,2) <![CDATA[>]]> '04' AND SUBSTR(PROC_DT,5,2) <![CDATA[>]]> '07' AND CUR_TYP_CD = '21' THEN 1 END) AS ETC3,
                                    SUM(CASE WHEN SUBSTR(PROC_DT,5,2) <![CDATA[>]]> '04' AND SUBSTR(PROC_DT,5,2)<![CDATA[>]]> '07' AND CUR_TYP_CD = '13' THEN 1 END) AS ETC4,
                                    SUM(CASE WHEN SUBSTR(PROC_DT,5,2) <![CDATA[>]]> '04' AND SUBSTR(PROC_DT,5,2) <![CDATA[>]]> '07' AND CUR_TYP_CD = '12' THEN 1 END) AS ETC5,
                                    SUM(CASE WHEN SUBSTR(PROC_DT,5,2) <![CDATA[>]]> '04' AND SUBSTR(PROC_DT,5,2) <![CDATA[>]]> '07' AND CUR_TYP_CD = '11' THEN 1 END) AS ETC6,
                                    SUM(CASE WHEN SUBSTR(PROC_DT,5,2) <![CDATA[>]]> '04' AND SUBSTR(PROC_DT,5,2) <![CDATA[>]]> '07' AND CUR_TYP_CD = '99' THEN 1 END) AS ETC7,
                                    SUM(CASE WHEN SUBSTR(PROC_DT,5,2) <![CDATA[>]]> '04' AND SUBSTR(PROC_DT,5,2) <![CDATA[>]]> '07' AND CUR_TYP_CD = '23' THEN 1 END) AS ETC8                 
                                FROM TBL_CALLBACK_HIST 
                                WHERE 1=1  
                                AND SUBSTR(PROC_DT,0,4 )=  #std_year#          
                                GROUP BY ASSGN_ID
                                UNION
                                SELECT (#std_year# ||'Q3') AS QT,
                                    ASSGN_ID ,                     
                                    COUNT(*) AS Q,               
                                    SUM(CASE WHEN SUBSTR(PROC_DT,5,2) <![CDATA[>]]> '06' AND SUBSTR(PROC_DT,5,2) <![CDATA[>]]> '10' AND CUR_TYP_CD = '01' THEN 1 END) AS ETC1,
                                    SUM(CASE WHEN SUBSTR(PROC_DT,5,2) <![CDATA[>]]> '06' AND SUBSTR(PROC_DT,5,2) <![CDATA[>]]> '10' AND CUR_TYP_CD = '22' THEN 1 END) AS ETC2,
                                    SUM(CASE WHEN SUBSTR(PROC_DT,5,2) <![CDATA[>]]> '06' AND SUBSTR(PROC_DT,5,2) <![CDATA[>]]> '10' AND CUR_TYP_CD = '21' THEN 1 END) AS ETC3,
                                    SUM(CASE WHEN SUBSTR(PROC_DT,5,2) <![CDATA[>]]> '06' AND SUBSTR(PROC_DT,5,2) <![CDATA[>]]> '10' AND CUR_TYP_CD = '13' THEN 1 END) AS ETC4,
                                    SUM(CASE WHEN SUBSTR(PROC_DT,5,2) <![CDATA[>]]> '06' AND SUBSTR(PROC_DT,5,2) <![CDATA[>]]> '10' AND CUR_TYP_CD = '12' THEN 1 END) AS ETC5,
                                    SUM(CASE WHEN SUBSTR(PROC_DT,5,2) <![CDATA[>]]> '06' AND SUBSTR(PROC_DT,5,2)<![CDATA[>]]> '10' AND CUR_TYP_CD = '11' THEN 1 END) AS ETC6,
                                    SUM(CASE WHEN SUBSTR(PROC_DT,5,2) <![CDATA[>]]> '06' AND SUBSTR(PROC_DT,5,2) <![CDATA[>]]> '10' AND CUR_TYP_CD = '99' THEN 1 END) AS ETC7,
                                    SUM(CASE WHEN SUBSTR(PROC_DT,5,2) <![CDATA[>]]> '06' AND SUBSTR(PROC_DT,5,2) <![CDATA[>]]> '10' AND CUR_TYP_CD = '23' THEN 1 END) AS ETC8                 
                                FROM TBL_CALLBACK_HIST 
                                WHERE 1=1  
                                AND SUBSTR(PROC_DT,0,4 )=  #std_year#          
                                GROUP BY ASSGN_ID
                                UNION
                                SELECT (#std_year# ||'Q4') AS QT,
                                    ASSGN_ID , 
                                    COUNT(*) AS Q,                                   
                                    SUM(CASE WHEN SUBSTR(PROC_DT,5,2) <![CDATA[>]]> '09' AND SUBSTR(PROC_DT,5,2) <![CDATA[>]]> '13' AND CUR_TYP_CD = '01' THEN 1 END) AS ETC1,
                                    SUM(CASE WHEN SUBSTR(PROC_DT,5,2) <![CDATA[>]]> '09' AND SUBSTR(PROC_DT,5,2) <![CDATA[>]]> '13' AND CUR_TYP_CD = '22' THEN 1 END) AS ETC2,
                                    SUM(CASE WHEN SUBSTR(PROC_DT,5,2) <![CDATA[>]]> '09' AND SUBSTR(PROC_DT,5,2) <![CDATA[>]]> '13' AND CUR_TYP_CD = '21' THEN 1 END) AS ETC3,
                                    SUM(CASE WHEN SUBSTR(PROC_DT,5,2) <![CDATA[>]]> '09' AND SUBSTR(PROC_DT,5,2) <![CDATA[>]]> '13' AND CUR_TYP_CD = '13' THEN 1 END) AS ETC4,
                                    SUM(CASE WHEN SUBSTR(PROC_DT,5,2) <![CDATA[>]]> '09' AND SUBSTR(PROC_DT,5,2) <![CDATA[>]]> '13' AND CUR_TYP_CD = '12' THEN 1 END) AS ETC5,
                                    SUM(CASE WHEN SUBSTR(PROC_DT,5,2) <![CDATA[>]]> '09' AND SUBSTR(PROC_DT,5,2) <![CDATA[>]]> '13' AND CUR_TYP_CD = '11' THEN 1 END) AS ETC6,
                                    SUM(CASE WHEN SUBSTR(PROC_DT,5,2) <![CDATA[>]]> '09' AND SUBSTR(PROC_DT,5,2) <![CDATA[>]]> '13' AND CUR_TYP_CD = '99' THEN 1 END) AS ETC7,
                                    SUM(CASE WHEN SUBSTR(PROC_DT,5,2) <![CDATA[>]]> '09' AND SUBSTR(PROC_DT,5,2) <![CDATA[>]]> '13' AND CUR_TYP_CD = '23' THEN 1 END) AS ETC8                 
                                FROM TBL_CALLBACK_HIST 
                                WHERE 1=1  
                                AND SUBSTR(PROC_DT,0,4 )=  #std_year#    
                                GROUP BY ASSGN_ID
                            ) T2
                        WHERE T1.USR_ID = T2.ASSGN_ID(+)
                          AND T1.QT     = T2.QT(+)
                        ORDER BY T1.GRP_CD, T1.PART_CD, T1.USR_ID, T1.QT
                    ) TT
                    GROUP BY ROLLUP(GRP_CD, PART_CD, USR_ID, QT)
        )
        WHERE DATA_GB IN ('D','US','PS','GS','TS')     
	</select>	
	
	
	
<!--  상담사별 콜 통계 (년도별) -->
 	<select id="Get_AgentCallStat_YR_SELECT" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
		SELECT DATA_GB
		     , GRP_CDNM
		     , USR_NM
		     , CASE WHEN YR IS NULL THEN '' ELSE YR END AS BASC_DT
		     , CASE WHEN YR IS NULL THEN '' ELSE YR||'년' END AS DAY_NM
		     , INBND_N
		     , LPAD(FLOOR(AVR_INBND_TM/3600), 2, '0')||':'||
			   LPAD(FLOOR(MOD(AVR_INBND_TM, 3600) / 60), 2, '0')||':'||
			   LPAD(ROUND(MOD(MOD(AVR_INBND_TM, 3600), 60), 0), 2, '0') AS AVR_INBND_TM
		     , OTBND_N
		     , DIALING_N
		     , LPAD(FLOOR(AVR_OTBND_TM/3600), 2, '0')||':'||
			   LPAD(FLOOR(MOD(AVR_OTBND_TM, 3600) / 60), 2, '0')||':'||
			   LPAD(ROUND(MOD(MOD(AVR_OTBND_TM, 3600), 60), 0), 2, '0') AS AVR_OTBND_TM
		     , LPAD(FLOOR(TM_1/3600), 2, '0')||':'||
			   LPAD(FLOOR(MOD(TM_1, 3600) / 60), 2, '0')||':'||
			   LPAD(ROUND(MOD(MOD(TM_1, 3600), 60), 0), 2, '0') AS TM_1
		     , LPAD(FLOOR(TM_2/3600), 2, '0')||':'||
			   LPAD(FLOOR(MOD(TM_2, 3600) / 60), 2, '0')||':'||
			   LPAD(ROUND(MOD(MOD(TM_2, 3600), 60), 0), 2, '0') AS TM_2
		     , LPAD(FLOOR(TM_3/3600), 2, '0')||':'||
			   LPAD(FLOOR(MOD(TM_3, 3600) / 60), 2, '0')||':'||
			   LPAD(ROUND(MOD(MOD(TM_3, 3600), 60), 0), 2, '0') AS TM_3
		     , LPAD(FLOOR(TM_4/3600), 2, '0')||':'||
			   LPAD(FLOOR(MOD(TM_4, 3600) / 60), 2, '0')||':'||
			   LPAD(ROUND(MOD(MOD(TM_4, 3600), 60), 0), 2, '0') AS TM_4
		     , LPAD(FLOOR(TM_5/3600), 2, '0')||':'||
			   LPAD(FLOOR(MOD(TM_5, 3600) / 60), 2, '0')||':'||
			   LPAD(ROUND(MOD(MOD(TM_5, 3600), 60), 0), 2, '0') AS TM_5
		     , LPAD(FLOOR(TM_SUM/3600), 2, '0')||':'||
			   LPAD(FLOOR(MOD(TM_SUM, 3600) / 60), 2, '0')||':'||
			   LPAD(ROUND(MOD(MOD(TM_SUM, 3600), 60), 0), 2, '0') AS TM_SUM
		     , LPAD(FLOOR(READY_TM/3600), 2, '0')||':'||
			   LPAD(FLOOR(MOD(READY_TM, 3600) / 60), 2, '0')||':'||
			   LPAD(ROUND(MOD(MOD(READY_TM, 3600), 60), 0), 2, '0') AS READY_TM
		     , LPAD(FLOOR(REST_TM/3600), 2, '0')||':'||
			   LPAD(FLOOR(MOD(REST_TM, 3600) / 60), 2, '0')||':'||
			   LPAD(ROUND(MOD(MOD(REST_TM, 3600), 60), 0), 2, '0') AS REST_TM
		     , LPAD(FLOOR(MEAL_TM/3600), 2, '0')||':'||
			   LPAD(FLOOR(MOD(MEAL_TM, 3600) / 60), 2, '0')||':'||
			   LPAD(ROUND(MOD(MOD(MEAL_TM, 3600), 60), 0), 2, '0') AS MEAL_TM
			   
			   , LPAD(FLOOR((MEAL_TM+REST_TM)/3600), 2, '0')||':'||
			   LPAD(FLOOR(MOD((MEAL_TM+REST_TM), 3600) / 60), 2, '0')||':'||
			   LPAD(ROUND(MOD(MOD((MEAL_TM+REST_TM), 3600), 60), 0), 2, '0') AS GDATA
			   
		     , LPAD(FLOOR(LOGIN_TM/3600), 2, '0')||':'||
			   LPAD(FLOOR(MOD(LOGIN_TM, 3600) / 60), 2, '0')||':'||
			   LPAD(ROUND(MOD(MOD(LOGIN_TM, 3600), 60), 0), 2, '0') AS LOGIN_TM
			   
		     , LPAD(FLOOR(AVR_RING_DRTM/3600), 2, '0')||':'||
			   LPAD(FLOOR(MOD(AVR_RING_DRTM, 3600) / 60), 2, '0')||':'||
			   LPAD(ROUND(MOD(MOD(AVR_RING_DRTM, 3600), 60), 0), 2, '0') AS AVR_RING_DRTM    
	         , ROUND(DECODE(REQ_N,0,0,INBND_N/REQ_N*100),1) AS ANSW_RATE
	         , ROUND(DECODE(INBND_N,0,0,SVC_LEVEL_N/INBND_N*100),1) AS SVC_LEVEL		   
		FROM
		(
				SELECT CASE WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NOT NULL AND YR IS NULL THEN 'US'
				            WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NULL AND YR IS NULL THEN 'PS'
				            WHEN GRP_CD IS NOT NULL AND PART_CD IS NULL AND USR_ID IS NULL AND YR IS NULL THEN 'GS'
				            WHEN GRP_CD IS NULL AND PART_CD IS NULL AND USR_ID IS NULL AND YR IS NULL THEN 'TS'
				            ELSE 'D' END AS DATA_GB
				     , CASE WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NOT NULL AND YR IS NULL THEN '(상담사소계)'
				            WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NULL AND YR IS NULL THEN '(파트소계)'||MAX(PART_CDNM)
				            WHEN GRP_CD IS NOT NULL AND PART_CD IS NULL AND USR_ID IS NULL AND YR IS NULL THEN '(그룹소계)'||MAX(GRP_CDNM)
				            WHEN GRP_CD IS NULL AND PART_CD IS NULL AND USR_ID IS NULL AND YR IS NULL THEN '합계'
				            ELSE MAX(PART_CDNM) END  AS GRP_CDNM
				     , CASE WHEN YR IS NULL THEN ''
				            ELSE MAX(USR_NM) END AS USR_NM
				     , YR
				     , SUM(INBND_N)      AS INBND_N
		             , CASE WHEN SUM(AVR_INBND_TM) > 0 THEN ROUND(SUM(AVR_INBND_TM)/SUM(AVR_INBND_TM_CNT),0) ELSE 0 END AS AVR_INBND_TM
				     , SUM(OTBND_N)      AS OTBND_N
				     , SUM(DIALING_N)   AS DIALING_N
		             , CASE WHEN SUM(AVR_OTBND_TM) > 0 THEN ROUND(SUM(AVR_OTBND_TM)/SUM(AVR_OTBND_TM_CNT),0) ELSE 0 END AS AVR_OTBND_TM
		             , CASE WHEN SUM(TM_1) > 0 THEN ROUND(SUM(TM_1)/SUM(TM_1_CNT),0) ELSE 0 END AS TM_1
		             , CASE WHEN SUM(TM_2) > 0 THEN ROUND(SUM(TM_2)/SUM(TM_2_CNT),0) ELSE 0 END AS TM_2
		             , CASE WHEN SUM(TM_3) > 0 THEN ROUND(SUM(TM_3)/SUM(TM_3_CNT),0) ELSE 0 END AS TM_3
		             , CASE WHEN SUM(TM_4) > 0 THEN ROUND(SUM(TM_4)/SUM(TM_4_CNT),0) ELSE 0 END AS TM_4
		             , CASE WHEN SUM(TM_5) > 0 THEN ROUND(SUM(TM_5)/SUM(TM_5_CNT),0) ELSE 0 END AS TM_5
		             , CASE WHEN SUM(TM_SUM) > 0 THEN ROUND(SUM(TM_SUM)/SUM(TM_SUM_CNT),0) ELSE 0 END AS TM_SUM
		             , CASE WHEN SUM(READY_TM) > 0 THEN ROUND(SUM(READY_TM)/SUM(READY_TM_CNT),0) ELSE 0 END AS READY_TM
		             , CASE WHEN SUM(REST_TM) > 0 THEN ROUND(SUM(REST_TM)/SUM(REST_TM_CNT),0) ELSE 0 END AS REST_TM
		             , CASE WHEN SUM(MEAL_TM) > 0 THEN ROUND(SUM(MEAL_TM)/SUM(MEAL_TM_CNT),0) ELSE 0 END AS MEAL_TM
		             , CASE WHEN SUM(LOGIN_TM) > 0 THEN ROUND(SUM(LOGIN_TM)/SUM(LOGIN_TM_CNT),0) ELSE 0 END AS LOGIN_TM
		             , CASE WHEN SUM(AVR_RING_DRTM) > 0 THEN ROUND(SUM(AVR_RING_DRTM)/SUM(AVR_RING_DRTM_CNT),0) ELSE 0 END AS AVR_RING_DRTM        
		     		 , SUM(TT.REQ_N)      AS REQ_N
		     		 , SUM(TT.SVC_LEVEL_N)  AS SVC_LEVEL_N		             
				  FROM 
				     (
						SELECT T1.GRP_CD
						     , T1.PART_CD
						     , T1.GRP_CDNM
						     , T1.PART_CDNM
						     , T1.USR_ID
						     , T1.USR_NM
						     , T1.YR
				     		 , NVL(T2.INBND_HOUSE, 0)  AS INBND_N
						     , NVL(T2.AVR_INBND_TM, 0) AS AVR_INBND_TM
						     , CASE WHEN NVL(T2.AVR_INBND_TM, 0) = 0 THEN 0 ELSE 1 END AS AVR_INBND_TM_CNT
						     , NVL(T2.OTBND_HOUSE, 0)  AS OTBND_N
						     , NVL(T2.DIALING_NCNT, 0)  AS DIALING_N
						     , NVL(T2.AVR_OTBND_TM, 0) AS AVR_OTBND_TM
						     , CASE WHEN NVL(T2.AVR_OTBND_TM, 0) = 0 THEN 0 ELSE 1 END AS AVR_OTBND_TM_CNT
						     , NVL(T2.TM_1, 0)    AS TM_1
						     , CASE WHEN NVL(T2.TM_1, 0) = 0 THEN 0 ELSE 1 END AS TM_1_CNT
						     , NVL(T2.TM_2, 0)    AS TM_2
						     , CASE WHEN NVL(T2.TM_2, 0) = 0 THEN 0 ELSE 1 END AS TM_2_CNT
						     , NVL(T2.TM_3, 0)    AS TM_3
						     , CASE WHEN NVL(T2.TM_3, 0) = 0 THEN 0 ELSE 1 END AS TM_3_CNT
						     , NVL(T2.TM_4, 0)    AS TM_4
						     , CASE WHEN NVL(T2.TM_4, 0) = 0 THEN 0 ELSE 1 END AS TM_4_CNT
						     , NVL(T2.TM_5, 0)    AS TM_5
						     , CASE WHEN NVL(T2.TM_5, 0) = 0 THEN 0 ELSE 1 END AS TM_5_CNT
						     , NVL(T2.TM_SUM, 0)  AS TM_SUM
						     , CASE WHEN NVL(T2.TM_SUM, 0) = 0 THEN 0 ELSE 1 END AS TM_SUM_CNT
						     , NVL(T2.READY_TM, 0)  AS READY_TM
						     , CASE WHEN NVL(T2.READY_TM, 0) = 0 THEN 0 ELSE 1 END AS READY_TM_CNT
						     , NVL(T2.REST_TM, 0)   AS REST_TM
						     , CASE WHEN NVL(T2.REST_TM, 0) = 0 THEN 0 ELSE 1 END  AS REST_TM_CNT
						     , NVL(T2.MEAL_TM, 0)   AS MEAL_TM
						     , CASE WHEN NVL(T2.MEAL_TM, 0) = 0 THEN 0 ELSE 1 END  AS MEAL_TM_CNT
						     , NVL(T2.LOGIN_TM, 0)  AS LOGIN_TM
						     , CASE WHEN NVL(T2.LOGIN_TM, 0) = 0 THEN 0 ELSE 1 END AS LOGIN_TM_CNT
					     	 , NVL(T2.AVR_RING_DRTM, 0)  AS AVR_RING_DRTM			                     
						     , CASE WHEN NVL(T2.AVR_RING_DRTM, 0) = 0 THEN 0 ELSE 1 END AS AVR_RING_DRTM_CNT
				     		 , NVL(T2.REQ_N, 0)  AS REQ_N
				     		 , NVL(T2.SVC_LEVEL_N, 0)  AS SVC_LEVEL_N						     
						FROM 
						(
							SELECT A.GRP_CD
					     		, A.PART_CD
					     		, B.GRP_CDNM
					     		, C.PART_CDNM
					     		, A.USR_ID
					     		, A.USR_NM
					     		, D.YR
					  		FROM TBL_USR A
					     		, TBL_GRP_CD B
					     		, TBL_PART_CD C
					     		, ( SELECT SUBSTR(BASC_DT, 1, 4) AS YR
                                    FROM TBL_BUSSDD_INFO
                                    WHERE SUBSTR(BASC_DT, 1, 4) BETWEEN #year_from# AND #year_to#
                                    GROUP BY SUBSTR(BASC_DT, 1, 4)
                                    ORDER BY SUBSTR(BASC_DT, 1, 4)) D
					 		WHERE A.GRP_CD  = B.GRP_CD
					   		  AND A.PART_CD = C.PART_CD
							<isNotEmpty property="grp_cd">
					    	  AND A.GRP_CD = #grp_cd#
					   		</isNotEmpty>
					   		<isNotEmpty property="part_cd">
					    	   AND A.PART_CD = #part_cd#
					   		</isNotEmpty>
					   		<isNotEmpty property="usr_id">
					    	   AND A.USR_ID = #usr_id#
					   		</isNotEmpty>
					   		<!-- 퇴사자도 통계에 포함되게 변경 -->
					   		AND (A.QUAL_LOSS_DD IS NULL OR (A.QUAL_LOSS_DD > #year_to# || '01' OR A.QUAL_LOSS_DD = #year_to# || '01' ))
					   		<!-- AND A.CTI_USE_YN = 'Y' -->
							ORDER BY A.GRP_CD, A.PART_CD, A.USR_ID, D.YR
							) T1,
							(
							SELECT TIME_KEY AS YR
							     , USR_ID
							     , INBND_HOUSE
							     , CASE WHEN INBND_HOUSE = 0 THEN 0
							            ELSE ROUND(INBND_DRTM / INBND_HOUSE, 1)
							            END  AS AVR_INBND_TM
							     , OTBND_HOUSE
							     , DIALING_NCNT
							     , CASE WHEN OTBND_HOUSE = 0 THEN 0
							            ELSE ROUND(OTBND_DRTM / OTBND_HOUSE, 1)
							            END  AS AVR_OTBND_TM
							     , AF_PROC_DRTM       AS TM_1
							     , CLE_SEAT_DRTM_EML  AS TM_2
							     , CLE_SEAT_DRTM_DSFT AS TM_3
							     , CLE_SEAT_DRTM_COCH AS TM_4
							     , CLE_SEAT_DRTM_EDU  AS TM_5
							     , AF_PROC_DRTM + CLE_SEAT_DRTM_EML + CLE_SEAT_DRTM_DSFT + CLE_SEAT_DRTM_COCH + CLE_SEAT_DRTM_EDU AS TM_SUM
							     , TOT_LRGEXST_DRTM   AS READY_TM
							     , CLE_SEAT_DRTM_REST AS REST_TM
							     , CLE_SEAT_DRTM_MEAL AS MEAL_TM
							     , WKG_DRTM           AS LOGIN_TM
			        			 , CASE WHEN TEL_RING_DRTM = 0 THEN 0  ELSE ROUND(TEL_RING_DRTM / TEL_RING_NCNT, 1) END  AS AVR_RING_DRTM  
 			                     , REQ_NCNT AS REQ_N                              
			                     , SEC20_IN_CNNT_NCNT AS SVC_LEVEL_N  							     
							  FROM TBL_BT_CTI_RPT_YR
					 		 WHERE TIME_KEY BETWEEN #year_from# AND #year_to#
							ORDER BY USR_ID
							) T2
						WHERE T1.USR_ID = T2.USR_ID(+)
						  AND T1.YR     = T2.YR(+)
						ORDER BY T1.GRP_CD, T1.PART_CD, T1.USR_ID, T1.YR
				    ) TT
				    GROUP BY ROLLUP(GRP_CD, PART_CD, USR_ID, YR)
		)
  	<isNotEmpty property="disp_gb">
  	  <isEqual property="disp_gb" compareValue="01">
		WHERE DATA_GB IN ('D','PS','GS','TS')
	  </isEqual>
  	  <isEqual property="disp_gb" compareValue="02">
		WHERE DATA_GB IN ('D','US','PS','GS','TS')
	  </isEqual>
	</isNotEmpty>	</select>


<!--  상담사별 메일 통계 (년도별) -->
 	<select id="Get_AgentMailStat_YR_SELECT" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
		SELECT DATA_GB
		     , GRP_CDNM
		     , USR_NM
		     , CASE WHEN YR IS NULL THEN '' ELSE YR END AS BASC_DT
		     , CASE WHEN YR IS NULL THEN '' ELSE YR||'년' END AS DAY_NM
		     , NVL (SUMY+SUMN,0) AS Q
             , NVL( SUMY,0) AS Q1
             , CASE WHEN (SUMY+SUMN) <![CDATA[<>]]> 0 THEN CEIL((SUMY/(SUMY+SUMN))*100)||'%' ELSE 0||'%'  END  AS SUCC	   
		FROM
		(
				SELECT CASE WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NOT NULL AND YR IS NULL THEN 'US'
				            WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NULL AND YR IS NULL THEN 'PS'
				            WHEN GRP_CD IS NOT NULL AND PART_CD IS NULL AND USR_ID IS NULL AND YR IS NULL THEN 'GS'
				            WHEN GRP_CD IS NULL AND PART_CD IS NULL AND USR_ID IS NULL AND YR IS NULL THEN 'TS'
				            ELSE 'D' END AS DATA_GB
				     , CASE WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NOT NULL AND YR IS NULL THEN '(상담사소계)'
				            WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NULL AND YR IS NULL THEN '(파트소계)'||MAX(PART_CDNM)
				            WHEN GRP_CD IS NOT NULL AND PART_CD IS NULL AND USR_ID IS NULL AND YR IS NULL THEN '(그룹소계)'||MAX(GRP_CDNM)
				            WHEN GRP_CD IS NULL AND PART_CD IS NULL AND USR_ID IS NULL AND YR IS NULL THEN '합계'
				            ELSE MAX(PART_CDNM) END  AS GRP_CDNM
				     , CASE WHEN YR IS NULL THEN ''
				            ELSE MAX(USR_NM) END AS USR_NM
				     , YR
				     , SUM(SUMY) AS SUMY
                     , SUM(SUMN) AS SUMN             
				  FROM 
				     (
						SELECT T1.GRP_CD
						     , T1.PART_CD
						     , T1.GRP_CDNM
						     , T1.PART_CDNM
						     , T1.USR_ID
						     , T1.USR_NM
						     , T1.YR	
						     , T2.SUMY
                             , T2.SUMN	     		 						     
						FROM 
						(
							SELECT A.GRP_CD
					     		, A.PART_CD
					     		, B.GRP_CDNM
					     		, C.PART_CDNM
					     		, A.USR_ID
					     		, A.USR_NM
					     		, D.YR
					  		FROM TBL_USR A
					     		, TBL_GRP_CD B
					     		, TBL_PART_CD C
					     		, ( SELECT SUBSTR(BASC_DT, 1, 4) AS YR
                                    FROM TBL_BUSSDD_INFO
                                    WHERE SUBSTR(BASC_DT, 1, 4) BETWEEN #year_from# AND #year_to#
                                    GROUP BY SUBSTR(BASC_DT, 1, 4)
                                    ORDER BY SUBSTR(BASC_DT, 1, 4)) D
					 		WHERE A.GRP_CD  = B.GRP_CD
					   		  AND A.PART_CD = C.PART_CD
							<isNotEmpty property="grp_cd">
					    	  AND A.GRP_CD = #grp_cd#
					   		</isNotEmpty>
					   		<isNotEmpty property="part_cd">
					    	   AND A.PART_CD = #part_cd#
					   		</isNotEmpty>
					   		<isNotEmpty property="usr_id">
					    	   AND A.USR_ID = #usr_id#
					   		</isNotEmpty>
					   		<!-- 퇴사자도 통계에 포함되게 변경 -->
					   		AND (A.QUAL_LOSS_DD IS NULL OR SUBSTR(A.QUAL_LOSS_DD,0,4) BETWEEN  #year_from# AND #year_to#)
					   		<!-- AND A.CTI_USE_YN = 'Y' -->
							ORDER BY A.GRP_CD, A.PART_CD, A.USR_ID, D.YR
							) T1,
							(
							SELECT SUBSTR(PROC_DTM,0,4) AS YR
                                 , ASGN_CNSLR_ID
                                 , SUM(DECODE(PROC_ST_CD , 'Y', 1,0)) AS SUMY
                                 , SUM(DECODE(PROC_ST_CD , 'N', 1,0)) AS SUMN                                                                    
                              FROM TBL_EML_ASGN_LOG
                              WHERE SUBSTR(PROC_DTM,0,4) BETWEEN  #year_from# AND #year_to#
                              AND RSV_SEQ_NO like 'CAM080%'     <!-- 메일수신건만 -->
                              GROUP BY SUBSTR(PROC_DTM,0,4),ASGN_CNSLR_ID                             
                            ORDER BY ASGN_CNSLR_ID
							) T2
						WHERE T1.USR_ID = T2.ASGN_CNSLR_ID(+)
						  AND T1.YR     = T2.YR(+)
						ORDER BY T1.GRP_CD, T1.PART_CD, T1.USR_ID, T1.YR
				    ) TT
				    GROUP BY ROLLUP(GRP_CD, PART_CD, USR_ID, YR)
		)
  	<isNotEmpty property="disp_gb">
  	  <isEqual property="disp_gb" compareValue="01">
		WHERE DATA_GB IN ('D','PS','GS','TS')
	  </isEqual>
  	  <isEqual property="disp_gb" compareValue="02">
		WHERE DATA_GB IN ('D','US','PS','GS','TS')
	  </isEqual>
	</isNotEmpty>	
	</select>
	
	<!--  상담사별 콜백 통계 (년도별) -->
 	<select id="Get_AgentCBStat_YR_SELECT" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
		SELECT DATA_GB
             , GRP_CDNM
             , USR_NM
             , CASE WHEN YR IS NULL THEN '' ELSE YR END AS BASC_DT
             , CASE WHEN YR IS NULL THEN '' ELSE YR||'년' END AS DAY_NM
             , NVL(Q,0) AS Q
             , NVL(ETC1,0) AS ETC1
             , NVL(ETC2,0) AS ETC2
             , NVL(ETC3,0) AS ETC3
             , NVL(ETC4,0) AS ETC4
             , NVL(ETC5,0) AS ETC5
             , NVL(ETC6,0) AS ETC6
             , NVL(ETC7,0) AS ETC7
             , NVL(ETC8,0) AS ETC8 
        FROM
        (
                SELECT CASE WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NOT NULL AND YR IS NULL THEN 'US'
                            WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NULL AND YR IS NULL THEN 'PS'
                            WHEN GRP_CD IS NOT NULL AND PART_CD IS NULL AND USR_ID IS NULL AND YR IS NULL THEN 'GS'
                            WHEN GRP_CD IS NULL AND PART_CD IS NULL AND USR_ID IS NULL AND YR IS NULL THEN 'TS'
                            ELSE 'D' END AS DATA_GB
                     , CASE WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NOT NULL AND YR IS NULL THEN '(상담사소계)'
                            WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NULL AND YR IS NULL THEN '(파트소계)'||MAX(PART_CDNM)
                            WHEN GRP_CD IS NOT NULL AND PART_CD IS NULL AND USR_ID IS NULL AND YR IS NULL THEN '(그룹소계)'||MAX(GRP_CDNM)
                            WHEN GRP_CD IS NULL AND PART_CD IS NULL AND USR_ID IS NULL AND YR IS NULL THEN '합계'
                            ELSE MAX(PART_CDNM) END  AS GRP_CDNM
                     , CASE WHEN YR IS NULL THEN ''
                            ELSE MAX(USR_NM) END AS USR_NM
                     , YR
                     , SUM(Q) AS Q
                     , SUM(ETC1) AS ETC1
                     , SUM(ETC2) AS ETC2
                     , SUM(ETC3) AS ETC3
                     , SUM(ETC4) AS ETC4
                     , SUM(ETC5) AS ETC5
                     , SUM(ETC6) AS ETC6
                     , SUM(ETC7) AS ETC7
                     , SUM(ETC8) AS ETC8                                  
                  FROM 
                     (
                        SELECT T1.GRP_CD
                             , T1.PART_CD
                             , T1.GRP_CDNM
                             , T1.PART_CDNM
                             , T1.USR_ID
                             , T1.USR_NM
                             , T1.YR    
                             , T2.Q
                             , T2.ETC1
                             , T2.ETC2
                             , T2.ETC3
                             , T2.ETC4
                             , T2.ETC5
                             , T2.ETC6
                             , T2.ETC7
                             , T2.ETC8                                                                            
                        FROM 
                        (
                            SELECT A.GRP_CD
                                 , A.PART_CD
                                 , B.GRP_CDNM
                                 , C.PART_CDNM
                                 , A.USR_ID
                                 , A.USR_NM
                                 , D.YR
                              FROM TBL_USR A
                                 , TBL_GRP_CD B
                                 , TBL_PART_CD C
                                 , ( SELECT SUBSTR(BASC_DT, 1, 4) AS YR
                                    FROM TBL_BUSSDD_INFO
                                    WHERE SUBSTR(BASC_DT, 1, 4) BETWEEN #year_from# AND #year_to#
                                    GROUP BY SUBSTR(BASC_DT, 1, 4)
                                    ORDER BY SUBSTR(BASC_DT, 1, 4)) D
                             WHERE A.GRP_CD  = B.GRP_CD
                                 AND A.PART_CD = C.PART_CD
                            <isNotEmpty property="grp_cd">
                              AND A.GRP_CD = #grp_cd#
                               </isNotEmpty>
                               <isNotEmpty property="part_cd">
                               AND A.PART_CD = #part_cd#
                               </isNotEmpty>
                               <isNotEmpty property="usr_id">
                               AND A.USR_ID = #usr_id#
                               </isNotEmpty>
                               <!-- 퇴사자도 통계에 포함되게 변경 -->
                               AND (A.QUAL_LOSS_DD IS NULL OR SUBSTR(A.QUAL_LOSS_DD,0,4) BETWEEN  #year_from# AND #year_to#)
                               <!-- AND A.CTI_USE_YN = 'Y' -->
                            ORDER BY A.GRP_CD, A.PART_CD, A.USR_ID, D.YR
                            ) T1,
                            (
                           SELECT SUBSTR(PROC_DT,0,4) AS YR
                                 , ASSGN_ID
                                 ,	COUNT(*) AS Q
                                 , SUM(DECODE(CUR_TYP_CD , '01', 1,0)) AS ETC1  <!--통화성공-->
                                 , SUM(DECODE(CUR_TYP_CD , '22', 1,0)) AS ETC2   <!--미수신-->
                                 , SUM(DECODE(CUR_TYP_CD , '21', 1,0)) AS ETC3    <!--통화중-->
                                 , SUM(DECODE(CUR_TYP_CD , '13', 1,0)) AS ETC4    <!--결번-->
                                 , SUM(DECODE(CUR_TYP_CD , '12', 1,0)) AS ETC5    <!--거부-->
                                 , SUM(DECODE(CUR_TYP_CD , '11', 1,0)) AS ETC6    <!--재시도요청-->
                                 , SUM(DECODE(CUR_TYP_CD , '99', 1,0)) AS ETC7    <!--기타-->
                                 , SUM(DECODE(CUR_TYP_CD , '23', 1,0)) AS ETC8    <!--오번호-->                                                                                                   
                              FROM TBL_CALLBACK_HIST
                              WHERE SUBSTR(PROC_DT,0,4) BETWEEN  #year_from# AND #year_to#                             
                              GROUP BY SUBSTR(PROC_DT,0,4),ASSGN_ID                             
                            ORDER BY ASSGN_ID
                            ) T2
                        WHERE T1.USR_ID = T2.ASSGN_ID(+)
                          AND T1.YR     = T2.YR(+)
                        ORDER BY T1.GRP_CD, T1.PART_CD, T1.USR_ID, T1.YR
                    ) TT
                    GROUP BY ROLLUP(GRP_CD, PART_CD, USR_ID, YR)
        )
  	<isNotEmpty property="disp_gb">
  	  <isEqual property="disp_gb" compareValue="01">
		WHERE DATA_GB IN ('D','PS','GS','TS')
	  </isEqual>
  	  <isEqual property="disp_gb" compareValue="02">
		WHERE DATA_GB IN ('D','US','PS','GS','TS')
	  </isEqual>
	</isNotEmpty>	
	</select>
	
	



<!--  상담사별 콜 통계 (시간대별/시간대별합계) -->
	<select id="Get_AgentCallStat_TM_SELECT" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
		    SELECT DATA_GB
		     , GRP_CDNM
		     , USR_NM
		     , SUBSTR(BASE_TM_30,1,8) AS BASC_DT
		     , CASE WHEN BASE_TM_30 IS NULL THEN '' ELSE SUBSTR(BASE_TM_30,9,2)||':'||SUBSTR(BASE_TM_30,11,2) END AS DAY_NM
		     , INBND_N
		     , LPAD(FLOOR(AVR_INBND_TM/3600), 2, '0')||':'||
		       LPAD(FLOOR(MOD(AVR_INBND_TM, 3600) / 60), 2, '0')||':'||
		       LPAD(ROUND(MOD(MOD(AVR_INBND_TM, 3600), 60), 0), 2, '0') AS AVR_INBND_TM
		     , OTBND_N
		     , LPAD(FLOOR(AVR_OTBND_TM/3600), 2, '0')||':'||
		       LPAD(FLOOR(MOD(AVR_OTBND_TM, 3600) / 60), 2, '0')||':'||
		       LPAD(ROUND(MOD(MOD(AVR_OTBND_TM, 3600), 60), 0), 2, '0') AS AVR_OTBND_TM
		     , LPAD(FLOOR(TM_1/3600), 2, '0')||':'||
		       LPAD(FLOOR(MOD(TM_1, 3600) / 60), 2, '0')||':'||
		       LPAD(ROUND(MOD(MOD(TM_1, 3600), 60), 0), 2, '0') AS TM_1
		     , LPAD(FLOOR(TM_2/3600), 2, '0')||':'||
		       LPAD(FLOOR(MOD(TM_2, 3600) / 60), 2, '0')||':'||
		       LPAD(ROUND(MOD(MOD(TM_2, 3600), 60), 0), 2, '0') AS TM_2
		     , LPAD(FLOOR(TM_3/3600), 2, '0')||':'||
		       LPAD(FLOOR(MOD(TM_3, 3600) / 60), 2, '0')||':'||
		       LPAD(ROUND(MOD(MOD(TM_3, 3600), 60), 0), 2, '0') AS TM_3
		     , LPAD(FLOOR(TM_4/3600), 2, '0')||':'||
		       LPAD(FLOOR(MOD(TM_4, 3600) / 60), 2, '0')||':'||
		       LPAD(ROUND(MOD(MOD(TM_4, 3600), 60), 0), 2, '0') AS TM_4
		     , LPAD(FLOOR(TM_5/3600), 2, '0')||':'||
		       LPAD(FLOOR(MOD(TM_5, 3600) / 60), 2, '0')||':'||
		       LPAD(ROUND(MOD(MOD(TM_5, 3600), 60), 0), 2, '0') AS TM_5
		     , LPAD(FLOOR(TM_SUM/3600), 2, '0')||':'||
		       LPAD(FLOOR(MOD(TM_SUM, 3600) / 60), 2, '0')||':'||
		       LPAD(ROUND(MOD(MOD(TM_SUM, 3600), 60), 0), 2, '0') AS TM_SUM
		     , LPAD(FLOOR(READY_TM/3600), 2, '0')||':'||
		       LPAD(FLOOR(MOD(READY_TM, 3600) / 60), 2, '0')||':'||
		       LPAD(ROUND(MOD(MOD(READY_TM, 3600), 60), 0), 2, '0') AS READY_TM
		     , LPAD(FLOOR(REST_TM/3600), 2, '0')||':'||
		       LPAD(FLOOR(MOD(REST_TM, 3600) / 60), 2, '0')||':'||
		       LPAD(ROUND(MOD(MOD(REST_TM, 3600), 60), 0), 2, '0') AS REST_TM
		     , LPAD(FLOOR(MEAL_TM/3600), 2, '0')||':'||
		       LPAD(FLOOR(MOD(MEAL_TM, 3600) / 60), 2, '0')||':'||
		       LPAD(ROUND(MOD(MOD(MEAL_TM, 3600), 60), 0), 2, '0') AS MEAL_TM
		       
		       , LPAD(FLOOR((MEAL_TM+REST_TM)/3600), 2, '0')||':'||
		       LPAD(FLOOR(MOD((MEAL_TM+REST_TM), 3600) / 60), 2, '0')||':'||
		       LPAD(ROUND(MOD(MOD((MEAL_TM+REST_TM), 3600), 60), 0), 2, '0') AS GDATA
		       
		     , LPAD(FLOOR(LOGIN_TM/3600), 2, '0')||':'||
		       LPAD(FLOOR(MOD(LOGIN_TM, 3600) / 60), 2, '0')||':'||
		       LPAD(ROUND(MOD(MOD(LOGIN_TM, 3600), 60), 0), 2, '0') AS LOGIN_TM
		       
		     , LPAD(FLOOR(AVR_RING_DRTM/3600), 2, '0')||':'||
			   LPAD(FLOOR(MOD(AVR_RING_DRTM, 3600) / 60), 2, '0')||':'||
			   LPAD(ROUND(MOD(MOD(AVR_RING_DRTM, 3600), 60), 0), 2, '0') AS AVR_RING_DRTM    
	         , ROUND(DECODE(REQ_N,0,0,INBND_N/REQ_N*100),1) AS ANSW_RATE
	         , ROUND(DECODE(INBND_N,0,0,SVC_LEVEL_N/INBND_N*100),1) AS SVC_LEVEL   
			FROM
			(
			        SELECT CASE WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NOT NULL AND BASE_TM_00 IS NOT NULL AND BASE_TM_30 IS NULL THEN 'TMS'
			                    WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NOT NULL AND BASE_TM_00 IS NULL AND BASE_TM_30 IS NULL THEN 'US'
			                    WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NULL AND BASE_TM_00 IS NULL AND BASE_TM_30 IS NULL THEN 'PS'
			                    WHEN GRP_CD IS NOT NULL AND PART_CD IS NULL AND USR_ID IS NULL AND BASE_TM_00 IS NULL AND BASE_TM_30 IS NULL THEN 'GS'
			                    WHEN GRP_CD IS NULL AND PART_CD IS NULL AND USR_ID IS NULL AND BASE_TM_00 IS NULL AND BASE_TM_30 IS NULL THEN 'TS'
			                    ELSE 'D' END AS DATA_GB
			             , CASE WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NOT NULL AND BASE_TM_00 IS NOT NULL AND BASE_TM_30 IS NULL THEN '(소계) '||SUBSTR(MAX(BASE_TM_00),9,2)||'시'
			                    WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NOT NULL AND BASE_TM_00 IS NULL AND BASE_TM_30 IS NULL THEN '(상담사소계)'
			                    WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NULL AND BASE_TM_00 IS NULL AND BASE_TM_30 IS NULL THEN '(파트소계)'||MAX(PART_CDNM)
			                    WHEN GRP_CD IS NOT NULL AND PART_CD IS NULL AND USR_ID IS NULL AND BASE_TM_00 IS NULL AND BASE_TM_30 IS NULL THEN '(그룹소계)'||MAX(GRP_CDNM)
			                    WHEN GRP_CD IS NULL AND PART_CD IS NULL AND USR_ID IS NULL AND BASE_TM_00 IS NULL AND BASE_TM_30 IS NULL THEN '합계'
			                    ELSE MAX(PART_CDNM) END  AS GRP_CDNM
			             , CASE WHEN BASE_TM_00 IS NULL AND BASE_TM_30 IS NULL THEN ''
			                    ELSE MAX(USR_NM) END AS USR_NM
			             , BASE_TM_00
			             , BASE_TM_30
			             , SUM(INBND_N)      AS INBND_N
			             , CASE WHEN SUM(AVR_INBND_TM) > 0 THEN ROUND(SUM(AVR_INBND_TM)/SUM(AVR_INBND_TM_CNT),0) ELSE 0 END AS AVR_INBND_TM
			             , SUM(OTBND_N)      AS OTBND_N
			             , CASE WHEN SUM(AVR_OTBND_TM) > 0 THEN ROUND(SUM(AVR_OTBND_TM)/SUM(AVR_OTBND_TM_CNT),0) ELSE 0 END AS AVR_OTBND_TM
			             , CASE WHEN SUM(TM_1) > 0 THEN ROUND(SUM(TM_1)/SUM(TM_1_CNT),0) ELSE 0 END AS TM_1
			             , CASE WHEN SUM(TM_2) > 0 THEN ROUND(SUM(TM_2)/SUM(TM_2_CNT),0) ELSE 0 END AS TM_2
			             , CASE WHEN SUM(TM_3) > 0 THEN ROUND(SUM(TM_3)/SUM(TM_3_CNT),0) ELSE 0 END AS TM_3
			             , CASE WHEN SUM(TM_4) > 0 THEN ROUND(SUM(TM_4)/SUM(TM_4_CNT),0) ELSE 0 END AS TM_4
			             , CASE WHEN SUM(TM_5) > 0 THEN ROUND(SUM(TM_5)/SUM(TM_5_CNT),0) ELSE 0 END AS TM_5
			             , CASE WHEN SUM(TM_SUM) > 0 THEN ROUND(SUM(TM_SUM)/SUM(TM_SUM_CNT),0) ELSE 0 END AS TM_SUM
			             , CASE WHEN SUM(READY_TM) > 0 THEN ROUND(SUM(READY_TM)/SUM(READY_TM_CNT),0) ELSE 0 END AS READY_TM
			             , CASE WHEN SUM(REST_TM) > 0 THEN ROUND(SUM(REST_TM)/SUM(REST_TM_CNT),0) ELSE 0 END AS REST_TM
			             , CASE WHEN SUM(MEAL_TM) > 0 THEN ROUND(SUM(MEAL_TM)/SUM(MEAL_TM_CNT),0) ELSE 0 END AS MEAL_TM
			             , CASE WHEN SUM(LOGIN_TM) > 0 THEN ROUND(SUM(LOGIN_TM)/SUM(LOGIN_TM_CNT),0) ELSE 0 END AS LOGIN_TM
			             , CASE WHEN SUM(AVR_RING_DRTM) > 0 THEN ROUND(SUM(AVR_RING_DRTM)/SUM(AVR_RING_DRTM_CNT),0) ELSE 0 END AS AVR_RING_DRTM        
			     		 , SUM(TT.REQ_N)      AS REQ_N
			     		 , SUM(TT.SVC_LEVEL_N)  AS SVC_LEVEL_N			             
			          FROM 
			             (
			                SELECT T1.GRP_CD
			                     , T1.PART_CD
			                     , T1.GRP_CDNM
			                     , T1.PART_CDNM
			                     , T1.USR_ID
			                     , T1.USR_NM
			                     , T1.BASE_TM_00
			                     , T1.BASE_TM_30
			                     , NVL(T2.INBND_HOUSE, 0)  AS INBND_N
			                     , NVL(T2.AVR_INBND_TM, 0) AS AVR_INBND_TM
			                     , CASE WHEN NVL(T2.AVR_INBND_TM, 0) = 0 THEN 0 ELSE 1 END AS AVR_INBND_TM_CNT
			                     , NVL(T2.OTBND_HOUSE, 0)  AS OTBND_N
			                     , NVL(T2.AVR_OTBND_TM, 0) AS AVR_OTBND_TM
			                     , CASE WHEN NVL(T2.AVR_OTBND_TM, 0) = 0 THEN 0 ELSE 1 END AS AVR_OTBND_TM_CNT
			                     , NVL(T2.TM_1, 0)    AS TM_1
			                     , CASE WHEN NVL(T2.TM_1, 0) = 0 THEN 0 ELSE 1 END AS TM_1_CNT
			                     , NVL(T2.TM_2, 0)    AS TM_2
			                     , CASE WHEN NVL(T2.TM_2, 0) = 0 THEN 0 ELSE 1 END AS TM_2_CNT
			                     , NVL(T2.TM_3, 0)    AS TM_3
			                     , CASE WHEN NVL(T2.TM_3, 0) = 0 THEN 0 ELSE 1 END AS TM_3_CNT
			                     , NVL(T2.TM_4, 0)    AS TM_4
			                     , CASE WHEN NVL(T2.TM_4, 0) = 0 THEN 0 ELSE 1 END AS TM_4_CNT
			                     , NVL(T2.TM_5, 0)    AS TM_5
			                     , CASE WHEN NVL(T2.TM_5, 0) = 0 THEN 0 ELSE 1 END AS TM_5_CNT
			                     , NVL(T2.TM_SUM, 0)  AS TM_SUM
			                     , CASE WHEN NVL(T2.TM_SUM, 0) = 0 THEN 0 ELSE 1 END AS TM_SUM_CNT
			                     , NVL(T2.READY_TM, 0)  AS READY_TM
			                     , CASE WHEN NVL(T2.READY_TM, 0) = 0 THEN 0 ELSE 1 END AS READY_TM_CNT
			                     , NVL(T2.REST_TM, 0)   AS REST_TM
			                     , CASE WHEN NVL(T2.REST_TM, 0) = 0 THEN 0 ELSE 1 END  AS REST_TM_CNT
			                     , NVL(T2.MEAL_TM, 0)   AS MEAL_TM
			                     , CASE WHEN NVL(T2.MEAL_TM, 0) = 0 THEN 0 ELSE 1 END  AS MEAL_TM_CNT
			                     , NVL(T2.LOGIN_TM, 0)  AS LOGIN_TM
			                     , CASE WHEN NVL(T2.LOGIN_TM, 0) = 0 THEN 0 ELSE 1 END AS LOGIN_TM_CNT
						     	 , NVL(T2.AVR_RING_DRTM, 0)  AS AVR_RING_DRTM			                     
							     , CASE WHEN NVL(T2.AVR_RING_DRTM, 0) = 0 THEN 0 ELSE 1 END AS AVR_RING_DRTM_CNT
					     		 , NVL(T2.REQ_N, 0)  AS REQ_N
					     		 , NVL(T2.SVC_LEVEL_N, 0)  AS SVC_LEVEL_N        			                     
			                FROM 
			                (
			                    SELECT A.GRP_CD
			                        , A.PART_CD
			                        , B.GRP_CDNM
			                        , C.PART_CDNM
			                        , A.USR_ID
			                        , A.USR_NM
			                        , '20120627'||D.SMLCLAS_CDNM AS BASE_TM_30
			                        , CASE WHEN SUBSTR(D.SMLCLAS_CDNM, 3, 2) = '30' THEN #from_dt#||LPAD(TO_CHAR(TO_NUMBER(SUBSTR(D.SMLCLAS_CDNM,1,2))+1),2,'0')||'00'
			                               ELSE #from_dt#||D.SMLCLAS_CDNM END AS BASE_TM_00
			                    FROM TBL_USR A
			                        , TBL_GRP_CD B
			                        , TBL_PART_CD C
			                        , TBL_UNFYCD_SMLCLAS D
			                    WHERE A.GRP_CD  = B.GRP_CD
			                      AND A.PART_CD = C.PART_CD
			                    <isNotEmpty property="grp_cd">
							      AND A.GRP_CD = #grp_cd#
							   	</isNotEmpty>
							   	<isNotEmpty property="part_cd">
							      AND A.PART_CD = #part_cd#
							   	</isNotEmpty>
							   	<isNotEmpty property="usr_id">
							      AND A.USR_ID = #usr_id#
							   	</isNotEmpty>  
			                    
			                    <!-- 퇴사자도 통계에 포함되게 변경 -->
			                    <!--AND (A.QUAL_LOSS_DD IS NULL OR (A.QUAL_LOSS_DD > #year_to# || '01' OR A.QUAL_LOSS_DD = #year_to# || '01' ))-->
			                    AND (A.QUAL_LOSS_DD IS NULL OR A.QUAL_LOSS_DD > #from_dt#)
			                    <!-- AND A.CTI_USE_YN = 'Y' -->
			                    AND D.LRGCLAS_CD = 'NW115'
			                    ORDER BY A.GRP_CD, B.GRP_CDNM, A.PART_CD, C.PART_CDNM, A.USR_ID, A.USR_NM, D.SMLCLAS_CDNM
			                    ) T1,
			                    (
			                    SELECT CASE WHEN SUBSTR(TIME_KEY,11,2) = '15' OR SUBSTR(TIME_KEY,11,2) = '30' THEN SUBSTR(TIME_KEY,1,10)||'30'
			                                WHEN SUBSTR(TIME_KEY,11,2) = '45' THEN TO_CHAR(TO_NUMBER(SUBSTR(TIME_KEY,1,10))+1)||'00'
			                                WHEN SUBSTR(TIME_KEY,11,2) = '00' THEN SUBSTR(TIME_KEY,1,10)||'00'
			                                END AS WORK_TM_30
			                         , USR_ID
			                         , INBND_HOUSE
			                         , CASE WHEN INBND_HOUSE = 0 THEN 0
			                                ELSE ROUND(INBND_DRTM / INBND_HOUSE, 1)
			                                END  AS AVR_INBND_TM
			                         , OTBND_HOUSE
			                         , CASE WHEN OTBND_HOUSE = 0 THEN 0
			                                ELSE ROUND(OTBND_DRTM / OTBND_HOUSE, 1)
			                                END  AS AVR_OTBND_TM
			                         , AF_PROC_DRTM       AS TM_1
			                         , CLE_SEAT_DRTM_EML  AS TM_2
			                         , CLE_SEAT_DRTM_DSFT AS TM_3
			                         , CLE_SEAT_DRTM_COCH AS TM_4
			                         , CLE_SEAT_DRTM_EDU  AS TM_5
			                         , AF_PROC_DRTM + CLE_SEAT_DRTM_EML + CLE_SEAT_DRTM_DSFT + CLE_SEAT_DRTM_COCH + CLE_SEAT_DRTM_EDU AS TM_SUM
			                         , TOT_LRGEXST_DRTM   AS READY_TM
			                         , CLE_SEAT_DRTM_REST AS REST_TM
			                         , CLE_SEAT_DRTM_MEAL AS MEAL_TM
			                         , WKG_DRTM           AS LOGIN_TM
				        			 , CASE WHEN TEL_RING_DRTM = 0 THEN 0  ELSE ROUND(TEL_RING_DRTM / TEL_RING_NCNT, 1) END  AS AVR_RING_DRTM  
	 			                     , REQ_NCNT AS REQ_N                              
				                     , SEC20_IN_CNNT_NCNT AS SVC_LEVEL_N  			                         
			                      FROM TBL_BT_CTI_RPT_TM
			                     WHERE TIME_KEY BETWEEN #from_dt#||'0800' AND #from_dt#||'1900'
			                    ORDER BY USR_ID
			                    ) T2
			                WHERE T1.USR_ID     = T2.USR_ID(+)
			                  AND T1.BASE_TM_30 = T2.WORK_TM_30(+)
			                ORDER BY T1.GRP_CD, T1.PART_CD, T1.USR_ID, T1.BASE_TM_30
			            ) TT
			            GROUP BY ROLLUP(GRP_CD, PART_CD, USR_ID, BASE_TM_00, BASE_TM_30)
			)
			<isNotEmpty property="disp_gb">
		  	  <isEqual property="disp_gb" compareValue="01">
				WHERE DATA_GB IN ('D','PS','GS','TS')
			  </isEqual>
		  	  <isEqual property="disp_gb" compareValue="02">
				WHERE DATA_GB IN ('D','TMS','US','PS','GS','TS')
			  </isEqual>
			</isNotEmpty>
	</select> 
	
	
<!-- 메일처리집계 (년도별) -->
 	<select id="Get_DailyMailStat_YR_SELECT" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
		SELECT DATA_GB
             , GRP_CDNM
             , CASE WHEN YR IS NULL THEN ''
                    ELSE YR
               END AS BASC_YM
             , NVL(CNT,0) AS CNT
             , NVL(CNTY,0) AS CNTY
             , NVL(CEIL((CNTY/CNT)*100),0)||'%' AS SUCC
             , AVG_PROC_TM
        FROM
        (                
                SELECT CASE WHEN GRP_CD IS NOT NULL AND YR IS NULL THEN 'GS'
                            WHEN GRP_CD IS NULL AND YR IS NULL THEN 'TS'
                            ELSE 'D' END AS DATA_GB
                     , CASE WHEN GRP_CD IS NOT NULL AND YR IS NULL THEN '(그룹소계)'||MAX(GRP_CDNM)
                            WHEN GRP_CD IS NULL AND YR IS NULL THEN '합계'
                            ELSE MAX(GRP_CDNM) END  AS GRP_CDNM
                     , YR
                     , SUM(CNT) AS CNT
                     , SUM(CNTY) AS CNTY     
                     , AVG_PROC_TM             
                  FROM 
                     (                        
                        SELECT T1.GRP_CD
                             , T1.GRP_CDNM
                             , T1.YR  
                             , T2.CNT
                             , T2.CNTY     
                             , T2.AVG_PROC_TM                      
                        FROM 
                        (
                           SELECT A.GRP_CD
                                 , A.GRP_CDNM
                                 , D.YR
                              FROM TBL_GRP_CD A
                                 , ( SELECT SUBSTR(BASC_DT, 1, 4) AS YR
                                    FROM TBL_BUSSDD_INFO
                                    WHERE SUBSTR(BASC_DT, 1, 4) BETWEEN #year_from# AND #year_to#
                                    GROUP BY SUBSTR(BASC_DT, 1, 4)
                                    ORDER BY SUBSTR(BASC_DT, 1, 4)) D
                             WHERE A.GRP_CD  IN ('BNS','ORD','CPN','OBD','OIL')
                                <isNotEmpty property="grp_cd">
                              		AND A.GRP_CD = #grp_cd#
                              	</isNotEmpty>                      
                            GROUP BY A.GRP_CD, A.GRP_CDNM, D.YR
                            ORDER BY A.GRP_CD, A.GRP_CDNM, D.YR
                            ) T1,                          
                           (                           
                            SELECT GRP_CD
                                 , WKG_YR 
                                 , SUM(CNT) AS CNT
                                 , SUM(CNTY) AS CNTY
                                 , AVG_PROC_TM                             
                            FROM
                            (   
                                SELECT B.GRP_CD
                                     , SUBSTR(A.PROC_DTM, 1, 4) AS WKG_YR  
                                     , COUNT(*) AS CNT
                                     , SUM(CASE WHEN PROC_ST_CD = 'Y' THEN 1 END) AS CNTY                              
                                     , ROUND(SUM(TRUNC((TO_DATE(A.PROC_DTM, 'YYYY-MM-DD HH24:MI:SS') - TO_DATE(A.RECV_DTM, 'YYYY-MM-DD HH24:MI:SS')) * 24))/COUNT(DECODE(PROC_ST_CD , 'Y', 1,0))) AS AVG_PROC_TM       
                                  FROM TBL_EML_ASGN_LOG A      
                                     , TBL_USR B
                                     , TBL_PART_CD C
                                 WHERE A.ASGN_CNSLR_ID = B.USR_ID
                                   AND B.GRP_CD  = C.GRP_CD
                                   AND B.PART_CD = C.PART_CD
                                   AND A.RSV_SEQ_NO like 'CAM080%'
                                   AND C.PART_CD NOT IN ('BNS4') <!--LP파트인원제외-->
                                   AND C.USE_YN = 'Y'                                   
                                   AND B.GRP_CD IN ('BNS', 'ORD','CPN','OBD','OIL')
                                   AND A.PROC_DTM BETWEEN #year_from#||'0101' AND #year_to#||'1231'
                                GROUP BY B.GRP_CD, SUBSTR(A.PROC_DTM, 1, 4)
                                ORDER BY B.GRP_CD, SUBSTR(A.PROC_DTM, 1, 4)
                            ) 
                            GROUP BY GRP_CD, WKG_YR, AVG_PROC_TM
                            ORDER BY GRP_CD, WKG_YR, AVG_PROC_TM
                            ) T2
                        WHERE T1.GRP_CD  = T2.GRP_CD(+)
                          AND T1.YR      = T2.WKG_YR(+)                          
                        ORDER BY T1.GRP_CD, T1.YR                        
                    ) TT
                    GROUP BY ROLLUP(GRP_CD, YR, AVG_PROC_TM)
                    HAVING GROUPING_ID(YR, AVG_PROC_TM) IN (0,3)                    
        )
        WHERE DATA_GB IN ('D','GS','TS')
	</select>
	
<!-- 콜백처리집계 (년도별) -->
 	<select id="Get_DailyCBStat_YR_SELECT" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
		SELECT DATA_GB
             , GRP_CDNM
             , CASE WHEN YR IS NULL THEN ''
                    ELSE YR
               END AS BASC_YM
             , NVL(CNT,0) AS CNT
             , NVL(ETC1,0) AS ETC1
             , NVL(ETC2,0) AS ETC2
             , NVL(ETC3,0) AS ETC3
             , NVL(ETC4,0) AS ETC4
             , NVL(ETC5,0) AS ETC5
             , NVL(ETC6,0) AS ETC6
             , NVL(ETC7,0) AS ETC7
             , NVL(ETC8,0) AS ETC8
        FROM
        (                
                SELECT CASE WHEN GRP_CD IS NOT NULL AND YR IS NULL THEN 'GS'
                            WHEN GRP_CD IS NULL AND YR IS NULL THEN 'TS'
                            ELSE 'D' END AS DATA_GB
                     , CASE WHEN GRP_CD IS NOT NULL AND YR IS NULL THEN '(그룹소계)'||MAX(GRP_CDNM)
                            WHEN GRP_CD IS NULL AND YR IS NULL THEN '합계'
                            ELSE MAX(GRP_CDNM) END  AS GRP_CDNM
                     , YR
                     , SUM(CNT) AS CNT
                    , SUM(ETC1) AS ETC1
                     , SUM(ETC2) AS ETC2
                     , SUM(ETC3) AS ETC3
                     , SUM(ETC4) AS ETC4
                     , SUM(ETC5) AS ETC5
                     , SUM(ETC6) AS ETC6
                     , SUM(ETC7) AS ETC7
                     , SUM(ETC8) AS ETC8                  
                  FROM 
                     (                        
                        SELECT T1.GRP_CD
                             , T1.GRP_CDNM
                             , T1.YR  
                             , T2.CNT
                             , T2.ETC1
                             , T2.ETC2
                             , T2.ETC3
                             , T2.ETC4
                             , T2.ETC5
                             , T2.ETC6
                             , T2.ETC7
                             , T2.ETC8                        
                        FROM 
                        (
                           SELECT A.GRP_CD
                                 , A.GRP_CDNM
                                 , D.YR
                              FROM TBL_GRP_CD A
                                 , ( SELECT SUBSTR(BASC_DT, 1, 4) AS YR
                                    FROM TBL_BUSSDD_INFO
                                    WHERE SUBSTR(BASC_DT, 1, 4) BETWEEN #year_from# AND #year_to#
                                    GROUP BY SUBSTR(BASC_DT, 1, 4)
                                    ORDER BY SUBSTR(BASC_DT, 1, 4)) D
                             WHERE 1=1
                                <isNotEmpty property="grp_cd">
                                      AND A.GRP_CD = #grp_cd#
                                  </isNotEmpty>                      
                            GROUP BY A.GRP_CD, A.GRP_CDNM, D.YR
                            ORDER BY A.GRP_CD, A.GRP_CDNM, D.YR
                            ) T1,                          
                           (                           
                            SELECT GRP_CD
                                 , WKG_YR 
                                 , SUM(CNT) AS CNT
                                 , SUM(ETC1) AS ETC1
                                 , SUM(ETC2) AS ETC2
                                 , SUM(ETC3) AS ETC3
                                 , SUM(ETC4) AS ETC4
                                 , SUM(ETC5) AS ETC5
                                 , SUM(ETC6) AS ETC6
                                 , SUM(ETC6) AS ETC7
                                 , SUM(ETC7) AS ETC8                              
                            FROM
                            (   
                                SELECT B.GRP_CD
                                     , SUBSTR(A.PROC_DT, 1, 4) AS WKG_YR  
                                     , COUNT(*) AS CNT
                                     , SUM(DECODE(A.CUR_TYP_CD , '01', 1,0)) AS ETC1  <!--통화성공-->
                                     , SUM(DECODE(A.CUR_TYP_CD , '22', 1,0)) AS ETC2   <!--미수신-->
                                     , SUM(DECODE(A.CUR_TYP_CD , '21', 1,0)) AS ETC3    <!--통화중-->
                                     , SUM(DECODE(A.CUR_TYP_CD , '13', 1,0)) AS ETC4    <!--결번-->
                                     , SUM(DECODE(A.CUR_TYP_CD , '12', 1,0)) AS ETC5    <!--거부-->
                                     , SUM(DECODE(A.CUR_TYP_CD , '11', 1,0)) AS ETC6    <!--재시도요청-->
                                     , SUM(DECODE(A.CUR_TYP_CD , '99', 1,0)) AS ETC7    <!--기타-->
                                     , SUM(DECODE(A.CUR_TYP_CD , '23', 1,0)) AS ETC8    <!--오번호-->                                                                                     
                                  FROM TBL_CALLBACK_HIST A      
                                     , TBL_USR B
                                     , TBL_PART_CD C
                                 WHERE A.ASSGN_ID = B.USR_ID
                                   AND B.GRP_CD  = C.GRP_CD
                                   AND B.PART_CD = C.PART_CD
                                   AND C.USE_YN = 'Y'
                                   AND A.PROC_DT BETWEEN #year_from#||'0101' AND #year_to#||'1231'
                                GROUP BY B.GRP_CD, SUBSTR(A.PROC_DT, 1, 4)
                                ORDER BY B.GRP_CD, SUBSTR(A.PROC_DT, 1, 4)
                            ) 
                            GROUP BY GRP_CD, WKG_YR
                            ORDER BY GRP_CD, WKG_YR
                            ) T2
                        WHERE T1.GRP_CD  = T2.GRP_CD(+)
                          AND T1.YR      = T2.WKG_YR(+)                          
                        ORDER BY T1.GRP_CD, T1.YR                        
                    ) TT
                    GROUP BY ROLLUP(GRP_CD, YR)                    
        )
        WHERE DATA_GB IN ('D','GS','TS')
	</select>	
	
<!-- 메일 처리집계(분기별) -->
 	<select id="Get_DailyMailStat_QT_SELECT" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
		SELECT DATA_GB
             , GRP_CDNM
             , CASE WHEN QT IS NULL THEN '' 
                    ELSE SUBSTR(QT,1,4)||'년'||SUBSTR(QT,6,1)||'분기'
               END AS BASC_YM
             , NVL(CNT,0) AS CNT
             , NVL(CNTY,0) AS CNTY
             , NVL(CEIL((CNTY/CNT)*100),0)||'%' AS SUCC
             , AVG_PROC_TM
        FROM
        (
                SELECT CASE WHEN GRP_CD IS NOT NULL AND QT IS NULL THEN 'GS'
                            WHEN GRP_CD IS NULL AND QT IS NULL THEN 'TS'
                            ELSE 'D' END AS DATA_GB
                     , CASE WHEN GRP_CD IS NOT NULL AND QT IS NULL THEN '(그룹소계)'||MAX(GRP_CDNM)
                            WHEN GRP_CD IS NULL AND QT IS NULL THEN '합계'
                            ELSE MAX(GRP_CDNM) END  AS GRP_CDNM
                     , QT
                     , SUM(CNT) AS CNT
                     , SUM(CNTY) AS CNTY
                     , AVG_PROC_TM
                  FROM 
                     (
                        SELECT T1.GRP_CD
                             , T1.GRP_CDNM
                             , T1.QT
                             , T2.CNT
                             , T2.CNTY
                             , T2.AVG_PROC_TM
                        FROM 
                        (
                           SELECT A.GRP_CD
                                 , A.GRP_CDNM
                                 , D.QT
                              FROM TBL_GRP_CD A
                                 , ( SELECT #std_year#||'Q1' AS QT FROM DUAL
                                    UNION
                                    SELECT #std_year#||'Q2' AS QT FROM DUAL
                                    UNION
                                    SELECT #std_year#||'Q3' AS QT FROM DUAL
                                    UNION
                                    SELECT #std_year#||'Q4' AS QT FROM DUAL) D
                             WHERE A.GRP_CD  IN ('BNS','ORD','CPN','OBD','OIL')
                            <isNotEmpty property="grp_cd">
                              AND A.GRP_CD = #grp_cd#
                              </isNotEmpty>
                            GROUP BY A.GRP_CD, A.GRP_CDNM, D.QT
                            ORDER BY A.GRP_CD, A.GRP_CDNM, D.QT
                            ) T1,                           
                           (                            
                            SELECT GRP_CD
                                 , CASE WHEN SUBSTR(PROC_DTM,5,2) = '01' OR SUBSTR(PROC_DTM,5,2) = '02' OR SUBSTR(PROC_DTM,5,2) = '03' THEN SUBSTR(PROC_DTM,1,4)||'Q1'
                                        WHEN SUBSTR(PROC_DTM,5,2) = '04' OR SUBSTR(PROC_DTM,5,2) = '05' OR SUBSTR(PROC_DTM,5,2) = '06' THEN SUBSTR(PROC_DTM,1,4)||'Q2'
                                        WHEN SUBSTR(PROC_DTM,5,2) = '07' OR SUBSTR(PROC_DTM,5,2) = '08' OR SUBSTR(PROC_DTM,5,2) = '09' THEN SUBSTR(PROC_DTM,1,4)||'Q3'
                                        WHEN SUBSTR(PROC_DTM,5,2) = '10' OR SUBSTR(PROC_DTM,5,2) = '11' OR SUBSTR(PROC_DTM,5,2) = '12' THEN SUBSTR(PROC_DTM,1,4)||'Q4'
                                   END AS  WKG_QT
                                 , NVL(SUM(CNT), 0) AS CNT
                                 , NVL(SUM(CNTY), 0) AS CNTY
                                 , AVG_PROC_TM                                 
                            FROM
                            (                              
                              SELECT  B.GRP_CD
                                         , SUBSTR(PROC_DTM,0,6) AS PROC_DTM
                                         , COUNT(*) AS CNT                                
                                         , SUM(DECODE(PROC_ST_CD , 'Y', 1,0)) AS CNTY        
                                         , ROUND(SUM(TRUNC((TO_DATE(A.PROC_DTM, 'YYYY-MM-DD HH24:MI:SS') - TO_DATE(A.RECV_DTM, 'YYYY-MM-DD HH24:MI:SS')) * 24))/COUNT(DECODE(PROC_ST_CD , 'Y', 1,0))) AS AVG_PROC_TM                                                                                          
                              FROM TBL_EML_ASGN_LOG A
                                     , TBL_USR B
                                     , TBL_PART_CD C
                                 WHERE A.ASGN_CNSLR_ID = B.USR_ID
                                   AND B.GRP_CD  = C.GRP_CD
                                   AND B.PART_CD = C.PART_CD
                                   AND C.PART_CD NOT IN ('BNS4') 
                                   AND C.USE_YN = 'Y'
                                   AND A.RSV_SEQ_NO like 'CAM080%'
                                   AND B.GRP_CD IN ('BNS', 'ORD','CPN','OBD','OIL')
                                   AND A.PROC_DTM BETWEEN #std_year#||'0101' AND #std_year#||'1231'
                                GROUP BY B.GRP_CD, SUBSTR(A.PROC_DTM, 0, 6)
                                ORDER BY B.GRP_CD, SUBSTR(A.PROC_DTM, 0, 6)                                
                            ) 
                            GROUP BY GRP_CD, PROC_DTM, AVG_PROC_TM
                            ORDER BY GRP_CD, PROC_DTM, AVG_PROC_TM
                        ) T2
                        WHERE T1.GRP_CD  = T2.GRP_CD(+)
                          AND T1.QT      = T2.WKG_QT(+)                          
                        ORDER BY T1.GRP_CD, T1.QT
                    ) TT
                    GROUP BY ROLLUP(GRP_CD, QT, AVG_PROC_TM)
                    HAVING GROUPING_ID(QT, AVG_PROC_TM) IN (0,3)
        )
        WHERE DATA_GB IN ('D','GS','TS')
	</select>
	
	
	<!-- 콜백 처리집계(분기별) -->
 	<select id="Get_DailyCBStat_QT_SELECT" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
		SELECT DATA_GB
             , GRP_CDNM
             , CASE WHEN QT IS NULL THEN '' 
                    ELSE SUBSTR(QT,1,4)||'년'||SUBSTR(QT,6,1)||'분기'
               END AS BASC_YM
             , NVL(CNT,0) AS CNT
             , NVL(ETC1,0) AS ETC1
             , NVL(ETC2,0) AS ETC2
             , NVL(ETC3,0) AS ETC3
             , NVL(ETC4,0) AS ETC4
             , NVL(ETC5,0) AS ETC5
             , NVL(ETC6,0) AS ETC6
             , NVL(ETC7,0) AS ETC7
             , NVL(ETC8,0) AS ETC8
            
        FROM
        (
                SELECT CASE WHEN GRP_CD IS NOT NULL AND QT IS NULL THEN 'GS'
                            WHEN GRP_CD IS NULL AND QT IS NULL THEN 'TS'
                            ELSE 'D' END AS DATA_GB
                     , CASE WHEN GRP_CD IS NOT NULL AND QT IS NULL THEN '(그룹소계)'||MAX(GRP_CDNM)
                            WHEN GRP_CD IS NULL AND QT IS NULL THEN '합계'
                            ELSE MAX(GRP_CDNM) END  AS GRP_CDNM
                     , QT
                     , SUM(CNT) AS CNT
                     , SUM(ETC1) AS ETC1
                     , SUM(ETC2) AS ETC2
                     , SUM(ETC3) AS ETC3
                     , SUM(ETC4) AS ETC4
                     , SUM(ETC5) AS ETC5
                     , SUM(ETC6) AS ETC6
                     , SUM(ETC7) AS ETC7
                     , SUM(ETC8) AS ETC8                     
                     
                  FROM 
                     (
                        SELECT T1.GRP_CD
                             , T1.GRP_CDNM
                             , T1.QT
                             , T2.CNT
                             , T2.ETC1
                             , T2.ETC2
                             , T2.ETC3
                             , T2.ETC4
                             , T2.ETC5
                             , T2.ETC6
                             , T2.ETC7
                             , T2.ETC8      
                        FROM 
                        (
                           SELECT A.GRP_CD
                                 , A.GRP_CDNM
                                 , D.QT
                              FROM TBL_GRP_CD A
                                 , ( SELECT #std_year#||'Q1' AS QT FROM DUAL
                                    UNION
                                    SELECT #std_year#||'Q2' AS QT FROM DUAL
                                    UNION
                                    SELECT #std_year#||'Q3' AS QT FROM DUAL
                                    UNION
                                    SELECT #std_year#||'Q4' AS QT FROM DUAL) D
                             WHERE 1=1
                            <isNotEmpty property="grp_cd">
                              AND A.GRP_CD = #grp_cd#
                              </isNotEmpty>
                            GROUP BY A.GRP_CD, A.GRP_CDNM, D.QT
                            ORDER BY A.GRP_CD, A.GRP_CDNM, D.QT
                            ) T1,                           
                           (                            
                            SELECT GRP_CD
                                 , CASE WHEN SUBSTR(PROC_DT,5,2) = '01' OR SUBSTR(PROC_DT,5,2) = '02' OR SUBSTR(PROC_DT,5,2) = '03' THEN SUBSTR(PROC_DT,1,4)||'Q1'
                                        WHEN SUBSTR(PROC_DT,5,2) = '04' OR SUBSTR(PROC_DT,5,2) = '05' OR SUBSTR(PROC_DT,5,2) = '06' THEN SUBSTR(PROC_DT,1,4)||'Q2'
                                        WHEN SUBSTR(PROC_DT,5,2) = '07' OR SUBSTR(PROC_DT,5,2) = '08' OR SUBSTR(PROC_DT,5,2) = '09' THEN SUBSTR(PROC_DT,1,4)||'Q3'
                                        WHEN SUBSTR(PROC_DT,5,2) = '10' OR SUBSTR(PROC_DT,5,2) = '11' OR SUBSTR(PROC_DT,5,2) = '12' THEN SUBSTR(PROC_DT,1,4)||'Q4'
                                   END AS  WKG_QT
                                 , NVL(SUM(CNT), 0) AS CNT
                                 , NVL(SUM(ETC1), 0) AS ETC1                                 
                                 , NVL(SUM(ETC2), 0) AS ETC2                                 
                                 , NVL(SUM(ETC3), 0) AS ETC3
                                 , NVL(SUM(ETC4), 0) AS ETC4
                                 , NVL(SUM(ETC5), 0) AS ETC5
                                 , NVL(SUM(ETC6), 0) AS ETC6
                                 , NVL(SUM(ETC7), 0) AS ETC7
                                 , NVL(SUM(ETC8), 0) AS ETC8
                                 
                            FROM
                            (                              
                              SELECT  B.GRP_CD
                                         , SUBSTR(PROC_DT,0,6) AS PROC_DT
                                         , COUNT(*) AS CNT                                
                                         , SUM(DECODE(A.CUR_TYP_CD , '01', 1,0)) AS ETC1  <!--통화성공-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '22', 1,0)) AS ETC2  <!--미수신-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '21', 1,0)) AS ETC3  <!--통화중-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '13', 1,0)) AS ETC4   <!--결번-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '12', 1,0)) AS ETC5   <!--거부-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '11', 1,0)) AS ETC6   <!--재시도요청-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '99', 1,0)) AS ETC7   <!--기타-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '23', 1,0)) AS ETC8   <!--오번호-->                                                                                                                  
                              FROM TBL_CALLBACK_HIST A
                                     , TBL_USR B
                                     , TBL_PART_CD C
                                 WHERE A.ASSGN_ID = B.USR_ID
                                   AND B.GRP_CD  = C.GRP_CD
                                   AND B.PART_CD = C.PART_CD                                    
                                   AND C.USE_YN = 'Y'                                 
                                   AND A.PROC_DT BETWEEN #std_year#||'0101' AND #std_year#||'1231'
                                GROUP BY B.GRP_CD, SUBSTR(A.PROC_DT, 0, 6)
                                ORDER BY B.GRP_CD, SUBSTR(A.PROC_DT, 0, 6)                                
                            ) 
                            GROUP BY GRP_CD, PROC_DT
                            ORDER BY GRP_CD, PROC_DT                            
                        ) T2
                        WHERE T1.GRP_CD  = T2.GRP_CD(+)
                          AND T1.QT      = T2.WKG_QT(+)                          
                        ORDER BY T1.GRP_CD, T1.QT
                    ) TT
                    GROUP BY ROLLUP(GRP_CD, QT)
        )
        WHERE DATA_GB IN ('D','GS','TS')
	</select>
	
	
<!--  메일처리집계 (월별) -->
 	<select id="Get_DailyMailStat_MM_SELECT" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
		SELECT DATA_GB
             , GRP_CDNM
             , CASE WHEN QT IS NULL THEN '' 
                    ELSE SUBSTR(QT,1,4)||'년'||SUBSTR(QT,5,2)||'월'
               END AS BASC_YM
             , NVL(CNT,0) AS CNT
             , NVL(CNTY,0) AS CNTY
             , NVL(CEIL((CNTY/CNT)*100),0)||'%'  AS SUCC
             , AVG_PROC_TM
        FROM
        (
                SELECT CASE WHEN GRP_CD IS NOT NULL AND QT IS NULL THEN 'GS'
                            WHEN GRP_CD IS NULL AND QT IS NULL THEN 'TS'
                            ELSE 'D' END AS DATA_GB
                     , CASE WHEN GRP_CD IS NOT NULL AND QT IS NULL THEN '(그룹소계)'||MAX(GRP_CDNM)
                            WHEN GRP_CD IS NULL AND QT IS NULL THEN '합계'
                            ELSE MAX(GRP_CDNM) END  AS GRP_CDNM
                     , QT
                     , SUM(CNT) AS CNT
                     , SUM(CNTY) AS CNTY
                     , AVG_PROC_TM
                  FROM 
                     (
                        SELECT T1.GRP_CD
                             , T1.GRP_CDNM
                             , T1.QT
                             , T2.CNT
                             , T2.CNTY
                             , T2.AVG_PROC_TM
                        FROM 
                        (                           
                           SELECT A.GRP_CD
                                 , A.GRP_CDNM
                                 , SUBSTR(D.BASC_DT, 1, 6) AS QT
                              FROM TBL_GRP_CD A
                                , TBL_BUSSDD_INFO D
                             WHERE A.GRP_CD  IN ('BNS','ORD','CPN','OBD','OIL')
                            <isNotEmpty property="grp_cd">
                              AND A.GRP_CD = #grp_cd#
                              </isNotEmpty>
                               AND SUBSTR(D.BASC_DT, 1, 4) =  #std_year#
                            GROUP BY A.GRP_CD, A.GRP_CDNM, SUBSTR(D.BASC_DT, 1, 6)
                            ORDER BY A.GRP_CD, A.GRP_CDNM, SUBSTR(D.BASC_DT, 1, 6)
                            ) T1,                           
                           (                            
                            SELECT GRP_CD
                                 , SUBSTR(PROC_DTM,0,6) AS WKG_QT
                                 , NVL(SUM(CNT), 0) AS CNT
                                 , NVL(SUM(CNTY), 0) AS CNTY              
                                 , AVG_PROC_TM                   
                            FROM
                            (                              
                              SELECT  B.GRP_CD
                                         , SUBSTR(PROC_DTM,0,6) AS PROC_DTM
                                         , COUNT(*) AS CNT                                
                                         , SUM(DECODE(PROC_ST_CD , 'Y', 1,0)) AS CNTY      
                                         , ROUND(SUM(TRUNC((TO_DATE(A.PROC_DTM, 'YYYY-MM-DD HH24:MI:SS') - TO_DATE(A.RECV_DTM, 'YYYY-MM-DD HH24:MI:SS')) * 24))/COUNT(DECODE(PROC_ST_CD , 'Y', 1,0))) AS AVG_PROC_TM                                                                                            
                              FROM TBL_EML_ASGN_LOG A
                                     , TBL_USR B
                                     , TBL_PART_CD C
                                 WHERE A.ASGN_CNSLR_ID = B.USR_ID
                                   AND B.GRP_CD  = C.GRP_CD
                                   AND B.PART_CD = C.PART_CD
                                   AND A.RSV_SEQ_NO like 'CAM080%'
                                   AND C.PART_CD NOT IN ('BNS4') 
                                   AND C.USE_YN = 'Y'
                                   AND B.GRP_CD IN ('BNS', 'ORD','CPN','OBD','OIL')
                                   AND A.PROC_DTM BETWEEN #std_year#||'0101' AND #std_year#||'1231'
                                GROUP BY B.GRP_CD, SUBSTR(A.PROC_DTM, 0, 6)
                                ORDER BY B.GRP_CD, SUBSTR(A.PROC_DTM, 0, 6)                                
                            ) 
                            GROUP BY GRP_CD, PROC_DTM, AVG_PROC_TM
                            ORDER BY GRP_CD, PROC_DTM, AVG_PROC_TM
                        ) T2
                        WHERE T1.GRP_CD  = T2.GRP_CD(+)
                          AND T1.QT      = T2.WKG_QT(+)                          
                        ORDER BY T1.GRP_CD, T1.QT
                    ) TT
                    GROUP BY ROLLUP(GRP_CD, QT, AVG_PROC_TM)
                    HAVING GROUPING_ID(QT, AVG_PROC_TM) IN (0,3)
        )
        WHERE DATA_GB IN ('D','GS','TS')
	</select>
	
	<!--  콜백 처리집계 (월별) -->
 	<select id="Get_DailyCBStat_MM_SELECT" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
	SELECT DATA_GB
             , GRP_CDNM
             , CASE WHEN QT IS NULL THEN '' 
                    ELSE SUBSTR(QT,1,4)||'년'||SUBSTR(QT,5,2)||'월'
               END AS BASC_YM
             , NVL(CNT,0) AS CNT
             , NVL(ETC1,0) AS ETC1
             , NVL(ETC2,0) AS ETC2
             , NVL(ETC3,0) AS ETC3
             , NVL(ETC4,0) AS ETC4
             , NVL(ETC5,0) AS ETC5
             , NVL(ETC6,0) AS ETC6
             , NVL(ETC7,0) AS ETC7
             , NVL(ETC8,0) AS ETC8
        FROM
        (
                SELECT CASE WHEN GRP_CD IS NOT NULL AND QT IS NULL THEN 'GS'
                            WHEN GRP_CD IS NULL AND QT IS NULL THEN 'TS'
                            ELSE 'D' END AS DATA_GB
                     , CASE WHEN GRP_CD IS NOT NULL AND QT IS NULL THEN '(그룹소계)'||MAX(GRP_CDNM)
                            WHEN GRP_CD IS NULL AND QT IS NULL THEN '합계'
                            ELSE MAX(GRP_CDNM) END  AS GRP_CDNM
                     , QT
                     , SUM(CNT) AS CNT
                     , SUM(ETC1) AS ETC1
                     , SUM(ETC2) AS ETC2
                     , SUM(ETC3) AS ETC3
                     , SUM(ETC4) AS ETC4
                     , SUM(ETC5) AS ETC5
                     , SUM(ETC6) AS ETC6
                     , SUM(ETC7) AS ETC7
                     , SUM(ETC8) AS ETC8       
                  FROM 
                     (
                        SELECT T1.GRP_CD
                             , T1.GRP_CDNM
                             , T1.QT
                             , T2.CNT
                             , T2.ETC1
                             , T2.ETC2
                             , T2.ETC3
                             , T2.ETC4
                             , T2.ETC5
                             , T2.ETC6
                             , T2.ETC7
                             , T2.ETC8      
                        FROM 
                        (                           
                           SELECT A.GRP_CD
                                 , A.GRP_CDNM
                                 , SUBSTR(D.BASC_DT, 1, 6) AS QT
                              FROM TBL_GRP_CD A
                                , TBL_BUSSDD_INFO D
                             WHERE 1=1
                            <isNotEmpty property="grp_cd">
                              AND A.GRP_CD = #grp_cd#
                              </isNotEmpty>
                               AND SUBSTR(D.BASC_DT, 1, 4) =  #std_year#
                            GROUP BY A.GRP_CD, A.GRP_CDNM, SUBSTR(D.BASC_DT, 1, 6)
                            ORDER BY A.GRP_CD, A.GRP_CDNM, SUBSTR(D.BASC_DT, 1, 6)
                            ) T1,                           
                           (                            
                            SELECT GRP_CD
                                 , SUBSTR(PROC_DT,0,6) AS WKG_QT
                                 , NVL(SUM(CNT), 0) AS CNT
                                 , NVL(SUM(ETC1), 0) AS ETC1                                 
                                 , NVL(SUM(ETC2), 0) AS ETC2                                 
                                 , NVL(SUM(ETC3), 0) AS ETC3
                                 , NVL(SUM(ETC4), 0) AS ETC4
                                 , NVL(SUM(ETC5), 0) AS ETC5
                                 , NVL(SUM(ETC6), 0) AS ETC6
                                 , NVL(SUM(ETC7), 0) AS ETC7
                                 , NVL(SUM(ETC8), 0) AS ETC8              
                            FROM
                            (                              
                              SELECT  B.GRP_CD
                                         , SUBSTR(PROC_DT,0,6) AS PROC_DT
                                         , COUNT(*) AS CNT                                
                                         , SUM(DECODE(A.CUR_TYP_CD , '01', 1,0)) AS ETC1  <!--통화성공-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '22', 1,0)) AS ETC2  <!--미수신-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '21', 1,0)) AS ETC3   <!--통화중-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '13', 1,0)) AS ETC4   <!--결번-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '12', 1,0)) AS ETC5   <!--거부-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '11', 1,0)) AS ETC6   <!--재시도요청-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '99', 1,0)) AS ETC7   <!--기타-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '23', 1,0)) AS ETC8   <!--오번호-->                                                                                                             
                              FROM TBL_CALLBACK_HIST A
                                     , TBL_USR B
                                     , TBL_PART_CD C
                                 WHERE A.ASSGN_ID = B.USR_ID
                                   AND B.GRP_CD  = C.GRP_CD
                                   AND B.PART_CD = C.PART_CD                                   
                                   AND C.USE_YN = 'Y'                                   
                                   AND A.PROC_DT BETWEEN #std_year#||'0101' AND #std_year#||'1231'
                                GROUP BY B.GRP_CD, SUBSTR(A.PROC_DT, 0, 6)
                                ORDER BY B.GRP_CD, SUBSTR(A.PROC_DT, 0, 6)                                
                            ) 
                            GROUP BY GRP_CD, PROC_DT
                            ORDER BY GRP_CD, PROC_DT                            
                        ) T2
                        WHERE T1.GRP_CD  = T2.GRP_CD(+)
                          AND T1.QT      = T2.WKG_QT(+)                          
                        ORDER BY T1.GRP_CD, T1.QT
                    ) TT
                    GROUP BY ROLLUP(GRP_CD, QT)
        )
        WHERE DATA_GB IN ('D','GS','TS')
	</select>
	
	
<!-- 메일처리집계 (주별:1주차부터 최대5주차까지) -->
 	<select id="Get_DailyMailStat_WK_SELECT" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
		SELECT DATA_GB
             , GRP_CDNM
             , CASE WHEN QT IS NULL THEN ''                    
                    ELSE SUBSTR(QT,1,4)||'년'||SUBSTR(QT,5,2)||'월'||SUBSTR(QT,8,1)||'주차'
               END AS BASC_YM
             , NVL(CNT,0) AS CNT
             , NVL(CNTY,0) AS CNTY
             , NVL(CEIL((CNTY/CNT)*100),0)||'%' AS SUCC
             , AVG_PROC_TM
        FROM
        (
                SELECT CASE WHEN GRP_CD IS NOT NULL AND QT IS NULL THEN 'GS'
                            WHEN GRP_CD IS NULL AND QT IS NULL THEN 'TS'
                            ELSE 'D' END AS DATA_GB
                     , CASE WHEN GRP_CD IS NOT NULL AND QT IS NULL THEN '(그룹소계)'||MAX(GRP_CDNM)
                            WHEN GRP_CD IS NULL AND QT IS NULL THEN '합계'
                            ELSE MAX(GRP_CDNM) END  AS GRP_CDNM
                     , QT
                     , SUM(CNT) AS CNT
                     , SUM(CNTY) AS CNTY
                     , AVG_PROC_TM
                  FROM 
                     (
                        SELECT T1.GRP_CD
                             , T1.GRP_CDNM
                             , T1.QT
                             , T2.CNT
                             , T2.CNTY
                             , T2.AVG_PROC_TM
                        FROM 
                        (                           
                           SELECT A.GRP_CD
                                 , A.GRP_CDNM
                                 , D.BASC_DT AS QT
                              FROM TBL_GRP_CD A ,
                                ( 
                                    SELECT #std_ym#||'W1' AS BASC_DT FROM DUAL
                                    UNION
                                    SELECT #std_ym#||'W2' AS BASC_DT FROM DUAL
                                    UNION
                                    SELECT #std_ym#||'W3' AS BASC_DT FROM DUAL
                                    UNION
                                    SELECT #std_ym#||'W4' AS BASC_DT FROM DUAL
                                    UNION
                                    SELECT #std_ym#||'W5' AS BASC_DT FROM DUAL
                                    ) D
                             WHERE A.GRP_CD  IN ('BNS','ORD','CPN','OBD','OIL')
                           <isNotEmpty property="grp_cd">
                              AND A.GRP_CD = #grp_cd#
                           </isNotEmpty>                      
                            GROUP BY A.GRP_CD, A.GRP_CDNM, BASC_DT
                            ORDER BY A.GRP_CD, A.GRP_CDNM, BASC_DT
                            ) T1,                           
                           (          
                            SELECT GRP_CD
                                 , PROC_DTM AS WKG_QT
                                 , NVL(SUM(CNT), 0) AS CNT
                                 , NVL(SUM(CNTY), 0) AS CNTY           
                                 , AVG_PROC_TM                      
                            FROM
                            (                                                          
                              SELECT  B.GRP_CD
                                         , SUBSTR(A.PROC_DTM,0,6)||'W1' AS PROC_DTM
                                         , COUNT(*) AS CNT                                
                                         , SUM(DECODE(PROC_ST_CD , 'Y', 1,0)) AS CNTY                     
                                         , ROUND(SUM(TRUNC((TO_DATE(A.PROC_DTM, 'YYYY-MM-DD HH24:MI:SS') - TO_DATE(A.RECV_DTM, 'YYYY-MM-DD HH24:MI:SS')) * 24))/COUNT(DECODE(PROC_ST_CD , 'Y', 1,0))) AS AVG_PROC_TM                                                                             
                                FROM TBL_EML_ASGN_LOG A
                                     , TBL_USR B
                                     , TBL_PART_CD C
                                 WHERE A.ASGN_CNSLR_ID = B.USR_ID
                                   AND B.GRP_CD  = C.GRP_CD
                                   AND B.PART_CD = C.PART_CD
                                   AND C.PART_CD NOT IN ('BNS4') 
                                   AND C.USE_YN = 'Y'
                                   AND B.GRP_CD IN ('BNS', 'ORD','CPN','OBD','OIL')
                                   AND A.RSV_SEQ_NO like 'CAM080%'
                                   AND SUBSTR(A.PROC_DTM,0,8) BETWEEN #from_dt_wk1# AND #to_dt_wk1#
                                GROUP BY B.GRP_CD, SUBSTR(A.PROC_DTM, 0, 6)
                            UNION
                                SELECT  B.GRP_CD
                                         , SUBSTR(PROC_DTM,0,6)||'W2' AS PROC_DTM
                                         , COUNT(*) AS CNT                                
                                         , SUM(DECODE(PROC_ST_CD , 'Y', 1,0)) AS CNTY     
                                         , ROUND(SUM(TRUNC((TO_DATE(A.PROC_DTM, 'YYYY-MM-DD HH24:MI:SS') - TO_DATE(A.RECV_DTM, 'YYYY-MM-DD HH24:MI:SS')) * 24))/COUNT(DECODE(PROC_ST_CD , 'Y', 1,0))) AS AVG_PROC_TM                                                                                             
                                FROM TBL_EML_ASGN_LOG A
                                     , TBL_USR B
                                     , TBL_PART_CD C
                                 WHERE A.ASGN_CNSLR_ID = B.USR_ID
                                   AND B.GRP_CD  = C.GRP_CD
                                   AND B.PART_CD = C.PART_CD
                                   AND C.PART_CD NOT IN ('BNS4') 
                                   AND C.USE_YN = 'Y'
                                   AND B.GRP_CD IN ('BNS', 'ORD','CPN','OBD','OIL')
                                   AND SUBSTR(A.PROC_DTM,0,8) BETWEEN #from_dt_wk2# AND #to_dt_wk2#
                                GROUP BY B.GRP_CD, SUBSTR(A.PROC_DTM, 0, 6)
                            UNION
                                SELECT  B.GRP_CD
                                         , SUBSTR(PROC_DTM,0,6)||'W3' AS PROC_DTM
                                         , COUNT(*) AS CNT                                
                                         , SUM(DECODE(PROC_ST_CD , 'Y', 1,0)) AS CNTY        
                                         , ROUND(SUM(TRUNC((TO_DATE(A.PROC_DTM, 'YYYY-MM-DD HH24:MI:SS') - TO_DATE(A.RECV_DTM, 'YYYY-MM-DD HH24:MI:SS')) * 24))/COUNT(DECODE(PROC_ST_CD , 'Y', 1,0))) AS AVG_PROC_TM                                                                                          
                                 FROM TBL_EML_ASGN_LOG A
                                     , TBL_USR B
                                     , TBL_PART_CD C
                                 WHERE A.ASGN_CNSLR_ID = B.USR_ID
                                   AND B.GRP_CD  = C.GRP_CD
                                   AND B.PART_CD = C.PART_CD
                                   AND C.PART_CD NOT IN ('BNS4') 
                                   AND C.USE_YN = 'Y'
                                   AND B.GRP_CD IN ('BNS', 'ORD','CPN','OBD','OIL')
                                   AND SUBSTR(A.PROC_DTM,0,8) BETWEEN #from_dt_wk3# AND #to_dt_wk3#
                                GROUP BY B.GRP_CD, SUBSTR(A.PROC_DTM, 0, 6)
                            UNION
                                SELECT  B.GRP_CD
                                         , SUBSTR(PROC_DTM,0,6)||'W4' AS PROC_DTM
                                         , COUNT(*) AS CNT                                
                                         , SUM(DECODE(PROC_ST_CD , 'Y', 1,0)) AS CNTY 
                                         , ROUND(SUM(TRUNC((TO_DATE(A.PROC_DTM, 'YYYY-MM-DD HH24:MI:SS') - TO_DATE(A.RECV_DTM, 'YYYY-MM-DD HH24:MI:SS')) * 24))/COUNT(DECODE(PROC_ST_CD , 'Y', 1,0))) AS AVG_PROC_TM                                                                                                 
                                FROM TBL_EML_ASGN_LOG A
                                   , TBL_USR B
                                     , TBL_PART_CD C
                                 WHERE A.ASGN_CNSLR_ID = B.USR_ID
                                   AND B.GRP_CD  = C.GRP_CD
                                   AND B.PART_CD = C.PART_CD
                                   AND C.PART_CD NOT IN ('BNS4') 
                                   AND C.USE_YN = 'Y'
                                   AND B.GRP_CD IN ('BNS', 'ORD','CPN','OBD','OIL')
                                   AND SUBSTR(A.PROC_DTM,0,8) BETWEEN #from_dt_wk4# AND #to_dt_wk4#
                                GROUP BY B.GRP_CD, SUBSTR(A.PROC_DTM, 0, 6)
                             UNION
                                SELECT  B.GRP_CD
                                         , SUBSTR(PROC_DTM,0,6)||'W5' AS PROC_DTM
                                         , COUNT(*) AS CNT                                
                                         , SUM(DECODE(PROC_ST_CD , 'Y', 1,0)) AS CNTY     
                                         , ROUND(SUM(TRUNC((TO_DATE(A.PROC_DTM, 'YYYY-MM-DD HH24:MI:SS') - TO_DATE(A.RECV_DTM, 'YYYY-MM-DD HH24:MI:SS')) * 24))/COUNT(DECODE(PROC_ST_CD , 'Y', 1,0))) AS AVG_PROC_TM                                                                                             
                                FROM TBL_EML_ASGN_LOG A
                                     , TBL_USR B
                                     , TBL_PART_CD C
                                 WHERE A.ASGN_CNSLR_ID = B.USR_ID
                                   AND B.GRP_CD  = C.GRP_CD
                                   AND B.PART_CD = C.PART_CD
                                   AND C.PART_CD NOT IN ('BNS4') 
                                   AND C.USE_YN = 'Y'
                                   AND B.GRP_CD IN ('BNS', 'ORD','CPN','OBD','OIL')
                                   AND SUBSTR(A.PROC_DTM,0,8) BETWEEN #from_dt_wk5# AND #to_dt_wk5#
                                GROUP BY B.GRP_CD, SUBSTR(A.PROC_DTM, 0, 6)                                
                            ) 
                            GROUP BY GRP_CD, PROC_DTM, AVG_PROC_TM
                            ORDER BY GRP_CD, PROC_DTM, AVG_PROC_TM
                        ) T2
                        WHERE T1.GRP_CD  = T2.GRP_CD(+)
                          AND T1.QT      = T2.WKG_QT(+)                          
                        ORDER BY T1.GRP_CD, T1.QT
                    ) TT
                    GROUP BY ROLLUP(GRP_CD, QT, AVG_PROC_TM)
                    HAVING GROUPING_ID(QT, AVG_PROC_TM) IN (0,3)
        )
        WHERE DATA_GB IN ('D','GS','TS')
	</select>
	
<!-- 콜백 처리집계 (주별:1주차부터 최대5주차까지) -->
 	<select id="Get_DailyCBStat_WK_SELECT" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
		SELECT DATA_GB
             , GRP_CDNM
             , CASE WHEN QT IS NULL THEN ''                    
                    ELSE SUBSTR(QT,1,4)||'년'||SUBSTR(QT,5,2)||'월'||SUBSTR(QT,8,1)||'주차'
               END AS BASC_YM
             , NVL(CNT,0) AS CNT
             , NVL(ETC1,0) AS ETC1
             , NVL(ETC2,0) AS ETC2
             , NVL(ETC3,0) AS ETC3
             , NVL(ETC4,0) AS ETC4
             , NVL(ETC5,0) AS ETC5
             , NVL(ETC6,0) AS ETC6
             , NVL(ETC7,0) AS ETC7
             , NVL(ETC8,0) AS ETC8
        FROM
        (
                SELECT CASE WHEN GRP_CD IS NOT NULL AND QT IS NULL THEN 'GS'
                            WHEN GRP_CD IS NULL AND QT IS NULL THEN 'TS'
                            ELSE 'D' END AS DATA_GB
                     , CASE WHEN GRP_CD IS NOT NULL AND QT IS NULL THEN '(그룹소계)'||MAX(GRP_CDNM)
                            WHEN GRP_CD IS NULL AND QT IS NULL THEN '합계'
                            ELSE MAX(GRP_CDNM) END  AS GRP_CDNM
                     , QT
                     , SUM(CNT) AS CNT
                     , SUM(ETC1) AS ETC1
                     , SUM(ETC2) AS ETC2
                     , SUM(ETC3) AS ETC3
                     , SUM(ETC4) AS ETC4
                     , SUM(ETC5) AS ETC5
                     , SUM(ETC6) AS ETC6
                     , SUM(ETC7) AS ETC7
                     , SUM(ETC8) AS ETC8    
                  FROM 
                     (
                        SELECT T1.GRP_CD
                             , T1.GRP_CDNM
                             , T1.QT
                             , T2.CNT
                             , T2.ETC1
                             , T2.ETC2
                             , T2.ETC3
                             , T2.ETC4
                             , T2.ETC5
                             , T2.ETC6
                             , T2.ETC7
                             , T2.ETC8  
                        FROM 
                        (                           
                           SELECT A.GRP_CD
                                 , A.GRP_CDNM
                                 , D.BASC_DT AS QT
                              FROM TBL_GRP_CD A ,
                                ( 
                                    SELECT #std_ym#||'W1' AS BASC_DT FROM DUAL
                                    UNION
                                    SELECT #std_ym#||'W2' AS BASC_DT FROM DUAL
                                    UNION
                                    SELECT #std_ym#||'W3' AS BASC_DT FROM DUAL
                                    UNION
                                    SELECT #std_ym#||'W4' AS BASC_DT FROM DUAL
                                    UNION
                                    SELECT #std_ym#||'W5' AS BASC_DT FROM DUAL
                                    ) D
                             WHERE 1=1
                           <isNotEmpty property="grp_cd">
                              AND A.GRP_CD = #grp_cd#
                           </isNotEmpty>                      
                            GROUP BY A.GRP_CD, A.GRP_CDNM, BASC_DT
                            ORDER BY A.GRP_CD, A.GRP_CDNM, BASC_DT
                            ) T1,                           
                           (          
                            SELECT GRP_CD
                                 , PROC_DT AS WKG_QT
                                 , NVL(SUM(CNT), 0) AS CNT                                 
                                 , NVL(SUM(ETC1), 0) AS ETC1                                 
                                 , NVL(SUM(ETC2), 0) AS ETC2                                 
                                 , NVL(SUM(ETC3), 0) AS ETC3
                                 , NVL(SUM(ETC4), 0) AS ETC4
                                 , NVL(SUM(ETC5), 0) AS ETC5
                                 , NVL(SUM(ETC6), 0) AS ETC6
                                 , NVL(SUM(ETC7), 0) AS ETC7
                                 , NVL(SUM(ETC8), 0) AS ETC8                                 
                            FROM
                            (                                                          
                              SELECT  B.GRP_CD
                                         , SUBSTR(A.PROC_DT,0,6)||'W1' AS PROC_DT
                                         , COUNT(*) AS CNT                                
                                         , SUM(DECODE(A.CUR_TYP_CD , '01', 1,0)) AS ETC1  <!--통화성공-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '22', 1,0)) AS ETC2  <!--미수신-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '21', 1,0)) AS ETC3  <!--통화중-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '13', 1,0)) AS ETC4  <!--결번-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '12', 1,0)) AS ETC5  <!--거부-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '11', 1,0)) AS ETC6  <!--재시도요청-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '99', 1,0)) AS ETC7  <!--기타-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '23', 1,0)) AS ETC8  <!--오번호-->                                                                                                            
                                FROM TBL_CALLBACK_HIST A
                                     , TBL_USR B
                                     , TBL_PART_CD C
                                 WHERE A.ASSGN_ID = B.USR_ID
                                   AND B.GRP_CD  = C.GRP_CD
                                   AND B.PART_CD = C.PART_CD                                 
                                   AND C.USE_YN = 'Y'                                
                                   AND SUBSTR(A.PROC_DT,0,8) BETWEEN #from_dt_wk1# AND #to_dt_wk1#
                                GROUP BY B.GRP_CD, SUBSTR(A.PROC_DT, 0, 6)
                            UNION
                                SELECT  B.GRP_CD
                                         , SUBSTR(PROC_DT,0,6)||'W2' AS PROC_DT
                                         , COUNT(*) AS CNT                                
                                         , SUM(DECODE(A.CUR_TYP_CD , '01', 1,0)) AS ETC1  <!--통화성공-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '22', 1,0)) AS ETC2  <!--미수신-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '21', 1,0)) AS ETC3  <!--통화중-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '13', 1,0)) AS ETC4  <!--결번-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '12', 1,0)) AS ETC5  <!--거부-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '11', 1,0)) AS ETC6  <!--재시도요청-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '99', 1,0)) AS ETC7  <!--기타-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '23', 1,0)) AS ETC8  <!--오번호-->                                                                                                               
                                FROM TBL_CALLBACK_HIST A
                                     , TBL_USR B
                                     , TBL_PART_CD C
                                 WHERE A.ASSGN_ID = B.USR_ID
                                   AND B.GRP_CD  = C.GRP_CD
                                   AND B.PART_CD = C.PART_CD                                 
                                   AND C.USE_YN = 'Y'                                   
                                   AND SUBSTR(A.PROC_DT,0,8) BETWEEN #from_dt_wk2# AND #to_dt_wk2#
                                GROUP BY B.GRP_CD, SUBSTR(A.PROC_DT, 0, 6)
                            UNION
                                SELECT  B.GRP_CD
                                         , SUBSTR(PROC_DT,0,6)||'W3' AS PROC_DT
                                         , COUNT(*) AS CNT                                
                                         , SUM(DECODE(A.CUR_TYP_CD , '01', 1,0)) AS ETC1  <!--통화성공-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '22', 1,0)) AS ETC2  <!--미수신-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '21', 1,0)) AS ETC3  <!--통화중-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '13', 1,0)) AS ETC4  <!--결번-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '12', 1,0)) AS ETC5  <!--거부-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '11', 1,0)) AS ETC6  <!--재시도요청-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '99', 1,0)) AS ETC7  <!--기타-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '23', 1,0)) AS ETC8  <!--오번호-->                                                                                                          
                                 FROM TBL_CALLBACK_HIST A
                                     , TBL_USR B
                                     , TBL_PART_CD C
                                 WHERE A.ASSGN_ID = B.USR_ID
                                   AND B.GRP_CD  = C.GRP_CD
                                   AND B.PART_CD = C.PART_CD                                  
                                   AND C.USE_YN = 'Y'                                  
                                   AND SUBSTR(A.PROC_DT,0,8) BETWEEN #from_dt_wk3# AND #to_dt_wk3#
                                GROUP BY B.GRP_CD, SUBSTR(A.PROC_DT, 0, 6)
                            UNION
                                SELECT  B.GRP_CD
                                         , SUBSTR(PROC_DT,0,6)||'W4' AS PROC_DT
                                         , COUNT(*) AS CNT                                
                                         , SUM(DECODE(A.CUR_TYP_CD , '01', 1,0)) AS ETC1  <!--통화성공-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '22', 1,0)) AS ETC2  <!--미수신-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '21', 1,0)) AS ETC3  <!--통화중-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '13', 1,0)) AS ETC4  <!--결번-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '12', 1,0)) AS ETC5  <!--거부-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '11', 1,0)) AS ETC6  <!--재시도요청-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '99', 1,0)) AS ETC7  <!--기타-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '23', 1,0)) AS ETC8  <!--오번호-->                                                                                                    
                               FROM TBL_CALLBACK_HIST A
                                     , TBL_USR B
                                     , TBL_PART_CD C
                                 WHERE A.ASSGN_ID = B.USR_ID
                                   AND B.GRP_CD  = C.GRP_CD
                                   AND B.PART_CD = C.PART_CD
                                   AND C.USE_YN = 'Y'                                   
                                   AND SUBSTR(A.PROC_DT,0,8) BETWEEN #from_dt_wk4# AND #to_dt_wk4#
                                GROUP BY B.GRP_CD, SUBSTR(A.PROC_DT, 0, 6)
                             UNION
                                SELECT  B.GRP_CD
                                         , SUBSTR(PROC_DT,0,6)||'W5' AS PROC_DT
                                         , COUNT(*) AS CNT                                
                                         , SUM(DECODE(A.CUR_TYP_CD , '01', 1,0)) AS ETC1  <!--통화성공-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '22', 1,0)) AS ETC2  <!--미수신-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '21', 1,0)) AS ETC3  <!--통화중-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '13', 1,0)) AS ETC4  <!--결번-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '12', 1,0)) AS ETC5  <!--거부-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '11', 1,0)) AS ETC6  <!--재시도요청-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '99', 1,0)) AS ETC7  <!--기타-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '23', 1,0)) AS ETC8  <!--오번호-->                                                                                                        
                                FROM TBL_CALLBACK_HIST A
                                     , TBL_USR B
                                     , TBL_PART_CD C
                                 WHERE A.ASSGN_ID = B.USR_ID
                                   AND B.GRP_CD  = C.GRP_CD
                                   AND B.PART_CD = C.PART_CD                                    
                                   AND C.USE_YN = 'Y'                                   
                                   AND SUBSTR(A.PROC_DT,0,8) BETWEEN #from_dt_wk5# AND #to_dt_wk5#
                                GROUP BY B.GRP_CD, SUBSTR(A.PROC_DT, 0, 6)                                
                            ) 
                            GROUP BY GRP_CD, PROC_DT
                            ORDER BY GRP_CD, PROC_DT                      
                        ) T2
                        WHERE T1.GRP_CD  = T2.GRP_CD(+)
                          AND T1.QT      = T2.WKG_QT(+)                          
                        ORDER BY T1.GRP_CD, T1.QT
                    ) TT
                    GROUP BY ROLLUP(GRP_CD, QT)
        )
        WHERE DATA_GB IN ('D','GS','TS')   
	</select>	
	
<!--   메일처리집계 (일별) -->
<select id="Get_DailyMailStat_DD_SELECT" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
		SELECT DATA_GB
             , GRP_CDNM
             , CASE WHEN QT IS NULL THEN '' 
                     ELSE SUBSTR(QT,1,4)||'-'||SUBSTR(QT,5,2)||'-'||SUBSTR(QT,7,2)
               END AS BASC_YM
             , NVL(CNT,0) AS CNT
             , NVL(CNTY,0) AS CNTY
             , AVG_PROC_TM
             , NVL(CEIL((CNTY/CNT)*100),0)||'%'  AS SUCC
        FROM
        (
                SELECT CASE WHEN GRP_CD IS NOT NULL AND QT IS NULL THEN 'GS'
                            WHEN GRP_CD IS NULL AND QT IS NULL THEN 'TS'
                            ELSE 'D' END AS DATA_GB
                     , CASE WHEN GRP_CD IS NOT NULL AND QT IS NULL THEN '(그룹소계)'||MAX(GRP_CDNM)
                            WHEN GRP_CD IS NULL AND QT IS NULL THEN '합계'
                            ELSE MAX(GRP_CDNM) END  AS GRP_CDNM
                     , QT
                     , SUM(CNT) AS CNT
                     , SUM(CNTY) AS CNTY
                     , AVG_PROC_TM
                  FROM 
                     (
                        SELECT T1.GRP_CD
                             , T1.GRP_CDNM
                             , T1.QT
                             , T2.CNT
                             , T2.CNTY
                             , T2.AVG_PROC_TM
                        FROM 
                        (                           
                           SELECT A.GRP_CD
                                 , A.GRP_CDNM
                                 , SUBSTR(D.BASC_DT, 1, 8) AS QT
                              FROM TBL_GRP_CD A
                                , TBL_BUSSDD_INFO D
                             WHERE A.GRP_CD  IN ('BNS','ORD','CPN','OBD','OIL')
                            <isNotEmpty property="grp_cd">
                              AND A.GRP_CD = #grp_cd#
                              </isNotEmpty>
                               AND SUBSTR(D.BASC_DT, 1, 8) BETWEEN #from_dt# AND #to_dt#
                            GROUP BY A.GRP_CD, A.GRP_CDNM, SUBSTR(D.BASC_DT, 1, 8)
                            ORDER BY A.GRP_CD, A.GRP_CDNM, SUBSTR(D.BASC_DT, 1, 8)
                            ) T1,                           
                           (                            
                            SELECT GRP_CD
                                 , SUBSTR(PROC_DTM,0,8) AS WKG_QT
                                 , NVL(SUM(CNT), 0) AS CNT
                                 , NVL(SUM(CNTY), 0) AS CNTY                  
                                 , AVG_PROC_TM               
                            FROM
                            (                              
                              SELECT  B.GRP_CD
                                         , SUBSTR(PROC_DTM,0,8) AS PROC_DTM
                                         , COUNT(*) AS CNT                                
                                         , SUM(DECODE(PROC_ST_CD , 'Y', 1,0)) AS CNTY       
                                         , ROUND(SUM(TRUNC((TO_DATE(A.PROC_DTM, 'YYYY-MM-DD HH24:MI:SS') - TO_DATE(A.RECV_DTM, 'YYYY-MM-DD HH24:MI:SS')) * 24))/COUNT(DECODE(PROC_ST_CD , 'Y', 1,0))) AS AVG_PROC_TM                                                                                           
                              FROM TBL_EML_ASGN_LOG A
                                     , TBL_USR B
                                     , TBL_PART_CD C
                                 WHERE A.ASGN_CNSLR_ID = B.USR_ID
                                   AND B.GRP_CD  = C.GRP_CD
                                   AND B.PART_CD = C.PART_CD                                 
                                   AND C.USE_YN = 'Y'
                                   AND B.GRP_CD IN ('BNS', 'ORD','CPN','OBD','OIL')
                                   AND A.RSV_SEQ_NO like 'CAM080%'
                                   AND SUBSTR(A.PROC_DTM, 0, 8) BETWEEN #from_dt# AND #to_dt#
                                GROUP BY B.GRP_CD, SUBSTR(A.PROC_DTM, 0, 8)
                                ORDER BY B.GRP_CD, SUBSTR(A.PROC_DTM, 0, 8)                                
                            ) 
                            GROUP BY GRP_CD, PROC_DTM, AVG_PROC_TM
                            ORDER BY GRP_CD, PROC_DTM, AVG_PROC_TM
                        ) T2
                        WHERE T1.GRP_CD  = T2.GRP_CD(+)
                          AND T1.QT      = T2.WKG_QT(+)                          
                        ORDER BY T1.GRP_CD, T1.QT
                    ) TT
                    GROUP BY ROLLUP(GRP_CD, QT, AVG_PROC_TM)
                    HAVING GROUPING_ID(QT, AVG_PROC_TM) IN (0,3)
        )
        WHERE DATA_GB IN ('D','GS','TS')
	</select>
	
	<!--   콜백 처리집계 (일별) -->
<select id="Get_DailyCBStat_DD_SELECT" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
		SELECT DATA_GB
             , GRP_CDNM
             , CASE WHEN QT IS NULL THEN '' 
                     ELSE SUBSTR(QT,1,4)||'-'||SUBSTR(QT,5,2)||'-'||SUBSTR(QT,7,2)
               END AS BASC_YM
             , NVL(CNT,0) AS CNT
             , NVL(ETC1,0) AS ETC1
             , NVL(ETC2,0) AS ETC2
             , NVL(ETC3,0) AS ETC3
             , NVL(ETC4,0) AS ETC4
             , NVL(ETC5,0) AS ETC5
             , NVL(ETC6,0) AS ETC6
             , NVL(ETC7,0) AS ETC7
             , NVL(ETC8,0) AS ETC8
        FROM
        (
                SELECT CASE WHEN GRP_CD IS NOT NULL AND QT IS NULL THEN 'GS'
                            WHEN GRP_CD IS NULL AND QT IS NULL THEN 'TS'
                            ELSE 'D' END AS DATA_GB
                     , CASE WHEN GRP_CD IS NOT NULL AND QT IS NULL THEN '(그룹소계)'||MAX(GRP_CDNM)
                            WHEN GRP_CD IS NULL AND QT IS NULL THEN '합계'
                            ELSE MAX(GRP_CDNM) END  AS GRP_CDNM
                     , QT
                     , SUM(CNT) AS CNT                    
                     , SUM(ETC1) AS ETC1
                     , SUM(ETC2) AS ETC2
                     , SUM(ETC3) AS ETC3
                     , SUM(ETC4) AS ETC4
                     , SUM(ETC5) AS ETC5
                     , SUM(ETC6) AS ETC6
                     , SUM(ETC7) AS ETC7
                     , SUM(ETC8) AS ETC8   
                  FROM 
                     (
                        SELECT T1.GRP_CD
                             , T1.GRP_CDNM
                             , T1.QT
                             , T2.CNT
                             , T2.ETC1
                             , T2.ETC2
                             , T2.ETC3
                             , T2.ETC4
                             , T2.ETC5
                             , T2.ETC6
                             , T2.ETC7
                             , T2.ETC8  
                        FROM 
                        (                           
                           SELECT A.GRP_CD
                                 , A.GRP_CDNM
                                 , SUBSTR(D.BASC_DT, 1, 8) AS QT
                              FROM TBL_GRP_CD A
                                , TBL_BUSSDD_INFO D
                             WHERE 1=1
                            <isNotEmpty property="grp_cd">
                              AND A.GRP_CD = #grp_cd#
                              </isNotEmpty>
                               AND SUBSTR(D.BASC_DT, 1, 8) BETWEEN #from_dt# AND #to_dt#
                            GROUP BY A.GRP_CD, A.GRP_CDNM, SUBSTR(D.BASC_DT, 1, 8)
                            ORDER BY A.GRP_CD, A.GRP_CDNM, SUBSTR(D.BASC_DT, 1, 8)
                            ) T1,                           
                           (                            
                            SELECT GRP_CD
                                 , SUBSTR(PROC_DT,0,8) AS WKG_QT
                                 , NVL(SUM(CNT), 0) AS CNT
                                 , NVL(SUM(ETC1), 0) AS ETC1                                 
                                 , NVL(SUM(ETC2), 0) AS ETC2                                 
                                 , NVL(SUM(ETC3), 0) AS ETC3
                                 , NVL(SUM(ETC4), 0) AS ETC4
                                 , NVL(SUM(ETC5), 0) AS ETC5
                                 , NVL(SUM(ETC6), 0) AS ETC6
                                 , NVL(SUM(ETC7), 0) AS ETC7
                                 , NVL(SUM(ETC8), 0) AS ETC8                                   
                            FROM
                            (                              
                              SELECT  B.GRP_CD
                                         , SUBSTR(PROC_DT,0,8) AS PROC_DT
                                         , COUNT(*) AS CNT                                
                                         , SUM(DECODE(A.CUR_TYP_CD , '01', 1,0)) AS ETC1  <!--통화성공-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '22', 1,0)) AS ETC2  <!--미수신-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '21', 1,0)) AS ETC3  <!--통화중-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '13', 1,0)) AS ETC4  <!--결번-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '12', 1,0)) AS ETC5  <!--거부-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '11', 1,0)) AS ETC6  <!--재시도요청-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '99', 1,0)) AS ETC7  <!--기타-->
                                         , SUM(DECODE(A.CUR_TYP_CD , '23', 1,0)) AS ETC8  <!--오번호-->                                                                                                       
                              FROM TBL_CALLBACK_HIST A
                                     , TBL_USR B
                                     , TBL_PART_CD C
                                 WHERE A.ASSGN_ID = B.USR_ID
                                   AND B.GRP_CD  = C.GRP_CD
                                   AND B.PART_CD = C.PART_CD                                 
                                   AND C.USE_YN = 'Y'
                                   AND SUBSTR(A.PROC_DT, 0, 8) BETWEEN #from_dt# AND #to_dt#
                                GROUP BY B.GRP_CD, SUBSTR(A.PROC_DT, 0, 8)
                                ORDER BY B.GRP_CD, SUBSTR(A.PROC_DT, 0, 8)                                
                            ) 
                            GROUP BY GRP_CD, PROC_DT
                            ORDER BY GRP_CD, PROC_DT                            
                        ) T2
                        WHERE T1.GRP_CD  = T2.GRP_CD(+)
                          AND T1.QT      = T2.WKG_QT(+)                          
                        ORDER BY T1.GRP_CD, T1.QT
                    ) TT
                    GROUP BY ROLLUP(GRP_CD, QT)
        )
        WHERE DATA_GB IN ('D','GS','TS') 
	</select>
	
	<!--  상담사별 업무별통화 시간 통계 (년도별) -->
 	<select id="Get_AgentCallTime_YR_SELECT" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
 		
					SELECT DATA_GB
					             , GRP_CDNM
					             , USR_NM
					             , CASE WHEN YR IS NULL THEN '' ELSE YR END AS BASC_DT
					             , CASE WHEN YR IS NULL THEN '' ELSE YR||'년' END AS DAY_NM
					             , TO_CHAR(TO_DATE(CUST_CUR_DRTM,'SSSSS'),'HH24:MI:SS') AS AVG_TIME                            
					        FROM
					        (
					                SELECT CASE WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NOT NULL AND YR IS NULL THEN 'US'
					                            WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NULL AND YR IS NULL THEN 'PS'
					                            WHEN GRP_CD IS NOT NULL AND PART_CD IS NULL AND USR_ID IS NULL AND YR IS NULL THEN 'GS'
					                            WHEN GRP_CD IS NULL AND PART_CD IS NULL AND USR_ID IS NULL AND YR IS NULL THEN 'TS'
					                            ELSE 'D' END AS DATA_GB
					                     , CASE WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NOT NULL AND YR IS NULL THEN '(상담사소계)'
					                            WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NULL AND YR IS NULL THEN '(파트소계)'||MAX(PART_CDNM)
					                            WHEN GRP_CD IS NOT NULL AND PART_CD IS NULL AND USR_ID IS NULL AND YR IS NULL THEN '(그룹소계)'||MAX(GRP_CDNM)
					                            WHEN GRP_CD IS NULL AND PART_CD IS NULL AND USR_ID IS NULL AND YR IS NULL THEN '합계'
					                            ELSE MAX(PART_CDNM) END  AS GRP_CDNM
					                     , CASE WHEN YR IS NULL THEN ''
					                            ELSE MAX(USR_NM) END AS USR_NM
					                     , YR
					                    , ROUND(NVL(AVG(CUST_CUR_DRTM),0),0) AS CUST_CUR_DRTM                                   
					                  FROM 
					                     (                        
					                        SELECT T1.GRP_CD
					                             , T1.PART_CD
					                             , T1.GRP_CDNM
					                             , T1.PART_CDNM
					                             , T1.USR_ID
					                             , T1.USR_NM
					                             , T1.YR
					                             , T2.CUST_CUR_DRTM                        
					                        FROM 
					                        (
					                            SELECT A.GRP_CD
					                                 , A.PART_CD
					                                 , B.GRP_CDNM
					                                 , C.PART_CDNM
					                                 , A.USR_ID
					                                 , A.USR_NM
					                                 , D.YR
					                              FROM TBL_USR A
					                                 , TBL_GRP_CD B
					                                 , TBL_PART_CD C
					                                 , ( SELECT SUBSTR(BASC_DT, 1, 4) AS YR
					                                    FROM TBL_BUSSDD_INFO
					                                    WHERE 1=1
					                                    <isNotEmpty property="year_from"> 
					                                    AND SUBSTR(BASC_DT, 1, 4) = #year_from#
					                                    </isNotEmpty>
					                                    GROUP BY SUBSTR(BASC_DT, 1, 4)
					                                    ORDER BY SUBSTR(BASC_DT, 1, 4)) D
					                             WHERE A.GRP_CD  = B.GRP_CD
					                                 AND A.PART_CD = C.PART_CD
					                            <isNotEmpty property="grp_cd">
					                              AND A.GRP_CD = #grp_cd#
					                            </isNotEmpty>
					                            <isNotEmpty property="part_cd">
					                               AND A.PART_CD = #part_cd#
					                            </isNotEmpty>
					                            <isNotEmpty property="usr_id">
					                               AND A.USR_ID = #usr_id#
					                             </isNotEmpty>
					                            <!-- 퇴사자도 통계에 포함되게 변경 -->
					                            <!-- AND (A.QUAL_LOSS_DD IS NULL OR (A.QUAL_LOSS_DD > #year_from# || '01' OR A.QUAL_LOSS_DD = #year_to# || '01' )) -->
					                            AND A.CTI_USE_YN = 'Y' 
					                            AND A.USE_YN = 'Y'
					                            AND A.USR_GRD_CD IN ( 'E','F')
					                            ORDER BY A.GRP_CD, A.PART_CD, A.USR_ID, D.YR
					                            ) T1,
					                            (
					                                SELECT  
					                                    YR
					                                    ,CNSLR_ID     
					                                    ,CNSLR_NM  
					                                    , CUST_CUR_DRTM
					                                 FROM 
					                                 (
					                                    SELECT   
					                                        YR
					                                        ,CNSLR_ID     
					                                        ,CNSLR_NM 
					                                       ,ROUND(AVG(CUST_CUR_DRTM),0) AS CUST_CUR_DRTM
					                                    FROM
					                                    (
					                                        SELECT
					                                            SUBSTR(A.CNSL_DTM,0,4) AS YR
					                                            ,A.CNSLR_ID     
					                                            ,A.CNSLR_NM         AS CNSLR_NM
					                                            ,TO_CHAR(TO_DATE(FUN_GET_HHMMSS(A.CUST_CUR_STR_DTM,A.CUST_CUR_END_DTM),'HH24:MI:SS'),'SSSSS')       AS CUST_CUR_DRTM
					                                            ,B.BIZ_DV_DTLS_CD1  AS BIZ_DV_DTLS_CD1
					                                            ,B.BIZ_DV_DTLS_CD2  AS BIZ_DV_DTLS_CD2 
					                                            ,A.CNSL_SEQ_NO      AS CNSL_SEQ_NO                   
					                                        FROM TBL_CNSL_HIST A         
					                                        INNER JOIN 
					                                        TBL_CNSL_HIST_BIZ_DTLS B         on A.CNSL_SEQ_NO = b.CNSL_SEQ_NO
					                                        WHERE 1=1
					                                        <isNotEmpty property="usr_id"> 
					                                            AND A.CNSLR_ID = #usr_id#
					                                        </isNotEmpty> 
					                                            <isNotEmpty property="cmb_biz"> 
                                        					   AND A.BIZ_DV_CD = #cmb_biz#
                                      						  </isNotEmpty> 
					                                        <isNotEmpty property="cmb_biz_dtl1"> 
					                                            AND B.BIZ_DV_DTLS_CD1 =  #cmb_biz_dtl1#
					                                        </isNotEmpty> 
					                                        <isNotEmpty property="cmb_biz_dtl2"> 
					                                            AND B.BIZ_DV_DTLS_CD2 = #cmb_biz_dtl2#
					                                        </isNotEmpty> 
					                                        <isNotEmpty property="year_from"> 
					                                            AND SUBSTR(A.CNSL_DTM,0,4) = #year_from#
					                                         </isNotEmpty> 
					                                        AND A.CUST_CUR_STR_DTM IS NOT NULL
					                                    )GROUP BY  YR,CNSLR_ID,CNSLR_NM    
					                                  )
					                            ) T2
					                        WHERE T1.USR_ID = T2.CNSLR_ID(+)
					                          AND T1.YR     = T2.YR(+)
					                        ORDER BY T1.GRP_CD, T1.PART_CD, T1.USR_ID, T1.YR                        
					                    ) TT
					                    GROUP BY ROLLUP(GRP_CD, PART_CD, USR_ID, YR)
					        )
					      <isNotEmpty property="disp_gb">
					        <isEqual property="disp_gb" compareValue="01">
					        WHERE DATA_GB IN ('D','PS','GS','TS')
					      </isEqual>
					        <isEqual property="disp_gb" compareValue="02">
					        WHERE DATA_GB IN ('D','US','PS','GS','TS')
					      </isEqual>
					    </isNotEmpty>    
					   </select>

<select id="Get_AgentCallTime_MM_SELECT" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
	
SELECT DATA_GB
             , GRP_CDNM
             , USR_NM
             , CASE WHEN YR IS NULL THEN '' ELSE YR END AS BASC_DT          
             , CASE WHEN YR IS NULL THEN '' ELSE SUBSTR(YR,0,4)||'년'||SUBSTR(YR,5,2)||'월' END AS DAY_NM
             , TO_CHAR(TO_DATE(CUST_CUR_DRTM,'SSSSS'),'HH24:MI:SS') AS AVG_TIME                 
        FROM
        (
                SELECT CASE WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NOT NULL AND YR IS NULL THEN 'US'
                            WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NULL AND YR IS NULL THEN 'PS'
                            WHEN GRP_CD IS NOT NULL AND PART_CD IS NULL AND USR_ID IS NULL AND YR IS NULL THEN 'GS'
                            WHEN GRP_CD IS NULL AND PART_CD IS NULL AND USR_ID IS NULL AND YR IS NULL THEN 'TS'
                            ELSE 'D' END AS DATA_GB
                     , CASE WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NOT NULL AND YR IS NULL THEN '(상담사소계)'
                            WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NULL AND YR IS NULL THEN '(파트소계)'||MAX(PART_CDNM)
                            WHEN GRP_CD IS NOT NULL AND PART_CD IS NULL AND USR_ID IS NULL AND YR IS NULL THEN '(그룹소계)'||MAX(GRP_CDNM)
                            WHEN GRP_CD IS NULL AND PART_CD IS NULL AND USR_ID IS NULL AND YR IS NULL THEN '합계'
                            ELSE MAX(PART_CDNM) END  AS GRP_CDNM
                     , CASE WHEN YR IS NULL THEN ''
                            ELSE MAX(USR_NM) END AS USR_NM
                     , YR              
                    , ROUND(NVL(AVG(CUST_CUR_DRTM),0),0) AS CUST_CUR_DRTM                                      
                  FROM 
                     (                        
                        SELECT T1.GRP_CD
                             , T1.PART_CD
                             , T1.GRP_CDNM
                             , T1.PART_CDNM
                             , T1.USR_ID
                             , T1.USR_NM
                             , T1.YR                        
                              , T2.CUST_CUR_DRTM                    
                        FROM 
                        (
                            SELECT A.GRP_CD
                                 , A.PART_CD
                                 , B.GRP_CDNM
                                 , C.PART_CDNM
                                 , A.USR_ID
                                 , A.USR_NM
                                 , SUBSTR(D.BASC_DT,0,6)   AS YR                           
                              FROM TBL_USR A
                                 , TBL_GRP_CD B
                                 , TBL_PART_CD C
                                 , TBL_BUSSDD_INFO D
                               	, TBL_UNFYCD_SMLCLAS E
                               WHERE A.GRP_CD  = B.GRP_CD
                                 AND A.PART_CD = C.PART_CD     
                                 AND E.LRGCLAS_CD = 'NW110'                                      														
							   AND SUBSTR(BASC_DT, 0, 6)  BETWEEN    SUBSTR(#month_std_dt#,0,4)|| '01'  AND SUBSTR(#month_end_dt#,0,4)|| '12' 					
                            <isNotEmpty property="grp_cd">
                              AND A.GRP_CD = #grp_cd#
                            </isNotEmpty>
                            <isNotEmpty property="part_cd">
                               AND A.PART_CD = #part_cd#
                            </isNotEmpty>
                            <isNotEmpty property="usr_id">
                               AND A.USR_ID = #usr_id#
                             </isNotEmpty>
                               <!-- 퇴사자도 통계에 포함되게 변경 -->
                            <!-- AND (A.QUAL_LOSS_DD IS NULL OR (A.QUAL_LOSS_DD > #year_to# || '01' OR A.QUAL_LOSS_DD = #year_to# || '01' )) -->
                             <!-- AND A.CTI_USE_YN = 'Y' -->
                             AND A.CTI_USE_YN = 'Y' 
					         AND A.USE_YN = 'Y'
					         AND A.USR_GRD_CD IN ( 'E','F')
                           GROUP BY A.GRP_CD, A.PART_CD, B.GRP_CDNM, C.PART_CDNM, A.USR_ID, A.USR_NM, SUBSTR(D.BASC_DT,0,6) 
                            ) T1,
                            (
                                SELECT  
                                    YR
                                    ,CNSLR_ID     
                                    ,CNSLR_NM  
                                    ,CUST_CUR_DRTM
                                 FROM 
                                 (
                                    SELECT   
                                        YR
                                        ,CNSLR_ID     
                                        ,CNSLR_NM 
                                        ,ROUND(AVG(CUST_CUR_DRTM),0) AS CUST_CUR_DRTM
                                    FROM
                                    (
                                        SELECT
                                            SUBSTR(A.CNSL_DTM,0,6) AS YR
                                            ,A.CNSLR_ID     
                                            ,A.CNSLR_NM         AS CNSLR_NM
                                            ,TO_CHAR(TO_DATE(FUN_GET_HHMMSS(A.CUST_CUR_STR_DTM,A.CUST_CUR_END_DTM),'HH24:MI:SS'),'SSSSS')       AS CUST_CUR_DRTM
                                            ,B.BIZ_DV_DTLS_CD1  AS BIZ_DV_DTLS_CD1
                                            ,B.BIZ_DV_DTLS_CD2  AS BIZ_DV_DTLS_CD2 
                                            ,A.CNSL_SEQ_NO      AS CNSL_SEQ_NO                   
                                        FROM TBL_CNSL_HIST A         
                                        INNER JOIN 
                                        TBL_CNSL_HIST_BIZ_DTLS B         on A.CNSL_SEQ_NO = b.CNSL_SEQ_NO
                                        WHERE 1=1
                                        <isNotEmpty property="usr_id"> 
                                            AND A.CNSLR_ID = #usr_id#
                                        </isNotEmpty> 
                                         <isNotEmpty property="cmb_biz"> 
                                            AND A.BIZ_DV_CD = #cmb_biz#
                                        </isNotEmpty> 
                                        <isNotEmpty property="cmb_biz_dtl1"> 
                                            AND B.BIZ_DV_DTLS_CD1 = #cmb_biz_dtl1#
                                        </isNotEmpty> 
                                        <isNotEmpty property="cmb_biz_dtl2"> 
                                            AND B.BIZ_DV_DTLS_CD2 = #cmb_biz_dtl2#
                                        </isNotEmpty>     
                                        <isNotEmpty property="month_std_dt">
									   			AND SUBSTR(A.CNSL_DTM,0,6) BETWEEN  SUBSTR(#month_std_dt#,0,4)|| '01' AND  SUBSTR(#month_end_dt#,0,4) || '12' 
							   			</isNotEmpty>						
                                        AND A.CUST_CUR_STR_DTM IS NOT NULL
                                    )GROUP BY  YR,CNSLR_ID,CNSLR_NM    
                                  )
                            ) T2
                        WHERE T1.USR_ID = T2.CNSLR_ID(+)
                          AND T1.YR     = T2.YR(+)
                        ORDER BY T1.GRP_CD, T1.PART_CD, T1.USR_ID, T1.YR                        
                    ) TT
                    GROUP BY ROLLUP(GRP_CD, PART_CD, USR_ID, YR)
        )
    <isNotEmpty property="srch_gb">
      <isEqual property="srch_gb" compareValue="MM">
        WHERE DATA_GB IN ('D','US','PS','GS','TS')
      </isEqual> 
    </isNotEmpty>   
   </select>




<select id="Get_AgentCallTime_DD_SELECT" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
	
SELECT DATA_GB
             , GRP_CDNM
             , USR_NM
             , CASE WHEN YR IS NULL THEN '' ELSE YR END AS BASC_DT
             , DAY_NM
             , TO_CHAR(TO_DATE(CUST_CUR_DRTM,'SSSSS'),'HH24:MI:SS') AS AVG_TIME                 
        FROM
        (
                SELECT CASE WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NOT NULL AND YR IS NULL THEN 'US'
                            WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NULL AND YR IS NULL THEN 'PS'
                            WHEN GRP_CD IS NOT NULL AND PART_CD IS NULL AND USR_ID IS NULL AND YR IS NULL THEN 'GS'
                            WHEN GRP_CD IS NULL AND PART_CD IS NULL AND USR_ID IS NULL AND YR IS NULL THEN 'TS'
                            ELSE 'D' END AS DATA_GB
                     , CASE WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NOT NULL AND YR IS NULL THEN '(상담사소계)'
                            WHEN GRP_CD IS NOT NULL AND PART_CD IS NOT NULL AND USR_ID IS NULL AND YR IS NULL THEN '(파트소계)'||MAX(PART_CDNM)
                            WHEN GRP_CD IS NOT NULL AND PART_CD IS NULL AND USR_ID IS NULL AND YR IS NULL THEN '(그룹소계)'||MAX(GRP_CDNM)
                            WHEN GRP_CD IS NULL AND PART_CD IS NULL AND USR_ID IS NULL AND YR IS NULL THEN '합계'
                            ELSE MAX(PART_CDNM) END  AS GRP_CDNM
                     , CASE WHEN YR IS NULL THEN ''
                            ELSE MAX(USR_NM) END AS USR_NM
                     , YR
                     , MAX(DAY_NM) AS DAY_NM
                    , ROUND(NVL(AVG(CUST_CUR_DRTM),0),0) AS CUST_CUR_DRTM                                      
                  FROM 
                     (                        
                        SELECT T1.GRP_CD
                             , T1.PART_CD
                             , T1.GRP_CDNM
                             , T1.PART_CDNM
                             , T1.USR_ID
                             , T1.USR_NM
                             , T1.YR
                             , T1.DAY_NM
                              , T2.CUST_CUR_DRTM                    
                        FROM 
                        (
                            SELECT A.GRP_CD
                                 , A.PART_CD
                                 , B.GRP_CDNM
                                 , C.PART_CDNM
                                 , A.USR_ID
                                 , A.USR_NM
                                 , D.BASC_DT  AS YR
                                 , E.SMLCLAS_CDNM AS DAY_NM
                              FROM TBL_USR A
                                 , TBL_GRP_CD B
                                 , TBL_PART_CD C
                                 , TBL_BUSSDD_INFO D
                               	, TBL_UNFYCD_SMLCLAS E
                               WHERE A.GRP_CD  = B.GRP_CD
                                 AND A.PART_CD = C.PART_CD
                                 AND D.WDAY    = E.SMLCLAS_CD
                                 AND E.LRGCLAS_CD = 'NW110'
                       		<isNotEmpty property="month_std_dt">
							   AND SUBSTR(BASC_DT, 0, 8)  BETWEEN    SUBSTR(#month_std_dt#,0,6)||'01' AND TO_CHAR(LAST_DAY(TO_DATE(#month_std_dt#, 'YYYYMMDD')), 'YYYYMMDD')
					   		</isNotEmpty>
					   		<isNotEmpty property="from_dt">
							   AND BASC_DT BETWEEN #from_dt# AND #to_dt#
					   		</isNotEmpty>
                            <isNotEmpty property="grp_cd">
                              AND A.GRP_CD = #grp_cd#
                            </isNotEmpty>
                            <isNotEmpty property="part_cd">
                               AND A.PART_CD = #part_cd#
                            </isNotEmpty>
                            <isNotEmpty property="usr_id">
                               AND A.USR_ID = #usr_id#
                             </isNotEmpty>
                               <!-- 퇴사자도 통계에 포함되게 변경 -->
                            <!-- AND (A.QUAL_LOSS_DD IS NULL OR (A.QUAL_LOSS_DD > #year_to# || '01' OR A.QUAL_LOSS_DD = #year_to# || '01' )) -->
                             <!-- AND A.CTI_USE_YN = 'Y' -->
                             AND A.CTI_USE_YN = 'Y' 
					         AND A.USE_YN = 'Y'
					         AND A.USR_GRD_CD IN ( 'E','F')
                            ORDER BY A.GRP_CD, A.PART_CD, A.USR_ID, D.BASC_DT  
                            ) T1,
                            (
                                SELECT  
                                    YR
                                    ,CNSLR_ID     
                                    ,CNSLR_NM  
                                    ,CUST_CUR_DRTM
                                 FROM 
                                 (
                                    SELECT   
                                        YR
                                        ,CNSLR_ID     
                                        ,CNSLR_NM 
                                        ,ROUND(AVG(CUST_CUR_DRTM),0) AS CUST_CUR_DRTM
                                    FROM
                                    (
                                        SELECT
                                            SUBSTR(A.CNSL_DTM,0,8) AS YR
                                            ,A.CNSLR_ID     
                                            ,A.CNSLR_NM         AS CNSLR_NM
                                            ,TO_CHAR(TO_DATE(FUN_GET_HHMMSS(A.CUST_CUR_STR_DTM,A.CUST_CUR_END_DTM),'HH24:MI:SS'),'SSSSS')       AS CUST_CUR_DRTM
                                            ,B.BIZ_DV_DTLS_CD1  AS BIZ_DV_DTLS_CD1
                                            ,B.BIZ_DV_DTLS_CD2  AS BIZ_DV_DTLS_CD2 
                                            ,A.CNSL_SEQ_NO      AS CNSL_SEQ_NO                   
                                        FROM TBL_CNSL_HIST A         
                                        INNER JOIN 
                                        TBL_CNSL_HIST_BIZ_DTLS B         on A.CNSL_SEQ_NO = b.CNSL_SEQ_NO
                                        WHERE 1=1
                                        <isNotEmpty property="usr_id"> 
                                            AND A.CNSLR_ID = #usr_id#
                                        </isNotEmpty> 
                                         <isNotEmpty property="cmb_biz"> 
                                            AND A.BIZ_DV_CD = #cmb_biz#
                                        </isNotEmpty> 
                                        <isNotEmpty property="cmb_biz_dtl1"> 
                                            AND B.BIZ_DV_DTLS_CD1 = #cmb_biz_dtl1#
                                        </isNotEmpty> 
                                        <isNotEmpty property="cmb_biz_dtl2"> 
                                            AND B.BIZ_DV_DTLS_CD2 = #cmb_biz_dtl2#
                                        </isNotEmpty>     
                                        <isNotEmpty property="month_std_dt">
									   			AND SUBSTR(A.CNSL_DTM,0,8) BETWEEN  SUBSTR(#month_std_dt#,0,6)||'01' AND TO_CHAR(LAST_DAY(TO_DATE(#month_std_dt#, 'YYYYMMDD')), 'YYYYMMDD')
							   			</isNotEmpty>
							   			<isNotEmpty property="from_dt">
									   AND SUBSTR(A.CNSL_DTM,0,8) BETWEEN  #from_dt# AND #to_dt#
							   			</isNotEmpty>
                                        AND A.CUST_CUR_STR_DTM IS NOT NULL
                                    )GROUP BY  YR,CNSLR_ID,CNSLR_NM    
                                  )
                            ) T2
                        WHERE T1.USR_ID = T2.CNSLR_ID(+)
                          AND T1.YR     = T2.YR(+)
                        ORDER BY T1.GRP_CD, T1.PART_CD, T1.USR_ID, T1.YR                        
                    ) TT
                    GROUP BY ROLLUP(GRP_CD, PART_CD, USR_ID, YR)
        )
    <isNotEmpty property="srch_gb">
      <isEqual property="srch_gb" compareValue="MM">
        WHERE DATA_GB IN ('D','US','PS','GS','TS')
      </isEqual> 
      <isEqual property="srch_gb" compareValue="DD">
          <isNotEmpty property="disp_gb">
            <isEqual property="disp_gb" compareValue="01">
            WHERE DATA_GB IN ('D','PS','GS','TS')
          </isEqual>
            <isEqual property="disp_gb" compareValue="02">
            WHERE DATA_GB IN ('D','US','PS','GS','TS')
          </isEqual>
        </isNotEmpty>
      </isEqual>
    </isNotEmpty>   
   </select>

 	</sqlMap>