<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="QAS250">
	
	<!-- QA통계 - 년 평가현황 -->

	<!-- 년 평가형황 -->
	<select id="GetYEAR_DETAIL_SELECT" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
	

	SELECT 
	         REPLACE(A.ASES_MM,'0','') || '월' AS ASES_YM
	        ,MAX(A.MM_TOT_AVG) AS ASCR_AVG         
	        ,TRUNC(ROUND(MAX(A.ASCR_SQN_1),1),1) AS ASCR_SQN_1
	        ,TRUNC(ROUND(MAX(A.ASCR_SQN_2),1),1) AS ASCR_SQN_2
	        ,TRUNC(ROUND(MAX(A.ASCR_SQN_3),1),1) AS ASCR_SQN_3
	        ,TRUNC(ROUND(MAX(A.ASCR_SQN_4),1),1) AS ASCR_SQN_4
	        ,TRUNC(ROUND(MAX(A.ASCR_SQN_5),1),1) AS ASCR_SQN_5
	        ,TRUNC(MAX(A.ASCR_SQN_1),4) AS TEMP_SQN_1
	        ,TRUNC(MAX(A.ASCR_SQN_2),4) AS TEMP_SQN_2
	        ,TRUNC(MAX(A.ASCR_SQN_3),4) AS TEMP_SQN_3
	        ,TRUNC(MAX(A.ASCR_SQN_4),4) AS TEMP_SQN_4
	        ,TRUNC(MAX(A.ASCR_SQN_5),4) AS TEMP_SQN_5  	                                   
	FROM	
	    (   				  
	    SELECT
	                 A.ASES_YM
	                ,SUBSTR(A.ASES_YM,1,4) AS ASES_YY
	                ,SUBSTR(A.ASES_YM,5,2) AS ASES_MM                
	                ,A.SQN                
	                ,NVL(CASE WHEN A.SQN = '1' THEN SUM(A.SQN_SUM)/MAX(A.CNSLR_ID_CNT) END,0) AS ASCR_SQN_1
	                ,NVL(CASE WHEN A.SQN = '2' THEN SUM(A.SQN_SUM)/MAX(A.CNSLR_ID_CNT) END,0) AS ASCR_SQN_2
	                ,NVL(CASE WHEN A.SQN = '3' THEN SUM(A.SQN_SUM)/MAX(A.CNSLR_ID_CNT) END,0) AS ASCR_SQN_3
	                ,NVL(CASE WHEN A.SQN = '4' THEN SUM(A.SQN_SUM)/MAX(A.CNSLR_ID_CNT) END,0) AS ASCR_SQN_4
	                ,NVL(CASE WHEN A.SQN = '5' THEN SUM(A.SQN_SUM)/MAX(A.CNSLR_ID_CNT) END,0) AS ASCR_SQN_5
	                ,MAX(A.MM_TOT_AVG) AS MM_TOT_AVG                                             
	    FROM
	                    (	   				  
		   				  SELECT A.ASES_YM
		                      , A.GRP_CD
		                      , A.CNSLR_ID
		                      , FUN_GET_USRNM(A.CNSLR_ID) AS CNSLR_NM
		                      , A.SQN
		                      , MAX(A.CNSLR_ID_CNT) AS CNSLR_ID_CNT
		                      , MAX(A.SQN_SUM) AS SQN_SUM
		                      , MAX(A.MM_TOT_AVG) AS MM_TOT_AVG
	
		                  FROM(
		                          SELECT C.ASES_YM	                            
		                            , A.GRP_CD
		                            , B.LRGCLAS_CD
		                            , B.MEDCLAS_CD
		                            , B.SMLCLAS_CD
		                            , A.FIXD_COL
		                            , B.ASCR
		                            , SUM(B.ASCR) OVER(PARTITION BY D.GRP_CD,C.ASES_YM,B.SQN,B.CNSLR_ID) AS SQN_SUM
		                            , COUNT(DISTINCT B.CNSLR_ID) OVER(PARTITION BY D.GRP_CD,C.ASES_YM,B.SQN) AS CNSLR_ID_CNT
		                            , B.SQN
		                            , B.CNSLR_ID 
		                            , A.ASGN_SCOR1
		                            , GSIB.FUN_GET_LRGCLAS_SCOR(A.GRP_CD,A.SEQ_NO,B.LRGCLAS_CD) AS SUB_SCOR
		                            , E.MM_TOT_AVG	                              
		                            
		                          FROM TBL_QA_ASES_INFO_SMLCLAS A 
		                            INNER JOIN TBL_QA_ASES_DTLS B
		                               ON (A.GRP_CD = B.GRP_CD
		                                   AND A.BIZ_BASC_CD = B.BIZ_BASC_CD
		                                   AND A.SEQ_NO = B.SEQ_NO
		                                   AND A.LRGCLAS_CD = B.LRGCLAS_CD                       
		                                   AND A.MEDCLAS_CD = B.MEDCLAS_CD
		                                   AND A.SMLCLAS_CD = B.SMLCLAS_CD) 
		                            INNER JOIN TBL_QA_ASES C 
		                               ON (B.GRP_CD = C.GRP_CD 
		                                    AND B.BIZ_BASC_CD = C.BIZ_BASC_CD 
		                                    AND B.SEQ_NO = C.SEQ_NO 
		                                    AND B.ASES_DTM = C.ASES_DTM 
		                                    AND B.SQN = C.SQN 
		                                    AND B.CNSLR_ID = C.CNSLR_ID) 
		                            INNER JOIN TBL_CNSLR_PART_HIST D
	                                   ON (C.ASES_YM = D.REG_YM AND C.CNSLR_ID = D.CNSLR_ID AND A.GRP_CD = D.GRP_CD)
	                                   
	                                LEFT OUTER JOIN (
	                                    SELECT
	                                         E.ASES_YM
	                                        ,E.GRP_CD
	                                        ,TRUNC(ROUND(SUM(E.CNSL_AVG_SUM)/MAX(E.CNSLR_MM_CNT),1),1) AS MM_TOT_AVG
	                                    FROM
	                                       (
	                                        SELECT
	                                             E.ASES_YM
	                                            ,E.CNSLR_ID
	                                            ,FUN_GET_USRNM(E.CNSLR_ID)
	                                            ,E.GRP_CD
	                                            ,SUM(E.CNSL_AVG) AS CNSL_AVG_SUM
	                                            ,COUNT(E.CNSLR_ID) OVER(PARTITION BY E.GRP_CD,E.ASES_YM) AS CNSLR_MM_CNT
	                                        FROM
	                                            (
	                                                 SELECT
	                                                     DISTINCT bb.CNSLR_ID
	                                                   , cc.ASES_YM
	                                                   , aa.GRP_CD
	                                                   , aa.FIXD_COL                                    
	                                                   , SUM(bb.ASCR) OVER(PARTITION BY aa.FIXD_COL,dd.GRP_CD,cc.ASES_YM,bb.CNSLR_ID)
	                                                   / COUNT(bb.SQN) OVER(PARTITION BY aa.FIXD_COL,dd.GRP_CD,cc.ASES_YM,bb.CNSLR_ID) AS CNSL_AVG
	                                                   
	            
	                                                 FROM TBL_QA_ASES_INFO_SMLCLAS aa 
	                                                   INNER JOIN TBL_QA_ASES_DTLS bb
	                                                      ON (aa.GRP_CD = bb.GRP_CD
	                                                          AND aa.BIZ_BASC_CD = bb.BIZ_BASC_CD
	                                                          AND aa.SEQ_NO = bb.SEQ_NO
	                                                          AND aa.LRGCLAS_CD = bb.LRGCLAS_CD                       
	                                                          AND aa.MEDCLAS_CD = bb.MEDCLAS_CD
	                                                          AND aa.SMLCLAS_CD = bb.SMLCLAS_CD) 
	                                                   INNER JOIN TBL_QA_ASES cc 
	                                                      ON (bb.GRP_CD = bb.GRP_CD 
	                                                           AND bb.BIZ_BASC_CD = cc.BIZ_BASC_CD 
	                                                           AND bb.SEQ_NO = cc.SEQ_NO 
	                                                           AND bb.ASES_DTM = cc.ASES_DTM 
	                                                           AND bb.SQN = cc.SQN 
	                                                           AND bb.CNSLR_ID = cc.CNSLR_ID) 
	                                                   INNER JOIN TBL_CNSLR_PART_HIST dd
	                                                      ON (cc.ASES_YM = dd.REG_YM AND cc.CNSLR_ID = dd.CNSLR_ID AND aa.GRP_CD = dd.GRP_CD)                                          
	                                                 WHERE
	                                                 	 <!--   
	                                                     NVL(cc.SELF_CHCK_YN,'N') = 'N'
	                                                     -->
	                                                     NVL(cc.DEL_YN,'N') = 'N'
	                                                 AND NVL(bb.DEL_YN,'N') = 'N' 
	                                                 AND bb.ASCR IS NOT NULL
	                                                 AND bb.CNSLR_ID != cc.ASES_ID
	                                                 AND cc.TST_ASES_YN = 'Y'
	                                                 
	                                                <dynamic>	  
													<isNotEmpty prepend="AND" property="grp_cd">
														dd.GRP_CD = #grp_cd#
													</isNotEmpty>
													<isNotEmpty prepend="AND" property="part_cd">
														dd.PART_CD = #part_cd#
													</isNotEmpty>
													<isNotEmpty prepend="AND" property="cnslr_id">
														bb.CNSLR_ID = #cnslr_id#
													</isNotEmpty>
													<isNotEmpty prepend="AND" property="ases_ym">
														SUBSTR(cc.ASES_YM,1,4) = #ases_ym#
													</isNotEmpty>
													</dynamic>
	                                              ) E                    
	                                              GROUP BY E.ASES_YM,E.GRP_CD,E.CNSLR_ID
	                                            ) E
	                                            GROUP BY E.ASES_YM,E.GRP_CD
	                                          )E
	                                            
	                                    ON  C.ASES_YM = E.ASES_YM AND B.GRP_CD = E.GRP_CD
										                          
			                     WHERE
			                     	 <!--   
			                     	 NVL(C.SELF_CHCK_YN,'N') = 'N'
			                     	 -->
			                         NVL(C.DEL_YN,'N') = 'N'
			                     AND NVL(B.DEL_YN,'N') = 'N' 
			                     AND B.ASCR IS NOT NULL
			                     AND B.CNSLR_ID != C.ASES_ID
			                     AND C.TST_ASES_YN = 'Y'
			                     
		                        <dynamic>	  
								<isNotEmpty prepend="AND" property="grp_cd">
									D.GRP_CD = #grp_cd#
								</isNotEmpty>
								<isNotEmpty prepend="AND" property="part_cd">
									D.PART_CD = #part_cd#
								</isNotEmpty>
								<isNotEmpty prepend="AND" property="cnslr_id">
									B.CNSLR_ID = #cnslr_id#
								</isNotEmpty>
								<isNotEmpty prepend="AND" property="ases_ym">
									SUBSTR(C.ASES_YM,1,4) = #ases_ym#
								</isNotEmpty>
								</dynamic>
			
		              )A
		              GROUP BY A.ASES_YM,A.GRP_CD, A.CNSLR_ID, A.SQN
		         ) A
		         GROUP BY A.ASES_YM,A.SQN
            ) A
            GROUP BY A.ASES_MM
            ORDER BY ASES_YM	
	
	<!-- 2011.03.22 변경 -->
	<!-- 
		SELECT A.ASES_YM
		    , TRUNC(ROUND((ASCR_AVG)/NULLIF(A.SQN_CNT,0),1),1) AS ASCR_AVG
		    , A.ASCR_SQN_1
		    , A.ASCR_SQN_2
		    , A.ASCR_SQN_3
		    , A.ASCR_SQN_4
		    , A.ASCR_SQN_5
		FROM ( 
		         SELECT REPLACE(SUBSTR(A.ASES_YM,5,2),'0','')||'월' AS ASES_YM
		            , MAX(ASCR_SQN_1) + MAX(ASCR_SQN_2) + MAX(ASCR_SQN_3) + MAX(ASCR_SQN_4) + MAX(ASCR_SQN_5) AS ASCR_AVG
		            , MAX(ASCR_SQN_1) AS ASCR_SQN_1
		            , MAX(ASCR_SQN_2) AS ASCR_SQN_2
		            , MAX(ASCR_SQN_3) AS ASCR_SQN_3
		            , MAX(ASCR_SQN_4) AS ASCR_SQN_4
		            , MAX(ASCR_SQN_4) AS ASCR_SQN_5
		            , CASE WHEN MAX(ASCR_SQN_1) <![CDATA[ > ]]> 0 THEN COUNT(1) ELSE 0 END + 
		                    CASE WHEN MAX(ASCR_SQN_2) <![CDATA[ > ]]> 0 THEN COUNT(1) ELSE 0 END + 
		                    CASE WHEN MAX(ASCR_SQN_3) <![CDATA[ > ]]> 0 THEN COUNT(1) ELSE 0 END + 
		                    CASE WHEN MAX(ASCR_SQN_4) <![CDATA[ > ]]> 0 THEN COUNT(1) ELSE 0 END + 
		                    CASE WHEN MAX(ASCR_SQN_5) <![CDATA[ > ]]> 0 THEN COUNT(1) ELSE 0 END AS SQN_CNT
		        FROM ( 
		                SELECT A.ASES_YM
		                    , NVL(MAX(CASE WHEN A.SQN = '1' THEN A.COL_D11 END),0) AS ASCR_SQN_1
		                    , NVL(MAX(CASE WHEN A.SQN = '2' THEN A.COL_D11 END),0) AS ASCR_SQN_2
		                    , NVL(MAX(CASE WHEN A.SQN = '3' THEN A.COL_D11 END),0) AS ASCR_SQN_3
		                    , NVL(MAX(CASE WHEN A.SQN = '4' THEN A.COL_D11 END),0) AS ASCR_SQN_4
		                    , NVL(MAX(CASE WHEN A.SQN = '5' THEN A.COL_D11 END),0) AS ASCR_SQN_5
		                FROM (  
		                        SELECT A.ASES_YM
		                            , A.SQN     
		                            , NVL(TRUNC(ROUND(A.COL_D11/NULLIF(A.TOT_SCOR,'0')*100,1),1),0) AS COL_D11 
		                        FROM(   
		                                SELECT A.ASES_YM
		                                    , A.SQN
		                                    , A.COL_D11  
		                                    , B.TOT_SCOR
		                                FROM(
		                                        SELECT A.ASES_YM
		                                            , A.SQN
		                                            , A.COL_A11 + A.COL_B11 + A.COL_C11 AS COL_D11
		                                        FROM (
		                                                    SELECT A.ASES_YM 
		                                                        , A.SQN
		                                                        , A.COL_A1   
		                                                        , A.COL_A2
		                                                        , A.COL_A3
		                                                        , A.COL_A4
		                                                        , A.COL_A5
		                                                        , A.COL_A6
		                                                        , A.COL_A7
		                                                        , A.COL_A8
		                                                        , A.COL_A9
		                                                        , A.COL_A10
		                                                        , A.COL_A1 + A.COL_A2 + A.COL_A3 + A.COL_A4 + A.COL_A5 + A.COL_A6 + A.COL_A7 + A.COL_A8 + A.COL_A9 + A.COL_A10 AS COL_A11 
		                                                        , A.COL_B1   
		                                                        , A.COL_B2
		                                                        , A.COL_B3
		                                                        , A.COL_B4
		                                                        , A.COL_B5
		                                                        , A.COL_B6
		                                                        , A.COL_B7
		                                                        , A.COL_B8
		                                                        , A.COL_B9
		                                                        , A.COL_B10
		                                                        , A.COL_B1 + A.COL_B2 + A.COL_B3 + A.COL_B4 + A.COL_B5 + A.COL_B6 + A.COL_B7 + A.COL_B8 + A.COL_B9 + A.COL_B10 AS COL_B11 
		                                                        , A.COL_C1   
		                                                        , A.COL_C2
		                                                        , A.COL_C3
		                                                        , A.COL_C4
		                                                        , A.COL_C5
		                                                        , A.COL_C6
		                                                        , A.COL_C7
		                                                        , A.COL_C8
		                                                        , A.COL_C9
		                                                        , A.COL_C10
		                                                        , A.COL_C1 + A.COL_C2 + A.COL_C3 + A.COL_C4 + A.COL_C5 + A.COL_C6 + A.COL_C7 + A.COL_C8 + A.COL_C9 + A.COL_C10 AS COL_C11 
		                                                    FROM (  
		                                                            SELECT A.ASES_YM
		                                                                , A.SQN  
		                                                                , NVL(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A1' THEN A.ASCR/A.SQN_NO END),2),0)    AS COL_A1  
		                                                                , NVL(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A2' THEN A.ASCR/A.SQN_NO END),2),0)    AS COL_A2  
		                                                                , NVL(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A3' THEN A.ASCR/A.SQN_NO END),2),0)    AS COL_A3  
		                                                                , NVL(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A4' THEN A.ASCR/A.SQN_NO END),2),0)    AS COL_A4  
		                                                                , NVL(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A5' THEN A.ASCR/A.SQN_NO END),2),0)    AS COL_A5  
		                                                                , NVL(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A6' THEN A.ASCR/A.SQN_NO END),2),0)    AS COL_A6     
		                                                                , NVL(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A7' THEN A.ASCR/A.SQN_NO END),2),0)    AS COL_A7     
		                                                                , NVL(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A8' THEN A.ASCR/A.SQN_NO END),2),0)    AS COL_A8     
		                                                                , NVL(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A9' THEN A.ASCR/A.SQN_NO END),2),0)    AS COL_A9     
		                                                                , NVL(ROUND(MAX(CASE WHEN A.FIXD_COL = 'A10' THEN A.ASCR/A.SQN_NO END),2),0)   AS COL_A10   
		                                                                , NVL(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B1' THEN A.ASCR/A.SQN_NO END),2),0)    AS COL_B1  
		                                                                , NVL(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B2' THEN A.ASCR/A.SQN_NO END),2),0)    AS COL_B2  
		                                                                , NVL(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B3' THEN A.ASCR/A.SQN_NO END),2),0)    AS COL_B3  
		                                                                , NVL(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B4' THEN A.ASCR/A.SQN_NO END),2),0)    AS COL_B4  
		                                                                , NVL(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B5' THEN A.ASCR/A.SQN_NO END),2),0)    AS COL_B5  
		                                                                , NVL(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B6' THEN A.ASCR/A.SQN_NO END),2),0)    AS COL_B6     
		                                                                , NVL(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B7' THEN A.ASCR/A.SQN_NO END),2),0)    AS COL_B7     
		                                                                , NVL(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B8' THEN A.ASCR/A.SQN_NO END),2),0)    AS COL_B8     
		                                                                , NVL(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B9' THEN A.ASCR/A.SQN_NO END),2),0)    AS COL_B9     
		                                                                , NVL(ROUND(MAX(CASE WHEN A.FIXD_COL = 'B10' THEN A.ASCR/A.SQN_NO END),2),0)   AS COL_B10 
		                                                                , NVL(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C1' THEN A.ASCR/A.SQN_NO END),2),0)    AS COL_C1  
		                                                                , NVL(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C2' THEN A.ASCR/A.SQN_NO END),2),0)    AS COL_C2  
		                                                                , NVL(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C3' THEN A.ASCR/A.SQN_NO END),2),0)    AS COL_C3  
		                                                                , NVL(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C4' THEN A.ASCR/A.SQN_NO END),2),0)    AS COL_C4  
		                                                                , NVL(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C5' THEN A.ASCR/A.SQN_NO END),2),0)    AS COL_C5  
		                                                                , NVL(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C6' THEN A.ASCR/A.SQN_NO END),2),0)    AS COL_C6     
		                                                                , NVL(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C7' THEN A.ASCR/A.SQN_NO END),2),0)    AS COL_C7     
		                                                                , NVL(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C8' THEN A.ASCR/A.SQN_NO END),2),0)    AS COL_C8     
		                                                                , NVL(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C9' THEN A.ASCR/A.SQN_NO END),2),0)    AS COL_C9     
		                                                                , NVL(ROUND(MAX(CASE WHEN A.FIXD_COL = 'C10' THEN A.ASCR/A.SQN_NO END),2),0)   AS COL_C10  
		                                                            FROM(  
		                                                                    SELECT A.ASES_YM
		                                                                        , A.SQN
		                                                                        , A.GRP_CD
		                                                                        , A.LRGCLAS_CD
		                                                                        , A.MEDCLAS_CD
		                                                                        , A.SMLCLAS_CD
		                                                                        , A.FIXD_COL
		                                                                        , A.ASCR
		                                                                        , A.CNSLR_ID_CNT
		                                                                        , A.CNSLR_ID 
		                                                                        , A.ASGN_SCOR1
		                                                                        , A.SQN_NO 
		                                                                    FROM(
		                                                                            SELECT C.ASES_YM 
		                                                                              , B.SQN
		                                                                              , A.GRP_CD
		                                                                              , B.LRGCLAS_CD
		                                                                              , B.MEDCLAS_CD
		                                                                              , B.SMLCLAS_CD
		                                                                              , A.FIXD_COL
		                                                                              , SUM(B.ASCR) OVER(PARTITION BY A.FIXD_COL,B.SQN,D.GRP_CD,C.ASES_YM) AS ASCR
		                                                                              , COUNT(DISTINCT B.CNSLR_ID) OVER(PARTITION BY D.GRP_CD,C.ASES_YM) AS CNSLR_ID_CNT
		                                                                              , COUNT(B.SQN) OVER(PARTITION BY A.FIXD_COL,B.SQN,D.GRP_CD,C.ASES_YM) AS SQN_NO
		                                                                              , B.CNSLR_ID 
		                                                                              , A.ASGN_SCOR1
		                                                                            FROM TBL_QA_ASES_INFO_SMLCLAS A 
		                                                                              INNER JOIN TBL_QA_ASES_DTLS B
		                                                                                     ON (A.GRP_CD = B.GRP_CD
		                                                                                         AND A.BIZ_BASC_CD = B.BIZ_BASC_CD
		                                                                                         AND A.SEQ_NO = B.SEQ_NO
		                                                                                         AND A.LRGCLAS_CD = B.LRGCLAS_CD                       
		                                                                                         AND A.MEDCLAS_CD = B.MEDCLAS_CD
		                                                                                         AND A.SMLCLAS_CD = B.SMLCLAS_CD) 
		                                                                              INNER JOIN TBL_QA_ASES C 
		                                                                                     ON (B.GRP_CD = C.GRP_CD 
		                                                                                          AND B.BIZ_BASC_CD = C.BIZ_BASC_CD 
		                                                                                          AND B.SEQ_NO = C.SEQ_NO 
		                                                                                          AND B.ASES_DTM = C.ASES_DTM 
		                                                                                          AND B.SQN = C.SQN 
		                                                                                          AND B.CNSLR_ID = C.CNSLR_ID) 
		                                                                              INNER JOIN TBL_USR D
		                                                                                     ON (C.CNSLR_ID = D.USR_ID AND A.GRP_CD = D.GRP_CD)
		                                                                            WHERE NVL(C.SELF_CHCK_YN,'N') = 'N'
		                                                                            AND NVL(C.DEL_YN,'N') = 'N'
		                                                                            AND NVL(B.DEL_YN,'N') = 'N' 
		                                                                            AND B.ASCR IS NOT NULL
		                                                                            AND NVL(D.USE_YN,'Y') = 'Y'
		                                                                            AND C.TST_ASES_YN = 'Y'
		                                                                            AND B.CNSLR_ID != C.ASES_ID
		                                                                            <dynamic>	 
																						<isNotEmpty prepend="AND" property="grp_cd">
																							D.GRP_CD = #grp_cd#
																						</isNotEmpty>
																						<isNotEmpty prepend="AND" property="part_cd">
																							D.PART_CD = #part_cd#
																						</isNotEmpty>
																						<isNotEmpty prepend="AND" property="cnslr_id">
																							B.CNSLR_ID = #cnslr_id#
																						</isNotEmpty>
																						<isNotEmpty prepend="AND" property="ases_ym">
																							SUBSTR(C.ASES_YM,1,4) = #ases_ym#
																						</isNotEmpty>
																					</dynamic>
		                                                                    )A
		                                                             )A
		                                                             GROUP BY A.ASES_YM, A.SQN
		                                                )A
		                                        )A 
		                                )A  CROSS JOIN (
		                                                SELECT TO_CHAR(SUM(D.ASGN_SCOR1)) AS TOT_SCOR
		                                                FROM TBL_QA_ASES_INFO_GRP A
		                                                INNER JOIN TBL_QA_ASES_INFO_LRGCLAS B
		                                                ON (A.GRP_CD = B.GRP_CD AND A.BIZ_BASC_CD = B.BIZ_BASC_CD AND A.SEQ_NO = B.SEQ_NO)
		                                                INNER JOIN TBL_QA_ASES_INFO_MEDCLAS C
		                                                ON (B.GRP_CD = C.GRP_CD  AND B.BIZ_BASC_CD = C.BIZ_BASC_CD AND B.SEQ_NO = C.SEQ_NO AND B.LRGCLAS_CD = C.LRGCLAS_CD) 
		                                                INNER JOIN TBL_QA_ASES_INFO_SMLCLAS D
		                                                ON (C.GRP_CD = D.GRP_CD AND C.BIZ_BASC_CD = D.BIZ_BASC_CD AND C.SEQ_NO = D.SEQ_NO AND C.LRGCLAS_CD = D.LRGCLAS_CD AND C.MEDCLAS_CD = D.MEDCLAS_CD) 
		                                                WHERE A.QA_USAG_DV_CD = '1'
		                                                AND B.BIZ_BASC_CD = 'I' 
		                                                AND NVL(A.DEL_YN,'N') = 'N'
		                                                AND NVL(A.USE_YN,'Y') = 'Y'
		                                                AND NVL(B.DEL_YN,'N') = 'N'   
		                                                AND NVL(C.DEL_YN,'N') = 'N'      
		                                                AND NVL(D.DEL_YN,'N') = 'N'
		                                                <dynamic>	 
															<isNotEmpty prepend="AND" property="grp_cd">
																A.GRP_CD = #grp_cd#
															</isNotEmpty>
														</dynamic>
		                                )B
		                        )A        
		               )A
		               GROUP BY A.ASES_YM
		        )A
		        GROUP BY A.ASES_YM   
		)A
		ORDER BY A.ASES_YM 
	-->
             	
	</select>
</sqlMap>
