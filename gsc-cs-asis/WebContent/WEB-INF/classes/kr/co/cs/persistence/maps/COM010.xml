<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="COM010">
	
	<!-- 
		공통코드 가져오기
	 -->
 	<select id="Get_Code_List_SELECT" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
		SELECT A.LRGCLAS_CD      AS GROUPCODE   		<!-- 대분류코드 		-->
		     , B.SMLCLAS_CD      AS CODE				<!-- 소분류코드 		-->
		     , B.SMLCLAS_CDNM    AS CODE_NM				<!-- 소분류명 		-->
		     , B.REFN_CD_VLU1    AS CODE1               <!-- 참조1값 		-->
		     , B.REFN_CD_VLU2    AS CODE2               <!-- 참조2값 		-->
		     , B.REFN_CD_VLU3    AS CODE3               <!-- 참조3값 		-->
		     , NVL(B.USE_YN,'Y') AS USE_YN				<!-- 소분류사용여부 	-->
		  FROM TBL_UNFYCD_LRGCLAS A
		       INNER JOIN TBL_UNFYCD_SMLCLAS B
		               ON A.LRGCLAS_CD = B.LRGCLAS_CD
		 WHERE (A.USE_YN = 'Y' OR A.USE_YN = '')
		 ORDER BY A.LRGCLAS_CD, B.SRT_SEQ	     
 	</select> 

	<!-- 
		공통메세지 가져오기
	 -->
	<select id="Get_Msg_List_SELECT" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
		SELECT MSG_CD		AS MSG_CD	<!-- MSG코드 -->
	         , MSG_CDNM		AS MSG_VL	<!-- MSG명 -->
	  	  FROM TBL_MSG_INFO
	     WHERE (USE_YN = 'Y' OR USE_YN = '')    	
	</select> 
	

	<!-- 
		공통기본정보가져오기
	 -->
	<select id="Get_BsvlInfoList_SELECT" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
		SELECT BSVL_CD                  <!--기준값 코드     -->
		     , BSVL_CD_TITE             <!--기준값 코드 제목-->
		     , BSVL_CD_CTT              <!--기준값 코드 내용-->
		     , USE_YN                   <!--사용 여부       -->
		  FROM TBL_BSVL_INFO		 
	</select> 

	<!-- 
		로그인체크여부
	 -->
	<select id="Get_UsrChkInfo_SELECT" resultClass="java.lang.String" parameterClass="java.util.HashMap">
	    SELECT NVL((SELECT CASE WHEN PW = FUN_SHA1_HASH(#pw#)  THEN 'X' ELSE 'N' END 
	                  FROM TBL_USR           
				      WHERE USR_ID = #usr_id#)
			       , 'X') AS PW_YN  <!-- 비밀번호일치여부 -->
	      FROM DUAL	 	
	</select>
	
	<!-- 
		로그인
	 -->
	<select id="Get_UsrInfo_SELECT" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
		SELECT USR_ID           AS GBL_USR_ID            <!-- 사용자 ID       -->
		     , USR_NM           AS GBL_USR_NM            <!-- 사용자 명       -->
		     , USR_DV_CD        AS GBL_USR_DV_CD         <!-- 사용자 구분 코드-->
		     , GRP_CD           AS GBL_GRP_CD            <!-- 그룹 코드       -->
		     , FUN_GET_GRPNM(GRP_CD)  AS GBL_GRP_CDNM    <!-- 그룹 명       -->
		     , PART_CD          AS GBL_PART_CD           <!-- 파트 코드       -->
		     , FUN_GET_PARTNM(GRP_CD, PART_CD)  AS GBL_PART_CDNM    <!-- 파트명       -->
		     , USR_GRD_CD       AS GBL_USR_GRD_CD        <!-- 상담원 등급 코드-->
		     , FUN_GET_CDNM('OLE11',USR_GRD_CD) AS GBL_USR_GRD_CD_NM    <!-- 상담원 등급 코드명 -->
		     , BTDY             AS GBL_BTDY              <!-- 생일            -->
		     <!--, ETCO_DD          AS GBL_ETCO_DD            입사 일       
		     , LVCO_DD          AS GBL_LVCO_DD                퇴사 일         -->
		     , QUAL_LOSS_DD     AS GBL_QUAL_LOSS_DD      <!-- 자격 상실 일    -->
		     , MBPH_NO          AS GBL_MBPH_NO           <!-- 휴대전화 번호   -->
		     , OWHM_TEL_NO      AS GBL_OWHM_TEL_NO       <!-- 자택 전화 번호  -->
		     , EML_ADDR         AS GBL_EML_ADDR          <!-- 이메일 주소     -->
		     , OWHM_ZIP_NO      AS GBL_OWHM_ZIP_NO       <!-- 자택 우편번호   -->
		     , OWHM_ADDR        AS GBL_OWHM_ADDR         <!-- 자택 주소       -->
		     , OWHM_DTLS_ADDR   AS GBL_OWHM_DTLS_ADDR    <!-- 자택 상세 주소  -->
		     , GISU          	AS GBL_GISU              <!-- 기수            -->
		     , CTI_USE_YN       AS GBL_CTI_USE_YN        <!-- CTI 사용 여부   -->
		     , CTI_ID           AS GBL_CTI_ID            <!-- CTI ID          -->
		     , GSC_ID           AS GBL_GSC_ID            <!-- GSC ID          -->
		     , GSC_OFLV         AS GBL_GSC_OFLV          <!-- GSC 직급        -->
		     , GSC_TEAMNM       AS GBL_GSC_TEAMNM        <!-- GSC 팀명        -->
		     , GSC_BIZNM        AS GBL_GSC_BIZNM         <!-- GSC 업무명      -->
		     , USE_YN           AS GBL_USE_YN            <!-- 사용 여부       -->
		     , REG_IP           AS GBL_REG_IP            <!-- 등록 IP         -->
		     , EXT_NO           AS GBL_EXT_NO            <!-- 내선 번호       -->
		     , SAP_ID           AS GBL_SAP_ID            <!-- SAP ID          -->
		     , EMAIL_ID         AS GBL_EMAIL_ID          <!-- email_id        -->
			 , LGIN_IP	        AS GBL_LGIN_IP   		 <!-- 로그인 IP             -->
		 	 , LGIN_ST_CD	    AS GBL_LGIN_ST_CD        <!-- 로그인 상태 코드      Y:로그인, N:로그오프  -->
		 	 , NVL(LGIN_TRY_TCNT,0)	AS GBL_LGIN_TRY_TCNT	 <!-- 로그인 시도 횟수                    -->
			 , CASE WHEN (LST_PW_UPD_DTM IS NULL OR LST_PW_UPD_DTM = '') THEN 999
			        ELSE TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD'),'YYYYMMDD') - TO_DATE(SUBSTR(LST_PW_UPD_DTM,0,8),'YYYYMMDD')
			    END AS GBL_LST_PW_UPD_DTM    <!-- 최종 비밀번호 변경 일시     -->
			 , CASE WHEN PW = FUN_SHA1_HASH(#pw#) THEN 'Y' ELSE 'N' END AS GBL_PW_YN <!-- 비밀번호일치여부 -->
			 , TO_CHAR(SYSDATE,'YYYYMMDD') AS GBL_TODAY  <!-- 오늘날짜 -->
   		     , NVL(PRICHAT_USE_YN,'N')	AS GBL_PRICHAT_USE_YN		<!-- PriChat사용여부 -->		 
   		     , IP_CHK_YN AS GBL_IP_CHK_YN <!-- 관리자IP 체크 -->
		  FROM TBL_USR           
		 WHERE USR_ID = #usr_id#		     
	</select> 

	<!-- 
		패스워드가 틀렸을경우 패스워드 건수 +1을 한다.
	 -->
	<update id="Set_LoginFrom_UPDATE" parameterClass="java.util.HashMap">
		UPDATE TBL_USR  
		   SET LGIN_TRY_TCNT  = NVL(LGIN_TRY_TCNT,0) + 1		                            
			 , LST_CORC_ID    = #usr_id#   		     
		     , LST_CORC_DTM   = TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
		 WHERE USR_ID = #usr_id#
		   AND 1 = CASE WHEN #pw_yn# = 'N' THEN 1 ELSE 0 END
	</update>
	 
	 
	<update id="Set_LoginTo_UPDATE" parameterClass="java.util.HashMap">
		UPDATE TBL_USR  
		   SET LGIN_IP        = #lgin_ip#
		     , LGIN_ST_CD     = #lgin_st_cd#
		     , LGIN_TRY_TCNT  = 0    
			 , LST_CORC_ID    = #usr_id#   		     
		     , LST_CORC_DTM   = TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
		 WHERE USR_ID = #usr_id#		    
	</update>
	
	<!-- 로그아웃시 로그아웃상태변경 -->
	<update id="Set_UserInf_UPDATE" parameterClass="java.util.HashMap">
		UPDATE TBL_USR  
		   SET LGIN_ST_CD     = #lgin_st_cd#    
			 , LST_CORC_ID    = #usr_id#   		     
		     , LST_CORC_DTM   = TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
		 WHERE USR_ID = #usr_id#		    
	</update>	
		
 
	<!-- 
		로그인히스토리등록
	 -->
	<insert id="Set_TblUsrHistInf_INSERT" parameterClass="java.util.HashMap">
		INSERT INTO TBL_USR_LGIN_HIST(
			   USR_ID	    	<!--사용자 ID  -->
			 , CONN_DTM	        <!--접속 일시-->
			 , LGIN_ST_CD  		<!--로그인 상태 코드 1,로그인, 2, 로그오프-->
			 , REG_ID	      	<!--등록 ID-->
			 , REG_DTM	      	<!--등록 일시-->
			 , LST_CORC_ID	  	<!--최종 수정 ID-->
			 , LST_CORC_DTM		<!--최종 수정 일시-->
		) VALUES (
			   #gbl_usr_id#
			 , TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
			 , #lgin_st_cd# 
			 , #gbl_usr_id#
			 , TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
			 , #gbl_usr_id#
			 , TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')  			 
		)	
	</insert>
	
	<!-- 
		근태등록 : 없으면 INSERT 있으면 아무작업안한다.
	
	<update id="Set_UsrWkgYtpInf_UPDATE" parameterClass="java.util.HashMap">
	    MERGE INTO TBL_USR_WKG_TYP A
	    USING (SELECT #usr_id# AS USR_ID
                 FROM DUAL 
        ) B
        ON (A.USR_ID = B.USR_ID AND A.WKG_DT = TO_CHAR(SYSDATE,'YYYYMMDD') )
        WHEN MATCHED THEN
        UPDATE SET
        	WKG_END_TM = CASE WHEN #lgin_st_cd# = 1 THEN  NULL
        	             ELSE TO_CHAR(SYSDATE,'HH24MISS')
        	              END
           ,LST_CORC_ID = #usr_id#
           ,LST_CORC_DTM = TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
        WHEN NOT MATCHED THEN
        INSERT (
		          USR_ID			
		        , WKG_DT			
		        , WKG_TYP_CD		
		        , WKG_STR_TM		
		        , REG_ID			
		        , REG_DTM		
		        , LST_CORC_ID
		        , LST_CORC_DTM	
          )VALUES(
                  #usr_id#
                 ,TO_CHAR(SYSDATE,'YYYYMMDD') 
                 ,CASE WHEN #gbl_usr_grd_cd# = 'N' AND TO_CHAR(SYSDATE,'HH24MISS') <![CDATA[<=]]> '095100' THEN 'A'    
                       WHEN #gbl_usr_grd_cd# = 'O' AND TO_CHAR(SYSDATE,'HH24MISS') <![CDATA[<=]]> '135100' THEN 'A'  
                       WHEN #gbl_usr_grd_cd# NOT IN ('N','O') AND TO_CHAR(SYSDATE,'HH24MISS') <![CDATA[<=]]> '110000' THEN 'A' 
                       ELSE 'K' END
                 ,TO_CHAR(SYSDATE,'HH24MISS')
                 ,#usr_id#
                 ,TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
                 ,#usr_id#
                 ,TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')                 
          )
	</update>	
	-->
<!-- 
		근태등록 : 없으면 INSERT 있으면 아무작업안한다.
		20170524 허선화P요청으로 시간에 상관없이 모두 정상 근무=>"A" 로 근태 관리 저장 

	<update id="Set_UsrWkgYtpInf_UPDATE" parameterClass="java.util.HashMap">
	    MERGE INTO TBL_USR_WKG_TYP A
	    USING (SELECT #usr_id# AS USR_ID
                 FROM DUAL 
        ) B
        ON (A.USR_ID = B.USR_ID AND A.WKG_DT = TO_CHAR(SYSDATE,'YYYYMMDD') )
        WHEN MATCHED THEN
        UPDATE SET
        	WKG_END_TM = CASE WHEN #lgin_st_cd# = 1 THEN  NULL
        	             ELSE TO_CHAR(SYSDATE,'HH24MISS')
        	              END
           ,LST_CORC_ID = #usr_id#
           ,LST_CORC_DTM = TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
        WHEN NOT MATCHED THEN
        INSERT (
		          USR_ID			
		        , WKG_DT			
		        , WKG_TYP_CD		
		        , WKG_STR_TM	
		        , REG_ID		
		        , REG_DTM		
		        , LST_CORC_ID		
		        , LST_CORC_DTM		
          )VALUES(
                  #usr_id#
                 ,TO_CHAR(SYSDATE,'YYYYMMDD')  
                 ,'A'   
                 ,TO_CHAR(SYSDATE,'HH24MISS')
                 ,#usr_id#
                 ,TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
                 ,#usr_id#
                 ,TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')                 
          )
	</update>	
	--> 
	<!-- 
			20200818 로그 오프할때 굳이 lgin_st_cd를 체크 할필요가 없음. case문 제거 
	-->
	<update id="Set_UsrWkgYtpInf_UPDATE" parameterClass="java.util.HashMap">
	    MERGE INTO TBL_USR_WKG_TYP A
	    USING (SELECT #usr_id# AS USR_ID
                 FROM DUAL 
        ) B
        ON (A.USR_ID = B.USR_ID AND A.WKG_DT = TO_CHAR(SYSDATE,'YYYYMMDD') )
        WHEN MATCHED THEN
        UPDATE SET
        	WKG_END_TM =  TO_CHAR(SYSDATE,'HH24MISS')        	          
           ,LST_CORC_ID = #usr_id#
           ,LST_CORC_DTM = TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
        WHEN NOT MATCHED THEN
        INSERT (
		          USR_ID			<!--사용자 ID		-->
		        , WKG_DT			<!--근무 일자			-->
		        , WKG_TYP_CD		<!--근무 형태 코드	-->
		        , WKG_STR_TM		<!--근무 시작 시각	-->
		        , REG_ID			<!-- 등록 ID			-->
		        , REG_DTM			<!-- 등록 일시		-->
		        , LST_CORC_ID		<!--최종 수정 ID		-->
		        , LST_CORC_DTM		<!--최종 수정 일시	-->
          )VALUES(
                  #usr_id#
                 ,TO_CHAR(SYSDATE,'YYYYMMDD')  
                 ,'A'   <!--로그인 시간에 상관없이 모두 정상 근무-->
                 ,TO_CHAR(SYSDATE,'HH24MISS')
                 ,#usr_id#
                 ,TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
                 ,#usr_id#
                 ,TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')                 
          )
	</update>	
	

	<!-- 
		로그인체크
	 -->
	<select id="Get_UsrInfo_Chk_SELECT" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
	    SELECT CASE WHEN PW = FUN_SHA1_HASH(#pw#)  
	                THEN 'Y' 
	                ELSE 'N' 
	            END AS PW_YN  <!-- 비밀번호일치여부 --> 
	            
	            , CASE WHEN PW_1 = FUN_SHA1_HASH(#new_pw#)  
                    THEN 'Y' 
                    ELSE 'N' 
                END AS PW_YN_1  <!-- 전비밀번호일치여부 --> 
	            
	          ,CASE WHEN PW = FUN_SHA1_HASH('gsmbiz0519')
	           		THEN 'Y'
	           		ELSE 'N'
	           END AS PW_INIT_YN		<!-- 비밀번호초기화여부 -->
	      FROM TBL_USR           
		 WHERE USR_ID = #usr_id#		     
	</select> 	
	

	<!-- 
		비밀번호변경
	
	<update id="Set_PwChangeInf_UPDATE" parameterClass="java.util.HashMap">
		UPDATE TBL_USR  
		   SET PW = FUN_SHA1_HASH(#new_pw#)
		     , LST_CORC_ID  = #gbl_usr_id#   
		     , LST_CORC_DTM = TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')  
		     , LST_PW_UPD_DTM = TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')		     
		 WHERE USR_ID = #usr_id#
	</update>	
	 -->
		<!-- 
		비밀번호변경
		모의 해킹 기존 패스워드 체크 추가 
	 -->
	<update id="Set_PwChangeInf_UPDATE" parameterClass="java.util.HashMap">
		UPDATE TBL_USR  
		   SET PW = FUN_SHA1_HASH(#new_pw#)
		     , PW_1 = PW  <!-- 현재 이전 비밀번호 체크 추가 -->
		     , LST_CORC_ID  = #gbl_usr_id#   
		     , LST_CORC_DTM = TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')  
		     , LST_PW_UPD_DTM = TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')		     
		 WHERE USR_ID = #usr_id#
		 AND   PW = FUN_SHA1_HASH(#pw#)
	</update>	
	

	<!-- 
		비밀번호히스토리등록
	 -->
	<insert id="Set_TblPwUpdHistInf_INSERT" parameterClass="java.util.HashMap">
		INSERT INTO TBL_PW_UPD_HIST(
			   USR_ID
			 , PW_REG_DTM
			 , PW
		) VALUES (
			   #usr_id#
			 , TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')  
			 , FUN_SHA1_HASH(#pw#)  			 
		)	
	</insert>
	
	<!-- 
		공통비밀번호체계유지정보 가져오기
	 -->
	<select id="Get_PwCheckList_SELECT" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
		SELECT CHCK_CD		<!-- 체크순번 -->
		     , CHCK_CDNM	<!-- 체크명 -->
		     , CPHR			<!-- 체크값 -->
		     , USE_YN		<!-- 사용여부 -->
		  FROM TBL_PW_CHCK_INFO
		ORDER BY CHCK_CD    	
	</select> 	
	
	
</sqlMap>
