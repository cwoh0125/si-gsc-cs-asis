<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="CMP310">
 	
	<!-- 평균 처리 소요일 조회 (불만유형별)-->
 	<select id="Get_CMP_SELECT" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
	SELECT
	     Q1.HGRK_DEPT_CD        						AS HGRK_DEPT_CD
	    ,CASE WHEN Q1.HGRK_DEPT_CD IS NULL THEN '전체' 
	    	ELSE MAX(Q1.HGRK_DEPT_CDNM) END 			AS HGRK_DEPT_CDNM
	    ,Q1.DEPT_CD             						AS DEPT_CD
	    ,CASE WHEN Q1.HGRK_DEPT_CD IS NULL THEN '평균' 
	          WHEN Q1.DEPT_CD IS NULL THEN '소계' 
	        ELSE MAX(Q1.DEPT_CDNM) END  				AS DSPSR_CHRG_DEPT
	    
	    ,CASE WHEN SUM(Q2.DATA1_CNT)>0 THEN ROUND(SUM(Q2.DATA1_DT)/SUM(Q2.DATA1_CNT),1) ELSE NULL END AS DATA1
	    ,CASE WHEN SUM(Q2.DATA2_CNT)>0 THEN ROUND(SUM(Q2.DATA2_DT)/SUM(Q2.DATA2_CNT),1) ELSE NULL END AS DATA2
	    ,CASE WHEN SUM(Q2.DATA3_CNT)>0 THEN ROUND(SUM(Q2.DATA3_DT)/SUM(Q2.DATA3_CNT),1) ELSE NULL END AS DATA3
	    ,CASE WHEN SUM(Q2.DATA4_CNT)>0 THEN ROUND(SUM(Q2.DATA4_DT)/SUM(Q2.DATA4_CNT),1) ELSE NULL END AS DATA4
	    ,CASE WHEN SUM(Q2.DATA5_CNT)>0 THEN ROUND(SUM(Q2.DATA5_DT)/SUM(Q2.DATA5_CNT),1) ELSE NULL END AS DATA5
	    ,CASE WHEN SUM(Q2.DATA6_CNT)>0 THEN ROUND(SUM(Q2.DATA6_DT)/SUM(Q2.DATA6_CNT),1) ELSE NULL END AS DATA6
	    ,CASE WHEN SUM(Q2.DATA7_CNT)>0 THEN ROUND(SUM(Q2.DATA7_DT)/SUM(Q2.DATA7_CNT),1) ELSE NULL END AS DATA7
	    ,CASE WHEN SUM(Q2.DATA8_CNT)>0 THEN ROUND(SUM(Q2.DATA8_DT)/SUM(Q2.DATA8_CNT),1) ELSE NULL END AS DATA8
	    ,CASE WHEN SUM(Q2.DATA9_CNT)>0 THEN ROUND(SUM(Q2.DATA9_DT)/SUM(Q2.DATA9_CNT),1) ELSE NULL END AS DATA9
	    ,CASE WHEN SUM(Q2.DATA10_CNT)>0 THEN ROUND(SUM(Q2.DATA10_DT)/SUM(Q2.DATA10_CNT),1) ELSE NULL END AS DATA10
	    ,CASE WHEN SUM(Q2.DATA11_CNT)>0 THEN ROUND(SUM(Q2.DATA11_DT)/SUM(Q2.DATA11_CNT),1) ELSE NULL END AS DATA11
	    ,CASE WHEN SUM(Q2.DATA12_CNT)>0 THEN ROUND(SUM(Q2.DATA12_DT)/SUM(Q2.DATA12_CNT),1) ELSE NULL END AS DATA12
	    ,CASE WHEN SUM(Q2.DATA13_CNT)>0 THEN ROUND(SUM(Q2.DATA13_DT)/SUM(Q2.DATA13_CNT),1) ELSE NULL END AS DATA13
	    ,CASE WHEN SUM(Q2.DATA14_CNT)>0 THEN ROUND(SUM(Q2.DATA14_DT)/SUM(Q2.DATA14_CNT),1) ELSE NULL END AS DATA14
	    ,CASE WHEN SUM(Q2.DATA15_CNT)>0 THEN ROUND(SUM(Q2.DATA15_DT)/SUM(Q2.DATA15_CNT),1) ELSE NULL END AS DATA15
	    ,CASE WHEN SUM(Q2.DATA16_CNT)>0 THEN ROUND(SUM(Q2.DATA16_DT)/SUM(Q2.DATA16_CNT),1) ELSE NULL END AS DATA16
	    ,CASE WHEN SUM(Q2.DATA17_CNT)>0 THEN ROUND(SUM(Q2.DATA17_DT)/SUM(Q2.DATA17_CNT),1) ELSE NULL END AS DATA17
	    ,CASE WHEN SUM(Q2.DATA18_CNT)>0 THEN ROUND(SUM(Q2.DATA18_DT)/SUM(Q2.DATA18_CNT),1) ELSE NULL END AS DATA18
	    ,CASE WHEN SUM(Q2.DATA19_CNT)>0 THEN ROUND(SUM(Q2.DATA19_DT)/SUM(Q2.DATA19_CNT),1) ELSE NULL END AS DATA19
	    ,CASE WHEN SUM(Q2.DATA20_CNT)>0 THEN ROUND(SUM(Q2.DATA20_DT)/SUM(Q2.DATA20_CNT),1) ELSE NULL END AS DATA20
	    ,CASE WHEN SUM(Q2.DATA21_CNT)>0 THEN ROUND(SUM(Q2.DATA21_DT)/SUM(Q2.DATA21_CNT),1) ELSE NULL END AS DATA21
	    ,CASE WHEN SUM(Q2.DATA22_CNT)>0 THEN ROUND(SUM(Q2.DATA22_DT)/SUM(Q2.DATA22_CNT),1) ELSE NULL END AS DATA22
	    ,CASE WHEN SUM(Q2.DATA23_CNT)>0 THEN ROUND(SUM(Q2.DATA23_DT)/SUM(Q2.DATA23_CNT),1) ELSE NULL END AS DATA23
	    ,CASE WHEN SUM(Q2.DATA24_CNT)>0 THEN ROUND(SUM(Q2.DATA24_DT)/SUM(Q2.DATA24_CNT),1) ELSE NULL END AS DATA24
	    ,CASE WHEN SUM(Q2.DATA25_CNT)>0 THEN ROUND(SUM(Q2.DATA25_DT)/SUM(Q2.DATA25_CNT),1) ELSE NULL END AS DATA25
        
        ,CASE WHEN 
	       (NVL(SUM(Q2.Data1_CNT),0) + NVL(SUM(Q2.Data2_CNT),0) + NVL(SUM(Q2.Data3_CNT),0) + NVL(SUM(Q2.Data4_CNT),0) + NVL(SUM(Q2.Data5_CNT),0)+
	    	NVL(SUM(Q2.Data6_CNT),0) + NVL(SUM(Q2.Data7_CNT),0) + NVL(SUM(Q2.Data8_CNT),0) + NVL(SUM(Q2.Data9_CNT),0) + NVL(SUM(Q2.Data10_CNT),0)+
	    	NVL(SUM(Q2.Data11_CNT),0)+ NVL(SUM(Q2.Data12_CNT),0)+ NVL(SUM(Q2.Data13_CNT),0)+ NVL(SUM(Q2.Data14_CNT),0)+ NVL(SUM(Q2.Data15_CNT),0)+
	    	NVL(SUM(Q2.Data16_CNT),0)+ NVL(SUM(Q2.Data17_CNT),0)+ NVL(SUM(Q2.Data18_CNT),0)+ NVL(SUM(Q2.Data19_CNT),0)+ NVL(SUM(Q2.Data20_CNT),0)+
	    	NVL(SUM(Q2.Data21_CNT),0)+ NVL(SUM(Q2.Data22_CNT),0)+ NVL(SUM(Q2.Data23_CNT),0)+ NVL(SUM(Q2.Data24_CNT),0)+ NVL(SUM(Q2.Data25_CNT),0)) > 0 
	     THEN
	       ROUND(
	       (NVL(SUM(Q2.Data1_DT),0) + NVL(SUM(Q2.Data2_DT),0) + NVL(SUM(Q2.Data3_DT),0) + NVL(SUM(Q2.Data4_DT),0) + NVL(SUM(Q2.Data5_DT),0)+
	    	NVL(SUM(Q2.Data6_DT),0) + NVL(SUM(Q2.Data7_DT),0) + NVL(SUM(Q2.Data8_DT),0) + NVL(SUM(Q2.Data9_DT),0) + NVL(SUM(Q2.Data10_DT),0)+
	    	NVL(SUM(Q2.Data11_DT),0)+ NVL(SUM(Q2.Data12_DT),0)+ NVL(SUM(Q2.Data13_DT),0)+ NVL(SUM(Q2.Data14_DT),0)+ NVL(SUM(Q2.Data15_DT),0)+
	    	NVL(SUM(Q2.Data16_DT),0)+ NVL(SUM(Q2.Data17_DT),0)+ NVL(SUM(Q2.Data18_DT),0)+ NVL(SUM(Q2.Data19_DT),0)+ NVL(SUM(Q2.Data20_DT),0)+
	    	NVL(SUM(Q2.Data21_DT),0)+ NVL(SUM(Q2.Data22_DT),0)+ NVL(SUM(Q2.Data23_DT),0)+ NVL(SUM(Q2.Data24_DT),0)+ NVL(SUM(Q2.Data25_DT),0))
	      /(NVL(SUM(Q2.Data1_CNT),0) + NVL(SUM(Q2.Data2_CNT),0) + NVL(SUM(Q2.Data3_CNT),0) + NVL(SUM(Q2.Data4_CNT),0) + NVL(SUM(Q2.Data5_CNT),0)+
	    	NVL(SUM(Q2.Data6_CNT),0) + NVL(SUM(Q2.Data7_CNT),0) + NVL(SUM(Q2.Data8_CNT),0) + NVL(SUM(Q2.Data9_CNT),0) + NVL(SUM(Q2.Data10_CNT),0)+
	    	NVL(SUM(Q2.Data11_CNT),0)+ NVL(SUM(Q2.Data12_CNT),0)+ NVL(SUM(Q2.Data13_CNT),0)+ NVL(SUM(Q2.Data14_CNT),0)+ NVL(SUM(Q2.Data15_CNT),0)+
	    	NVL(SUM(Q2.Data16_CNT),0)+ NVL(SUM(Q2.Data17_CNT),0)+ NVL(SUM(Q2.Data18_CNT),0)+ NVL(SUM(Q2.Data19_CNT),0)+ NVL(SUM(Q2.Data20_CNT),0)+
	    	NVL(SUM(Q2.Data21_CNT),0)+ NVL(SUM(Q2.Data22_CNT),0)+ NVL(SUM(Q2.Data23_CNT),0)+ NVL(SUM(Q2.Data24_CNT),0)+ NVL(SUM(Q2.Data25_CNT),0))
	       ,1) ELSE NULL END  AS RSUM   
	    
	FROM 	
	    (   
	        SELECT 	HGRK_DEPT_CD,HGRK_DEPT_CDNM,DEPT_CD,DEPT_CDNM
	        FROM 	TBL_HR_DEPT_CD       
	        WHERE 	1=1
	       		<dynamic>
	       			<isEmpty prepend="AND" property="hgrk_dept_cd">
						HGRK_DEPT_CD IN ('E00054','E00056','T21000','E00053','E00042','E00044','JD1000','E00048')	       				
	       			</isEmpty>
				  	<isNotEmpty prepend="AND" property="hgrk_dept_cd">				<!-- 부문/본부 -->
					    HGRK_DEPT_CD = #hgrk_dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dept_cd">					<!-- 처리팀 -->
					    DEPT_CD = #dept_cd#
				  	</isNotEmpty>	       		
				</dynamic>       		
	        
	       		<dynamic>
	       			<isEmpty property="hgrk_dept_cd">	        
				        UNION ALL
				        
				        SELECT 
				             'ZZZZZ'    	AS HGRK_DEPT_CD  
				            ,'기타부문' 		AS HGRK_DEPT_CDNM
				            ,'ZZZZZ'    	AS DEPT_CD
				            ,'기타'     		AS DEPT_CDNM
				        FROM DUAL
	       			</isEmpty>				        
				</dynamic>	   
	    ) Q1
	    
	    LEFT JOIN
	    
	    ( 	
			SELECT 	 
	   			 G.HGRK_DEPT_CDNM as HGRK_DEPT_CDNM
	   			,G.DEPT_CDNM as DSPSR_CHRG_DEPT
	   			,G.DEPT_CD as DEPT_CD
            	,SUM(CASE WHEN I.DSFT_TYP_CD='CA' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA1_DT
                ,SUM(CASE WHEN I.DSFT_TYP_CD='CA' THEN 1 ELSE 0 END) AS DATA1_CNT
            	,SUM(CASE WHEN I.DSFT_TYP_CD='CB' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA2_DT
                ,SUM(CASE WHEN I.DSFT_TYP_CD='CB' THEN 1 ELSE 0 END) AS DATA2_CNT                
            	,SUM(CASE WHEN I.DSFT_TYP_CD='CC' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA3_DT
                ,SUM(CASE WHEN I.DSFT_TYP_CD='CC' THEN 1 ELSE 0 END) AS DATA3_CNT                                  
            	,SUM(CASE WHEN I.DSFT_TYP_CD='CD' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA4_DT
                ,SUM(CASE WHEN I.DSFT_TYP_CD='CD' THEN 1 ELSE 0 END) AS DATA4_CNT
            	,SUM(CASE WHEN I.DSFT_TYP_CD='CE' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA5_DT
                ,SUM(CASE WHEN I.DSFT_TYP_CD='CE' THEN 1 ELSE 0 END) AS DATA5_CNT
            	,SUM(CASE WHEN I.DSFT_TYP_CD='CF' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA6_DT
                ,SUM(CASE WHEN I.DSFT_TYP_CD='CF' THEN 1 ELSE 0 END) AS DATA6_CNT
            	,SUM(CASE WHEN I.DSFT_TYP_CD='CG' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA7_DT
                ,SUM(CASE WHEN I.DSFT_TYP_CD='CG' THEN 1 ELSE 0 END) AS DATA7_CNT
            	,SUM(CASE WHEN I.DSFT_TYP_CD='CH' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA8_DT
                ,SUM(CASE WHEN I.DSFT_TYP_CD='CH' THEN 1 ELSE 0 END) AS DATA8_CNT
            	,SUM(CASE WHEN I.DSFT_TYP_CD='CI' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA9_DT
                ,SUM(CASE WHEN I.DSFT_TYP_CD='CI' THEN 1 ELSE 0 END) AS DATA9_CNT
            	,SUM(CASE WHEN I.DSFT_TYP_CD='CJ' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA10_DT
                ,SUM(CASE WHEN I.DSFT_TYP_CD='CJ' THEN 1 ELSE 0 END) AS DATA10_CNT                
            	,SUM(CASE WHEN I.DSFT_TYP_CD='CK' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA11_DT
                ,SUM(CASE WHEN I.DSFT_TYP_CD='CK' THEN 1 ELSE 0 END) AS DATA11_CNT
            	,SUM(CASE WHEN I.DSFT_TYP_CD='CL' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA12_DT
                ,SUM(CASE WHEN I.DSFT_TYP_CD='CL' THEN 1 ELSE 0 END) AS DATA12_CNT
            	,SUM(CASE WHEN I.DSFT_TYP_CD='CM' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA13_DT
                ,SUM(CASE WHEN I.DSFT_TYP_CD='CM' THEN 1 ELSE 0 END) AS DATA13_CNT
            	,SUM(CASE WHEN I.DSFT_TYP_CD='CN' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA14_DT
                ,SUM(CASE WHEN I.DSFT_TYP_CD='CN' THEN 1 ELSE 0 END) AS DATA14_CNT
            	,SUM(CASE WHEN I.DSFT_TYP_CD='CO' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA15_DT
                ,SUM(CASE WHEN I.DSFT_TYP_CD='CO' THEN 1 ELSE 0 END) AS DATA15_CNT
            	,SUM(CASE WHEN I.DSFT_TYP_CD='CP' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA16_DT
                ,SUM(CASE WHEN I.DSFT_TYP_CD='CP' THEN 1 ELSE 0 END) AS DATA16_CNT
            	,SUM(CASE WHEN I.DSFT_TYP_CD='CQ' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA17_DT
                ,SUM(CASE WHEN I.DSFT_TYP_CD='CQ' THEN 1 ELSE 0 END) AS DATA17_CNT
            	,SUM(CASE WHEN I.DSFT_TYP_CD='CR' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA18_DT
                ,SUM(CASE WHEN I.DSFT_TYP_CD='CR' THEN 1 ELSE 0 END) AS DATA18_CNT
            	,SUM(CASE WHEN I.DSFT_TYP_CD='DA' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA19_DT
                ,SUM(CASE WHEN I.DSFT_TYP_CD='DA' THEN 1 ELSE 0 END) AS DATA19_CNT
            	,SUM(CASE WHEN I.DSFT_TYP_CD='DB' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA20_DT
                ,SUM(CASE WHEN I.DSFT_TYP_CD='DB' THEN 1 ELSE 0 END) AS DATA20_CNT
            	,SUM(CASE WHEN I.DSFT_TYP_CD='DC' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA21_DT
                ,SUM(CASE WHEN I.DSFT_TYP_CD='DC' THEN 1 ELSE 0 END) AS DATA21_CNT
            	,SUM(CASE WHEN I.DSFT_TYP_CD='DD' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA22_DT
                ,SUM(CASE WHEN I.DSFT_TYP_CD='DD' THEN 1 ELSE 0 END) AS DATA22_CNT
            	,SUM(CASE WHEN I.DSFT_TYP_CD='DE' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA23_DT
                ,SUM(CASE WHEN I.DSFT_TYP_CD='DE' THEN 1 ELSE 0 END) AS DATA23_CNT
            	,SUM(CASE WHEN I.DSFT_TYP_CD='DF' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA24_DT
                ,SUM(CASE WHEN I.DSFT_TYP_CD='DF' THEN 1 ELSE 0 END) AS DATA24_CNT
            	,SUM(CASE WHEN I.DSFT_TYP_CD='DG' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA25_DT
                ,SUM(CASE WHEN I.DSFT_TYP_CD='DG' THEN 1 ELSE 0 END) AS DATA25_CNT
	
	        FROM TBL_DSFT_ACPN_PROC A						<!-- 불만 접수 처리 -->	       		   
			        LEFT JOIN TBL_HC_HIST C
			               ON A.DSFT_ACPN_SEQ_NO = C.DSFT_ACPN_SEQ_NO		  
			        LEFT JOIN TBL_CRPN_CUST_BASE D
			       		   ON A.ORGN_PTR_ST_CD = D.CUST_ID        	    	  
			        LEFT JOIN TBL_USR B
			       		   ON A.DSPSR_ID = B.USR_ID 
			        LEFT JOIN TBL_HR_EMP_CD F
			       		   ON A.DSPSR_ID = F.EMP_NO
			        LEFT JOIN TBL_HR_DEPT_CD G 
			       		   ON F.BLNG_DEPT_CD = G.DEPT_CD
			        LEFT JOIN TBL_SAP_CD H	
			       		   ON (A.ORGN_ENTR_DV_CD = H.CD_ID AND H.CD_CLAS_CD = '1')	
			        LEFT JOIN TBL_DSFT_TAXN_TYP_CD I
			       		   ON A.DSFT_TAXN_TYP_CD = I.DSFT_TAXN_TYP_CD
			       		   
			WHERE G.HGRK_DEPT_CD IN ('E00054','E00056','T21000','E00053','E00042','E00044','JD1000','E00048')
					AND A.PROC_DTM IS NOT NULL
					AND (A.DEL_YN = 'N' OR A.DEL_YN IS NULL)
					AND A.DSPSR_CHRG_DEPT_CD = G.DEPT_CD <!-- 불만 통계 개선 201711 -->
	       		<dynamic>
	       			<!-- 년도별 -->   				    	
		    	    <isEqual property="cmb_gubun" compareValue="1">              
		                and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'                                                                  
		            </isEqual>
		            <!--  -->
		            <isEqual property="cmb_gubun" compareValue="2">
		            	<isEmpty property="cmb_half">
		            		and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'
		            	</isEmpty>              
		                <isEqual property="cmb_half" compareValue="1">
		                	and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0632000000'                                                                  
						</isEqual>	 
						<isEqual property="cmb_half" compareValue="2">
							and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '1232000000'
						</isEqual>	 
		            </isEqual>	 
		            <isEqual property="cmb_gubun" compareValue="3"> 
		            	<isEmpty>
							and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'	            	
		            	</isEmpty>    
		           		<isEqual property="cmb_qua" compareValue="1">
		           			and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0332000000'   
		           	  	</isEqual>
		           	  	<isEqual property="cmb_qua" compareValue="2">
		           	   		and A.ACPN_DTM between #time_key# || '0400000000' and #time_key# || '0632000000'   
		           	  	</isEqual>	 
		           	  	<isEqual property="cmb_qua" compareValue="3">
		           	   		and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '0932000000'   
		           	  	</isEqual>	 
	           	  		<isEqual property="cmb_qua" compareValue="4">
		           	   		and A.ACPN_DTM between #time_key# || '1000000000' and #time_key# || '1232000000'   
		           	  	</isEqual>	 	 
	            	</isEqual>	 				            
		    	 	<isEqual property="cmb_gubun" compareValue="4">              
		            	and A.ACPN_DTM between #time_key# || '00000000' and #time_key# || '32000000'                                                                  
		         	</isEqual>	
		    	 	<isEqual property="cmb_gubun" compareValue="5">              
		                and A.ACPN_DTM between #time_key# || '000000' and #time_key# || '240000'                                                                  
		         	</isEqual>
				
					<!-- 불만유형이 전체일 때는 두가지 경우 존재(전체, 품질&혼유)		-->				
					<isEmpty property="dsft_typ_cd">
						<isEqual property="dsft_typ_tot_gbn" compareValue="2">
							AND A.DSFT_TYP_CD IN ('CA','CK')
						</isEqual>
					</isEmpty>					
				  	<isNotEmpty prepend="AND" property="dsft_typ_cd">				<!-- 불만유형		-->
				    	A.DSFT_TYP_CD = #dsft_typ_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dsft_taxn_typ_cd">			<!-- 불만세부유형		-->
				    	A.DSFT_TAXN_TYP_CD = #dsft_taxn_typ_cd#
				  	</isNotEmpty>
			  		<isNotEmpty prepend="AND" property="orgn_ptr_st_cd">			<!-- 불만발생업체코드(가맹점SAP코드) -->
					    A.ORGN_PTR_ST_CD = #orgn_ptr_st_cd#
				  	</isNotEmpty>
				    <isNotEmpty prepend="AND" property="conn_chnl_kind_cd">			<!-- 접촉채널	-->
					    A.CONN_CHNL_KIND_CD = #conn_chnl_kind_cd#
				    </isNotEmpty>			  	
				  	<isNotEmpty prepend="AND" property="hgrk_dept_cd">				<!-- 부문/본부 -->
					    G.HGRK_DEPT_CD = #hgrk_dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dept_cd">					<!-- 처리팀 -->
					    G.DEPT_CD = #dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dspsr_id_nm">				<!-- 처리자명 		-->
					    (B.USR_NM LIKE '%'|| #dspsr_id_nm# ||'%' OR F.EMP_NM LIKE '%'|| #dspsr_id_nm# ||'%')
				  	</isNotEmpty>
			 		<isEqual property="hc_yn" compareValue="Y"> 					<!-- 해피콜여부  -->
			 			AND A.HC_YN = 'Y'
			 		</isEqual>
				 	<isEqual property="hc_yn" compareValue="N"> 					<!-- 해피콜여부  -->
				 		AND (A.HC_YN = 'N' OR A.HC_YN IS NULL)
				 	</isEqual>
				  	<isNotEmpty prepend="AND" property="attd_sft_cd">				<!-- 태도만족도 		-->
				  		(A.HC_YN = 'Y' AND C.ATTD_SFT_CD = #attd_sft_cd#)
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="rslt_sft_cd">				<!-- 결과만족도 		-->
				  		(A.HC_YN = 'Y' AND C.RSLT_SFT_CD = #rslt_sft_cd#)
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="hc_uabl_rsn_cd">			<!-- 해피콜불가사유		-->
				  		A.HC_UABL_RSN_CD = #hc_uabl_rsn_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="prdct_cd">					<!-- 불만제품 		-->
					    A.PRDCT_CD = #prdct_cd#
				  	</isNotEmpty>			  				 	
				  	<isNotEmpty prepend="AND" property="prblm_penom_cd">			<!-- 현상 		-->
					    A.PRBLM_PENOM_CD = #prblm_penom_cd#
				  	</isNotEmpty>
			 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="1">  	<!-- 시료품질 점검결과		-->
			 			AND	A.VHCL_QLIT_DSFT_CAUS_CD_CUST IS NOT NULL
			 	  	</isEqual>
			 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="2">   	<!-- 시료품질 점검결과		-->
			 	  		AND	A.VHCL_QLIT_DSFT_CAUS_CD_PTR_ST IS NOT NULL
			 	  	</isEqual>
				  	<isNotEmpty prepend="AND" property="vhcl_biztr_qlit_dsft_typ_cd">			<!-- 품질불만유형 		-->
					    A.VHCL_BIZTR_QLIT_DSFT_TYP_CD = #vhcl_biztr_qlit_dsft_typ_cd#
				  	</isNotEmpty>
				 	<isEqual property="vhcl_biztr_yn" compareValue="Y"> 			<!-- Kixx 품질서비스차량 출동 -->
				 		AND A.VHCL_BIZTR_YN = 'Y'
				 	</isEqual>
				 	<isEqual property="vhcl_biztr_yn" compareValue="N"> 			<!-- Kixx 품질서비스차량 출동 -->
				 		AND (A.VHCL_BIZTR_YN = 'N' OR A.VHCL_BIZTR_YN IS NULL)
				 	</isEqual>		 	  	
				 	<isEqual property="rwrd_yn" compareValue="Y"> 					<!-- 보상여부 -->
				 		AND A.RWRD_YN = 'Y'
				 	</isEqual>
				 	<isEqual property="rwrd_yn" compareValue="N"> 					<!-- 보상여부 -->
				 		AND (A.RWRD_YN = 'N' OR A.RWRD_YN IS NULL)
				 	</isEqual>
				 	
				 	<isEqual property="cps_amt_gbn" compareValue="1"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 주유소 보상금 1만원 미만-->
				 			AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 주유소 보상금 1만원 ~ 10만원-->
				 			AND (A.PTR_ST_CPS_AMT <![CDATA[>=]]> 10000 AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 주유소 보상금 10만원 초과-->
				 			AND A.PTR_ST_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	<isEqual property="cps_amt_gbn" compareValue="2"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 회사 보상금 1만원 미만-->
				 			AND A.CO_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 회사 보상금 1만원 ~ 10만원-->
				 			AND (A.CO_CPS_AMT <![CDATA[>=]]> 10000 AND A.CO_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 회사 보상금 10만원 초과-->
				 			AND A.CO_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	<isEqual property="cps_amt_gbn" compareValue="3"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 총 보상금 1만원 미만-->
				 			AND A.TOT_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 총 보상금 1만원 ~ 10만원-->
				 			AND (A.TOT_CPS_AMT <![CDATA[>=]]> 10000 AND A.TOT_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 총 보상금 10만원 초과-->
				 			AND A.TOT_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	
					<!--처리자구분에 체크항목이 하나도 없는 경우, 전체데이터가 조회된다.-->
				 	<isEqual property="cmp_handler" compareValue="1">   
				 		AND	A.DSPSR_YN_CNSLR = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="2">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="3">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="4">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="5">   
				 		AND	A.DSPSR_YN_DSFT_CHRG = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="6">   
				 		AND	A.DSPSR_YN_PART_HD = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="7">   
				 		AND	(A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
	       		</dynamic>  
		
			GROUP BY G.HGRK_DEPT_CDNM,G.HGRK_DEPT_CD, G.DEPT_CD,G.DEPT_CDNM
			
			UNION ALL
			
	        SELECT 	 
				 '기타부문' 		AS HGRK_DEPT_CDNM
				,'기타' 			AS DSPSR_CHRG_DEPT
				,'ZZZZZ' 		AS DEPT_CD	
            	,SUM(CASE WHEN I.DSFT_TYP_CD='CA' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA1_DT
                ,SUM(CASE WHEN I.DSFT_TYP_CD='CA' THEN 1 ELSE 0 END) AS DATA1_CNT
            	,SUM(CASE WHEN I.DSFT_TYP_CD='CB' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA2_DT
                ,SUM(CASE WHEN I.DSFT_TYP_CD='CB' THEN 1 ELSE 0 END) AS DATA2_CNT                
            	,SUM(CASE WHEN I.DSFT_TYP_CD='CC' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA3_DT
                ,SUM(CASE WHEN I.DSFT_TYP_CD='CC' THEN 1 ELSE 0 END) AS DATA3_CNT                                  
            	,SUM(CASE WHEN I.DSFT_TYP_CD='CD' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA4_DT
                ,SUM(CASE WHEN I.DSFT_TYP_CD='CD' THEN 1 ELSE 0 END) AS DATA4_CNT
            	,SUM(CASE WHEN I.DSFT_TYP_CD='CE' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA5_DT
                ,SUM(CASE WHEN I.DSFT_TYP_CD='CE' THEN 1 ELSE 0 END) AS DATA5_CNT
            	,SUM(CASE WHEN I.DSFT_TYP_CD='CF' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA6_DT
                ,SUM(CASE WHEN I.DSFT_TYP_CD='CF' THEN 1 ELSE 0 END) AS DATA6_CNT
            	,SUM(CASE WHEN I.DSFT_TYP_CD='CG' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA7_DT
                ,SUM(CASE WHEN I.DSFT_TYP_CD='CG' THEN 1 ELSE 0 END) AS DATA7_CNT
            	,SUM(CASE WHEN I.DSFT_TYP_CD='CH' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA8_DT
                ,SUM(CASE WHEN I.DSFT_TYP_CD='CH' THEN 1 ELSE 0 END) AS DATA8_CNT
            	,SUM(CASE WHEN I.DSFT_TYP_CD='CI' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA9_DT
                ,SUM(CASE WHEN I.DSFT_TYP_CD='CI' THEN 1 ELSE 0 END) AS DATA9_CNT
            	,SUM(CASE WHEN I.DSFT_TYP_CD='CJ' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA10_DT
                ,SUM(CASE WHEN I.DSFT_TYP_CD='CJ' THEN 1 ELSE 0 END) AS DATA10_CNT                
            	,SUM(CASE WHEN I.DSFT_TYP_CD='CK' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA11_DT
                ,SUM(CASE WHEN I.DSFT_TYP_CD='CK' THEN 1 ELSE 0 END) AS DATA11_CNT
            	,SUM(CASE WHEN I.DSFT_TYP_CD='CL' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA12_DT
                ,SUM(CASE WHEN I.DSFT_TYP_CD='CL' THEN 1 ELSE 0 END) AS DATA12_CNT
            	,SUM(CASE WHEN I.DSFT_TYP_CD='CM' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA13_DT
                ,SUM(CASE WHEN I.DSFT_TYP_CD='CM' THEN 1 ELSE 0 END) AS DATA13_CNT
            	,SUM(CASE WHEN I.DSFT_TYP_CD='CN' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA14_DT
                ,SUM(CASE WHEN I.DSFT_TYP_CD='CN' THEN 1 ELSE 0 END) AS DATA14_CNT
            	,SUM(CASE WHEN I.DSFT_TYP_CD='CO' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA15_DT
                ,SUM(CASE WHEN I.DSFT_TYP_CD='CO' THEN 1 ELSE 0 END) AS DATA15_CNT
            	,SUM(CASE WHEN I.DSFT_TYP_CD='CP' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA16_DT
                ,SUM(CASE WHEN I.DSFT_TYP_CD='CP' THEN 1 ELSE 0 END) AS DATA16_CNT
            	,SUM(CASE WHEN I.DSFT_TYP_CD='CQ' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA17_DT
                ,SUM(CASE WHEN I.DSFT_TYP_CD='CQ' THEN 1 ELSE 0 END) AS DATA17_CNT
            	,SUM(CASE WHEN I.DSFT_TYP_CD='CR' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA18_DT
                ,SUM(CASE WHEN I.DSFT_TYP_CD='CR' THEN 1 ELSE 0 END) AS DATA18_CNT
            	,SUM(CASE WHEN I.DSFT_TYP_CD='DA' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA19_DT
                ,SUM(CASE WHEN I.DSFT_TYP_CD='DA' THEN 1 ELSE 0 END) AS DATA19_CNT
            	,SUM(CASE WHEN I.DSFT_TYP_CD='DB' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA20_DT
                ,SUM(CASE WHEN I.DSFT_TYP_CD='DB' THEN 1 ELSE 0 END) AS DATA20_CNT
            	,SUM(CASE WHEN I.DSFT_TYP_CD='DC' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA21_DT
                ,SUM(CASE WHEN I.DSFT_TYP_CD='DC' THEN 1 ELSE 0 END) AS DATA21_CNT
            	,SUM(CASE WHEN I.DSFT_TYP_CD='DD' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA22_DT
                ,SUM(CASE WHEN I.DSFT_TYP_CD='DD' THEN 1 ELSE 0 END) AS DATA22_CNT
            	,SUM(CASE WHEN I.DSFT_TYP_CD='DE' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA23_DT
                ,SUM(CASE WHEN I.DSFT_TYP_CD='DE' THEN 1 ELSE 0 END) AS DATA23_CNT
            	,SUM(CASE WHEN I.DSFT_TYP_CD='DF' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA24_DT
                ,SUM(CASE WHEN I.DSFT_TYP_CD='DF' THEN 1 ELSE 0 END) AS DATA24_CNT
            	,SUM(CASE WHEN I.DSFT_TYP_CD='DG' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA25_DT
                ,SUM(CASE WHEN I.DSFT_TYP_CD='DG' THEN 1 ELSE 0 END) AS DATA25_CNT
	
	        FROM TBL_DSFT_ACPN_PROC A						<!-- 불만 접수 처리 -->	       		   
			        LEFT JOIN TBL_HC_HIST C
			               ON A.DSFT_ACPN_SEQ_NO = C.DSFT_ACPN_SEQ_NO		  
			        LEFT JOIN TBL_CRPN_CUST_BASE D
			       		   ON A.ORGN_PTR_ST_CD = D.CUST_ID        	    	  
			        LEFT JOIN TBL_USR B
			       		   ON A.DSPSR_ID = B.USR_ID 
			        LEFT JOIN TBL_HR_EMP_CD F
			       		   ON A.DSPSR_ID = F.EMP_NO
			        LEFT JOIN TBL_HR_DEPT_CD G 
			       		   ON F.BLNG_DEPT_CD = G.DEPT_CD
			        LEFT JOIN TBL_SAP_CD H	
			       		   ON (A.ORGN_ENTR_DV_CD = H.CD_ID AND H.CD_CLAS_CD = '1')	
			        LEFT JOIN TBL_DSFT_TAXN_TYP_CD I
			       		   ON A.DSFT_TAXN_TYP_CD = I.DSFT_TAXN_TYP_CD
			       		   
			WHERE (G.HGRK_DEPT_CD IS NULL OR G.HGRK_DEPT_CD NOT IN ('E00054','E00056','T21000','E00053','E00042','E00044','JD1000','E00048'))
					AND A.PROC_DTM IS NOT NULL
					AND (A.DEL_YN = 'N' OR A.DEL_YN IS NULL)
					AND A.DSPSR_CHRG_DEPT_CD = G.DEPT_CD  <!-- 불만 통계 개선 201711 -->					
					AND (DSPSR_ID IN(SELECT EMP_NO FROM TBL_HR_EMP_CD) OR DSPSR_ID IN(SELECT USR_ID FROM TBL_USR))   <!-- 불만 통계 개선 201711 -->					
	       		<dynamic>
	       			<!-- 년도별 -->   				    	
		    	    <isEqual property="cmb_gubun" compareValue="1">              
		                and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'                                                                  
		            </isEqual>
		            <!--  -->
		            <isEqual property="cmb_gubun" compareValue="2">
		            	<isEmpty property="cmb_half">
		            		and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'
		            	</isEmpty>              
		                <isEqual property="cmb_half" compareValue="1">
		                	and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0632000000'                                                                  
						</isEqual>	 
						<isEqual property="cmb_half" compareValue="2">
							and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '1232000000'
						</isEqual>	 
		            </isEqual>	 
		            <isEqual property="cmb_gubun" compareValue="3"> 
		            	<isEmpty>
							and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'	            	
		            	</isEmpty>    
		           		<isEqual property="cmb_qua" compareValue="1">
		           			and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0332000000'   
		           	  	</isEqual>
		           	  	<isEqual property="cmb_qua" compareValue="2">
		           	   		and A.ACPN_DTM between #time_key# || '0400000000' and #time_key# || '0632000000'   
		           	  	</isEqual>	 
		           	  	<isEqual property="cmb_qua" compareValue="3">
		           	   		and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '0932000000'   
		           	  	</isEqual>	 
	           	  		<isEqual property="cmb_qua" compareValue="4">
		           	   		and A.ACPN_DTM between #time_key# || '1000000000' and #time_key# || '1232000000'   
		           	  	</isEqual>	 	 
	            	</isEqual>	 				            
		    	 	<isEqual property="cmb_gubun" compareValue="4">              
		            	and A.ACPN_DTM between #time_key# || '00000000' and #time_key# || '32000000'                                                                  
		         	</isEqual>	
		    	 	<isEqual property="cmb_gubun" compareValue="5">              
		                and A.ACPN_DTM between #time_key# || '000000' and #time_key# || '240000'                                                                  
		         	</isEqual>
				
					<!-- 불만유형이 전체일 때는 두가지 경우 존재(전체, 품질&혼유)		-->				
					<isEmpty property="dsft_typ_cd">
						<isEqual property="dsft_typ_tot_gbn" compareValue="2">
							AND A.DSFT_TYP_CD IN ('CA','CK')
						</isEqual>
					</isEmpty>					
				  	<isNotEmpty prepend="AND" property="dsft_typ_cd">				<!-- 불만유형		-->
				    	A.DSFT_TYP_CD = #dsft_typ_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dsft_taxn_typ_cd">			<!-- 불만세부유형		-->
				    	A.DSFT_TAXN_TYP_CD = #dsft_taxn_typ_cd#
				  	</isNotEmpty>
			  		<isNotEmpty prepend="AND" property="orgn_ptr_st_cd">			<!-- 불만발생업체코드(가맹점SAP코드) -->
					    A.ORGN_PTR_ST_CD = #orgn_ptr_st_cd#
				  	</isNotEmpty>
				    <isNotEmpty prepend="AND" property="conn_chnl_kind_cd">			<!-- 접촉채널	-->
					    A.CONN_CHNL_KIND_CD = #conn_chnl_kind_cd#
				    </isNotEmpty>			  	
				  	<isNotEmpty prepend="AND" property="hgrk_dept_cd">				<!-- 부문/본부 -->
					    G.HGRK_DEPT_CD = #hgrk_dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dept_cd">					<!-- 처리팀 -->
					    G.DEPT_CD = #dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dspsr_id_nm">				<!-- 처리자명 		-->
					    (B.USR_NM LIKE '%'|| #dspsr_id_nm# ||'%' OR F.EMP_NM LIKE '%'|| #dspsr_id_nm# ||'%')
				  	</isNotEmpty>
			 		<isEqual property="hc_yn" compareValue="Y"> 					<!-- 해피콜여부  -->
			 			AND A.HC_YN = 'Y'
			 		</isEqual>
				 	<isEqual property="hc_yn" compareValue="N"> 					<!-- 해피콜여부  -->
				 		AND (A.HC_YN = 'N' OR A.HC_YN IS NULL)
				 	</isEqual>
				  	<isNotEmpty prepend="AND" property="attd_sft_cd">				<!-- 태도만족도 		-->
				  		(A.HC_YN = 'Y' AND C.ATTD_SFT_CD = #attd_sft_cd#)
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="rslt_sft_cd">				<!-- 결과만족도 		-->
				  		(A.HC_YN = 'Y' AND C.RSLT_SFT_CD = #rslt_sft_cd#)
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="hc_uabl_rsn_cd">			<!-- 해피콜불가사유		-->
				  		A.HC_UABL_RSN_CD = #hc_uabl_rsn_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="prdct_cd">					<!-- 불만제품 		-->
					    A.PRDCT_CD = #prdct_cd#
				  	</isNotEmpty>			  				 	
				  	<isNotEmpty prepend="AND" property="prblm_penom_cd">			<!-- 현상 		-->
					    A.PRBLM_PENOM_CD = #prblm_penom_cd#
				  	</isNotEmpty>
			 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="1">  	<!-- 시료품질 점검결과		-->
			 			AND	A.VHCL_QLIT_DSFT_CAUS_CD_CUST IS NOT NULL
			 	  	</isEqual>
			 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="2">   	<!-- 시료품질 점검결과		-->
			 	  		AND	A.VHCL_QLIT_DSFT_CAUS_CD_PTR_ST IS NOT NULL
			 	  	</isEqual>
				  	<isNotEmpty prepend="AND" property="vhcl_biztr_qlit_dsft_typ_cd">			<!-- 품질불만유형 		-->
					    A.VHCL_BIZTR_QLIT_DSFT_TYP_CD = #vhcl_biztr_qlit_dsft_typ_cd#
				  	</isNotEmpty>
				 	<isEqual property="vhcl_biztr_yn" compareValue="Y"> 			<!-- Kixx 품질서비스차량 출동 -->
				 		AND A.VHCL_BIZTR_YN = 'Y'
				 	</isEqual>
				 	<isEqual property="vhcl_biztr_yn" compareValue="N"> 			<!-- Kixx 품질서비스차량 출동 -->
				 		AND (A.VHCL_BIZTR_YN = 'N' OR A.VHCL_BIZTR_YN IS NULL)
				 	</isEqual>		 	  	
				 	<isEqual property="rwrd_yn" compareValue="Y"> 					<!-- 보상여부 -->
				 		AND A.RWRD_YN = 'Y'
				 	</isEqual>
				 	<isEqual property="rwrd_yn" compareValue="N"> 					<!-- 보상여부 -->
				 		AND (A.RWRD_YN = 'N' OR A.RWRD_YN IS NULL)
				 	</isEqual>
				 	
				 	<isEqual property="cps_amt_gbn" compareValue="1"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 주유소 보상금 1만원 미만-->
				 			AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 주유소 보상금 1만원 ~ 10만원-->
				 			AND (A.PTR_ST_CPS_AMT <![CDATA[>=]]> 10000 AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 주유소 보상금 10만원 초과-->
				 			AND A.PTR_ST_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	<isEqual property="cps_amt_gbn" compareValue="2"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 회사 보상금 1만원 미만-->
				 			AND A.CO_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 회사 보상금 1만원 ~ 10만원-->
				 			AND (A.CO_CPS_AMT <![CDATA[>=]]> 10000 AND A.CO_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 회사 보상금 10만원 초과-->
				 			AND A.CO_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	<isEqual property="cps_amt_gbn" compareValue="3"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 총 보상금 1만원 미만-->
				 			AND A.TOT_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 총 보상금 1만원 ~ 10만원-->
				 			AND (A.TOT_CPS_AMT <![CDATA[>=]]> 10000 AND A.TOT_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 총 보상금 10만원 초과-->
				 			AND A.TOT_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	
					<!--처리자구분에 체크항목이 하나도 없는 경우, 전체데이터가 조회된다.-->
				 	<isEqual property="cmp_handler" compareValue="1">   
				 		AND	A.DSPSR_YN_CNSLR = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="2">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="3">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="4">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="5">   
				 		AND	A.DSPSR_YN_DSFT_CHRG = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="6">   
				 		AND	A.DSPSR_YN_PART_HD = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="7">   
				 		AND	(A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
	       		</dynamic> 
	
		) Q2
	
	ON Q1.DEPT_CD = Q2.DEPT_CD
	
	GROUP BY ROLLUP(Q1.HGRK_DEPT_CD,Q1.DEPT_CD)
	ORDER BY Q1.HGRK_DEPT_CD, Q1.DEPT_CD, MAX(Q1.DEPT_CDNM)
	 
 	</select>

<!-- 평균 처리 소요일 조회 (불만유형별 신규)-->
 	<select id="Get_CMP_SELECT_2" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
	SELECT
	     Q1.HGRK_DEPT_CD        						AS HGRK_DEPT_CD
	    ,CASE WHEN Q1.HGRK_DEPT_CD IS NULL THEN '전체' 
	    	ELSE MAX(Q1.HGRK_DEPT_CDNM) END 			AS HGRK_DEPT_CDNM
	    ,Q1.DEPT_CD             						AS DEPT_CD
	    ,CASE WHEN Q1.HGRK_DEPT_CD IS NULL THEN '평균' 
	          WHEN Q1.DEPT_CD IS NULL THEN '소계' 
	        ELSE MAX(Q1.DEPT_CDNM) END  				AS DSPSR_CHRG_DEPT
	    ,SUM(Q2.DATA1_CNT+Q2.DATA2_CNT+Q2.DATA3_CNT+Q2.DATA4_CNT+Q2.DATA5_CNT+Q2.DATA6_CNT+Q2.DATA7_CNT+Q2.DATA8_CNT+Q2.DATA9_CNT+Q2.DATA10_CNT+Q2.DATA11_CNT+Q2.DATA12_CNT+Q2.DATA13_CNT+Q2.DATA14_CNT+Q2.DATA15_CNT+Q2.DATA16_CNT) AS CNT_SUM                        
		,SUM(Q2.DATA1_CNT)   	  AS DATA1
		,SUM(Q2.DATA2_CNT)	    AS DATA2
		,SUM(Q2.DATA3_CNT)     	AS DATA3
		,SUM(Q2.DATA4_CNT)     	AS DATA4
		,SUM(Q2.DATA5_CNT)     	AS DATA5
		,SUM(Q2.DATA6_CNT)     	AS DATA6
		,SUM(Q2.DATA7_CNT)     	AS DATA7
		,SUM(Q2.DATA8_CNT)     	AS DATA8
		,SUM(Q2.DATA9_CNT)     	AS DATA9
		,SUM(Q2.DATA10_CNT)    	AS DATA10
		,SUM(Q2.DATA11_CNT)    	AS DATA11
		,SUM(Q2.DATA12_CNT)    	AS DATA12
		,SUM(Q2.DATA13_CNT)    	AS DATA13
		,SUM(Q2.DATA14_CNT)    	AS DATA14
		,SUM(Q2.DATA15_CNT)    	AS DATA15
		,SUM(Q2.DATA16_CNT)	    AS DATA16 
        ,SUM(Q2.DATA1_DT_M+(Q2.DATA2_DT_M+DATA2_DT_BH+DATA2_DT_BL)+(Q2.DATA3_DT_M+DATA3_DT_BH+DATA3_DT_BL)+(Q2.DATA4_DT_M+DATA4_DT_BH+DATA4_DT_BL) +(Q2.DATA5_DT_M+DATA5_DT_BH+DATA5_DT_BL)+(Q2.DATA6_DT_M+DATA6_DT_BH+DATA6_DT_BL)+(Q2.DATA7_DT_M+DATA7_DT_BH+DATA7_DT_BL)+Q2.DATA8_DT_M+Q2.DATA9_DT_M +(Q2.DATA10_DT_M+DATA10_DT_BH+DATA10_DT_BL)+(Q2.DATA11_DT_M+DATA11_DT_BH+DATA11_DT_BL)+(Q2.DATA12_DT_M+DATA12_DT_BH+DATA12_DT_BL)+(Q2.DATA13_DT_M+DATA13_DT_BH+DATA13_DT_BL)+(Q2.DATA14_DT_M+DATA14_DT_BH+DATA14_DT_BL)+(Q2.DATA15_DT_M+DATA15_DT_BH+DATA15_DT_BL)+(Q2.DATA16_DT_M+DATA16_DT_BH+DATA16_DT_BL)) AS DT_M_SUM 
        ,SUM(Q2.DATA1_DT_REAL+Q2.DATA2_DT_REAL+Q2.DATA3_DT_REAL+Q2.DATA4_DT_REAL+Q2.DATA5_DT_REAL+Q2.DATA6_DT_REAL+Q2.DATA7_DT_REAL+Q2.DATA8_DT_REAL+Q2.DATA9_DT_REAL+Q2.DATA10_DT_REAL+Q2.DATA11_DT_REAL+Q2.DATA12_DT_REAL+Q2.DATA13_DT_REAL+Q2.DATA14_DT_REAL+Q2.DATA15_DT_REAL+Q2.DATA16_DT_REAL) AS DT_REAL_SUM
        ,SUM(ROUND((COUNT_A1+COUNT_A2+COUNT_A3+COUNT_A4+COUNT_A5)/DECODE(COUNT_A6,0,1,COUNT_A6),1)) AS COUNT_TOT1
        ,SUM(ROUND((COUNT_B1+COUNT_B2+COUNT_B3+COUNT_B4+COUNT_B5)/DECODE(COUNT_B6,0,1,COUNT_B6),1)) AS COUNT_TOT2 
        ,SUM(ROUND((COUNT_A1+COUNT_A2+COUNT_A3+COUNT_A4+COUNT_A5+COUNT_B1+COUNT_B2+COUNT_B3+COUNT_B4+COUNT_B5)/DECODE(COUNT_A6,0,1,COUNT_A6),1)/2) AS COUNT_TOT3     
        ,SUM(COUNT_A6) AS COUNT_TOT4  
	    
	FROM 	
	    (   
	        SELECT 	HGRK_DEPT_CD,HGRK_DEPT_CDNM,DEPT_CD,DEPT_CDNM
	        FROM 	TBL_HR_DEPT_CD       
	        WHERE 	1=1
	       		<dynamic>
	       			<isEmpty prepend="AND" property="hgrk_dept_cd">
						HGRK_DEPT_CD IN (SELECT HGRK_DEPT_CD FROM TBL_HR_DEPT_CD_AFTER WHERE USE_YN = 'Y') <!-- 부문정보 추가 201712 -->	       				
	       			</isEmpty>
				  	<isNotEmpty prepend="AND" property="hgrk_dept_cd">				<!-- 부문/본부 -->
					    HGRK_DEPT_CD = #hgrk_dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dept_cd">					<!-- 처리팀 -->
					    DEPT_CD = #dept_cd#
				  	</isNotEmpty>	       		
				</dynamic>       		
	      
	        <dynamic>   <!-- 201801 상담원 처리일 추가 -->
	       			<isEmpty property="hgrk_dept_cd">	        
				        UNION ALL
				        
				     SELECT 
                         'ZZCSC'        AS HGRK_DEPT_CD  
                        ,'ICCS_CSC'         AS HGRK_DEPT_CDNM
                        ,'ZZCSC'        AS DEPT_CD
                        ,'불만상담원'             AS DEPT_CDNM
                    FROM DUAL   
	       			</isEmpty>				        
				</dynamic>	          		
	      
	       		<dynamic>
	       			<isEmpty property="hgrk_dept_cd">	        
				        UNION ALL
				        
				        SELECT 
				             'ZZZZZ'    	AS HGRK_DEPT_CD  
				            ,'기타부문' 		AS HGRK_DEPT_CDNM
				            ,'ZZZZZ'    	AS DEPT_CD
				            ,'기타'     		AS DEPT_CDNM
				        FROM DUAL
	       			</isEmpty>				        
				</dynamic>	   
	    ) Q1
	    
	    LEFT JOIN
	    
	    ( 	
			SELECT 	 
	   			 G.HGRK_DEPT_CDNM as HGRK_DEPT_CDNM
	   			,G.DEPT_CDNM as DSPSR_CHRG_DEPT
	   			,G.DEPT_CD as DEPT_CD
            <!--품질 목표처리일 2 /보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CA' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA1_DT <!--처리일-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CA' THEN 1 ELSE 0 END) AS DATA1_CNT <!--건수-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CA' THEN 1 ELSE 0 END)*5 AS DATA1_DT_M <!--목표일-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CA' THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD') AND TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA1_DT_REAL <!--실제처리일-->
            <!--서비스 목표처리일 2 // 보상50이상 5 //50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CB' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA2_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CB' THEN 1 ELSE 0 END) AS DATA2_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CB' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*2 AS DATA2_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CB' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 50  THEN 1 ELSE 0 END)*5 AS DATA2_DT_BH <!--보상 50만원 이상 목표처리일-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CB' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 50  THEN 1 ELSE 0 END)*3 AS DATA2_DT_BL  <!--보상 50만원 미만 목표처리일-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CB' THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD') AND TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA2_DT_REAL
            <!--시설 목표처리일 2 /보상50이상 5 /50미만 3       -->         
            ,SUM(CASE WHEN I.SMLCLAS_CD='CC' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA3_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CC' THEN 1 ELSE 0 END) AS DATA3_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CC' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*2 AS DATA3_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CC' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 50  THEN 1 ELSE 0 END)*5 AS DATA3_DT_BH
            ,SUM(CASE WHEN I.SMLCLAS_CD='CC' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 50  THEN 1 ELSE 0 END)*3 AS DATA3_DT_BL 
            ,SUM(CASE WHEN I.SMLCLAS_CD='CC' THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD') AND TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA3_DT_REAL
            <!--가격 목표처리일 2 /보상50이상 5 /50미만 3         -->                         
            ,SUM(CASE WHEN I.SMLCLAS_CD='CD' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA4_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CD' THEN 1 ELSE 0 END) AS DATA4_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CD' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*2 AS DATA4_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CD' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 50  THEN 1 ELSE 0 END)*5 AS DATA4_DT_BH
            ,SUM(CASE WHEN I.SMLCLAS_CD='CD' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 50  THEN 1 ELSE 0 END)*3 AS DATA4_DT_BL
            ,SUM(CASE WHEN I.SMLCLAS_CD='CD' THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD') AND TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA4_DT_REAL
            <!--탱크로리 목표처리일 2 /보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CE' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA5_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CE' THEN 1 ELSE 0 END) AS DATA5_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CE' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*2 AS DATA5_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CE' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 50  THEN 1 ELSE 0 END)*5 AS DATA5_DT_BH 
            ,SUM(CASE WHEN I.SMLCLAS_CD='CE' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 50  THEN 1 ELSE 0 END)*3 AS DATA5_DT_BL  
            ,SUM(CASE WHEN I.SMLCLAS_CD='CE' THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD') AND TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA5_DT_REAL
            <!--기타 목표처리일 2 /보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CG' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA6_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CG' THEN 1 ELSE 0 END) AS DATA6_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CG' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*2 AS DATA6_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CG' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 50  THEN 1 ELSE 0 END)*5 AS DATA6_DT_BH 
            ,SUM(CASE WHEN I.SMLCLAS_CD='CG' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 50  THEN 1 ELSE 0 END)*3 AS DATA6_DT_BL  
            ,SUM(CASE WHEN I.SMLCLAS_CD='CG' THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD') AND TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA6_DT_REAL
            <!--신용카드 목표처리일 2 /보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CH' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA7_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CH' THEN 1 ELSE 0 END) AS DATA7_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CH' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*2 AS DATA7_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CH' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 50  THEN 1 ELSE 0 END)*5 AS DATA7_DT_BH
            ,SUM(CASE WHEN I.SMLCLAS_CD='CH' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 50  THEN 1 ELSE 0 END)*3 AS DATA7_DT_BL  
            ,SUM(CASE WHEN I.SMLCLAS_CD='CH' THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD') AND TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA7_DT_REAL
            <!--세차관련 목표처리일 3/보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CI' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA8_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CI' THEN 1 ELSE 0 END) AS DATA8_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CI' THEN 1 ELSE 0 END)* 3 AS DATA8_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CI' THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD') AND TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA8_DT_REAL
            <!--혼유 목표처리일 2 /보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CK' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA9_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CK' THEN 1 ELSE 0 END) AS DATA9_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CK' THEN 1 ELSE 0 END)*5 AS DATA9_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CK' THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD') AND TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA9_DT_REAL
            <!--주유량 목표처리일 2 /보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CL' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA10_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CL' THEN 1 ELSE 0 END) AS DATA10_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CL' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*2 AS DATA10_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CL' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 50  THEN 1 ELSE 0 END)*5 AS DATA10_DT_BH
            ,SUM(CASE WHEN I.SMLCLAS_CD='CL' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 50  THEN 1 ELSE 0 END)*3 AS DATA10_DT_BL  
            ,SUM(CASE WHEN I.SMLCLAS_CD='CL' THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD') AND TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA10_DT_REAL
            <!--DBO보험 목표처리일 2 /보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CN' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA11_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CN' THEN 1 ELSE 0 END) AS DATA11_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CN' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*2 AS DATA11_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CN' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 50  THEN 1 ELSE 0 END)*5 AS DATA11_DT_BH
            ,SUM(CASE WHEN I.SMLCLAS_CD='CN' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 50  THEN 1 ELSE 0 END)*3 AS DATA11_DT_BL 
            ,SUM(CASE WHEN I.SMLCLAS_CD='CN' THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD') AND TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA11_DT_REAL
            <!--보너스카드 목표처리일 2 /보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CO' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA12_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CO' THEN 1 ELSE 0 END) AS DATA12_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CO' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*2 AS DATA12_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CO' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 50  THEN 1 ELSE 0 END)*5 AS DATA12_DT_BH 
            ,SUM(CASE WHEN I.SMLCLAS_CD='CO' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 50  THEN 1 ELSE 0 END)*3 AS DATA12_DT_BL  
            ,SUM(CASE WHEN I.SMLCLAS_CD='CO' THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD') AND TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA12_DT_REAL
            <!--칭찬 목표처리일 2 /보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CP' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA13_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CP' THEN 1 ELSE 0 END) AS DATA13_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CP' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*2 AS DATA13_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CP' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 50  THEN 1 ELSE 0 END)*5 AS DATA13_DT_BH
            ,SUM(CASE WHEN I.SMLCLAS_CD='CP' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 50  THEN 1 ELSE 0 END)*3 AS DATA13_DT_BL  
            ,SUM(CASE WHEN I.SMLCLAS_CD='CP' THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD') AND TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA13_DT_REAL
            <!--DBO포인트 목표처리일 2 /보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CQ' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA14_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CQ' THEN 1 ELSE 0 END) AS DATA14_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CQ' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*2 AS DATA14_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CQ' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 50  THEN 1 ELSE 0 END)*5 AS DATA14_DT_BH 
            ,SUM(CASE WHEN I.SMLCLAS_CD='CQ' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 50  THEN 1 ELSE 0 END)*3 AS DATA14_DT_BL 
            ,SUM(CASE WHEN I.SMLCLAS_CD='CQ' THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD') AND TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA14_DT_REAL
            <!--GS통합 목표처리일 2 /보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CR' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA15_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CR' THEN 1 ELSE 0 END) AS DATA15_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CR' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*2 AS DATA15_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CR' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 50  THEN 1 ELSE 0 END)*5 AS DATA15_DT_BH
            ,SUM(CASE WHEN I.SMLCLAS_CD='CR' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 50  THEN 1 ELSE 0 END)*3 AS DATA15_DT_BL  
            ,SUM(CASE WHEN I.SMLCLAS_CD='CR' THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD') AND TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA15_DT_REAL
            <!--일시정지 목표처리일 2 /보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CT' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA16_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CT' THEN 1 ELSE 0 END) AS DATA16_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CT' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*2 AS DATA16_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CT' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 50  THEN 1 ELSE 0 END)*5 AS DATA16_DT_BH
            ,SUM(CASE WHEN I.SMLCLAS_CD='CT' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 50  THEN 1 ELSE 0 END)*3 AS DATA16_DT_BL  
            ,SUM(CASE WHEN I.SMLCLAS_CD='CT' THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD') AND TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA16_DT_REAL
            <!--만족도-->
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.ATTD_SFT_CD ='D' THEN 100 ELSE 0 END)) AS COUNT_A1
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.ATTD_SFT_CD ='A' THEN 80 ELSE 0 END)) AS COUNT_A2
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.ATTD_SFT_CD ='B' THEN 60 ELSE 0 END)) AS COUNT_A3
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.ATTD_SFT_CD ='C' THEN 40 ELSE 0 END)) AS COUNT_A4
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.ATTD_SFT_CD ='E' THEN 20 ELSE 0 END)) AS COUNT_A5
            ,(SUM(CASE WHEN C.ATTD_SFT_CD IS NOT NULL THEN 1 ELSE 0 END)) AS COUNT_A6
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.RSLT_SFT_CD ='D' THEN 100 ELSE 0 END)) AS COUNT_B1
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.RSLT_SFT_CD ='A' THEN 80 ELSE 0 END)) AS COUNT_B2
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.RSLT_SFT_CD ='B' THEN 60 ELSE 0 END)) AS COUNT_B3
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.RSLT_SFT_CD ='C' THEN 40 ELSE 0 END)) AS COUNT_B4
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.RSLT_SFT_CD ='E' THEN 20 ELSE 0 END)) AS COUNT_B5
            ,(SUM(CASE WHEN C.RSLT_SFT_CD IS NOT NULL THEN 1 ELSE 0 END)) AS COUNT_B6           
	        FROM TBL_DSFT_ACPN_PROC A						<!-- 불만 접수 처리 -->	       		   
			        LEFT JOIN TBL_HC_HIST C
			               ON A.DSFT_ACPN_SEQ_NO = C.DSFT_ACPN_SEQ_NO		  
			        LEFT JOIN TBL_CRPN_CUST_BASE D
			       		   ON A.ORGN_PTR_ST_CD = D.CUST_ID        	    	  
			        LEFT JOIN TBL_USR B
			       		   ON A.DSPSR_ID = B.USR_ID 
			        LEFT JOIN TBL_HR_EMP_CD F
			       		   ON A.DSPSR_ID = F.EMP_NO
			        LEFT JOIN TBL_HR_DEPT_CD G 
			       		   ON F.BLNG_DEPT_CD = G.DEPT_CD
			        LEFT JOIN TBL_SAP_CD H	
			       		   ON (A.ORGN_ENTR_DV_CD = H.CD_ID AND H.CD_CLAS_CD = '1')	
			        LEFT JOIN TBL_UNFYCD_SUBCLAS I
                              ON A.DSFT_TAXN_TYP_CD = I.SUBCLAS_CD1
                    LEFT JOIN TBL_UNFYCD_SMLCLAS J
                              ON J.SMLCLAS_CD = I.SMLCLAS_CD    
			       		   
			WHERE G.HGRK_DEPT_CD IN (SELECT HGRK_DEPT_CD FROM TBL_HR_DEPT_CD_AFTER WHERE USE_YN = 'Y') <!--부문정보 추가 201712 -->
					AND A.PROC_DTM IS NOT NULL
					AND (A.DEL_YN = 'N' OR A.DEL_YN IS NULL)
					AND A.DSPSR_CHRG_DEPT_CD = G.DEPT_CD <!-- 불만 통계 개선 201711 -->
					AND A.DSPSR_CHRG_DEPT_CD = G.DEPT_CD 	 <!-- 불만 통계 개선 201711 -->     	
		   	    	AND A.DSPSR_CHRG_DEPT = G.DEPT_CDNM    <!-- 불만 통계 개선 201711 -->     	
		   	    	AND J.LRGCLAS_CD = 'NW146'                                 <!-- 불만 통계 개선 201711 -->     	
	       		<dynamic>
	       			<!-- 년도별 -->   				    	
		    	    <isEqual property="cmb_gubun" compareValue="1">              
		                and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'                                                                  
		            </isEqual>
		            <!--  -->
		            <isEqual property="cmb_gubun" compareValue="2">
		            	<isEmpty property="cmb_half">
		            		and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'
		            	</isEmpty>              
		                <isEqual property="cmb_half" compareValue="1">
		                	and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0632000000'                                                                  
						</isEqual>	 
						<isEqual property="cmb_half" compareValue="2">
							and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '1232000000'
						</isEqual>	 
		            </isEqual>	 
		            <isEqual property="cmb_gubun" compareValue="3"> 
		            	<isEmpty>
							and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'	            	
		            	</isEmpty>    
		           		<isEqual property="cmb_qua" compareValue="1">
		           			and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0332000000'   
		           	  	</isEqual>
		           	  	<isEqual property="cmb_qua" compareValue="2">
		           	   		and A.ACPN_DTM between #time_key# || '0400000000' and #time_key# || '0632000000'   
		           	  	</isEqual>	 
		           	  	<isEqual property="cmb_qua" compareValue="3">
		           	   		and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '0932000000'   
		           	  	</isEqual>	 
	           	  		<isEqual property="cmb_qua" compareValue="4">
		           	   		and A.ACPN_DTM between #time_key# || '1000000000' and #time_key# || '1232000000'   
		           	  	</isEqual>	 	 
	            	</isEqual>	 				            
		    	 	<isEqual property="cmb_gubun" compareValue="4">              
		            	and A.ACPN_DTM between #time_key# || '00000000' and #time_key# || '32000000'                                                                  
		         	</isEqual>	
		    	 	<isEqual property="cmb_gubun" compareValue="5">              
		                and A.ACPN_DTM between #time_key# || '000000' and #time_key# || '240000'                                                                  
		         	</isEqual>
				
					<!-- 불만유형이 전체일 때는 두가지 경우 존재(전체, 품질&혼유)		-->				
					<isEmpty property="dsft_typ_cd">
						<isEqual property="dsft_typ_tot_gbn" compareValue="2">
							AND A.DSFT_TYP_CD IN ('CA','CK')
						</isEqual>
					</isEmpty>					
				  	<isNotEmpty prepend="AND" property="dsft_typ_cd">				<!-- 불만유형		-->
				    	A.DSFT_TYP_CD = #dsft_typ_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dsft_taxn_typ_cd">			<!-- 불만세부유형		-->
				    	A.DSFT_TAXN_TYP_CD = #dsft_taxn_typ_cd#
				  	</isNotEmpty>
			  		<isNotEmpty prepend="AND" property="orgn_ptr_st_cd">			<!-- 불만발생업체코드(가맹점SAP코드) -->
					    A.ORGN_PTR_ST_CD = #orgn_ptr_st_cd#
				  	</isNotEmpty>
				    <isNotEmpty prepend="AND" property="conn_chnl_kind_cd">			<!-- 접촉채널	-->
					    A.CONN_CHNL_KIND_CD = #conn_chnl_kind_cd#
				    </isNotEmpty>			  	
				  	<isNotEmpty prepend="AND" property="hgrk_dept_cd">				<!-- 부문/본부 -->
					    G.HGRK_DEPT_CD = #hgrk_dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dept_cd">					<!-- 처리팀 -->
					    G.DEPT_CD = #dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dspsr_id_nm">				<!-- 처리자명 		-->
					    (B.USR_NM LIKE '%'|| #dspsr_id_nm# ||'%' OR F.EMP_NM LIKE '%'|| #dspsr_id_nm# ||'%')
				  	</isNotEmpty>
			 		<isEqual property="hc_yn" compareValue="Y"> 					<!-- 해피콜여부  -->
			 			AND A.HC_YN = 'Y'
			 		</isEqual>
				 	<isEqual property="hc_yn" compareValue="N"> 					<!-- 해피콜여부  -->
				 		AND (A.HC_YN = 'N' OR A.HC_YN IS NULL)
				 	</isEqual>
				  	<isNotEmpty prepend="AND" property="attd_sft_cd">				<!-- 태도만족도 		-->
				  		(A.HC_YN = 'Y' AND C.ATTD_SFT_CD = #attd_sft_cd#)
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="rslt_sft_cd">				<!-- 결과만족도 		-->
				  		(A.HC_YN = 'Y' AND C.RSLT_SFT_CD = #rslt_sft_cd#)
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="hc_uabl_rsn_cd">			<!-- 해피콜불가사유		-->
				  		A.HC_UABL_RSN_CD = #hc_uabl_rsn_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="prdct_cd">					<!-- 불만제품 		-->
					    A.PRDCT_CD = #prdct_cd#
				  	</isNotEmpty>			  				 	
				  	<isNotEmpty prepend="AND" property="prblm_penom_cd">			<!-- 현상 		-->
					    A.PRBLM_PENOM_CD = #prblm_penom_cd#
				  	</isNotEmpty>
			 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="1">  	<!-- 시료품질 점검결과		-->
			 			AND	A.VHCL_QLIT_DSFT_CAUS_CD_CUST IS NOT NULL
			 	  	</isEqual>
			 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="2">   	<!-- 시료품질 점검결과		-->
			 	  		AND	A.VHCL_QLIT_DSFT_CAUS_CD_PTR_ST IS NOT NULL
			 	  	</isEqual>
				  	<isNotEmpty prepend="AND" property="vhcl_biztr_qlit_dsft_typ_cd">			<!-- 품질불만유형 		-->
					    A.VHCL_BIZTR_QLIT_DSFT_TYP_CD = #vhcl_biztr_qlit_dsft_typ_cd#
				  	</isNotEmpty>
				 	<isEqual property="vhcl_biztr_yn" compareValue="Y"> 			<!-- Kixx 품질서비스차량 출동 -->
				 		AND A.VHCL_BIZTR_YN = 'Y'
				 	</isEqual>
				 	<isEqual property="vhcl_biztr_yn" compareValue="N"> 			<!-- Kixx 품질서비스차량 출동 -->
				 		AND (A.VHCL_BIZTR_YN = 'N' OR A.VHCL_BIZTR_YN IS NULL)
				 	</isEqual>		 	  	
				 	<isEqual property="rwrd_yn" compareValue="Y"> 					<!-- 보상여부 -->
				 		AND A.RWRD_YN = 'Y'
				 	</isEqual>
				 	<isEqual property="rwrd_yn" compareValue="N"> 					<!-- 보상여부 -->
				 		AND (A.RWRD_YN = 'N' OR A.RWRD_YN IS NULL)
				 	</isEqual>
				 	
				 	<isEqual property="cps_amt_gbn" compareValue="1"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 주유소 보상금 1만원 미만-->
				 			AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 주유소 보상금 1만원 ~ 10만원-->
				 			AND (A.PTR_ST_CPS_AMT <![CDATA[>=]]> 10000 AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 주유소 보상금 10만원 초과-->
				 			AND A.PTR_ST_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	<isEqual property="cps_amt_gbn" compareValue="2"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 회사 보상금 1만원 미만-->
				 			AND A.CO_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 회사 보상금 1만원 ~ 10만원-->
				 			AND (A.CO_CPS_AMT <![CDATA[>=]]> 10000 AND A.CO_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 회사 보상금 10만원 초과-->
				 			AND A.CO_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	<isEqual property="cps_amt_gbn" compareValue="3"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 총 보상금 1만원 미만-->
				 			AND A.TOT_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 총 보상금 1만원 ~ 10만원-->
				 			AND (A.TOT_CPS_AMT <![CDATA[>=]]> 10000 AND A.TOT_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 총 보상금 10만원 초과-->
				 			AND A.TOT_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	
					<!--처리자구분에 체크항목이 하나도 없는 경우, 전체데이터가 조회된다.-->
				 	<isEqual property="cmp_handler" compareValue="1">   
				 		AND	A.DSPSR_YN_CNSLR = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="2">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="3">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="4">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="5">   
				 		AND	A.DSPSR_YN_DSFT_CHRG = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="6">   
				 		AND	A.DSPSR_YN_PART_HD = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="7">   
				 		AND	(A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
	       		</dynamic>  
		
			GROUP BY G.HGRK_DEPT_CDNM,G.HGRK_DEPT_CD, G.DEPT_CD,G.DEPT_CDNM
			
			UNION ALL
			
	        SELECT 	 
				 'ICCS_CSC' 		AS HGRK_DEPT_CDNM
				,'불만상담원' 			AS DSPSR_CHRG_DEPT
				,'ZZCSC' 		AS DEPT_CD	
				 <!--품질 목표처리일 2 /보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CA' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA1_DT <!--처리일-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CA' THEN 1 ELSE 0 END) AS DATA1_CNT <!--건수-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CA' THEN 1 ELSE 0 END)*5 AS DATA1_DT_M <!--목표일-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CA' THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD') AND TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA1_DT_REAL <!--실제처리일-->
            <!--서비스 목표처리일 2 // 보상50이상 5 //50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CB' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA2_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CB' THEN 1 ELSE 0 END) AS DATA2_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CB' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*2 AS DATA2_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CB' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 50  THEN 1 ELSE 0 END)*5 AS DATA2_DT_BH <!--보상 50만원 이상 목표처리일-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CB' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 50  THEN 1 ELSE 0 END)*3 AS DATA2_DT_BL  <!--보상 50만원 미만 목표처리일-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CB' THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD') AND TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA2_DT_REAL
            <!--시설 목표처리일 2 /보상50이상 5 /50미만 3       -->         
            ,SUM(CASE WHEN I.SMLCLAS_CD='CC' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA3_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CC' THEN 1 ELSE 0 END) AS DATA3_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CC' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*2 AS DATA3_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CC' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 50  THEN 1 ELSE 0 END)*5 AS DATA3_DT_BH
            ,SUM(CASE WHEN I.SMLCLAS_CD='CC' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 50  THEN 1 ELSE 0 END)*3 AS DATA3_DT_BL 
            ,SUM(CASE WHEN I.SMLCLAS_CD='CC' THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD') AND TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA3_DT_REAL
            <!--가격 목표처리일 2 /보상50이상 5 /50미만 3         -->                         
            ,SUM(CASE WHEN I.SMLCLAS_CD='CD' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA4_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CD' THEN 1 ELSE 0 END) AS DATA4_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CD' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*2 AS DATA4_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CD' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 50  THEN 1 ELSE 0 END)*5 AS DATA4_DT_BH
            ,SUM(CASE WHEN I.SMLCLAS_CD='CD' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 50  THEN 1 ELSE 0 END)*3 AS DATA4_DT_BL
            ,SUM(CASE WHEN I.SMLCLAS_CD='CD' THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD') AND TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA4_DT_REAL
            <!--탱크로리 목표처리일 2 /보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CE' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA5_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CE' THEN 1 ELSE 0 END) AS DATA5_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CE' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*2 AS DATA5_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CE' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 50  THEN 1 ELSE 0 END)*5 AS DATA5_DT_BH 
            ,SUM(CASE WHEN I.SMLCLAS_CD='CE' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 50  THEN 1 ELSE 0 END)*3 AS DATA5_DT_BL  
            ,SUM(CASE WHEN I.SMLCLAS_CD='CE' THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD') AND TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA5_DT_REAL
            <!--기타 목표처리일 2 /보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CG' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA6_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CG' THEN 1 ELSE 0 END) AS DATA6_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CG' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*2 AS DATA6_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CG' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 50  THEN 1 ELSE 0 END)*5 AS DATA6_DT_BH 
            ,SUM(CASE WHEN I.SMLCLAS_CD='CG' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 50  THEN 1 ELSE 0 END)*3 AS DATA6_DT_BL  
            ,SUM(CASE WHEN I.SMLCLAS_CD='CG' THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD') AND TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA6_DT_REAL
            <!--신용카드 목표처리일 2 /보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CH' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA7_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CH' THEN 1 ELSE 0 END) AS DATA7_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CH' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*2 AS DATA7_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CH' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 50  THEN 1 ELSE 0 END)*5 AS DATA7_DT_BH
            ,SUM(CASE WHEN I.SMLCLAS_CD='CH' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 50  THEN 1 ELSE 0 END)*3 AS DATA7_DT_BL  
            ,SUM(CASE WHEN I.SMLCLAS_CD='CH' THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD') AND TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA7_DT_REAL
            <!--세차관련 목표처리일 3/보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CI' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA8_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CI' THEN 1 ELSE 0 END) AS DATA8_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CI' THEN 1 ELSE 0 END)* 3 AS DATA8_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CI' THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD') AND TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA8_DT_REAL
            <!--혼유 목표처리일 2 /보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CK' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA9_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CK' THEN 1 ELSE 0 END) AS DATA9_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CK' THEN 1 ELSE 0 END)*5 AS DATA9_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CK' THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD') AND TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA9_DT_REAL
            <!--주유량 목표처리일 2 /보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CL' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA10_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CL' THEN 1 ELSE 0 END) AS DATA10_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CL' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*2 AS DATA10_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CL' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 50  THEN 1 ELSE 0 END)*5 AS DATA10_DT_BH
            ,SUM(CASE WHEN I.SMLCLAS_CD='CL' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 50  THEN 1 ELSE 0 END)*3 AS DATA10_DT_BL  
            ,SUM(CASE WHEN I.SMLCLAS_CD='CL' THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD') AND TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA10_DT_REAL
            <!--DBO보험 목표처리일 2 /보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CN' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA11_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CN' THEN 1 ELSE 0 END) AS DATA11_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CN' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*2 AS DATA11_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CN' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 50  THEN 1 ELSE 0 END)*5 AS DATA11_DT_BH
            ,SUM(CASE WHEN I.SMLCLAS_CD='CN' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 50  THEN 1 ELSE 0 END)*3 AS DATA11_DT_BL 
            ,SUM(CASE WHEN I.SMLCLAS_CD='CN' THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD') AND TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA11_DT_REAL
            <!--보너스카드 목표처리일 2 /보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CO' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA12_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CO' THEN 1 ELSE 0 END) AS DATA12_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CO' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*2 AS DATA12_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CO' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 50  THEN 1 ELSE 0 END)*5 AS DATA12_DT_BH 
            ,SUM(CASE WHEN I.SMLCLAS_CD='CO' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 50  THEN 1 ELSE 0 END)*3 AS DATA12_DT_BL  
            ,SUM(CASE WHEN I.SMLCLAS_CD='CO' THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD') AND TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA12_DT_REAL
            <!--칭찬 목표처리일 2 /보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CP' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA13_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CP' THEN 1 ELSE 0 END) AS DATA13_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CP' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*2 AS DATA13_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CP' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 50  THEN 1 ELSE 0 END)*5 AS DATA13_DT_BH
            ,SUM(CASE WHEN I.SMLCLAS_CD='CP' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 50  THEN 1 ELSE 0 END)*3 AS DATA13_DT_BL  
            ,SUM(CASE WHEN I.SMLCLAS_CD='CP' THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD') AND TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA13_DT_REAL
            <!--DBO포인트 목표처리일 2 /보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CQ' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA14_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CQ' THEN 1 ELSE 0 END) AS DATA14_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CQ' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*2 AS DATA14_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CQ' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 50  THEN 1 ELSE 0 END)*5 AS DATA14_DT_BH 
            ,SUM(CASE WHEN I.SMLCLAS_CD='CQ' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 50  THEN 1 ELSE 0 END)*3 AS DATA14_DT_BL 
            ,SUM(CASE WHEN I.SMLCLAS_CD='CQ' THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD') AND TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA14_DT_REAL            
            ,SUM(CASE WHEN I.SMLCLAS_CD='CR' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA15_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CR' THEN 1 ELSE 0 END) AS DATA15_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CR' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*2 AS DATA15_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CR' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 50  THEN 1 ELSE 0 END)*5 AS DATA15_DT_BH
            ,SUM(CASE WHEN I.SMLCLAS_CD='CR' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 50  THEN 1 ELSE 0 END)*3 AS DATA15_DT_BL  
            ,SUM(CASE WHEN I.SMLCLAS_CD='CR' THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD') AND TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA15_DT_REAL            
            ,SUM(CASE WHEN I.SMLCLAS_CD='CT' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA16_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CT' THEN 1 ELSE 0 END) AS DATA16_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CT' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*2 AS DATA16_DT_M            																																										
            ,SUM(CASE WHEN I.SMLCLAS_CD='CT' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 50  THEN 1 ELSE 0 END)*5 AS DATA16_DT_BH
            ,SUM(CASE WHEN I.SMLCLAS_CD='CT' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 50  THEN 1 ELSE 0 END)*3 AS DATA16_DT_BL  
            ,SUM(CASE WHEN I.SMLCLAS_CD='CT' THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD') AND TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA16_DT_REAL      
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.ATTD_SFT_CD ='D' THEN 100 ELSE 0 END)) AS COUNT_A1
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.ATTD_SFT_CD ='A' THEN 80 ELSE 0 END)) AS COUNT_A2
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.ATTD_SFT_CD ='B' THEN 60 ELSE 0 END)) AS COUNT_A3
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.ATTD_SFT_CD ='C' THEN 40 ELSE 0 END)) AS COUNT_A4
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.ATTD_SFT_CD ='E' THEN 20 ELSE 0 END)) AS COUNT_A5
            ,(SUM(CASE WHEN C.ATTD_SFT_CD IS NOT NULL THEN 1 ELSE 0 END)) AS COUNT_A6
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.RSLT_SFT_CD ='D' THEN 100 ELSE 0 END)) AS COUNT_B1
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.RSLT_SFT_CD ='A' THEN 80 ELSE 0 END)) AS COUNT_B2
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.RSLT_SFT_CD ='B' THEN 60 ELSE 0 END)) AS COUNT_B3
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.RSLT_SFT_CD ='C' THEN 40 ELSE 0 END)) AS COUNT_B4
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.RSLT_SFT_CD ='E' THEN 20 ELSE 0 END)) AS COUNT_B5
            ,(SUM(CASE WHEN C.RSLT_SFT_CD IS NOT NULL THEN 1 ELSE 0 END)) AS COUNT_B6           
	        FROM TBL_DSFT_ACPN_PROC A							       		   
			        LEFT JOIN TBL_HC_HIST C
			               ON A.DSFT_ACPN_SEQ_NO = C.DSFT_ACPN_SEQ_NO		  
			        LEFT JOIN TBL_CRPN_CUST_BASE D
			       		   ON A.ORGN_PTR_ST_CD = D.CUST_ID        	    	  
			        LEFT JOIN TBL_USR B
			       		   ON A.DSPSR_ID = B.USR_ID 
			        LEFT JOIN TBL_HR_EMP_CD F
			       		   ON A.DSPSR_ID = F.EMP_NO
			        LEFT JOIN TBL_HR_DEPT_CD G 
			       		   ON F.BLNG_DEPT_CD = G.DEPT_CD
			        LEFT JOIN TBL_SAP_CD H	
			       		   ON (A.ORGN_ENTR_DV_CD = H.CD_ID AND H.CD_CLAS_CD = '1')	
			       LEFT JOIN TBL_UNFYCD_SUBCLAS I
                              ON A.DSFT_TAXN_TYP_CD = I.SUBCLAS_CD1
                    LEFT JOIN TBL_UNFYCD_SMLCLAS J
                              ON J.SMLCLAS_CD = I.SMLCLAS_CD    
			       		   
			WHERE 1=1
					AND  (G.HGRK_DEPT_CD IS NULL OR G.HGRK_DEPT_CD NOT IN (SELECT HGRK_DEPT_CD FROM TBL_HR_DEPT_CD_AFTER WHERE USE_YN = 'Y'))  <!-- E00059,E00048 추가 201712 -->
					AND A.PROC_DTM IS NOT NULL
					AND (A.DEL_YN = 'N' OR A.DEL_YN IS NULL)
					AND  DSPSR_CHRG_DEPT_CD IN('ICCS') <!-- 불만 파트(상담원)에서 처리한 것만 -->
					AND J.LRGCLAS_CD = 'NW146' 					
	       		<dynamic>
	       			<!-- 년도별 -->   				    	
		    	    <isEqual property="cmb_gubun" compareValue="1">              
		                and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'                                                                  
		            </isEqual>
		            <!--  -->
		            <isEqual property="cmb_gubun" compareValue="2">
		            	<isEmpty property="cmb_half">
		            		and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'
		            	</isEmpty>              
		                <isEqual property="cmb_half" compareValue="1">
		                	and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0632000000'                                                                  
						</isEqual>	 
						<isEqual property="cmb_half" compareValue="2">
							and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '1232000000'
						</isEqual>	 
		            </isEqual>	 
		            <isEqual property="cmb_gubun" compareValue="3"> 
		            	<isEmpty>
							and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'	            	
		            	</isEmpty>    
		           		<isEqual property="cmb_qua" compareValue="1">
		           			and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0332000000'   
		           	  	</isEqual>
		           	  	<isEqual property="cmb_qua" compareValue="2">
		           	   		and A.ACPN_DTM between #time_key# || '0400000000' and #time_key# || '0632000000'   
		           	  	</isEqual>	 
		           	  	<isEqual property="cmb_qua" compareValue="3">
		           	   		and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '0932000000'   
		           	  	</isEqual>	 
	           	  		<isEqual property="cmb_qua" compareValue="4">
		           	   		and A.ACPN_DTM between #time_key# || '1000000000' and #time_key# || '1232000000'   
		           	  	</isEqual>	 	 
	            	</isEqual>	 				            
		    	 	<isEqual property="cmb_gubun" compareValue="4">              
		            	and A.ACPN_DTM between #time_key# || '00000000' and #time_key# || '32000000'                                                                  
		         	</isEqual>	
		    	 	<isEqual property="cmb_gubun" compareValue="5">              
		                and A.ACPN_DTM between #time_key# || '000000' and #time_key# || '240000'                                                                  
		         	</isEqual>
				
					<!-- 불만유형이 전체일 때는 두가지 경우 존재(전체, 품질&혼유)		-->				
					<isEmpty property="dsft_typ_cd">
						<isEqual property="dsft_typ_tot_gbn" compareValue="2">
							AND A.DSFT_TYP_CD IN ('CA','CK')
						</isEqual>
					</isEmpty>					
				  	<isNotEmpty prepend="AND" property="dsft_typ_cd">				<!-- 불만유형		-->
				    	A.DSFT_TYP_CD = #dsft_typ_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dsft_taxn_typ_cd">			<!-- 불만세부유형		-->
				    	A.DSFT_TAXN_TYP_CD = #dsft_taxn_typ_cd#
				  	</isNotEmpty>
			  		<isNotEmpty prepend="AND" property="orgn_ptr_st_cd">			<!-- 불만발생업체코드(가맹점SAP코드) -->
					    A.ORGN_PTR_ST_CD = #orgn_ptr_st_cd#
				  	</isNotEmpty>
				    <isNotEmpty prepend="AND" property="conn_chnl_kind_cd">			<!-- 접촉채널	-->
					    A.CONN_CHNL_KIND_CD = #conn_chnl_kind_cd#
				    </isNotEmpty>			  	
				  	<isNotEmpty prepend="AND" property="hgrk_dept_cd">				<!-- 부문/본부 -->
					    G.HGRK_DEPT_CD = #hgrk_dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dept_cd">					<!-- 처리팀 -->
					    G.DEPT_CD = #dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dspsr_id_nm">				<!-- 처리자명 		-->
					    (B.USR_NM LIKE '%'|| #dspsr_id_nm# ||'%' OR F.EMP_NM LIKE '%'|| #dspsr_id_nm# ||'%')
				  	</isNotEmpty>
			 		<isEqual property="hc_yn" compareValue="Y"> 					<!-- 해피콜여부  -->
			 			AND A.HC_YN = 'Y'
			 		</isEqual>
				 	<isEqual property="hc_yn" compareValue="N"> 					<!-- 해피콜여부  -->
				 		AND (A.HC_YN = 'N' OR A.HC_YN IS NULL)
				 	</isEqual>
				  	<isNotEmpty prepend="AND" property="attd_sft_cd">				<!-- 태도만족도 		-->
				  		(A.HC_YN = 'Y' AND C.ATTD_SFT_CD = #attd_sft_cd#)
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="rslt_sft_cd">				<!-- 결과만족도 		-->
				  		(A.HC_YN = 'Y' AND C.RSLT_SFT_CD = #rslt_sft_cd#)
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="hc_uabl_rsn_cd">			<!-- 해피콜불가사유		-->
				  		A.HC_UABL_RSN_CD = #hc_uabl_rsn_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="prdct_cd">					<!-- 불만제품 		-->
					    A.PRDCT_CD = #prdct_cd#
				  	</isNotEmpty>			  				 	
				  	<isNotEmpty prepend="AND" property="prblm_penom_cd">			<!-- 현상 		-->
					    A.PRBLM_PENOM_CD = #prblm_penom_cd#
				  	</isNotEmpty>
			 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="1">  	<!-- 시료품질 점검결과		-->
			 			AND	A.VHCL_QLIT_DSFT_CAUS_CD_CUST IS NOT NULL
			 	  	</isEqual>
			 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="2">   	<!-- 시료품질 점검결과		-->
			 	  		AND	A.VHCL_QLIT_DSFT_CAUS_CD_PTR_ST IS NOT NULL
			 	  	</isEqual>
				  	<isNotEmpty prepend="AND" property="vhcl_biztr_qlit_dsft_typ_cd">			<!-- 품질불만유형 		-->
					    A.VHCL_BIZTR_QLIT_DSFT_TYP_CD = #vhcl_biztr_qlit_dsft_typ_cd#
				  	</isNotEmpty>
				 	<isEqual property="vhcl_biztr_yn" compareValue="Y"> 			<!-- Kixx 품질서비스차량 출동 -->
				 		AND A.VHCL_BIZTR_YN = 'Y'
				 	</isEqual>
				 	<isEqual property="vhcl_biztr_yn" compareValue="N"> 			<!-- Kixx 품질서비스차량 출동 -->
				 		AND (A.VHCL_BIZTR_YN = 'N' OR A.VHCL_BIZTR_YN IS NULL)
				 	</isEqual>		 	  	
				 	<isEqual property="rwrd_yn" compareValue="Y"> 					<!-- 보상여부 -->
				 		AND A.RWRD_YN = 'Y'
				 	</isEqual>
				 	<isEqual property="rwrd_yn" compareValue="N"> 					<!-- 보상여부 -->
				 		AND (A.RWRD_YN = 'N' OR A.RWRD_YN IS NULL)
				 	</isEqual>
				 	
				 	<isEqual property="cps_amt_gbn" compareValue="1"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 주유소 보상금 1만원 미만-->
				 			AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 주유소 보상금 1만원 ~ 10만원-->
				 			AND (A.PTR_ST_CPS_AMT <![CDATA[>=]]> 10000 AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 주유소 보상금 10만원 초과-->
				 			AND A.PTR_ST_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	<isEqual property="cps_amt_gbn" compareValue="2"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 회사 보상금 1만원 미만-->
				 			AND A.CO_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 회사 보상금 1만원 ~ 10만원-->
				 			AND (A.CO_CPS_AMT <![CDATA[>=]]> 10000 AND A.CO_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 회사 보상금 10만원 초과-->
				 			AND A.CO_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	<isEqual property="cps_amt_gbn" compareValue="3"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 총 보상금 1만원 미만-->
				 			AND A.TOT_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 총 보상금 1만원 ~ 10만원-->
				 			AND (A.TOT_CPS_AMT <![CDATA[>=]]> 10000 AND A.TOT_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 총 보상금 10만원 초과-->
				 			AND A.TOT_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	
					<!--처리자구분에 체크항목이 하나도 없는 경우, 전체데이터가 조회된다.-->
				 	<isEqual property="cmp_handler" compareValue="1">   
				 		AND	A.DSPSR_YN_CNSLR = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="2">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="3">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="4">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="5">   
				 		AND	A.DSPSR_YN_DSFT_CHRG = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="6">   
				 		AND	A.DSPSR_YN_PART_HD = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="7">   
				 		AND	(A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
	       		</dynamic> 
		GROUP BY G.HGRK_DEPT_CDNM,G.HGRK_DEPT_CD, G.DEPT_CD,G.DEPT_CDNM
	
	UNION ALL
			
	        SELECT 	 
				 '기타부문' 		AS HGRK_DEPT_CDNM
				,'기타' 			AS DSPSR_CHRG_DEPT
				,'ZZZZZ' 		AS DEPT_CD
            ,SUM(CASE WHEN I.SMLCLAS_CD='CA' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA1_DT 
            ,SUM(CASE WHEN I.SMLCLAS_CD='CA' THEN 1 ELSE 0 END) AS DATA1_CNT 
            ,SUM(CASE WHEN I.SMLCLAS_CD='CA' THEN 1 ELSE 0 END)*5 AS DATA1_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CA' THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD') AND TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA1_DT_REAL             
            ,SUM(CASE WHEN I.SMLCLAS_CD='CB' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA2_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CB' THEN 1 ELSE 0 END) AS DATA2_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CB' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*2 AS DATA2_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CB' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 50  THEN 1 ELSE 0 END)*5 AS DATA2_DT_BH 
            ,SUM(CASE WHEN I.SMLCLAS_CD='CB' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 50  THEN 1 ELSE 0 END)*3 AS DATA2_DT_BL  
            ,SUM(CASE WHEN I.SMLCLAS_CD='CB' THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD') AND TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA2_DT_REAL                     
            ,SUM(CASE WHEN I.SMLCLAS_CD='CC' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA3_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CC' THEN 1 ELSE 0 END) AS DATA3_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CC' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*2 AS DATA3_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CC' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 50  THEN 1 ELSE 0 END)*5 AS DATA3_DT_BH
            ,SUM(CASE WHEN I.SMLCLAS_CD='CC' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 50  THEN 1 ELSE 0 END)*3 AS DATA3_DT_BL 
            ,SUM(CASE WHEN I.SMLCLAS_CD='CC' THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD') AND TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA3_DT_REAL                                     
            ,SUM(CASE WHEN I.SMLCLAS_CD='CD' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA4_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CD' THEN 1 ELSE 0 END) AS DATA4_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CD' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*2 AS DATA4_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CD' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 50  THEN 1 ELSE 0 END)*5 AS DATA4_DT_BH
            ,SUM(CASE WHEN I.SMLCLAS_CD='CD' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 50  THEN 1 ELSE 0 END)*3 AS DATA4_DT_BL
            ,SUM(CASE WHEN I.SMLCLAS_CD='CD' THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD') AND TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA4_DT_REAL
             ,SUM(CASE WHEN I.SMLCLAS_CD='CE' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA5_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CE' THEN 1 ELSE 0 END) AS DATA5_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CE' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*2 AS DATA5_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CE' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 50  THEN 1 ELSE 0 END)*5 AS DATA5_DT_BH 
            ,SUM(CASE WHEN I.SMLCLAS_CD='CE' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 50  THEN 1 ELSE 0 END)*3 AS DATA5_DT_BL  
            ,SUM(CASE WHEN I.SMLCLAS_CD='CE' THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD') AND TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA5_DT_REAL
            ,SUM(CASE WHEN I.SMLCLAS_CD='CG' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA6_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CG' THEN 1 ELSE 0 END) AS DATA6_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CG' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*2 AS DATA6_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CG' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 50  THEN 1 ELSE 0 END)*5 AS DATA6_DT_BH 
            ,SUM(CASE WHEN I.SMLCLAS_CD='CG' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 50  THEN 1 ELSE 0 END)*3 AS DATA6_DT_BL  
            ,SUM(CASE WHEN I.SMLCLAS_CD='CG' THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD') AND TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA6_DT_REAL
            ,SUM(CASE WHEN I.SMLCLAS_CD='CH' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA7_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CH' THEN 1 ELSE 0 END) AS DATA7_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CH' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*2 AS DATA7_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CH' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 50  THEN 1 ELSE 0 END)*5 AS DATA7_DT_BH
            ,SUM(CASE WHEN I.SMLCLAS_CD='CH' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 50  THEN 1 ELSE 0 END)*3 AS DATA7_DT_BL  
            ,SUM(CASE WHEN I.SMLCLAS_CD='CH' THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD') AND TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA7_DT_REAL
            ,SUM(CASE WHEN I.SMLCLAS_CD='CI' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA8_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CI' THEN 1 ELSE 0 END) AS DATA8_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CI' THEN 1 ELSE 0 END)* 3 AS DATA8_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CI' THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD') AND TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA8_DT_REAL
            ,SUM(CASE WHEN I.SMLCLAS_CD='CK' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA9_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CK' THEN 1 ELSE 0 END) AS DATA9_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CK' THEN 1 ELSE 0 END)*5 AS DATA9_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CK' THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD') AND TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA9_DT_REAL
            ,SUM(CASE WHEN I.SMLCLAS_CD='CL' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA10_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CL' THEN 1 ELSE 0 END) AS DATA10_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CL' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*2 AS DATA10_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CL' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 50  THEN 1 ELSE 0 END)*5 AS DATA10_DT_BH
            ,SUM(CASE WHEN I.SMLCLAS_CD='CL' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 50  THEN 1 ELSE 0 END)*3 AS DATA10_DT_BL  
            ,SUM(CASE WHEN I.SMLCLAS_CD='CL' THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD') AND TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA10_DT_REAL
            ,SUM(CASE WHEN I.SMLCLAS_CD='CN' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA11_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CN' THEN 1 ELSE 0 END) AS DATA11_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CN' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*2 AS DATA11_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CN' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 50  THEN 1 ELSE 0 END)*5 AS DATA11_DT_BH
            ,SUM(CASE WHEN I.SMLCLAS_CD='CN' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 50  THEN 1 ELSE 0 END)*3 AS DATA11_DT_BL 
            ,SUM(CASE WHEN I.SMLCLAS_CD='CN' THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD') AND TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA11_DT_REAL
            ,SUM(CASE WHEN I.SMLCLAS_CD='CO' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA12_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CO' THEN 1 ELSE 0 END) AS DATA12_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CO' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*2 AS DATA12_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CO' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 50  THEN 1 ELSE 0 END)*5 AS DATA12_DT_BH 
            ,SUM(CASE WHEN I.SMLCLAS_CD='CO' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 50  THEN 1 ELSE 0 END)*3 AS DATA12_DT_BL  
            ,SUM(CASE WHEN I.SMLCLAS_CD='CO' THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD') AND TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA12_DT_REAL
            ,SUM(CASE WHEN I.SMLCLAS_CD='CP' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA13_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CP' THEN 1 ELSE 0 END) AS DATA13_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CP' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*2 AS DATA13_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CP' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 50  THEN 1 ELSE 0 END)*5 AS DATA13_DT_BH
            ,SUM(CASE WHEN I.SMLCLAS_CD='CP' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 50  THEN 1 ELSE 0 END)*3 AS DATA13_DT_BL  
            ,SUM(CASE WHEN I.SMLCLAS_CD='CP' THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD') AND TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA13_DT_REAL
            ,SUM(CASE WHEN I.SMLCLAS_CD='CQ' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA14_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CQ' THEN 1 ELSE 0 END) AS DATA14_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CQ' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*2 AS DATA14_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CQ' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 50  THEN 1 ELSE 0 END)*5 AS DATA14_DT_BH 
            ,SUM(CASE WHEN I.SMLCLAS_CD='CQ' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 50  THEN 1 ELSE 0 END)*3 AS DATA14_DT_BL 
            ,SUM(CASE WHEN I.SMLCLAS_CD='CQ' THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD') AND TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA14_DT_REAL
            ,SUM(CASE WHEN I.SMLCLAS_CD='CR' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA15_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CR' THEN 1 ELSE 0 END) AS DATA15_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CR' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*2 AS DATA15_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CR' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT  <![CDATA[>=]]>  50  THEN 1 ELSE 0 END)*5 AS DATA15_DT_BH
            ,SUM(CASE WHEN I.SMLCLAS_CD='CR' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT  <![CDATA[<]]>  50  THEN 1 ELSE 0 END)*3 AS DATA15_DT_BL  
            ,SUM(CASE WHEN I.SMLCLAS_CD='CR' THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD') AND TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA15_DT_REAL
            ,SUM(CASE WHEN I.SMLCLAS_CD='CT' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DATA16_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CT' THEN 1 ELSE 0 END) AS DATA16_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CT' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*2 AS DATA16_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CT' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT  <![CDATA[>=]]>  50  THEN 1 ELSE 0 END)*5 AS DATA16_DT_BH
            ,SUM(CASE WHEN I.SMLCLAS_CD='CT' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT  <![CDATA[<]]>  50  THEN 1 ELSE 0 END)*3 AS DATA16_DT_BL  
            ,SUM(CASE WHEN I.SMLCLAS_CD='CT' THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD') AND TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA16_DT_REAL
	 		,(SUM(CASE WHEN A.HC_YN ='Y' AND C.ATTD_SFT_CD ='D' THEN 100 ELSE 0 END)) AS COUNT_A1
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.ATTD_SFT_CD ='A' THEN 80 ELSE 0 END)) AS COUNT_A2
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.ATTD_SFT_CD ='B' THEN 60 ELSE 0 END)) AS COUNT_A3
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.ATTD_SFT_CD ='C' THEN 40 ELSE 0 END)) AS COUNT_A4
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.ATTD_SFT_CD ='E' THEN 20 ELSE 0 END)) AS COUNT_A5
            ,(SUM(CASE WHEN C.ATTD_SFT_CD IS NOT NULL THEN 1 ELSE 0 END)) AS COUNT_A6
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.RSLT_SFT_CD ='D' THEN 100 ELSE 0 END)) AS COUNT_B1
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.RSLT_SFT_CD ='A' THEN 80 ELSE 0 END)) AS COUNT_B2
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.RSLT_SFT_CD ='B' THEN 60 ELSE 0 END)) AS COUNT_B3
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.RSLT_SFT_CD ='C' THEN 40 ELSE 0 END)) AS COUNT_B4
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.RSLT_SFT_CD ='E' THEN 20 ELSE 0 END)) AS COUNT_B5
            ,(SUM(CASE WHEN C.RSLT_SFT_CD IS NOT NULL THEN 1 ELSE 0 END)) AS COUNT_B6           
	        FROM TBL_DSFT_ACPN_PROC A							       		   
			        LEFT JOIN TBL_HC_HIST C
			               ON A.DSFT_ACPN_SEQ_NO = C.DSFT_ACPN_SEQ_NO		  
			        LEFT JOIN TBL_CRPN_CUST_BASE D
			       		   ON A.ORGN_PTR_ST_CD = D.CUST_ID        	    	  
			        LEFT JOIN TBL_USR B
			       		   ON A.DSPSR_ID = B.USR_ID 
			        LEFT JOIN TBL_HR_EMP_CD F
			       		   ON A.DSPSR_ID = F.EMP_NO
			        LEFT JOIN TBL_HR_DEPT_CD G 
			       		   ON F.BLNG_DEPT_CD = G.DEPT_CD
			        LEFT JOIN TBL_SAP_CD H	
			       		   ON (A.ORGN_ENTR_DV_CD = H.CD_ID AND H.CD_CLAS_CD = '1')	
			        LEFT JOIN TBL_UNFYCD_SUBCLAS I
                              ON A.DSFT_TAXN_TYP_CD = I.SUBCLAS_CD1
                    LEFT JOIN TBL_UNFYCD_SMLCLAS J
                              ON J.SMLCLAS_CD = I.SMLCLAS_CD    
			       		   
			WHERE  (G.HGRK_DEPT_CD IS NULL OR G.HGRK_DEPT_CD NOT IN (SELECT HGRK_DEPT_CD FROM TBL_HR_DEPT_CD_AFTER WHERE USE_YN = 'Y'))  <!-- E00059,E00048 추가 201712 -->
					AND A.PROC_DTM IS NOT NULL
					AND (A.DEL_YN = 'N' OR A.DEL_YN IS NULL)
					AND A.DSPSR_CHRG_DEPT_CD NOT IN ('ICCS')
					AND J.LRGCLAS_CD = 'NW146' 					
	       		<dynamic>
	       			<!-- 년도별 -->   				    	
		    	    <isEqual property="cmb_gubun" compareValue="1">              
		                and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'                                                                  
		            </isEqual>
		            <!--  -->
		            <isEqual property="cmb_gubun" compareValue="2">
		            	<isEmpty property="cmb_half">
		            		and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'
		            	</isEmpty>              
		                <isEqual property="cmb_half" compareValue="1">
		                	and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0632000000'                                                                  
						</isEqual>	 
						<isEqual property="cmb_half" compareValue="2">
							and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '1232000000'
						</isEqual>	 
		            </isEqual>	 
		            <isEqual property="cmb_gubun" compareValue="3"> 
		            	<isEmpty>
							and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'	            	
		            	</isEmpty>    
		           		<isEqual property="cmb_qua" compareValue="1">
		           			and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0332000000'   
		           	  	</isEqual>
		           	  	<isEqual property="cmb_qua" compareValue="2">
		           	   		and A.ACPN_DTM between #time_key# || '0400000000' and #time_key# || '0632000000'   
		           	  	</isEqual>	 
		           	  	<isEqual property="cmb_qua" compareValue="3">
		           	   		and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '0932000000'   
		           	  	</isEqual>	 
	           	  		<isEqual property="cmb_qua" compareValue="4">
		           	   		and A.ACPN_DTM between #time_key# || '1000000000' and #time_key# || '1232000000'   
		           	  	</isEqual>	 	 
	            	</isEqual>	 				            
		    	 	<isEqual property="cmb_gubun" compareValue="4">              
		            	and A.ACPN_DTM between #time_key# || '00000000' and #time_key# || '32000000'                                                                  
		         	</isEqual>	
		    	 	<isEqual property="cmb_gubun" compareValue="5">              
		                and A.ACPN_DTM between #time_key# || '000000' and #time_key# || '240000'                                                                  
		         	</isEqual>
				
					<!-- 불만유형이 전체일 때는 두가지 경우 존재(전체, 품질&혼유)		-->				
					<isEmpty property="dsft_typ_cd">
						<isEqual property="dsft_typ_tot_gbn" compareValue="2">
							AND A.DSFT_TYP_CD IN ('CA','CK')
						</isEqual>
					</isEmpty>					
				  	<isNotEmpty prepend="AND" property="dsft_typ_cd">				<!-- 불만유형		-->
				    	A.DSFT_TYP_CD = #dsft_typ_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dsft_taxn_typ_cd">			<!-- 불만세부유형		-->
				    	A.DSFT_TAXN_TYP_CD = #dsft_taxn_typ_cd#
				  	</isNotEmpty>
			  		<isNotEmpty prepend="AND" property="orgn_ptr_st_cd">			<!-- 불만발생업체코드(가맹점SAP코드) -->
					    A.ORGN_PTR_ST_CD = #orgn_ptr_st_cd#
				  	</isNotEmpty>
				    <isNotEmpty prepend="AND" property="conn_chnl_kind_cd">			<!-- 접촉채널	-->
					    A.CONN_CHNL_KIND_CD = #conn_chnl_kind_cd#
				    </isNotEmpty>			  	
				  	<isNotEmpty prepend="AND" property="hgrk_dept_cd">				<!-- 부문/본부 -->
					    G.HGRK_DEPT_CD = #hgrk_dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dept_cd">					<!-- 처리팀 -->
					    G.DEPT_CD = #dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dspsr_id_nm">				<!-- 처리자명 		-->
					    (B.USR_NM LIKE '%'|| #dspsr_id_nm# ||'%' OR F.EMP_NM LIKE '%'|| #dspsr_id_nm# ||'%')
				  	</isNotEmpty>
			 		<isEqual property="hc_yn" compareValue="Y"> 					<!-- 해피콜여부  -->
			 			AND A.HC_YN = 'Y'
			 		</isEqual>
				 	<isEqual property="hc_yn" compareValue="N"> 					<!-- 해피콜여부  -->
				 		AND (A.HC_YN = 'N' OR A.HC_YN IS NULL)
				 	</isEqual>
				  	<isNotEmpty prepend="AND" property="attd_sft_cd">				<!-- 태도만족도 		-->
				  		(A.HC_YN = 'Y' AND C.ATTD_SFT_CD = #attd_sft_cd#)
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="rslt_sft_cd">				<!-- 결과만족도 		-->
				  		(A.HC_YN = 'Y' AND C.RSLT_SFT_CD = #rslt_sft_cd#)
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="hc_uabl_rsn_cd">			<!-- 해피콜불가사유		-->
				  		A.HC_UABL_RSN_CD = #hc_uabl_rsn_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="prdct_cd">					<!-- 불만제품 		-->
					    A.PRDCT_CD = #prdct_cd#
				  	</isNotEmpty>			  				 	
				  	<isNotEmpty prepend="AND" property="prblm_penom_cd">			<!-- 현상 		-->
					    A.PRBLM_PENOM_CD = #prblm_penom_cd#
				  	</isNotEmpty>
			 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="1">  	<!-- 시료품질 점검결과		-->
			 			AND	A.VHCL_QLIT_DSFT_CAUS_CD_CUST IS NOT NULL
			 	  	</isEqual>
			 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="2">   	<!-- 시료품질 점검결과		-->
			 	  		AND	A.VHCL_QLIT_DSFT_CAUS_CD_PTR_ST IS NOT NULL
			 	  	</isEqual>
				  	<isNotEmpty prepend="AND" property="vhcl_biztr_qlit_dsft_typ_cd">			<!-- 품질불만유형 		-->
					    A.VHCL_BIZTR_QLIT_DSFT_TYP_CD = #vhcl_biztr_qlit_dsft_typ_cd#
				  	</isNotEmpty>
				 	<isEqual property="vhcl_biztr_yn" compareValue="Y"> 			<!-- Kixx 품질서비스차량 출동 -->
				 		AND A.VHCL_BIZTR_YN = 'Y'
				 	</isEqual>
				 	<isEqual property="vhcl_biztr_yn" compareValue="N"> 			<!-- Kixx 품질서비스차량 출동 -->
				 		AND (A.VHCL_BIZTR_YN = 'N' OR A.VHCL_BIZTR_YN IS NULL)
				 	</isEqual>		 	  	
				 	<isEqual property="rwrd_yn" compareValue="Y"> 					<!-- 보상여부 -->
				 		AND A.RWRD_YN = 'Y'
				 	</isEqual>
				 	<isEqual property="rwrd_yn" compareValue="N"> 					<!-- 보상여부 -->
				 		AND (A.RWRD_YN = 'N' OR A.RWRD_YN IS NULL)
				 	</isEqual>
				 	
				 	<isEqual property="cps_amt_gbn" compareValue="1"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 주유소 보상금 1만원 미만-->
				 			AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 주유소 보상금 1만원 ~ 10만원-->
				 			AND (A.PTR_ST_CPS_AMT <![CDATA[>=]]> 10000 AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 주유소 보상금 10만원 초과-->
				 			AND A.PTR_ST_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	<isEqual property="cps_amt_gbn" compareValue="2"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 회사 보상금 1만원 미만-->
				 			AND A.CO_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 회사 보상금 1만원 ~ 10만원-->
				 			AND (A.CO_CPS_AMT <![CDATA[>=]]> 10000 AND A.CO_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 회사 보상금 10만원 초과-->
				 			AND A.CO_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	<isEqual property="cps_amt_gbn" compareValue="3"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 총 보상금 1만원 미만-->
				 			AND A.TOT_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 총 보상금 1만원 ~ 10만원-->
				 			AND (A.TOT_CPS_AMT <![CDATA[>=]]> 10000 AND A.TOT_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 총 보상금 10만원 초과-->
				 			AND A.TOT_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	
					<!--처리자구분에 체크항목이 하나도 없는 경우, 전체데이터가 조회된다.-->
				 	<isEqual property="cmp_handler" compareValue="1">   
				 		AND	A.DSPSR_YN_CNSLR = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="2">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="3">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="4">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="5">   
				 		AND	A.DSPSR_YN_DSFT_CHRG = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="6">   
				 		AND	A.DSPSR_YN_PART_HD = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="7">   
				 		AND	(A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
	       		</dynamic> 
	
		) Q2
	
	ON Q1.DEPT_CD = Q2.DEPT_CD
	
	GROUP BY ROLLUP(Q1.HGRK_DEPT_CD,Q1.DEPT_CD)
	ORDER BY Q1.HGRK_DEPT_CD, Q1.DEPT_CD, MAX(Q1.DEPT_CDNM)
	 
 	</select>

 	<select id="Get_CMP_SELECT_1" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
		SELECT
		     HGRK_DEPT_CD
		    ,HGRK_DEPT_CDNM
		    ,DEPT_CD
		    ,DSPSR_CHRG_DEPT
		    ,CNT_SUM                         
		    ,DATA1
		    ,DATA2
		    ,DATA3
		    ,DATA4
		    ,DATA5
		    ,DATA6
		    ,DATA7
		    ,DATA8
		    ,DATA9
		    ,DATA10
		    ,DATA11
		    ,DATA12
		    <!-- ,DATA13 칭찬 제외 김순화 대리 20180130-->
		    ,DATA14
		    ,DATA15
		    ,DATA16 
		    ,ROUND((DT_M_SUM / CNT_SUM),1) AS DT_M_SUM_CNT <!--처리 소요일:목표  -->
		    ,ROUND((DT_REAL_SUM / CNT_SUM),1) AS DT_REAL_SUM_CNT  <!-- 처리 소요일:실적 -->
		    ,DT_M_SUM <!-- 목표일 -->
		    ,DT_REAL_SUM<!-- 처리일 --> 
		    ,COUNT_TOT1  <!--결과 -->
		    ,COUNT_TOT2   <!-- 태도 -->
		    ,COUNT_TOT3      <!-- 평균 -->
		    ,COUNT_TOT4	
    FROM
(	
	SELECT
	     Q1.HGRK_DEPT_CD        						AS HGRK_DEPT_CD
	    ,CASE WHEN Q1.HGRK_DEPT_CD IS NULL THEN '전체' 
	    	ELSE MAX(Q1.HGRK_DEPT_CDNM) END 			AS HGRK_DEPT_CDNM
	    ,Q1.DEPT_CD             						AS DEPT_CD
	    ,CASE WHEN Q1.HGRK_DEPT_CD IS NULL THEN '평균' 
	          WHEN Q1.DEPT_CD IS NULL THEN '소계' 
	        ELSE MAX(Q1.DEPT_CDNM) END  				AS DSPSR_CHRG_DEPT
	     ,SUM(Q2.DATA1_CNT+Q2.DATA2_CNT+Q2.DATA3_CNT+Q2.DATA4_CNT+Q2.DATA5_CNT+Q2.DATA6_CNT+Q2.DATA7_CNT +Q2.DATA8_CNT+Q2.DATA9_CNT+Q2.DATA10_CNT+Q2.DATA11_CNT+Q2.DATA12_CNT+Q2.DATA14_CNT+Q2.DATA15_CNT+Q2.DATA16_CNT) AS CNT_SUM                         
		,SUM(Q2.DATA1_CNT)   	  AS DATA1
		,SUM(Q2.DATA2_CNT)	    AS DATA2
		,SUM(Q2.DATA3_CNT)     	AS DATA3
		,SUM(Q2.DATA4_CNT)     	AS DATA4
		,SUM(Q2.DATA5_CNT)     	AS DATA5
		,SUM(Q2.DATA6_CNT)     	AS DATA6
		,SUM(Q2.DATA7_CNT)     	AS DATA7
		,SUM(Q2.DATA8_CNT)     	AS DATA8
		,SUM(Q2.DATA9_CNT)     	AS DATA9
		,SUM(Q2.DATA10_CNT)    	AS DATA10
		,SUM(Q2.DATA11_CNT)    	AS DATA11
		,SUM(Q2.DATA12_CNT)    	AS DATA12
		<!-- ,SUM(Q2.DATA13_CNT)    	AS DATA13  칭찬은 제외-->
		,SUM(Q2.DATA14_CNT)    	AS DATA14
		,SUM(Q2.DATA15_CNT)    	AS DATA15
		,SUM(Q2.DATA16_CNT)	    AS DATA16 
         ,SUM(Q2.DATA1_DT_M+(Q2.DATA2_DT_M+DATA2_DT_BH+DATA2_DT_BL)+(Q2.DATA3_DT_M+DATA3_DT_BH+DATA3_DT_BL) +(Q2.DATA4_DT_M+DATA4_DT_BH+DATA4_DT_BL)+(Q2.DATA5_DT_M+DATA5_DT_BH+DATA5_DT_BL)+(Q2.DATA6_DT_M+DATA6_DT_BH+DATA6_DT_BL) +(Q2.DATA7_DT_M+DATA7_DT_BH+DATA7_DT_BL)+Q2.DATA8_DT_M+Q2.DATA9_DT_M +(Q2.DATA10_DT_M+DATA10_DT_BH+DATA10_DT_BL) +(Q2.DATA11_DT_M+DATA11_DT_BH+DATA11_DT_BL)+(Q2.DATA12_DT_M+DATA12_DT_BH+DATA12_DT_BL) +(Q2.DATA14_DT_M+DATA14_DT_BH+DATA14_DT_BL)+(Q2.DATA15_DT_M+DATA15_DT_BH+DATA15_DT_BL)+(Q2.DATA16_DT_M+DATA16_DT_BH+DATA16_DT_BL)) AS DT_M_SUM  
        ,SUM(Q2.DATA1_DT_REAL+Q2.DATA2_DT_REAL+Q2.DATA3_DT_REAL+Q2.DATA4_DT_REAL+Q2.DATA5_DT_REAL+Q2.DATA6_DT_REAL+Q2.DATA7_DT_REAL+Q2.DATA8_DT_REAL+Q2.DATA9_DT_REAL+Q2.DATA10_DT_REAL+Q2.DATA11_DT_REAL+Q2.DATA12_DT_REAL+Q2.DATA14_DT_REAL+Q2.DATA15_DT_REAL+Q2.DATA16_DT_REAL) AS DT_REAL_SUM 
        ,SUM(ROUND((COUNT_A1+COUNT_A2+COUNT_A3+COUNT_A4+COUNT_A5)/DECODE(COUNT_A6,0,1,COUNT_A6),1)) AS COUNT_TOT1 <!--결과 -->
        ,SUM(ROUND((COUNT_B1+COUNT_B2+COUNT_B3+COUNT_B4+COUNT_B5)/DECODE(COUNT_B6,0,1,COUNT_B6),1)) AS COUNT_TOT2  <!-- 태도 -->
        ,SUM(ROUND((COUNT_A1+COUNT_A2+COUNT_A3+COUNT_A4+COUNT_A5+COUNT_B1+COUNT_B2+COUNT_B3+COUNT_B4+COUNT_B5)/DECODE(COUNT_A6,0,1,COUNT_A6),1)/2) AS COUNT_TOT3     <!-- 평균 -->
        ,SUM(COUNT_A6) AS COUNT_TOT4  
	    
	FROM 	
	    (   
	        SELECT 	HGRK_DEPT_CD,HGRK_DEPT_CDNM,DEPT_CD,DEPT_CDNM
	        FROM 	TBL_HR_DEPT_CD       
	        WHERE 	1=1
	       		<dynamic>
	       			<isEmpty prepend="AND" property="hgrk_dept_cd">    <!-- 부문정보 추가 201712 -->
						HGRK_DEPT_CD IN (SELECT HGRK_DEPT_CD FROM TBL_HR_DEPT_CD_AFTER WHERE USE_YN = 'Y')		       				
	       			</isEmpty>
	       					<!-- 부문/본부 -->
				  	<isNotEmpty prepend="AND" property="hgrk_dept_cd">		
					    HGRK_DEPT_CD = #hgrk_dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dept_cd">					
					    DEPT_CD = #dept_cd#
				  	</isNotEmpty>	       		
				</dynamic>       		
	      
	        <dynamic>   <!-- 201801 상담원 처리일 추가 -->
	       			<isEmpty property="hgrk_dept_cd">	        
				        UNION ALL
				        
				     SELECT 
                         'ZZCSC'        AS HGRK_DEPT_CD  
                        ,'ICCS_CSC'         AS HGRK_DEPT_CDNM
                        ,'ZZCSC'        AS DEPT_CD
                        ,'불만상담원'             AS DEPT_CDNM
                    FROM DUAL   
	       			</isEmpty>				        
				</dynamic>	          		
	      
	       		<dynamic>
	       			<isEmpty property="hgrk_dept_cd">	        
				        UNION ALL
				        
				        SELECT 
				             'ZZZZZ'    	AS HGRK_DEPT_CD  
				            ,'기타부문' 		AS HGRK_DEPT_CDNM
				            ,'ZZZZZ'    	AS DEPT_CD
				            ,'기타'     		AS DEPT_CDNM
				        FROM DUAL
	       			</isEmpty>				        
				</dynamic>	   
	    ) Q1
	    
	    LEFT JOIN
	    
	    ( 	
			SELECT 	 
	   			 G.HGRK_DEPT_CDNM as HGRK_DEPT_CDNM
	   			,G.DEPT_CDNM as DSPSR_CHRG_DEPT
	   			,G.DEPT_CD as DEPT_CD         
           <!--품질 목표처리일 5 /보상에 상관없이 5일-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CA' THEN (SUBSTR(A.PROC_DTM, 0, 8) - SUBSTR(A.ACPN_DTM, 0, 8)) ELSE 0 END) AS DATA1_DT <!--처리일-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CA' THEN 1 ELSE 0 END) AS DATA1_CNT <!--건수-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CA' THEN 1 ELSE 0 END)*5 AS DATA1_DT_M <!--목표일-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CA' AND A.PROC_DTM IS NOT NULL THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN SUBSTR(A.ACPN_DTM, 0, 8) AND SUBSTR(A.PROC_DTM, 0, 8) AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA1_DT_REAL <!--실제처리일-->
            <!--서비스 목표처리일 2 // 보상50이상 5 //50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CB' THEN (SUBSTR(A.PROC_DTM, 0, 8) - SUBSTR(A.ACPN_DTM, 0, 8)) ELSE 0 END) AS DATA2_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CB' THEN 1 ELSE 0 END) AS DATA2_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CB' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*1 AS DATA2_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CB' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 500000  THEN 1 ELSE 0 END)*5 AS DATA2_DT_BH <!--보상 50만원 이상 목표처리일-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CB' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 500000  THEN 1 ELSE 0 END)*3 AS DATA2_DT_BL  <!--보상 50만원 미만 목표처리일-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CB' AND A.PROC_DTM IS NOT NULL THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN SUBSTR(A.ACPN_DTM, 0, 8) AND SUBSTR(A.PROC_DTM, 0, 8) AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA2_DT_REAL
            <!--시설 목표처리일 2 /보상50이상 5 /50미만 3       -->         
            ,SUM(CASE WHEN I.SMLCLAS_CD='CC' THEN (SUBSTR(A.PROC_DTM, 0, 8) - SUBSTR(A.ACPN_DTM, 0, 8)) ELSE 0 END) AS DATA3_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CC' THEN 1 ELSE 0 END) AS DATA3_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CC' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*1 AS DATA3_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CC' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 500000  THEN 1 ELSE 0 END)*5 AS DATA3_DT_BH
            ,SUM(CASE WHEN I.SMLCLAS_CD='CC' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 500000  THEN 1 ELSE 0 END)*3 AS DATA3_DT_BL 
            ,SUM(CASE WHEN I.SMLCLAS_CD='CC' AND A.PROC_DTM IS NOT NULL THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN SUBSTR(A.ACPN_DTM, 0, 8) AND SUBSTR(A.PROC_DTM, 0, 8) AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA3_DT_REAL
            <!--가격 목표처리일 2 /보상50이상 5 /50미만 3         -->                         
            ,SUM(CASE WHEN I.SMLCLAS_CD='CD' THEN (SUBSTR(A.PROC_DTM, 0, 8) - SUBSTR(A.ACPN_DTM, 0, 8)) ELSE 0 END) AS DATA4_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CD' THEN 1 ELSE 0 END) AS DATA4_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CD' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*1 AS DATA4_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CD' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 500000  THEN 1 ELSE 0 END)*5 AS DATA4_DT_BH
            ,SUM(CASE WHEN I.SMLCLAS_CD='CD' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 500000  THEN 1 ELSE 0 END)*3 AS DATA4_DT_BL
            ,SUM(CASE WHEN I.SMLCLAS_CD='CD' AND A.PROC_DTM IS NOT NULL THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN SUBSTR(A.ACPN_DTM, 0, 8) AND SUBSTR(A.PROC_DTM, 0, 8) AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA4_DT_REAL
            <!--탱크로리 목표처리일 2 /보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CE' THEN (SUBSTR(A.PROC_DTM, 0, 8) - SUBSTR(A.ACPN_DTM, 0, 8)) ELSE 0 END) AS DATA5_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CE' THEN 1 ELSE 0 END) AS DATA5_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CE' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*1 AS DATA5_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CE' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 500000  THEN 1 ELSE 0 END)*5 AS DATA5_DT_BH 
            ,SUM(CASE WHEN I.SMLCLAS_CD='CE' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 500000  THEN 1 ELSE 0 END)*3 AS DATA5_DT_BL  
            ,SUM(CASE WHEN I.SMLCLAS_CD='CE' AND A.PROC_DTM IS NOT NULL THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN SUBSTR(A.ACPN_DTM, 0, 8) AND SUBSTR(A.PROC_DTM, 0, 8) AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA5_DT_REAL
            <!--기타 목표처리일 2 /보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CG' THEN (SUBSTR(A.PROC_DTM, 0, 8) - SUBSTR(A.ACPN_DTM, 0, 8)) ELSE 0 END) AS DATA6_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CG' THEN 1 ELSE 0 END) AS DATA6_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CG' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*1 AS DATA6_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CG' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 500000  THEN 1 ELSE 0 END)*5 AS DATA6_DT_BH 
            ,SUM(CASE WHEN I.SMLCLAS_CD='CG' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 500000  THEN 1 ELSE 0 END)*3 AS DATA6_DT_BL  
            ,SUM(CASE WHEN I.SMLCLAS_CD='CG' AND A.PROC_DTM IS NOT NULL THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN SUBSTR(A.ACPN_DTM, 0, 8) AND SUBSTR(A.PROC_DTM, 0, 8) AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA6_DT_REAL
            <!--신용카드 목표처리일 2 /보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CH' THEN (SUBSTR(A.PROC_DTM, 0, 8) - SUBSTR(A.ACPN_DTM, 0, 8)) ELSE 0 END) AS DATA7_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CH' THEN 1 ELSE 0 END) AS DATA7_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CH' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*1 AS DATA7_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CH' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 500000  THEN 1 ELSE 0 END)*5 AS DATA7_DT_BH
            ,SUM(CASE WHEN I.SMLCLAS_CD='CH' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 500000  THEN 1 ELSE 0 END)*3 AS DATA7_DT_BL  
            ,SUM(CASE WHEN I.SMLCLAS_CD='CH' AND A.PROC_DTM IS NOT NULL THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN SUBSTR(A.ACPN_DTM, 0, 8) AND SUBSTR(A.PROC_DTM, 0, 8) AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA7_DT_REAL
            <!--세차관련 목표처리일 3/보상에 상관없이 5일-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CI' THEN (SUBSTR(A.PROC_DTM, 0, 8) - SUBSTR(A.ACPN_DTM, 0, 8)) ELSE 0 END) AS DATA8_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CI' THEN 1 ELSE 0 END) AS DATA8_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CI' THEN 1 ELSE 0 END)* 3 AS DATA8_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CI' AND A.PROC_DTM IS NOT NULL THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN SUBSTR(A.ACPN_DTM, 0, 8) AND SUBSTR(A.PROC_DTM, 0, 8) AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA8_DT_REAL
            <!--혼유 목표처리일 5일 /보상에 상관없이 5일-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CK' THEN (SUBSTR(A.PROC_DTM, 0, 8) - SUBSTR(A.ACPN_DTM, 0, 8)) ELSE 0 END) AS DATA9_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CK' THEN 1 ELSE 0 END) AS DATA9_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CK' THEN 1 ELSE 0 END)*5 AS DATA9_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CK' AND A.PROC_DTM IS NOT NULL THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN SUBSTR(A.ACPN_DTM, 0, 8) AND SUBSTR(A.PROC_DTM, 0, 8) AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA9_DT_REAL
            <!--주유량 목표처리일 2 /보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CL' THEN (SUBSTR(A.PROC_DTM, 0, 8) - SUBSTR(A.ACPN_DTM, 0, 8)) ELSE 0 END) AS DATA10_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CL' THEN 1 ELSE 0 END) AS DATA10_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CL' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*1 AS DATA10_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CL' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 500000  THEN 1 ELSE 0 END)*5 AS DATA10_DT_BH
            ,SUM(CASE WHEN I.SMLCLAS_CD='CL' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 500000  THEN 1 ELSE 0 END)*3 AS DATA10_DT_BL  
            ,SUM(CASE WHEN I.SMLCLAS_CD='CL' AND A.PROC_DTM IS NOT NULL THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN SUBSTR(A.ACPN_DTM, 0, 8) AND SUBSTR(A.PROC_DTM, 0, 8) AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA10_DT_REAL
            <!--DBO보험 목표처리일 2 /보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CN' THEN (SUBSTR(A.PROC_DTM, 0, 8) - SUBSTR(A.ACPN_DTM, 0, 8)) ELSE 0 END) AS DATA11_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CN' THEN 1 ELSE 0 END) AS DATA11_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CN' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*1 AS DATA11_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CN' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 500000  THEN 1 ELSE 0 END)*5 AS DATA11_DT_BH
            ,SUM(CASE WHEN I.SMLCLAS_CD='CN' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 500000  THEN 1 ELSE 0 END)*3 AS DATA11_DT_BL 
            ,SUM(CASE WHEN I.SMLCLAS_CD='CN' AND A.PROC_DTM IS NOT NULL THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN SUBSTR(A.ACPN_DTM, 0, 8) AND SUBSTR(A.PROC_DTM, 0, 8) AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA11_DT_REAL
            <!--보너스카드 목표처리일 2 /보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CO' THEN (SUBSTR(A.PROC_DTM, 0, 8) - SUBSTR(A.ACPN_DTM, 0, 8)) ELSE 0 END) AS DATA12_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CO' THEN 1 ELSE 0 END) AS DATA12_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CO' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*1 AS DATA12_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CO' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 500000  THEN 1 ELSE 0 END)*5 AS DATA12_DT_BH 
            ,SUM(CASE WHEN I.SMLCLAS_CD='CO' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 500000  THEN 1 ELSE 0 END)*3 AS DATA12_DT_BL  
            ,SUM(CASE WHEN I.SMLCLAS_CD='CO' AND A.PROC_DTM IS NOT NULL THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN SUBSTR(A.ACPN_DTM, 0, 8) AND SUBSTR(A.PROC_DTM, 0, 8) AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA12_DT_REAL
            <!--칭찬 목표처리일 2 /보상50이상 5 /50미만 3 //////칭찬은 제외 요청 김순화 대리 20180130 -->
            <!--DBO포인트 목표처리일 2 /보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CQ' THEN (SUBSTR(A.PROC_DTM, 0, 8) - SUBSTR(A.ACPN_DTM, 0, 8)) ELSE 0 END) AS DATA14_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CQ' THEN 1 ELSE 0 END) AS DATA14_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CQ' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*1 AS DATA14_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CQ' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 500000  THEN 1 ELSE 0 END)*5 AS DATA14_DT_BH 
            ,SUM(CASE WHEN I.SMLCLAS_CD='CQ' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 500000  THEN 1 ELSE 0 END)*3 AS DATA14_DT_BL 
            ,SUM(CASE WHEN I.SMLCLAS_CD='CQ' AND A.PROC_DTM IS NOT NULL THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN SUBSTR(A.ACPN_DTM, 0, 8) AND SUBSTR(A.PROC_DTM, 0, 8) AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA14_DT_REAL
            <!--GS통합 목표처리일 2 /보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CR' THEN (SUBSTR(A.PROC_DTM, 0, 8) - SUBSTR(A.ACPN_DTM, 0, 8)) ELSE 0 END) AS DATA15_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CR' THEN 1 ELSE 0 END) AS DATA15_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CR' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*1 AS DATA15_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CR' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 500000  THEN 1 ELSE 0 END)*5 AS DATA15_DT_BH
            ,SUM(CASE WHEN I.SMLCLAS_CD='CR' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 500000  THEN 1 ELSE 0 END)*3 AS DATA15_DT_BL  
            ,SUM(CASE WHEN I.SMLCLAS_CD='CR' AND A.PROC_DTM IS NOT NULL THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN SUBSTR(A.ACPN_DTM, 0, 8) AND SUBSTR(A.PROC_DTM, 0, 8) AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA15_DT_REAL
            <!--일시정지 목표처리일 2 /보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CT' THEN (SUBSTR(A.PROC_DTM, 0, 8) - SUBSTR(A.ACPN_DTM, 0, 8)) ELSE 0 END) AS DATA16_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CT' THEN 1 ELSE 0 END) AS DATA16_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CT' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*1 AS DATA16_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CT' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 500000  THEN 1 ELSE 0 END)*5 AS DATA16_DT_BH
            ,SUM(CASE WHEN I.SMLCLAS_CD='CT' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 500000  THEN 1 ELSE 0 END)*3 AS DATA16_DT_BL  
            ,SUM(CASE WHEN I.SMLCLAS_CD='CT' AND A.PROC_DTM IS NOT NULL THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN SUBSTR(A.ACPN_DTM, 0, 8) AND SUBSTR(A.PROC_DTM, 0, 8) AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA16_DT_REAL
            <!--만족도-->
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.ATTD_SFT_CD ='D' THEN 100 ELSE 0 END)) AS COUNT_A1
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.ATTD_SFT_CD ='A' THEN 80 ELSE 0 END)) AS COUNT_A2
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.ATTD_SFT_CD ='B' THEN 60 ELSE 0 END)) AS COUNT_A3
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.ATTD_SFT_CD ='C' THEN 40 ELSE 0 END)) AS COUNT_A4
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.ATTD_SFT_CD ='E' THEN 20 ELSE 0 END)) AS COUNT_A5
            ,(SUM(CASE WHEN C.ATTD_SFT_CD IS NOT NULL THEN 1 ELSE 0 END)) AS COUNT_A6
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.RSLT_SFT_CD ='D' THEN 100 ELSE 0 END)) AS COUNT_B1
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.RSLT_SFT_CD ='A' THEN 80 ELSE 0 END)) AS COUNT_B2
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.RSLT_SFT_CD ='B' THEN 60 ELSE 0 END)) AS COUNT_B3
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.RSLT_SFT_CD ='C' THEN 40 ELSE 0 END)) AS COUNT_B4
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.RSLT_SFT_CD ='E' THEN 20 ELSE 0 END)) AS COUNT_B5
            ,(SUM(CASE WHEN C.RSLT_SFT_CD IS NOT NULL THEN 1 ELSE 0 END)) AS COUNT_B6    
	        
	        FROM TBL_DSFT_ACPN_PROC A					
			        LEFT JOIN TBL_HC_HIST C
			               ON A.DSFT_ACPN_SEQ_NO = C.DSFT_ACPN_SEQ_NO		  
			        LEFT JOIN TBL_CRPN_CUST_BASE D
			       		   ON A.ORGN_PTR_ST_CD = D.CUST_ID        	    	  
			        LEFT JOIN TBL_USR B
			       		   ON A.DSPSR_ID = B.USR_ID 
			        LEFT JOIN TBL_HR_EMP_CD F
			       		   ON A.DSPSR_ID = F.EMP_NO
			        LEFT JOIN TBL_HR_DEPT_CD G 
			       		   ON F.BLNG_DEPT_CD = G.DEPT_CD
			        LEFT JOIN TBL_SAP_CD H	
			       		   ON (A.ORGN_ENTR_DV_CD = H.CD_ID AND H.CD_CLAS_CD = '1')	
			        LEFT JOIN TBL_UNFYCD_SUBCLAS I
                              ON A.DSFT_TAXN_TYP_CD = I.SUBCLAS_CD1
                    LEFT JOIN TBL_UNFYCD_SMLCLAS J
                              ON J.SMLCLAS_CD = I.SMLCLAS_CD    
			       		   
			WHERE G.HGRK_DEPT_CD IN (SELECT HGRK_DEPT_CD FROM TBL_HR_DEPT_CD_AFTER WHERE USE_YN = 'Y') <!--부문정보 추가 201712 -->
					<!-- AND A.PROC_DTM IS NOT NULL 처리일이 없어도 통계에는 나와야 한다.-->
					AND (A.DEL_YN = 'N' OR A.DEL_YN IS NULL)
					AND A.DSPSR_CHRG_DEPT_CD = G.DEPT_CD    <!-- 불만 통계 개선 201711 -->			
					AND A.DSPSR_YN_OB_CNTR IS NULL 					 <!-- TM센터 불만건 건은 제외 -->
                    AND A.OB_CNTR_DV_CD IS NULL    			   	    	 <!-- TM센터 불만건 건은 제외 -->
		   	    	AND J.LRGCLAS_CD = 'NW146'                                 <!-- 불만 통계 개선 201711 -->  
	       		<dynamic>
	       			<!-- 년도별 -->   				    	
		    	    <isEqual property="cmb_gubun" compareValue="1">              
		                and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'                                                                  
		            </isEqual>
		            <!--  -->
		            <isEqual property="cmb_gubun" compareValue="2">
		            	<isEmpty property="cmb_half">
		            		and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'
		            	</isEmpty>              
		                <isEqual property="cmb_half" compareValue="1">
		                	and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0632000000'                                                                  
						</isEqual>	 
						<isEqual property="cmb_half" compareValue="2">
							and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '1232000000'
						</isEqual>	 
		            </isEqual>	 
		            <isEqual property="cmb_gubun" compareValue="3"> 
		            	<isEmpty>
							and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'	            	
		            	</isEmpty>    
		           		<isEqual property="cmb_qua" compareValue="1">
		           			and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0332000000'   
		           	  	</isEqual>
		           	  	<isEqual property="cmb_qua" compareValue="2">
		           	   		and A.ACPN_DTM between #time_key# || '0400000000' and #time_key# || '0632000000'   
		           	  	</isEqual>	 
		           	  	<isEqual property="cmb_qua" compareValue="3">
		           	   		and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '0932000000'   
		           	  	</isEqual>	 
	           	  		<isEqual property="cmb_qua" compareValue="4">
		           	   		and A.ACPN_DTM between #time_key# || '1000000000' and #time_key# || '1232000000'   
		           	  	</isEqual>	 	 
	            	</isEqual>	 				            
		    	 	<isEqual property="cmb_gubun" compareValue="4">              
		            	and A.ACPN_DTM between #time_key# || '00000000' and #time_key# || '32000000'                                                                  
		         	</isEqual>	
		    	 	<isEqual property="cmb_gubun" compareValue="5">              
		                and A.ACPN_DTM between #time_key# || '000000' and #time_key# || '240000'                                                                  
		         	</isEqual>
				
					<!-- 불만유형이 전체일 때는 두가지 경우 존재(전체, 품질&혼유)		-->				
					<isEmpty property="dsft_typ_cd">
						<isEqual property="dsft_typ_tot_gbn" compareValue="2">
							AND A.DSFT_TYP_CD IN ('CA','CK')
						</isEqual>
					</isEmpty>	
				  	<isNotEmpty prepend="AND" property="dsft_typ_cd">				<!-- 불만유형		-->
				    	A.DSFT_TYP_CD = #dsft_typ_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dsft_taxn_typ_cd">			<!-- 불만세부유형		-->
				    	A.DSFT_TAXN_TYP_CD = #dsft_taxn_typ_cd#
				  	</isNotEmpty>
			  		<isNotEmpty prepend="AND" property="orgn_ptr_st_cd">			<!-- 불만발생업체코드(가맹점SAP코드) -->
					    A.ORGN_PTR_ST_CD = #orgn_ptr_st_cd#
				  	</isNotEmpty>
				    <isNotEmpty prepend="AND" property="conn_chnl_kind_cd">			<!-- 접촉채널	-->
					    A.CONN_CHNL_KIND_CD = #conn_chnl_kind_cd#
				    </isNotEmpty>			  	
				  	<isNotEmpty prepend="AND" property="hgrk_dept_cd">				<!-- 부문/본부 -->
					    G.HGRK_DEPT_CD = #hgrk_dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dept_cd">					<!-- 처리팀 -->
					    G.DEPT_CD = #dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dspsr_id_nm">				<!-- 처리자명 		-->
					    (B.USR_NM LIKE '%'|| #dspsr_id_nm# ||'%' OR F.EMP_NM LIKE '%'|| #dspsr_id_nm# ||'%')
				  	</isNotEmpty>
			 		<isEqual property="hc_yn" compareValue="Y"> 					<!-- 해피콜여부  -->
			 			AND A.HC_YN = 'Y'
			 		</isEqual>
				 	<isEqual property="hc_yn" compareValue="N"> 					<!-- 해피콜여부  -->
				 		AND (A.HC_YN = 'N' OR A.HC_YN IS NULL)
				 	</isEqual>
				  	<isNotEmpty prepend="AND" property="attd_sft_cd">				<!-- 태도만족도 		-->
				  		(A.HC_YN = 'Y' AND C.ATTD_SFT_CD = #attd_sft_cd#)
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="rslt_sft_cd">				<!-- 결과만족도 		-->
				  		(A.HC_YN = 'Y' AND C.RSLT_SFT_CD = #rslt_sft_cd#)
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="hc_uabl_rsn_cd">			<!-- 해피콜불가사유		-->
				  		A.HC_UABL_RSN_CD = #hc_uabl_rsn_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="prdct_cd">					<!-- 불만제품 		-->
					    A.PRDCT_CD = #prdct_cd#
				  	</isNotEmpty>			  				 	
				  	<isNotEmpty prepend="AND" property="prblm_penom_cd">			<!-- 현상 		-->
					    A.PRBLM_PENOM_CD = #prblm_penom_cd#
				  	</isNotEmpty>
			 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="1">  	<!-- 시료품질 점검결과		-->
			 			AND	A.VHCL_QLIT_DSFT_CAUS_CD_CUST IS NOT NULL
			 	  	</isEqual>
			 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="2">   	<!-- 시료품질 점검결과		-->
			 	  		AND	A.VHCL_QLIT_DSFT_CAUS_CD_PTR_ST IS NOT NULL
			 	  	</isEqual>
				  	<isNotEmpty prepend="AND" property="vhcl_biztr_qlit_dsft_typ_cd">			<!-- 품질불만유형 		-->
					    A.VHCL_BIZTR_QLIT_DSFT_TYP_CD = #vhcl_biztr_qlit_dsft_typ_cd#
				  	</isNotEmpty>
				 	<isEqual property="vhcl_biztr_yn" compareValue="Y"> 			<!-- Kixx 품질서비스차량 출동 -->
				 		AND A.VHCL_BIZTR_YN = 'Y'
				 	</isEqual>
				 	<isEqual property="vhcl_biztr_yn" compareValue="N"> 			<!-- Kixx 품질서비스차량 출동 -->
				 		AND (A.VHCL_BIZTR_YN = 'N' OR A.VHCL_BIZTR_YN IS NULL)
				 	</isEqual>		 	  	
				 	<isEqual property="rwrd_yn" compareValue="Y"> 					<!-- 보상여부 -->
				 		AND A.RWRD_YN = 'Y'
				 	</isEqual>
				 	<isEqual property="rwrd_yn" compareValue="N"> 					<!-- 보상여부 -->
				 		AND (A.RWRD_YN = 'N' OR A.RWRD_YN IS NULL)
				 	</isEqual>
				 	
				 	<isEqual property="cps_amt_gbn" compareValue="1"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 주유소 보상금 1만원 미만-->
				 			AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 주유소 보상금 1만원 ~ 10만원-->
				 			AND (A.PTR_ST_CPS_AMT <![CDATA[>=]]> 10000 AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 주유소 보상금 10만원 초과-->
				 			AND A.PTR_ST_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	<isEqual property="cps_amt_gbn" compareValue="2"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 회사 보상금 1만원 미만-->
				 			AND A.CO_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 회사 보상금 1만원 ~ 10만원-->
				 			AND (A.CO_CPS_AMT <![CDATA[>=]]> 10000 AND A.CO_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 회사 보상금 10만원 초과-->
				 			AND A.CO_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	<isEqual property="cps_amt_gbn" compareValue="3"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 총 보상금 1만원 미만-->
				 			AND A.TOT_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 총 보상금 1만원 ~ 10만원-->
				 			AND (A.TOT_CPS_AMT <![CDATA[>=]]> 10000 AND A.TOT_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 총 보상금 10만원 초과-->
				 			AND A.TOT_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	
					<!--처리자구분에 체크항목이 하나도 없는 경우, 전체데이터가 조회된다.-->
				 	<isEqual property="cmp_handler" compareValue="1">   
				 		AND	A.DSPSR_YN_CNSLR = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="2">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="3">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="4">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="5">   
				 		AND	A.DSPSR_YN_DSFT_CHRG = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="6">   
				 		AND	A.DSPSR_YN_PART_HD = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="7">   
				 		AND	(A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
	       		</dynamic>  
		
			GROUP BY G.HGRK_DEPT_CDNM,G.HGRK_DEPT_CD, G.DEPT_CD,G.DEPT_CDNM
			
			UNION ALL
			<!-- ICCS에서 처리된 건들 불만 상담원 일반 상담원 파트장 포함 -->
	        SELECT 	 
				 'ICCS_CSC' 		AS HGRK_DEPT_CDNM
				,'불만상담원' 			AS DSPSR_CHRG_DEPT
				,'ZZCSC' 		AS DEPT_CD	
		             <!--품질 목표처리일 2 /보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CA' THEN (SUBSTR(A.PROC_DTM, 0, 8) - SUBSTR(A.ACPN_DTM, 0, 8)) ELSE 0 END) AS DATA1_DT <!--처리일-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CA' THEN 1 ELSE 0 END) AS DATA1_CNT <!--건수-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CA' THEN 1 ELSE 0 END)*5 AS DATA1_DT_M <!--목표일-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CA' AND A.PROC_DTM IS NOT NULL THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN SUBSTR(A.ACPN_DTM, 0, 8) AND SUBSTR(A.PROC_DTM, 0, 8) AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA1_DT_REAL <!--실제처리일-->
            <!--서비스 목표처리일 2 // 보상50이상 5 //50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CB' THEN (SUBSTR(A.PROC_DTM, 0, 8) - SUBSTR(A.ACPN_DTM, 0, 8)) ELSE 0 END) AS DATA2_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CB' THEN 1 ELSE 0 END) AS DATA2_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CB' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*1 AS DATA2_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CB' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 500000  THEN 1 ELSE 0 END)*5 AS DATA2_DT_BH <!--보상 50만원 이상 목표처리일-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CB' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 500000  THEN 1 ELSE 0 END)*3 AS DATA2_DT_BL  <!--보상 50만원 미만 목표처리일-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CB' AND A.PROC_DTM IS NOT NULL THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN SUBSTR(A.ACPN_DTM, 0, 8) AND SUBSTR(A.PROC_DTM, 0, 8) AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA2_DT_REAL
            <!--시설 목표처리일 2 /보상50이상 5 /50미만 3       -->         
            ,SUM(CASE WHEN I.SMLCLAS_CD='CC' THEN (SUBSTR(A.PROC_DTM, 0, 8) - SUBSTR(A.ACPN_DTM, 0, 8)) ELSE 0 END) AS DATA3_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CC' THEN 1 ELSE 0 END) AS DATA3_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CC' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*1 AS DATA3_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CC' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 500000  THEN 1 ELSE 0 END)*5 AS DATA3_DT_BH
            ,SUM(CASE WHEN I.SMLCLAS_CD='CC' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 500000  THEN 1 ELSE 0 END)*3 AS DATA3_DT_BL 
            ,SUM(CASE WHEN I.SMLCLAS_CD='CC' AND A.PROC_DTM IS NOT NULL THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN SUBSTR(A.ACPN_DTM, 0, 8) AND SUBSTR(A.PROC_DTM, 0, 8) AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA3_DT_REAL
            <!--가격 목표처리일 2 /보상50이상 5 /50미만 3         -->                         
            ,SUM(CASE WHEN I.SMLCLAS_CD='CD' THEN (SUBSTR(A.PROC_DTM, 0, 8) - SUBSTR(A.ACPN_DTM, 0, 8)) ELSE 0 END) AS DATA4_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CD' THEN 1 ELSE 0 END) AS DATA4_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CD' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*1 AS DATA4_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CD' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 500000  THEN 1 ELSE 0 END)*5 AS DATA4_DT_BH
            ,SUM(CASE WHEN I.SMLCLAS_CD='CD' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 500000  THEN 1 ELSE 0 END)*3 AS DATA4_DT_BL
            ,SUM(CASE WHEN I.SMLCLAS_CD='CD' AND A.PROC_DTM IS NOT NULL THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN SUBSTR(A.ACPN_DTM, 0, 8) AND SUBSTR(A.PROC_DTM, 0, 8) AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA4_DT_REAL
            <!--탱크로리 목표처리일 2 /보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CE' THEN (SUBSTR(A.PROC_DTM, 0, 8) - SUBSTR(A.ACPN_DTM, 0, 8)) ELSE 0 END) AS DATA5_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CE' THEN 1 ELSE 0 END) AS DATA5_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CE' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*1 AS DATA5_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CE' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 500000  THEN 1 ELSE 0 END)*5 AS DATA5_DT_BH 
            ,SUM(CASE WHEN I.SMLCLAS_CD='CE' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 500000  THEN 1 ELSE 0 END)*3 AS DATA5_DT_BL  
            ,SUM(CASE WHEN I.SMLCLAS_CD='CE' AND A.PROC_DTM IS NOT NULL THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN SUBSTR(A.ACPN_DTM, 0, 8) AND SUBSTR(A.PROC_DTM, 0, 8) AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA5_DT_REAL
            <!--기타 목표처리일 2 /보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CG' THEN (SUBSTR(A.PROC_DTM, 0, 8) - SUBSTR(A.ACPN_DTM, 0, 8)) ELSE 0 END) AS DATA6_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CG' THEN 1 ELSE 0 END) AS DATA6_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CG' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*1 AS DATA6_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CG' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 500000  THEN 1 ELSE 0 END)*5 AS DATA6_DT_BH 
            ,SUM(CASE WHEN I.SMLCLAS_CD='CG' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 500000  THEN 1 ELSE 0 END)*3 AS DATA6_DT_BL  
            ,SUM(CASE WHEN I.SMLCLAS_CD='CG' AND A.PROC_DTM IS NOT NULL THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN SUBSTR(A.ACPN_DTM, 0, 8) AND SUBSTR(A.PROC_DTM, 0, 8) AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA6_DT_REAL
            <!--신용카드 목표처리일 2 /보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CH' THEN (SUBSTR(A.PROC_DTM, 0, 8) - SUBSTR(A.ACPN_DTM, 0, 8)) ELSE 0 END) AS DATA7_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CH' THEN 1 ELSE 0 END) AS DATA7_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CH' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*1 AS DATA7_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CH' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 500000  THEN 1 ELSE 0 END)*5 AS DATA7_DT_BH
            ,SUM(CASE WHEN I.SMLCLAS_CD='CH' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 500000  THEN 1 ELSE 0 END)*3 AS DATA7_DT_BL  
            ,SUM(CASE WHEN I.SMLCLAS_CD='CH' AND A.PROC_DTM IS NOT NULL THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN SUBSTR(A.ACPN_DTM, 0, 8) AND SUBSTR(A.PROC_DTM, 0, 8) AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA7_DT_REAL
            <!--세차관련 목표처리일 3/보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CI' THEN (SUBSTR(A.PROC_DTM, 0, 8) - SUBSTR(A.ACPN_DTM, 0, 8)) ELSE 0 END) AS DATA8_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CI' THEN 1 ELSE 0 END) AS DATA8_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CI' THEN 1 ELSE 0 END)* 3 AS DATA8_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CI' AND A.PROC_DTM IS NOT NULL THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN SUBSTR(A.ACPN_DTM, 0, 8) AND SUBSTR(A.PROC_DTM, 0, 8) AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA8_DT_REAL
            <!--혼유 목표처리일 2 /보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CK' THEN (SUBSTR(A.PROC_DTM, 0, 8) - SUBSTR(A.ACPN_DTM, 0, 8)) ELSE 0 END) AS DATA9_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CK' THEN 1 ELSE 0 END) AS DATA9_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CK' THEN 1 ELSE 0 END)*5 AS DATA9_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CK' AND A.PROC_DTM IS NOT NULL THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN SUBSTR(A.ACPN_DTM, 0, 8) AND SUBSTR(A.PROC_DTM, 0, 8) AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA9_DT_REAL
            <!--주유량 목표처리일 2 /보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CL' THEN (SUBSTR(A.PROC_DTM, 0, 8) - SUBSTR(A.ACPN_DTM, 0, 8)) ELSE 0 END) AS DATA10_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CL' THEN 1 ELSE 0 END) AS DATA10_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CL' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*1 AS DATA10_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CL' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 500000  THEN 1 ELSE 0 END)*5 AS DATA10_DT_BH
            ,SUM(CASE WHEN I.SMLCLAS_CD='CL' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 500000  THEN 1 ELSE 0 END)*3 AS DATA10_DT_BL  
            ,SUM(CASE WHEN I.SMLCLAS_CD='CL' AND A.PROC_DTM IS NOT NULL THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN SUBSTR(A.ACPN_DTM, 0, 8) AND SUBSTR(A.PROC_DTM, 0, 8) AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA10_DT_REAL
            <!--DBO보험 목표처리일 2 /보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CN' THEN (SUBSTR(A.PROC_DTM, 0, 8) - SUBSTR(A.ACPN_DTM, 0, 8)) ELSE 0 END) AS DATA11_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CN' THEN 1 ELSE 0 END) AS DATA11_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CN' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*1 AS DATA11_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CN' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 500000  THEN 1 ELSE 0 END)*5 AS DATA11_DT_BH
            ,SUM(CASE WHEN I.SMLCLAS_CD='CN' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 500000  THEN 1 ELSE 0 END)*3 AS DATA11_DT_BL 
            ,SUM(CASE WHEN I.SMLCLAS_CD='CN' AND A.PROC_DTM IS NOT NULL THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN SUBSTR(A.ACPN_DTM, 0, 8) AND SUBSTR(A.PROC_DTM, 0, 8) AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA11_DT_REAL
            <!--보너스카드 목표처리일 2 /보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CO' THEN (SUBSTR(A.PROC_DTM, 0, 8) - SUBSTR(A.ACPN_DTM, 0, 8)) ELSE 0 END) AS DATA12_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CO' THEN 1 ELSE 0 END) AS DATA12_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CO' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*1 AS DATA12_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CO' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 500000  THEN 1 ELSE 0 END)*5 AS DATA12_DT_BH 
            ,SUM(CASE WHEN I.SMLCLAS_CD='CO' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 500000  THEN 1 ELSE 0 END)*3 AS DATA12_DT_BL  
            ,SUM(CASE WHEN I.SMLCLAS_CD='CO' AND A.PROC_DTM IS NOT NULL THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN SUBSTR(A.ACPN_DTM, 0, 8) AND SUBSTR(A.PROC_DTM, 0, 8) AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA12_DT_REAL
           <!--DBO포인트 목표처리일 2 /보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CQ' THEN (SUBSTR(A.PROC_DTM, 0, 8) - SUBSTR(A.ACPN_DTM, 0, 8)) ELSE 0 END) AS DATA14_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CQ' THEN 1 ELSE 0 END) AS DATA14_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CQ' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*1 AS DATA14_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CQ' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 500000  THEN 1 ELSE 0 END)*5 AS DATA14_DT_BH 
            ,SUM(CASE WHEN I.SMLCLAS_CD='CQ' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 500000  THEN 1 ELSE 0 END)*3 AS DATA14_DT_BL 
            ,SUM(CASE WHEN I.SMLCLAS_CD='CQ' AND A.PROC_DTM IS NOT NULL THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN SUBSTR(A.ACPN_DTM, 0, 8) AND SUBSTR(A.PROC_DTM, 0, 8) AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA14_DT_REAL
            <!--GS통합 목표처리일 2 /보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CR' THEN (SUBSTR(A.PROC_DTM, 0, 8) - SUBSTR(A.ACPN_DTM, 0, 8)) ELSE 0 END) AS DATA15_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CR' THEN 1 ELSE 0 END) AS DATA15_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CR' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*1 AS DATA15_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CR' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 500000  THEN 1 ELSE 0 END)*5 AS DATA15_DT_BH
            ,SUM(CASE WHEN I.SMLCLAS_CD='CR' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 500000  THEN 1 ELSE 0 END)*3 AS DATA15_DT_BL  
            ,SUM(CASE WHEN I.SMLCLAS_CD='CR' AND A.PROC_DTM IS NOT NULL THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN SUBSTR(A.ACPN_DTM, 0, 8) AND SUBSTR(A.PROC_DTM, 0, 8) AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA15_DT_REAL
            <!--일시정지 목표처리일 2 /보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CT' THEN (SUBSTR(A.PROC_DTM, 0, 8) - SUBSTR(A.ACPN_DTM, 0, 8)) ELSE 0 END) AS DATA16_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CT' THEN 1 ELSE 0 END) AS DATA16_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CT' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*1 AS DATA16_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CT' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 500000  THEN 1 ELSE 0 END)*5 AS DATA16_DT_BH
            ,SUM(CASE WHEN I.SMLCLAS_CD='CT' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 500000  THEN 1 ELSE 0 END)*3 AS DATA16_DT_BL  
            ,SUM(CASE WHEN I.SMLCLAS_CD='CT' AND A.PROC_DTM IS NOT NULL THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN SUBSTR(A.ACPN_DTM, 0, 8) AND SUBSTR(A.PROC_DTM, 0, 8) AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA16_DT_REAL
            <!--만족도-->
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.ATTD_SFT_CD ='D' THEN 100 ELSE 0 END)) AS COUNT_A1
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.ATTD_SFT_CD ='A' THEN 80 ELSE 0 END)) AS COUNT_A2
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.ATTD_SFT_CD ='B' THEN 60 ELSE 0 END)) AS COUNT_A3
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.ATTD_SFT_CD ='C' THEN 40 ELSE 0 END)) AS COUNT_A4
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.ATTD_SFT_CD ='E' THEN 20 ELSE 0 END)) AS COUNT_A5
            ,(SUM(CASE WHEN C.ATTD_SFT_CD IS NOT NULL THEN 1 ELSE 0 END)) AS COUNT_A6
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.RSLT_SFT_CD ='D' THEN 100 ELSE 0 END)) AS COUNT_B1
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.RSLT_SFT_CD ='A' THEN 80 ELSE 0 END)) AS COUNT_B2
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.RSLT_SFT_CD ='B' THEN 60 ELSE 0 END)) AS COUNT_B3
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.RSLT_SFT_CD ='C' THEN 40 ELSE 0 END)) AS COUNT_B4
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.RSLT_SFT_CD ='E' THEN 20 ELSE 0 END)) AS COUNT_B5
            ,(SUM(CASE WHEN C.RSLT_SFT_CD IS NOT NULL THEN 1 ELSE 0 END)) AS COUNT_B6        
               
	        FROM TBL_DSFT_ACPN_PROC A							       		   
			        LEFT JOIN TBL_HC_HIST C
			               ON A.DSFT_ACPN_SEQ_NO = C.DSFT_ACPN_SEQ_NO		  
			        LEFT JOIN TBL_CRPN_CUST_BASE D
			       		   ON A.ORGN_PTR_ST_CD = D.CUST_ID        	    	  
			        LEFT JOIN TBL_USR B
			       		   ON A.DSPSR_ID = B.USR_ID 
			        LEFT JOIN TBL_HR_EMP_CD F
			       		   ON A.DSPSR_ID = F.EMP_NO
			        LEFT JOIN TBL_HR_DEPT_CD G 
			       		   ON F.BLNG_DEPT_CD = G.DEPT_CD
			        LEFT JOIN TBL_SAP_CD H	
			       		   ON (A.ORGN_ENTR_DV_CD = H.CD_ID AND H.CD_CLAS_CD = '1')	
			       LEFT JOIN TBL_UNFYCD_SUBCLAS I
                              ON A.DSFT_TAXN_TYP_CD = I.SUBCLAS_CD1
                    LEFT JOIN TBL_UNFYCD_SMLCLAS J
                              ON J.SMLCLAS_CD = I.SMLCLAS_CD    
			       		   
			WHERE 1=1
					<!-- AND  (G.HGRK_DEPT_CD IS NULL OR G.HGRK_DEPT_CD NOT IN (SELECT HGRK_DEPT_CD FROM TBL_HR_DEPT_CD_AFTER WHERE USE_YN = 'Y'))  -->
					<!-- AND A.PROC_DTM IS NOT NULL -->
					AND (A.DEL_YN = 'N' OR A.DEL_YN IS NULL)
					AND  DSPSR_CHRG_DEPT_CD IN('ICCS') <!-- ICCS에서 처리된 건들 불만 상담원 일반 상담원 파트장 포함 -->
					AND J.LRGCLAS_CD = 'NW146'			

	       		<dynamic>
	       			<!-- 년도별 -->   				    	
		    	    <isEqual property="cmb_gubun" compareValue="1">              
		                and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'                                                                  
		            </isEqual>
		            <!--  -->
		            <isEqual property="cmb_gubun" compareValue="2">
		            	<isEmpty property="cmb_half">
		            		and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'
		            	</isEmpty>              
		                <isEqual property="cmb_half" compareValue="1">
		                	and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0632000000'                                                                  
						</isEqual>	 
						<isEqual property="cmb_half" compareValue="2">
							and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '1232000000'
						</isEqual>	 
		            </isEqual>	 
		            <isEqual property="cmb_gubun" compareValue="3"> 
		            	<isEmpty>
							and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'	            	
		            	</isEmpty>    
		           		<isEqual property="cmb_qua" compareValue="1">
		           			and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0332000000'   
		           	  	</isEqual>
		           	  	<isEqual property="cmb_qua" compareValue="2">
		           	   		and A.ACPN_DTM between #time_key# || '0400000000' and #time_key# || '0632000000'   
		           	  	</isEqual>	 
		           	  	<isEqual property="cmb_qua" compareValue="3">
		           	   		and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '0932000000'   
		           	  	</isEqual>	 
	           	  		<isEqual property="cmb_qua" compareValue="4">
		           	   		and A.ACPN_DTM between #time_key# || '1000000000' and #time_key# || '1232000000'   
		           	  	</isEqual>	 	 
	            	</isEqual>	 				            
		    	 	<isEqual property="cmb_gubun" compareValue="4">              
		            	and A.ACPN_DTM between #time_key# || '00000000' and #time_key# || '32000000'                                                                  
		         	</isEqual>	
		    	 	<isEqual property="cmb_gubun" compareValue="5">              
		                and A.ACPN_DTM between #time_key# || '000000' and #time_key# || '240000'                                                                  
		         	</isEqual>
				
					<!-- 불만유형이 전체일 때는 두가지 경우 존재(전체, 품질&혼유)		-->				
					<isEmpty property="dsft_typ_cd">
						<isEqual property="dsft_typ_tot_gbn" compareValue="2">
							AND A.DSFT_TYP_CD IN ('CA','CK')
						</isEqual>
					</isEmpty>					
				  	<isNotEmpty prepend="AND" property="dsft_typ_cd">				<!-- 불만유형		-->
				    	A.DSFT_TYP_CD = #dsft_typ_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dsft_taxn_typ_cd">			<!-- 불만세부유형		-->
				    	A.DSFT_TAXN_TYP_CD = #dsft_taxn_typ_cd#
				  	</isNotEmpty>
			  		<isNotEmpty prepend="AND" property="orgn_ptr_st_cd">			<!-- 불만발생업체코드(가맹점SAP코드) -->
					    A.ORGN_PTR_ST_CD = #orgn_ptr_st_cd#
				  	</isNotEmpty>
				    <isNotEmpty prepend="AND" property="conn_chnl_kind_cd">			<!-- 접촉채널	-->
					    A.CONN_CHNL_KIND_CD = #conn_chnl_kind_cd#
				    </isNotEmpty>			  	
				  	<isNotEmpty prepend="AND" property="hgrk_dept_cd">				<!-- 부문/본부 -->
					    G.HGRK_DEPT_CD = #hgrk_dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dept_cd">					<!-- 처리팀 -->
					    G.DEPT_CD = #dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dspsr_id_nm">				<!-- 처리자명 		-->
					    (B.USR_NM LIKE '%'|| #dspsr_id_nm# ||'%' OR F.EMP_NM LIKE '%'|| #dspsr_id_nm# ||'%')
				  	</isNotEmpty>
			 		<isEqual property="hc_yn" compareValue="Y"> 					<!-- 해피콜여부  -->
			 			AND A.HC_YN = 'Y'
			 		</isEqual>
				 	<isEqual property="hc_yn" compareValue="N"> 					<!-- 해피콜여부  -->
				 		AND (A.HC_YN = 'N' OR A.HC_YN IS NULL)
				 	</isEqual>
				  	<isNotEmpty prepend="AND" property="attd_sft_cd">				<!-- 태도만족도 		-->
				  		(A.HC_YN = 'Y' AND C.ATTD_SFT_CD = #attd_sft_cd#)
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="rslt_sft_cd">				<!-- 결과만족도 		-->
				  		(A.HC_YN = 'Y' AND C.RSLT_SFT_CD = #rslt_sft_cd#)
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="hc_uabl_rsn_cd">			<!-- 해피콜불가사유		-->
				  		A.HC_UABL_RSN_CD = #hc_uabl_rsn_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="prdct_cd">					<!-- 불만제품 		-->
					    A.PRDCT_CD = #prdct_cd#
				  	</isNotEmpty>			  				 	
				  	<isNotEmpty prepend="AND" property="prblm_penom_cd">			<!-- 현상 		-->
					    A.PRBLM_PENOM_CD = #prblm_penom_cd#
				  	</isNotEmpty>
			 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="1">  	<!-- 시료품질 점검결과		-->
			 			AND	A.VHCL_QLIT_DSFT_CAUS_CD_CUST IS NOT NULL
			 	  	</isEqual>
			 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="2">   	<!-- 시료품질 점검결과		-->
			 	  		AND	A.VHCL_QLIT_DSFT_CAUS_CD_PTR_ST IS NOT NULL
			 	  	</isEqual>
				  	<isNotEmpty prepend="AND" property="vhcl_biztr_qlit_dsft_typ_cd">			<!-- 품질불만유형 		-->
					    A.VHCL_BIZTR_QLIT_DSFT_TYP_CD = #vhcl_biztr_qlit_dsft_typ_cd#
				  	</isNotEmpty>
				 	<isEqual property="vhcl_biztr_yn" compareValue="Y"> 			<!-- Kixx 품질서비스차량 출동 -->
				 		AND A.VHCL_BIZTR_YN = 'Y'
				 	</isEqual>
				 	<isEqual property="vhcl_biztr_yn" compareValue="N"> 			<!-- Kixx 품질서비스차량 출동 -->
				 		AND (A.VHCL_BIZTR_YN = 'N' OR A.VHCL_BIZTR_YN IS NULL)
				 	</isEqual>		 	  	
				 	<isEqual property="rwrd_yn" compareValue="Y"> 					<!-- 보상여부 -->
				 		AND A.RWRD_YN = 'Y'
				 	</isEqual>
				 	<isEqual property="rwrd_yn" compareValue="N"> 					<!-- 보상여부 -->
				 		AND (A.RWRD_YN = 'N' OR A.RWRD_YN IS NULL)
				 	</isEqual>
				 	
				 	<isEqual property="cps_amt_gbn" compareValue="1"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 주유소 보상금 1만원 미만-->
				 			AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 주유소 보상금 1만원 ~ 10만원-->
				 			AND (A.PTR_ST_CPS_AMT <![CDATA[>=]]> 10000 AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 주유소 보상금 10만원 초과-->
				 			AND A.PTR_ST_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	<isEqual property="cps_amt_gbn" compareValue="2"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 회사 보상금 1만원 미만-->
				 			AND A.CO_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 회사 보상금 1만원 ~ 10만원-->
				 			AND (A.CO_CPS_AMT <![CDATA[>=]]> 10000 AND A.CO_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 회사 보상금 10만원 초과-->
				 			AND A.CO_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	<isEqual property="cps_amt_gbn" compareValue="3"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 총 보상금 1만원 미만-->
				 			AND A.TOT_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 총 보상금 1만원 ~ 10만원-->
				 			AND (A.TOT_CPS_AMT <![CDATA[>=]]> 10000 AND A.TOT_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 총 보상금 10만원 초과-->
				 			AND A.TOT_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	
					<!--처리자구분에 체크항목이 하나도 없는 경우, 전체데이터가 조회된다.-->
				 	<isEqual property="cmp_handler" compareValue="1">   
				 		AND	A.DSPSR_YN_CNSLR = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="2">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="3">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="4">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="5">   
				 		AND	A.DSPSR_YN_DSFT_CHRG = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="6">   
				 		AND	A.DSPSR_YN_PART_HD = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="7">   
				 		AND	(A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
	       		</dynamic> 
		GROUP BY G.HGRK_DEPT_CDNM,G.HGRK_DEPT_CD, G.DEPT_CD,G.DEPT_CDNM
	
	UNION ALL
			
	        SELECT 	 
				 '기타부문' 		AS HGRK_DEPT_CDNM
				,'기타' 			AS DSPSR_CHRG_DEPT
				,'ZZZZZ' 		AS DEPT_CD
                        <!--품질 목표처리일 2 /보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CA' THEN (SUBSTR(A.PROC_DTM, 0, 8) - SUBSTR(A.ACPN_DTM, 0, 8)) ELSE 0 END) AS DATA1_DT <!--처리일-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CA' THEN 1 ELSE 0 END) AS DATA1_CNT <!--건수-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CA' THEN 1 ELSE 0 END)*5 AS DATA1_DT_M <!--목표일-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CA' AND A.PROC_DTM IS NOT NULL THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN SUBSTR(A.ACPN_DTM, 0, 8) AND SUBSTR(A.PROC_DTM, 0, 8) AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA1_DT_REAL <!--실제처리일-->
            <!--서비스 목표처리일 2 // 보상50이상 5 //50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CB' THEN (SUBSTR(A.PROC_DTM, 0, 8) - SUBSTR(A.ACPN_DTM, 0, 8)) ELSE 0 END) AS DATA2_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CB' THEN 1 ELSE 0 END) AS DATA2_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CB' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*1 AS DATA2_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CB' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 500000  THEN 1 ELSE 0 END)*5 AS DATA2_DT_BH <!--보상 50만원 이상 목표처리일-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CB' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 500000  THEN 1 ELSE 0 END)*3 AS DATA2_DT_BL  <!--보상 50만원 미만 목표처리일-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CB' AND A.PROC_DTM IS NOT NULL THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN SUBSTR(A.ACPN_DTM, 0, 8) AND SUBSTR(A.PROC_DTM, 0, 8) AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA2_DT_REAL
            <!--시설 목표처리일 2 /보상50이상 5 /50미만 3       -->         
            ,SUM(CASE WHEN I.SMLCLAS_CD='CC' THEN (SUBSTR(A.PROC_DTM, 0, 8) - SUBSTR(A.ACPN_DTM, 0, 8)) ELSE 0 END) AS DATA3_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CC' THEN 1 ELSE 0 END) AS DATA3_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CC' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*1 AS DATA3_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CC' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 500000  THEN 1 ELSE 0 END)*5 AS DATA3_DT_BH
            ,SUM(CASE WHEN I.SMLCLAS_CD='CC' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 500000  THEN 1 ELSE 0 END)*3 AS DATA3_DT_BL 
            ,SUM(CASE WHEN I.SMLCLAS_CD='CC' AND A.PROC_DTM IS NOT NULL THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN SUBSTR(A.ACPN_DTM, 0, 8) AND SUBSTR(A.PROC_DTM, 0, 8) AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA3_DT_REAL
            <!--가격 목표처리일 2 /보상50이상 5 /50미만 3         -->                         
            ,SUM(CASE WHEN I.SMLCLAS_CD='CD' THEN (SUBSTR(A.PROC_DTM, 0, 8) - SUBSTR(A.ACPN_DTM, 0, 8)) ELSE 0 END) AS DATA4_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CD' THEN 1 ELSE 0 END) AS DATA4_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CD' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*1 AS DATA4_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CD' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 500000  THEN 1 ELSE 0 END)*5 AS DATA4_DT_BH
            ,SUM(CASE WHEN I.SMLCLAS_CD='CD' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 500000  THEN 1 ELSE 0 END)*3 AS DATA4_DT_BL
            ,SUM(CASE WHEN I.SMLCLAS_CD='CD' AND A.PROC_DTM IS NOT NULL THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN SUBSTR(A.ACPN_DTM, 0, 8) AND SUBSTR(A.PROC_DTM, 0, 8) AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA4_DT_REAL
            <!--탱크로리 목표처리일 2 /보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CE' THEN (SUBSTR(A.PROC_DTM, 0, 8) - SUBSTR(A.ACPN_DTM, 0, 8)) ELSE 0 END) AS DATA5_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CE' THEN 1 ELSE 0 END) AS DATA5_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CE' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*1 AS DATA5_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CE' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 500000  THEN 1 ELSE 0 END)*5 AS DATA5_DT_BH 
            ,SUM(CASE WHEN I.SMLCLAS_CD='CE' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 500000  THEN 1 ELSE 0 END)*3 AS DATA5_DT_BL  
            ,SUM(CASE WHEN I.SMLCLAS_CD='CE' AND A.PROC_DTM IS NOT NULL THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN SUBSTR(A.ACPN_DTM, 0, 8) AND SUBSTR(A.PROC_DTM, 0, 8) AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA5_DT_REAL
            <!--기타 목표처리일 2 /보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CG' THEN (SUBSTR(A.PROC_DTM, 0, 8) - SUBSTR(A.ACPN_DTM, 0, 8)) ELSE 0 END) AS DATA6_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CG' THEN 1 ELSE 0 END) AS DATA6_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CG' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*1 AS DATA6_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CG' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 500000  THEN 1 ELSE 0 END)*5 AS DATA6_DT_BH 
            ,SUM(CASE WHEN I.SMLCLAS_CD='CG' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 500000  THEN 1 ELSE 0 END)*3 AS DATA6_DT_BL  
            ,SUM(CASE WHEN I.SMLCLAS_CD='CG' AND A.PROC_DTM IS NOT NULL THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN SUBSTR(A.ACPN_DTM, 0, 8) AND SUBSTR(A.PROC_DTM, 0, 8) AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA6_DT_REAL
            <!--신용카드 목표처리일 2 /보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CH' THEN (SUBSTR(A.PROC_DTM, 0, 8) - SUBSTR(A.ACPN_DTM, 0, 8)) ELSE 0 END) AS DATA7_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CH' THEN 1 ELSE 0 END) AS DATA7_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CH' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*1 AS DATA7_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CH' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 500000  THEN 1 ELSE 0 END)*5 AS DATA7_DT_BH
            ,SUM(CASE WHEN I.SMLCLAS_CD='CH' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 500000  THEN 1 ELSE 0 END)*3 AS DATA7_DT_BL  
            ,SUM(CASE WHEN I.SMLCLAS_CD='CH' AND A.PROC_DTM IS NOT NULL THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN SUBSTR(A.ACPN_DTM, 0, 8) AND SUBSTR(A.PROC_DTM, 0, 8) AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA7_DT_REAL
            <!--세차관련 목표처리일 3/보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CI' THEN (SUBSTR(A.PROC_DTM, 0, 8) - SUBSTR(A.ACPN_DTM, 0, 8)) ELSE 0 END) AS DATA8_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CI' THEN 1 ELSE 0 END) AS DATA8_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CI' THEN 1 ELSE 0 END)* 3 AS DATA8_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CI' AND A.PROC_DTM IS NOT NULL THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN SUBSTR(A.ACPN_DTM, 0, 8) AND SUBSTR(A.PROC_DTM, 0, 8) AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA8_DT_REAL
            <!--혼유 목표처리일 2 /보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CK' THEN (SUBSTR(A.PROC_DTM, 0, 8) - SUBSTR(A.ACPN_DTM, 0, 8)) ELSE 0 END) AS DATA9_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CK' THEN 1 ELSE 0 END) AS DATA9_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CK' THEN 1 ELSE 0 END)*5 AS DATA9_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CK' AND A.PROC_DTM IS NOT NULL THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN SUBSTR(A.ACPN_DTM, 0, 8) AND SUBSTR(A.PROC_DTM, 0, 8) AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA9_DT_REAL
            <!--주유량 목표처리일 2 /보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CL' THEN (SUBSTR(A.PROC_DTM, 0, 8) - SUBSTR(A.ACPN_DTM, 0, 8)) ELSE 0 END) AS DATA10_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CL' THEN 1 ELSE 0 END) AS DATA10_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CL' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*1 AS DATA10_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CL' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 500000  THEN 1 ELSE 0 END)*5 AS DATA10_DT_BH
            ,SUM(CASE WHEN I.SMLCLAS_CD='CL' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 500000  THEN 1 ELSE 0 END)*3 AS DATA10_DT_BL  
            ,SUM(CASE WHEN I.SMLCLAS_CD='CL' AND A.PROC_DTM IS NOT NULL THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN SUBSTR(A.ACPN_DTM, 0, 8) AND SUBSTR(A.PROC_DTM, 0, 8) AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA10_DT_REAL
            <!--DBO보험 목표처리일 2 /보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CN' THEN (SUBSTR(A.PROC_DTM, 0, 8) - SUBSTR(A.ACPN_DTM, 0, 8)) ELSE 0 END) AS DATA11_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CN' THEN 1 ELSE 0 END) AS DATA11_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CN' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*1 AS DATA11_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CN' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 500000  THEN 1 ELSE 0 END)*5 AS DATA11_DT_BH
            ,SUM(CASE WHEN I.SMLCLAS_CD='CN' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 500000  THEN 1 ELSE 0 END)*3 AS DATA11_DT_BL 
            ,SUM(CASE WHEN I.SMLCLAS_CD='CN' AND A.PROC_DTM IS NOT NULL THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN SUBSTR(A.ACPN_DTM, 0, 8) AND SUBSTR(A.PROC_DTM, 0, 8) AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA11_DT_REAL
            <!--보너스카드 목표처리일 2 /보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CO' THEN (SUBSTR(A.PROC_DTM, 0, 8) - SUBSTR(A.ACPN_DTM, 0, 8)) ELSE 0 END) AS DATA12_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CO' THEN 1 ELSE 0 END) AS DATA12_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CO' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*1 AS DATA12_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CO' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 500000  THEN 1 ELSE 0 END)*5 AS DATA12_DT_BH 
            ,SUM(CASE WHEN I.SMLCLAS_CD='CO' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 500000  THEN 1 ELSE 0 END)*3 AS DATA12_DT_BL  
            ,SUM(CASE WHEN I.SMLCLAS_CD='CO' AND A.PROC_DTM IS NOT NULL THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN SUBSTR(A.ACPN_DTM, 0, 8) AND SUBSTR(A.PROC_DTM, 0, 8) AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA12_DT_REAL           
            <!--DBO포인트 목표처리일 2 /보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CQ' THEN (SUBSTR(A.PROC_DTM, 0, 8) - SUBSTR(A.ACPN_DTM, 0, 8)) ELSE 0 END) AS DATA14_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CQ' THEN 1 ELSE 0 END) AS DATA14_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CQ' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*1 AS DATA14_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CQ' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 500000  THEN 1 ELSE 0 END)*5 AS DATA14_DT_BH 
            ,SUM(CASE WHEN I.SMLCLAS_CD='CQ' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 500000  THEN 1 ELSE 0 END)*3 AS DATA14_DT_BL 
            ,SUM(CASE WHEN I.SMLCLAS_CD='CQ' AND A.PROC_DTM IS NOT NULL THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN SUBSTR(A.ACPN_DTM, 0, 8) AND SUBSTR(A.PROC_DTM, 0, 8) AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA14_DT_REAL
            <!--GS통합 목표처리일 2 /보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CR' THEN (SUBSTR(A.PROC_DTM, 0, 8) - SUBSTR(A.ACPN_DTM, 0, 8)) ELSE 0 END) AS DATA15_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CR' THEN 1 ELSE 0 END) AS DATA15_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CR' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*1 AS DATA15_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CR' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 500000  THEN 1 ELSE 0 END)*5 AS DATA15_DT_BH
            ,SUM(CASE WHEN I.SMLCLAS_CD='CR' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 500000  THEN 1 ELSE 0 END)*3 AS DATA15_DT_BL  
            ,SUM(CASE WHEN I.SMLCLAS_CD='CR' AND A.PROC_DTM IS NOT NULL THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN SUBSTR(A.ACPN_DTM, 0, 8) AND SUBSTR(A.PROC_DTM, 0, 8) AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA15_DT_REAL
            <!--일시정지 목표처리일 2 /보상50이상 5 /50미만 3-->
            ,SUM(CASE WHEN I.SMLCLAS_CD='CT' THEN (SUBSTR(A.PROC_DTM, 0, 8) - SUBSTR(A.ACPN_DTM, 0, 8)) ELSE 0 END) AS DATA16_DT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CT' THEN 1 ELSE 0 END) AS DATA16_CNT
            ,SUM(CASE WHEN I.SMLCLAS_CD='CT' AND A.RWRD_YN = 'N' THEN 1 ELSE 0 END)*1 AS DATA16_DT_M
            ,SUM(CASE WHEN I.SMLCLAS_CD='CT' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[>=]]> 500000  THEN 1 ELSE 0 END)*5 AS DATA16_DT_BH
            ,SUM(CASE WHEN I.SMLCLAS_CD='CT' AND A.RWRD_YN = 'Y' AND A.TOT_CPS_AMT <![CDATA[<]]> 500000  THEN 1 ELSE 0 END)*3 AS DATA16_DT_BL  
            ,SUM(CASE WHEN I.SMLCLAS_CD='CT' AND A.PROC_DTM IS NOT NULL THEN (SELECT COUNT(*)-1 FROM TBL_BUSSDD_INFO B WHERE B.BASC_DT BETWEEN SUBSTR(A.ACPN_DTM, 0, 8) AND SUBSTR(A.PROC_DTM, 0, 8) AND B.GRP_CD = 'BNS' AND B.HLD_YN ='N') ELSE 0 END) AS DATA16_DT_REAL
            <!--만족도-->
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.ATTD_SFT_CD ='D' THEN 100 ELSE 0 END)) AS COUNT_A1
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.ATTD_SFT_CD ='A' THEN 80 ELSE 0 END)) AS COUNT_A2
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.ATTD_SFT_CD ='B' THEN 60 ELSE 0 END)) AS COUNT_A3
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.ATTD_SFT_CD ='C' THEN 40 ELSE 0 END)) AS COUNT_A4
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.ATTD_SFT_CD ='E' THEN 20 ELSE 0 END)) AS COUNT_A5
            ,(SUM(CASE WHEN C.ATTD_SFT_CD IS NOT NULL THEN 1 ELSE 0 END)) AS COUNT_A6
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.RSLT_SFT_CD ='D' THEN 100 ELSE 0 END)) AS COUNT_B1
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.RSLT_SFT_CD ='A' THEN 80 ELSE 0 END)) AS COUNT_B2
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.RSLT_SFT_CD ='B' THEN 60 ELSE 0 END)) AS COUNT_B3
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.RSLT_SFT_CD ='C' THEN 40 ELSE 0 END)) AS COUNT_B4
            ,(SUM(CASE WHEN A.HC_YN ='Y' AND C.RSLT_SFT_CD ='E' THEN 20 ELSE 0 END)) AS COUNT_B5
            ,(SUM(CASE WHEN C.RSLT_SFT_CD IS NOT NULL THEN 1 ELSE 0 END)) AS COUNT_B6         
              
	        FROM TBL_DSFT_ACPN_PROC A							       		   
			        LEFT JOIN TBL_HC_HIST C
			               ON A.DSFT_ACPN_SEQ_NO = C.DSFT_ACPN_SEQ_NO		  
			        LEFT JOIN TBL_CRPN_CUST_BASE D
			       		   ON A.ORGN_PTR_ST_CD = D.CUST_ID        	    	  
			        LEFT JOIN TBL_USR B
			       		   ON A.DSPSR_ID = B.USR_ID 
			        LEFT JOIN TBL_HR_EMP_CD F
			       		   ON A.DSPSR_ID = F.EMP_NO
			        LEFT JOIN TBL_HR_DEPT_CD G 
			       		   ON F.BLNG_DEPT_CD = G.DEPT_CD
			        LEFT JOIN TBL_SAP_CD H	
			       		   ON (A.ORGN_ENTR_DV_CD = H.CD_ID AND H.CD_CLAS_CD = '1')	
			        LEFT JOIN TBL_UNFYCD_SUBCLAS I
                              ON A.DSFT_TAXN_TYP_CD = I.SUBCLAS_CD1
                    LEFT JOIN TBL_UNFYCD_SMLCLAS J
                              ON J.SMLCLAS_CD = I.SMLCLAS_CD    
			       		   
			WHERE 1=1
			<!-- (G.HGRK_DEPT_CD IS NULL OR G.HGRK_DEPT_CD NOT IN (SELECT HGRK_DEPT_CD FROM TBL_HR_DEPT_CD_AFTER WHERE USE_YN = 'Y')) 추가 201712 -->
			<!-- 		AND A.PROC_DTM IS NOT NULL  미완료건도 통계 반영-->
					AND (A.DEL_YN = 'N' OR A.DEL_YN IS NULL)
					AND A.DSPSR_CHRG_DEPT_CD IS NULL
					AND J.LRGCLAS_CD = 'NW146' 	
					AND OB_CNTR_DV_CD IS NOT NULL <!-- TM센터 처리건은 기타로 -->				
	       		<dynamic>
	       			<!-- 년도별 -->   				    	
		    	    <isEqual property="cmb_gubun" compareValue="1">              
		                and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'                                                                  
		            </isEqual>
		            <!--  -->
		            <isEqual property="cmb_gubun" compareValue="2">
		            	<isEmpty property="cmb_half">
		            		and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'
		            	</isEmpty>              
		                <isEqual property="cmb_half" compareValue="1">
		                	and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0632000000'                                                                  
						</isEqual>	 
						<isEqual property="cmb_half" compareValue="2">
							and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '1232000000'
						</isEqual>	 
		            </isEqual>	 
		            <isEqual property="cmb_gubun" compareValue="3"> 
		            	<isEmpty>
							and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'	            	
		            	</isEmpty>    
		           		<isEqual property="cmb_qua" compareValue="1">
		           			and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0332000000'   
		           	  	</isEqual>
		           	  	<isEqual property="cmb_qua" compareValue="2">
		           	   		and A.ACPN_DTM between #time_key# || '0400000000' and #time_key# || '0632000000'   
		           	  	</isEqual>	 
		           	  	<isEqual property="cmb_qua" compareValue="3">
		           	   		and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '0932000000'   
		           	  	</isEqual>	 
	           	  		<isEqual property="cmb_qua" compareValue="4">
		           	   		and A.ACPN_DTM between #time_key# || '1000000000' and #time_key# || '1232000000'   
		           	  	</isEqual>	 	 
	            	</isEqual>	 				            
		    	 	<isEqual property="cmb_gubun" compareValue="4">              
		            	and A.ACPN_DTM between #time_key# || '00000000' and #time_key# || '32000000'                                                                  
		         	</isEqual>	
		    	 	<isEqual property="cmb_gubun" compareValue="5">              
		                and A.ACPN_DTM between #time_key# || '000000' and #time_key# || '240000'                                                                  
		         	</isEqual>
				
					<!-- 불만유형이 전체일 때는 두가지 경우 존재(전체, 품질&혼유)		-->				
					<isEmpty property="dsft_typ_cd">
						<isEqual property="dsft_typ_tot_gbn" compareValue="2">
							AND A.DSFT_TYP_CD IN ('CA','CK')
						</isEqual>
					</isEmpty>					
				  	<isNotEmpty prepend="AND" property="dsft_typ_cd">				<!-- 불만유형		-->
				    	A.DSFT_TYP_CD = #dsft_typ_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dsft_taxn_typ_cd">			<!-- 불만세부유형		-->
				    	A.DSFT_TAXN_TYP_CD = #dsft_taxn_typ_cd#
				  	</isNotEmpty>
			  		<isNotEmpty prepend="AND" property="orgn_ptr_st_cd">			<!-- 불만발생업체코드(가맹점SAP코드) -->
					    A.ORGN_PTR_ST_CD = #orgn_ptr_st_cd#
				  	</isNotEmpty>
				    <isNotEmpty prepend="AND" property="conn_chnl_kind_cd">			<!-- 접촉채널	-->
					    A.CONN_CHNL_KIND_CD = #conn_chnl_kind_cd#
				    </isNotEmpty>			  	
				  	<isNotEmpty prepend="AND" property="hgrk_dept_cd">				<!-- 부문/본부 -->
					    G.HGRK_DEPT_CD = #hgrk_dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dept_cd">					<!-- 처리팀 -->
					    G.DEPT_CD = #dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dspsr_id_nm">				<!-- 처리자명 		-->
					    (B.USR_NM LIKE '%'|| #dspsr_id_nm# ||'%' OR F.EMP_NM LIKE '%'|| #dspsr_id_nm# ||'%')
				  	</isNotEmpty>
			 		<isEqual property="hc_yn" compareValue="Y"> 					<!-- 해피콜여부  -->
			 			AND A.HC_YN = 'Y'
			 		</isEqual>
				 	<isEqual property="hc_yn" compareValue="N"> 					<!-- 해피콜여부  -->
				 		AND (A.HC_YN = 'N' OR A.HC_YN IS NULL)
				 	</isEqual>
				  	<isNotEmpty prepend="AND" property="attd_sft_cd">				<!-- 태도만족도 		-->
				  		(A.HC_YN = 'Y' AND C.ATTD_SFT_CD = #attd_sft_cd#)
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="rslt_sft_cd">				<!-- 결과만족도 		-->
				  		(A.HC_YN = 'Y' AND C.RSLT_SFT_CD = #rslt_sft_cd#)
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="hc_uabl_rsn_cd">			<!-- 해피콜불가사유		-->
				  		A.HC_UABL_RSN_CD = #hc_uabl_rsn_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="prdct_cd">					<!-- 불만제품 		-->
					    A.PRDCT_CD = #prdct_cd#
				  	</isNotEmpty>			  				 	
				  	<isNotEmpty prepend="AND" property="prblm_penom_cd">			<!-- 현상 		-->
					    A.PRBLM_PENOM_CD = #prblm_penom_cd#
				  	</isNotEmpty>
			 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="1">  	<!-- 시료품질 점검결과		-->
			 			AND	A.VHCL_QLIT_DSFT_CAUS_CD_CUST IS NOT NULL
			 	  	</isEqual>
			 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="2">   	<!-- 시료품질 점검결과		-->
			 	  		AND	A.VHCL_QLIT_DSFT_CAUS_CD_PTR_ST IS NOT NULL
			 	  	</isEqual>
				  	<isNotEmpty prepend="AND" property="vhcl_biztr_qlit_dsft_typ_cd">			<!-- 품질불만유형 		-->
					    A.VHCL_BIZTR_QLIT_DSFT_TYP_CD = #vhcl_biztr_qlit_dsft_typ_cd#
				  	</isNotEmpty>
				 	<isEqual property="vhcl_biztr_yn" compareValue="Y"> 			<!-- Kixx 품질서비스차량 출동 -->
				 		AND A.VHCL_BIZTR_YN = 'Y'
				 	</isEqual>
				 	<isEqual property="vhcl_biztr_yn" compareValue="N"> 			<!-- Kixx 품질서비스차량 출동 -->
				 		AND (A.VHCL_BIZTR_YN = 'N' OR A.VHCL_BIZTR_YN IS NULL)
				 	</isEqual>		 	  	
				 	<isEqual property="rwrd_yn" compareValue="Y"> 					<!-- 보상여부 -->
				 		AND A.RWRD_YN = 'Y'
				 	</isEqual>
				 	<isEqual property="rwrd_yn" compareValue="N"> 					<!-- 보상여부 -->
				 		AND (A.RWRD_YN = 'N' OR A.RWRD_YN IS NULL)
				 	</isEqual>
				 	
				 	<isEqual property="cps_amt_gbn" compareValue="1"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 주유소 보상금 1만원 미만-->
				 			AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 주유소 보상금 1만원 ~ 10만원-->
				 			AND (A.PTR_ST_CPS_AMT <![CDATA[>=]]> 10000 AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 주유소 보상금 10만원 초과-->
				 			AND A.PTR_ST_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	<isEqual property="cps_amt_gbn" compareValue="2"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 회사 보상금 1만원 미만-->
				 			AND A.CO_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 회사 보상금 1만원 ~ 10만원-->
				 			AND (A.CO_CPS_AMT <![CDATA[>=]]> 10000 AND A.CO_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 회사 보상금 10만원 초과-->
				 			AND A.CO_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	<isEqual property="cps_amt_gbn" compareValue="3"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 총 보상금 1만원 미만-->
				 			AND A.TOT_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 총 보상금 1만원 ~ 10만원-->
				 			AND (A.TOT_CPS_AMT <![CDATA[>=]]> 10000 AND A.TOT_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 총 보상금 10만원 초과-->
				 			AND A.TOT_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	
					<!--처리자구분에 체크항목이 하나도 없는 경우, 전체데이터가 조회된다.-->
				 	<isEqual property="cmp_handler" compareValue="1">   
				 		AND	A.DSPSR_YN_CNSLR = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="2">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="3">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="4">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="5">   
				 		AND	A.DSPSR_YN_DSFT_CHRG = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="6">   
				 		AND	A.DSPSR_YN_PART_HD = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="7">   
				 		AND	(A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
	       		</dynamic> 
	GROUP BY G.HGRK_DEPT_CDNM,G.HGRK_DEPT_CD, G.DEPT_CD,G.DEPT_CDNM
	
		) Q2
	
	ON Q1.DEPT_CD = Q2.DEPT_CD
	
	GROUP BY ROLLUP(Q1.HGRK_DEPT_CD,Q1.DEPT_CD)
	ORDER BY Q1.HGRK_DEPT_CD, Q1.DEPT_CD, MAX(Q1.DEPT_CDNM)
)  
 WHERE CNT_SUM > 0    <!-- 불만건수가 0건은 제외 -->
 	</select>
 	
	<!-- 불만처리 처리일수(조직별)-->
 	<select id="Get_CMP_BY_GRP_SELECT" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
		SELECT
		    NVL(A.DSPSR_CHRG_DEPT,'')	 AS DSPSR_CHRG_DEPT
		    ,A.Data1			AS DATA1
		    ,A.Data2			AS DATA2
		    ,A.Data3			AS DATA3
		    ,A.Data4			AS DATA4
		    ,A.Data5			AS DATA5
		    ,A.Data6			AS DATA6
		    ,A.Data7			AS DATA7
		    ,A.Data8			AS DATA8
		    ,A.Data9			AS DATA9
		    ,A.Data10			AS DATA10
		    ,A.Data11			AS DATA11
		    ,A.Data12			AS DATA12
		    ,A.Data13			AS DATA13
		    ,A.Data14			AS DATA14
		    ,A.Data15			AS DATA15
		    ,A.Data16			AS DATA16
		    ,A.Data1 + A.Data2 + A.Data3 + A.Data4 + A.Data5 +
		     A.Data6 + A.Data7 + A.Data8 + A.Data9 + A.Data10 +
		     A.Data11 + A.Data12 + A.Data13 + A.Data14 + A.Data15 + A.Data16    AS TOT_DATA     
		FROM  	
				(select 	 
		        	 A.DSPSR_CHRG_DEPT as DSPSR_CHRG_DEPT	
		        	,SUM(CASE WHEN TRUNC(TO_DATE(SUBSTR(A.PROC_DTM, 0, 8),'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) = 1 THEN 1 ELSE 0 END) AS Data1
		        	,SUM(CASE WHEN TRUNC(TO_DATE(SUBSTR(A.PROC_DTM, 0, 8),'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) = 2 THEN 1 ELSE 0 END) AS Data2
		        	,SUM(CASE WHEN TRUNC(TO_DATE(SUBSTR(A.PROC_DTM, 0, 8),'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) = 3 THEN 1 ELSE 0 END) AS Data3
		        	,SUM(CASE WHEN TRUNC(TO_DATE(SUBSTR(A.PROC_DTM, 0, 8),'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) = 4 THEN 1 ELSE 0 END) AS Data4
		        	,SUM(CASE WHEN TRUNC(TO_DATE(SUBSTR(A.PROC_DTM, 0, 8),'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) = 5 THEN 1 ELSE 0 END) AS Data5
		        	,SUM(CASE WHEN TRUNC(TO_DATE(SUBSTR(A.PROC_DTM, 0, 8),'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) = 6 THEN 1 ELSE 0 END) AS Data6
		        	,SUM(CASE WHEN TRUNC(TO_DATE(SUBSTR(A.PROC_DTM, 0, 8),'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) = 7 THEN 1 ELSE 0 END) AS Data7
		        	,SUM(CASE WHEN TRUNC(TO_DATE(SUBSTR(A.PROC_DTM, 0, 8),'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) = 8 THEN 1 ELSE 0 END) AS Data8
		        	,SUM(CASE WHEN TRUNC(TO_DATE(SUBSTR(A.PROC_DTM, 0, 8),'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) = 9 THEN 1 ELSE 0 END) AS Data9
		        	,SUM(CASE WHEN TRUNC(TO_DATE(SUBSTR(A.PROC_DTM, 0, 8),'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) = 10 THEN 1 ELSE 0 END) AS Data10
		        	,SUM(CASE WHEN TRUNC(TO_DATE(SUBSTR(A.PROC_DTM, 0, 8),'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) = 11 THEN 1 ELSE 0 END) AS Data11
		        	,SUM(CASE WHEN TRUNC(TO_DATE(SUBSTR(A.PROC_DTM, 0, 8),'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) = 12 THEN 1 ELSE 0 END) AS Data12
		        	,SUM(CASE WHEN TRUNC(TO_DATE(SUBSTR(A.PROC_DTM, 0, 8),'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) = 13 THEN 1 ELSE 0 END) AS Data13
		        	,SUM(CASE WHEN TRUNC(TO_DATE(SUBSTR(A.PROC_DTM, 0, 8),'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) = 14 THEN 1 ELSE 0 END) AS Data14
		        	,SUM(CASE WHEN TRUNC(TO_DATE(SUBSTR(A.PROC_DTM, 0, 8),'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) = 15 THEN 1 ELSE 0 END) AS Data15
		        	,SUM(CASE WHEN TRUNC(TO_DATE(SUBSTR(A.PROC_DTM, 0, 8),'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) <![CDATA[>]]> 15 THEN 1 ELSE 0 END) AS Data16
		
		        from TBL_DSFT_ACPN_PROC A						<!-- 불만 접수 처리 -->	       		   
				        LEFT JOIN TBL_HC_HIST C
				               ON A.DSFT_ACPN_SEQ_NO = C.DSFT_ACPN_SEQ_NO		  
				        LEFT JOIN TBL_CRPN_CUST_BASE D
				       		   ON A.ORGN_PTR_ST_CD = D.CUST_ID        	    	  
				        LEFT JOIN TBL_USR B
				       		   ON A.DSPSR_ID = B.USR_ID 
				        LEFT JOIN TBL_HR_EMP_CD F
				       		   ON A.DSPSR_ID = F.EMP_NO
				        LEFT JOIN TBL_HR_DEPT_CD G 
				       		   ON F.BLNG_DEPT_CD = G.DEPT_CD
				        LEFT JOIN TBL_SAP_CD H	
				       		   ON (A.ORGN_ENTR_DV_CD = H.CD_ID AND H.CD_CLAS_CD = '1')	
				        LEFT JOIN TBL_DSFT_TAXN_TYP_CD I
				       		   ON A.DSFT_TAXN_TYP_CD = I.DSFT_TAXN_TYP_CD
				       		   
				where A.PROC_DTM IS NOT NULL
					AND A.PROC_DTM IS NOT NULL				
					AND (A.DEL_YN = 'N' OR A.DEL_YN IS NULL)				
		       		<dynamic>
		       			<!-- 년도별 -->   				    	
			    	    <isEqual property="cmb_gubun" compareValue="1">              
			                and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'                                                                  
			            </isEqual>
			            <!--  -->
			            <isEqual property="cmb_gubun" compareValue="2">
			            	<isEmpty property="cmb_half">
			            		and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'
			            	</isEmpty>              
			                <isEqual property="cmb_half" compareValue="1">
			                	and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0632000000'                                                                  
							</isEqual>	 
							<isEqual property="cmb_half" compareValue="2">
								and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '1232000000'
							</isEqual>	 
			            </isEqual>	 
			            <isEqual property="cmb_gubun" compareValue="3"> 
			            	<isEmpty>
								and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'	            	
			            	</isEmpty>    
			           		<isEqual property="cmb_qua" compareValue="1">
			           			and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0332000000'   
			           	  	</isEqual>
			           	  	<isEqual property="cmb_qua" compareValue="2">
			           	   		and A.ACPN_DTM between #time_key# || '0400000000' and #time_key# || '0632000000'   
			           	  	</isEqual>	 
			           	  	<isEqual property="cmb_qua" compareValue="3">
			           	   		and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '0932000000'   
			           	  	</isEqual>	 
		           	  		<isEqual property="cmb_qua" compareValue="4">
			           	   		and A.ACPN_DTM between #time_key# || '1000000000' and #time_key# || '1232000000'   
			           	  	</isEqual>	 	 
		            	</isEqual>	 				            
			    	 	<isEqual property="cmb_gubun" compareValue="4">              
			            	and A.ACPN_DTM between #time_key# || '00000000' and #time_key# || '32000000'                                                                  
			         	</isEqual>	
			    	 	<isEqual property="cmb_gubun" compareValue="5">              
			                and A.ACPN_DTM between #time_key# || '000000' and #time_key# || '240000'                                                                  
			         	</isEqual>
					
						<!-- 불만유형이 전체일 때는 두가지 경우 존재(전체, 품질&혼유)		-->				
						<isEmpty property="dsft_typ_cd">
							<isEqual property="dsft_typ_tot_gbn" compareValue="2">
								AND A.DSFT_TYP_CD IN ('CA','CK')
							</isEqual>
						</isEmpty>						
					  	<isNotEmpty prepend="AND" property="dsft_typ_cd">				<!-- 불만유형		-->
					    	A.DSFT_TYP_CD = #dsft_typ_cd#
					  	</isNotEmpty>
					  	<isNotEmpty prepend="AND" property="dsft_taxn_typ_cd">			<!-- 불만세부유형		-->
					    	A.DSFT_TAXN_TYP_CD = #dsft_taxn_typ_cd#
					  	</isNotEmpty>
				  		<isNotEmpty prepend="AND" property="orgn_ptr_st_cd">			<!-- 불만발생업체코드(가맹점SAP코드) -->
						    A.ORGN_PTR_ST_CD = #orgn_ptr_st_cd#
					  	</isNotEmpty>
					    <isNotEmpty prepend="AND" property="conn_chnl_kind_cd">			<!-- 접촉채널	-->
						    A.CONN_CHNL_KIND_CD = #conn_chnl_kind_cd#
					    </isNotEmpty>			  	
					  	<isNotEmpty prepend="AND" property="hgrk_dept_cd">				<!-- 부문/본부 -->
						    G.HGRK_DEPT_CD = #hgrk_dept_cd#
					  	</isNotEmpty>
					  	<isNotEmpty prepend="AND" property="dept_cd">					<!-- 처리팀 -->
						    G.DEPT_CD = #dept_cd#
					  	</isNotEmpty>
					  	<isNotEmpty prepend="AND" property="dspsr_id_nm">				<!-- 처리자명 		-->
						    (B.USR_NM LIKE '%'|| #dspsr_id_nm# ||'%' OR F.EMP_NM LIKE '%'|| #dspsr_id_nm# ||'%')
					  	</isNotEmpty>
				 		<isEqual property="hc_yn" compareValue="Y"> 					<!-- 해피콜여부  -->
				 			AND A.HC_YN = 'Y'
				 		</isEqual>
					 	<isEqual property="hc_yn" compareValue="N"> 					<!-- 해피콜여부  -->
					 		AND (A.HC_YN = 'N' OR A.HC_YN IS NULL)
					 	</isEqual>
					  	<isNotEmpty prepend="AND" property="attd_sft_cd">				<!-- 태도만족도 		-->
					  		(A.HC_YN = 'Y' AND C.ATTD_SFT_CD = #attd_sft_cd#)
					  	</isNotEmpty>
					  	<isNotEmpty prepend="AND" property="rslt_sft_cd">				<!-- 결과만족도 		-->
					  		(A.HC_YN = 'Y' AND C.RSLT_SFT_CD = #rslt_sft_cd#)
					  	</isNotEmpty>
					  	<isNotEmpty prepend="AND" property="hc_uabl_rsn_cd">			<!-- 해피콜불가사유		-->
					  		A.HC_UABL_RSN_CD = #hc_uabl_rsn_cd#
					  	</isNotEmpty>
					  	<isNotEmpty prepend="AND" property="prdct_cd">					<!-- 불만제품 		-->
						    A.PRDCT_CD = #prdct_cd#
					  	</isNotEmpty>			  				 	
					  	<isNotEmpty prepend="AND" property="prblm_penom_cd">			<!-- 현상 		-->
						    A.PRBLM_PENOM_CD = #prblm_penom_cd#
					  	</isNotEmpty>
				 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="1">  	<!-- 시료품질 점검결과		-->
				 			AND	A.VHCL_QLIT_DSFT_CAUS_CD_CUST IS NOT NULL
				 	  	</isEqual>
				 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="2">   	<!-- 시료품질 점검결과		-->
				 	  		AND	A.VHCL_QLIT_DSFT_CAUS_CD_PTR_ST IS NOT NULL
				 	  	</isEqual>
					  	<isNotEmpty prepend="AND" property="vhcl_biztr_qlit_dsft_typ_cd">			<!-- 품질불만유형 		-->
						    A.VHCL_BIZTR_QLIT_DSFT_TYP_CD = #vhcl_biztr_qlit_dsft_typ_cd#
					  	</isNotEmpty>
					 	<isEqual property="vhcl_biztr_yn" compareValue="Y"> 			<!-- Kixx 품질서비스차량 출동 -->
					 		AND A.VHCL_BIZTR_YN = 'Y'
					 	</isEqual>
					 	<isEqual property="vhcl_biztr_yn" compareValue="N"> 			<!-- Kixx 품질서비스차량 출동 -->
					 		AND (A.VHCL_BIZTR_YN = 'N' OR A.VHCL_BIZTR_YN IS NULL)
					 	</isEqual>		 	  	
					 	<isEqual property="rwrd_yn" compareValue="Y"> 					<!-- 보상여부 -->
					 		AND A.RWRD_YN = 'Y'
					 	</isEqual>
					 	<isEqual property="rwrd_yn" compareValue="N"> 					<!-- 보상여부 -->
					 		AND (A.RWRD_YN = 'N' OR A.RWRD_YN IS NULL)
					 	</isEqual>
					 	
					 	<isEqual property="cps_amt_gbn" compareValue="1"> 				
					 		<isEqual property="cps_amt" compareValue="1">				<!-- 주유소 보상금 1만원 미만-->
					 			AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 10000
					 		</isEqual>
					 		<isEqual property="cps_amt" compareValue="2">				<!-- 주유소 보상금 1만원 ~ 10만원-->
					 			AND (A.PTR_ST_CPS_AMT <![CDATA[>=]]> 10000 AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 100000)
					 		</isEqual>
							<isEqual property="cps_amt" compareValue="3">				<!-- 주유소 보상금 10만원 초과-->
					 			AND A.PTR_ST_CPS_AMT <![CDATA[>]]> 100000
					 		</isEqual>
					 	</isEqual>
					 	<isEqual property="cps_amt_gbn" compareValue="2"> 				
					 		<isEqual property="cps_amt" compareValue="1">				<!-- 회사 보상금 1만원 미만-->
					 			AND A.CO_CPS_AMT <![CDATA[<]]> 10000
					 		</isEqual>
					 		<isEqual property="cps_amt" compareValue="2">				<!-- 회사 보상금 1만원 ~ 10만원-->
					 			AND (A.CO_CPS_AMT <![CDATA[>=]]> 10000 AND A.CO_CPS_AMT <![CDATA[<]]> 100000)
					 		</isEqual>
							<isEqual property="cps_amt" compareValue="3">				<!-- 회사 보상금 10만원 초과-->
					 			AND A.CO_CPS_AMT <![CDATA[>]]> 100000
					 		</isEqual>
					 	</isEqual>
					 	<isEqual property="cps_amt_gbn" compareValue="3"> 				
					 		<isEqual property="cps_amt" compareValue="1">				<!-- 총 보상금 1만원 미만-->
					 			AND A.TOT_CPS_AMT <![CDATA[<]]> 10000
					 		</isEqual>
					 		<isEqual property="cps_amt" compareValue="2">				<!-- 총 보상금 1만원 ~ 10만원-->
					 			AND (A.TOT_CPS_AMT <![CDATA[>=]]> 10000 AND A.TOT_CPS_AMT <![CDATA[<]]> 100000)
					 		</isEqual>
							<isEqual property="cps_amt" compareValue="3">				<!-- 총 보상금 10만원 초과-->
					 			AND A.TOT_CPS_AMT <![CDATA[>]]> 100000
					 		</isEqual>
					 	</isEqual>
					 	
						<!--처리자구분에 체크항목이 하나도 없는 경우, 전체데이터가 조회된다.-->
					 	<isEqual property="cmp_handler" compareValue="1">   
					 		AND	A.DSPSR_YN_CNSLR = 'Y'
					 	</isEqual>
					 	<isEqual property="cmp_handler" compareValue="2">   
					 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y')
					 	</isEqual>
					 	<isEqual property="cmp_handler" compareValue="3">   
					 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
					 	</isEqual>
					 	<isEqual property="cmp_handler" compareValue="4">   
					 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
					 	</isEqual>
					 	<isEqual property="cmp_handler" compareValue="5">   
					 		AND	A.DSPSR_YN_DSFT_CHRG = 'Y'
					 	</isEqual>
					 	<isEqual property="cmp_handler" compareValue="6">   
					 		AND	A.DSPSR_YN_PART_HD = 'Y'
					 	</isEqual>
					 	<isEqual property="cmp_handler" compareValue="7">   
					 		AND	(A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
					 	</isEqual>
		       		</dynamic>  
			
				group by A.DSPSR_CHRG_DEPT
			   	order by A.DSPSR_CHRG_DEPT	
			   	) A   
 	</select>
 	
 	<!-- 불만조회 - 조직별(불만세부유형) -->
 	<select id="Get_CMP_STT3_SELECT" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
	SELECT
	     Q1.HGRK_DEPT_CD        						AS HGRK_DEPT_CD
	    ,CASE WHEN Q1.HGRK_DEPT_CD IS NULL THEN '전체' 
	    	ELSE MAX(Q1.HGRK_DEPT_CDNM) END 			AS HGRK_DEPT_CDNM
	    ,Q1.DEPT_CD             						AS DEPT_CD
	    ,CASE WHEN Q1.HGRK_DEPT_CD IS NULL THEN '평균' 
	          WHEN Q1.DEPT_CD IS NULL THEN '소계' 
	        ELSE MAX(Q1.DEPT_CDNM) END  				AS DSPSR_CHRG_DEPT
	    
        ,CASE WHEN SUM(Q2.CA01_CNT)>0 THEN ROUND(SUM(Q2.CA01_DT)/SUM(Q2.CA01_CNT),1) ELSE NULL END AS CA01
        ,CASE WHEN SUM(Q2.CA02_CNT)>0 THEN ROUND(SUM(Q2.CA02_DT)/SUM(Q2.CA02_CNT),1) ELSE NULL END AS CA02
        ,CASE WHEN SUM(Q2.CA03_CNT)>0 THEN ROUND(SUM(Q2.CA03_DT)/SUM(Q2.CA03_CNT),1) ELSE NULL END AS CA03        
        ,CASE WHEN SUM(Q2.CB01_CNT)>0 THEN ROUND(SUM(Q2.CB01_DT)/SUM(Q2.CB01_CNT),1) ELSE NULL END AS CB01
        ,CASE WHEN SUM(Q2.CB02_CNT)>0 THEN ROUND(SUM(Q2.CB02_DT)/SUM(Q2.CB02_CNT),1) ELSE NULL END AS CB02
        ,CASE WHEN SUM(Q2.CB03_CNT)>0 THEN ROUND(SUM(Q2.CB03_DT)/SUM(Q2.CB03_CNT),1) ELSE NULL END AS CB03
        ,CASE WHEN SUM(Q2.CB04_CNT)>0 THEN ROUND(SUM(Q2.CB04_DT)/SUM(Q2.CB04_CNT),1) ELSE NULL END AS CB04
        ,CASE WHEN SUM(Q2.CB05_CNT)>0 THEN ROUND(SUM(Q2.CB05_DT)/SUM(Q2.CB05_CNT),1) ELSE NULL END AS CB05
        ,CASE WHEN SUM(Q2.CB06_CNT)>0 THEN ROUND(SUM(Q2.CB06_DT)/SUM(Q2.CB06_CNT),1) ELSE NULL END AS CB06
        ,CASE WHEN SUM(Q2.CB07_CNT)>0 THEN ROUND(SUM(Q2.CB07_DT)/SUM(Q2.CB07_CNT),1) ELSE NULL END AS CB07
        ,CASE WHEN SUM(Q2.CB08_CNT)>0 THEN ROUND(SUM(Q2.CB08_DT)/SUM(Q2.CB08_CNT),1) ELSE NULL END AS CB08
        ,CASE WHEN SUM(Q2.CB09_CNT)>0 THEN ROUND(SUM(Q2.CB09_DT)/SUM(Q2.CB09_CNT),1) ELSE NULL END AS CB09
        ,CASE WHEN SUM(Q2.CB10_CNT)>0 THEN ROUND(SUM(Q2.CB10_DT)/SUM(Q2.CB10_CNT),1) ELSE NULL END AS CB10                                                                        
        ,CASE WHEN SUM(Q2.CC01_CNT)>0 THEN ROUND(SUM(Q2.CC01_DT)/SUM(Q2.CC01_CNT),1) ELSE NULL END AS CC01
        ,CASE WHEN SUM(Q2.CC02_CNT)>0 THEN ROUND(SUM(Q2.CC02_DT)/SUM(Q2.CC02_CNT),1) ELSE NULL END AS CC02
        ,CASE WHEN SUM(Q2.CC03_CNT)>0 THEN ROUND(SUM(Q2.CC03_DT)/SUM(Q2.CC03_CNT),1) ELSE NULL END AS CC03
        ,CASE WHEN SUM(Q2.CC04_CNT)>0 THEN ROUND(SUM(Q2.CC04_DT)/SUM(Q2.CC04_CNT),1) ELSE NULL END AS CC04        
        ,CASE WHEN SUM(Q2.CD01_CNT)>0 THEN ROUND(SUM(Q2.CD01_DT)/SUM(Q2.CD01_CNT),1) ELSE NULL END AS CD01
        ,CASE WHEN SUM(Q2.CE01_CNT)>0 THEN ROUND(SUM(Q2.CE01_DT)/SUM(Q2.CE01_CNT),1) ELSE NULL END AS CE01
        ,CASE WHEN SUM(Q2.CE02_CNT)>0 THEN ROUND(SUM(Q2.CE02_DT)/SUM(Q2.CE02_CNT),1) ELSE NULL END AS CE02
        ,CASE WHEN SUM(Q2.CE03_CNT)>0 THEN ROUND(SUM(Q2.CE03_DT)/SUM(Q2.CE03_CNT),1) ELSE NULL END AS CE03
        ,CASE WHEN SUM(Q2.CF01_CNT)>0 THEN ROUND(SUM(Q2.CF01_DT)/SUM(Q2.CF01_CNT),1) ELSE NULL END AS CF01
        ,CASE WHEN SUM(Q2.CG01_CNT)>0 THEN ROUND(SUM(Q2.CG01_DT)/SUM(Q2.CG01_CNT),1) ELSE NULL END AS CG01
        ,CASE WHEN SUM(Q2.CH01_CNT)>0 THEN ROUND(SUM(Q2.CH01_DT)/SUM(Q2.CH01_CNT),1) ELSE NULL END AS CH01
        ,CASE WHEN SUM(Q2.CI01_CNT)>0 THEN ROUND(SUM(Q2.CI01_DT)/SUM(Q2.CI01_CNT),1) ELSE NULL END AS CI01
        ,CASE WHEN SUM(Q2.CJ01_CNT)>0 THEN ROUND(SUM(Q2.CJ01_DT)/SUM(Q2.CJ01_CNT),1) ELSE NULL END AS CJ01
        ,CASE WHEN SUM(Q2.CK01_CNT)>0 THEN ROUND(SUM(Q2.CK01_DT)/SUM(Q2.CK01_CNT),1) ELSE NULL END AS CK01
        ,CASE WHEN SUM(Q2.CL01_CNT)>0 THEN ROUND(SUM(Q2.CL01_DT)/SUM(Q2.CL01_CNT),1) ELSE NULL END AS CL01
        ,CASE WHEN SUM(Q2.CM01_CNT)>0 THEN ROUND(SUM(Q2.CM01_DT)/SUM(Q2.CM01_CNT),1) ELSE NULL END AS CM01
        ,CASE WHEN SUM(Q2.CM02_CNT)>0 THEN ROUND(SUM(Q2.CM02_DT)/SUM(Q2.CM02_CNT),1) ELSE NULL END AS CM02
        ,CASE WHEN SUM(Q2.CM03_CNT)>0 THEN ROUND(SUM(Q2.CM03_DT)/SUM(Q2.CM03_CNT),1) ELSE NULL END AS CM03
        ,CASE WHEN SUM(Q2.CM04_CNT)>0 THEN ROUND(SUM(Q2.CM04_DT)/SUM(Q2.CM04_CNT),1) ELSE NULL END AS CM04
        ,CASE WHEN SUM(Q2.CM05_CNT)>0 THEN ROUND(SUM(Q2.CM05_DT)/SUM(Q2.CM05_CNT),1) ELSE NULL END AS CM05
        ,CASE WHEN SUM(Q2.CN01_CNT)>0 THEN ROUND(SUM(Q2.CN01_DT)/SUM(Q2.CN01_CNT),1) ELSE NULL END AS CN01
        ,CASE WHEN SUM(Q2.CN02_CNT)>0 THEN ROUND(SUM(Q2.CN02_DT)/SUM(Q2.CN02_CNT),1) ELSE NULL END AS CN02
        ,CASE WHEN SUM(Q2.CN03_CNT)>0 THEN ROUND(SUM(Q2.CN03_DT)/SUM(Q2.CN03_CNT),1) ELSE NULL END AS CN03
        ,CASE WHEN SUM(Q2.CO01_CNT)>0 THEN ROUND(SUM(Q2.CO01_DT)/SUM(Q2.CO01_CNT),1) ELSE NULL END AS CO01
        ,CASE WHEN SUM(Q2.CO02_CNT)>0 THEN ROUND(SUM(Q2.CO02_DT)/SUM(Q2.CO02_CNT),1) ELSE NULL END AS CO02
        ,CASE WHEN SUM(Q2.CO03_CNT)>0 THEN ROUND(SUM(Q2.CO03_DT)/SUM(Q2.CO03_CNT),1) ELSE NULL END AS CO03
        ,CASE WHEN SUM(Q2.CO04_CNT)>0 THEN ROUND(SUM(Q2.CO04_DT)/SUM(Q2.CO04_CNT),1) ELSE NULL END AS CO04
        ,CASE WHEN SUM(Q2.CO05_CNT)>0 THEN ROUND(SUM(Q2.CO05_DT)/SUM(Q2.CO05_CNT),1) ELSE NULL END AS CO05
        ,CASE WHEN SUM(Q2.CP01_CNT)>0 THEN ROUND(SUM(Q2.CP01_DT)/SUM(Q2.CP01_CNT),1) ELSE NULL END AS CP01
        ,CASE WHEN SUM(Q2.CP02_CNT)>0 THEN ROUND(SUM(Q2.CP02_DT)/SUM(Q2.CP02_CNT),1) ELSE NULL END AS CP02
        ,CASE WHEN SUM(Q2.CP03_CNT)>0 THEN ROUND(SUM(Q2.CP03_DT)/SUM(Q2.CP03_CNT),1) ELSE NULL END AS CP03
        ,CASE WHEN SUM(Q2.CQ01_CNT)>0 THEN ROUND(SUM(Q2.CQ01_DT)/SUM(Q2.CQ01_CNT),1) ELSE NULL END AS CQ01
        ,CASE WHEN SUM(Q2.CQ02_CNT)>0 THEN ROUND(SUM(Q2.CQ02_DT)/SUM(Q2.CQ02_CNT),1) ELSE NULL END AS CQ02
        ,CASE WHEN SUM(Q2.CQ03_CNT)>0 THEN ROUND(SUM(Q2.CQ03_DT)/SUM(Q2.CQ03_CNT),1) ELSE NULL END AS CQ03
        ,CASE WHEN SUM(Q2.CQ04_CNT)>0 THEN ROUND(SUM(Q2.CQ04_DT)/SUM(Q2.CQ04_CNT),1) ELSE NULL END AS CQ04
        ,CASE WHEN SUM(Q2.CR01_CNT)>0 THEN ROUND(SUM(Q2.CR01_DT)/SUM(Q2.CR01_CNT),1) ELSE NULL END AS CR01
        ,CASE WHEN SUM(Q2.DA01_CNT)>0 THEN ROUND(SUM(Q2.DA01_DT)/SUM(Q2.DA01_CNT),1) ELSE NULL END AS DA01
        ,CASE WHEN SUM(Q2.DA02_CNT)>0 THEN ROUND(SUM(Q2.DA02_DT)/SUM(Q2.DA02_CNT),1) ELSE NULL END AS DA02
        ,CASE WHEN SUM(Q2.DA03_CNT)>0 THEN ROUND(SUM(Q2.DA03_DT)/SUM(Q2.DA03_CNT),1) ELSE NULL END AS DA03
        ,CASE WHEN SUM(Q2.DA04_CNT)>0 THEN ROUND(SUM(Q2.DA04_DT)/SUM(Q2.DA04_CNT),1) ELSE NULL END AS DA04
        ,CASE WHEN SUM(Q2.DA05_CNT)>0 THEN ROUND(SUM(Q2.DA05_DT)/SUM(Q2.DA05_CNT),1) ELSE NULL END AS DA05
        ,CASE WHEN SUM(Q2.DA06_CNT)>0 THEN ROUND(SUM(Q2.DA06_DT)/SUM(Q2.DA06_CNT),1) ELSE NULL END AS DA06
        ,CASE WHEN SUM(Q2.DA07_CNT)>0 THEN ROUND(SUM(Q2.DA07_DT)/SUM(Q2.DA07_CNT),1) ELSE NULL END AS DA07
        ,CASE WHEN SUM(Q2.DB01_CNT)>0 THEN ROUND(SUM(Q2.DB01_DT)/SUM(Q2.DB01_CNT),1) ELSE NULL END AS DB01
        ,CASE WHEN SUM(Q2.DB02_CNT)>0 THEN ROUND(SUM(Q2.DB02_DT)/SUM(Q2.DB02_CNT),1) ELSE NULL END AS DB02
        ,CASE WHEN SUM(Q2.DB03_CNT)>0 THEN ROUND(SUM(Q2.DB03_DT)/SUM(Q2.DB03_CNT),1) ELSE NULL END AS DB03
        ,CASE WHEN SUM(Q2.DB04_CNT)>0 THEN ROUND(SUM(Q2.DB04_DT)/SUM(Q2.DB04_CNT),1) ELSE NULL END AS DB04
        ,CASE WHEN SUM(Q2.DB05_CNT)>0 THEN ROUND(SUM(Q2.DB05_DT)/SUM(Q2.DB05_CNT),1) ELSE NULL END AS DB05
        ,CASE WHEN SUM(Q2.DB06_CNT)>0 THEN ROUND(SUM(Q2.DB06_DT)/SUM(Q2.DB06_CNT),1) ELSE NULL END AS DB06
        ,CASE WHEN SUM(Q2.DC01_CNT)>0 THEN ROUND(SUM(Q2.DC01_DT)/SUM(Q2.DC01_CNT),1) ELSE NULL END AS DC01
        ,CASE WHEN SUM(Q2.DC02_CNT)>0 THEN ROUND(SUM(Q2.DC02_DT)/SUM(Q2.DC02_CNT),1) ELSE NULL END AS DC02
        ,CASE WHEN SUM(Q2.DC03_CNT)>0 THEN ROUND(SUM(Q2.DC03_DT)/SUM(Q2.DC03_CNT),1) ELSE NULL END AS DC03
        ,CASE WHEN SUM(Q2.DD01_CNT)>0 THEN ROUND(SUM(Q2.DD01_DT)/SUM(Q2.DD01_CNT),1) ELSE NULL END AS DD01
        ,CASE WHEN SUM(Q2.DD02_CNT)>0 THEN ROUND(SUM(Q2.DD02_DT)/SUM(Q2.DD02_CNT),1) ELSE NULL END AS DD02
        ,CASE WHEN SUM(Q2.DD03_CNT)>0 THEN ROUND(SUM(Q2.DD03_DT)/SUM(Q2.DD03_CNT),1) ELSE NULL END AS DD03
        ,CASE WHEN SUM(Q2.DD04_CNT)>0 THEN ROUND(SUM(Q2.DD04_DT)/SUM(Q2.DD04_CNT),1) ELSE NULL END AS DD04
        ,CASE WHEN SUM(Q2.DD05_CNT)>0 THEN ROUND(SUM(Q2.DD05_DT)/SUM(Q2.DD05_CNT),1) ELSE NULL END AS DD05
        ,CASE WHEN SUM(Q2.DD06_CNT)>0 THEN ROUND(SUM(Q2.DD06_DT)/SUM(Q2.DD06_CNT),1) ELSE NULL END AS DD06        
        ,CASE WHEN SUM(Q2.DE01_CNT)>0 THEN ROUND(SUM(Q2.DE01_DT)/SUM(Q2.DE01_CNT),1) ELSE NULL END AS DE01
        ,CASE WHEN SUM(Q2.DE02_CNT)>0 THEN ROUND(SUM(Q2.DE02_DT)/SUM(Q2.DE02_CNT),1) ELSE NULL END AS DE02
        ,CASE WHEN SUM(Q2.DE03_CNT)>0 THEN ROUND(SUM(Q2.DE03_DT)/SUM(Q2.DE03_CNT),1) ELSE NULL END AS DE03
        ,CASE WHEN SUM(Q2.DF01_CNT)>0 THEN ROUND(SUM(Q2.DF01_DT)/SUM(Q2.DF01_CNT),1) ELSE NULL END AS DF01
        ,CASE WHEN SUM(Q2.DF02_CNT)>0 THEN ROUND(SUM(Q2.DF02_DT)/SUM(Q2.DF02_CNT),1) ELSE NULL END AS DF02
        ,CASE WHEN SUM(Q2.DF03_CNT)>0 THEN ROUND(SUM(Q2.DF03_DT)/SUM(Q2.DF03_CNT),1) ELSE NULL END AS DF03
        ,CASE WHEN SUM(Q2.DF04_CNT)>0 THEN ROUND(SUM(Q2.DF04_DT)/SUM(Q2.DF04_CNT),1) ELSE NULL END AS DF04
        ,CASE WHEN SUM(Q2.DG01_CNT)>0 THEN ROUND(SUM(Q2.DG01_DT)/SUM(Q2.DG01_CNT),1) ELSE NULL END AS DG01
        ,CASE WHEN SUM(Q2.DG02_CNT)>0 THEN ROUND(SUM(Q2.DG02_DT)/SUM(Q2.DG02_CNT),1) ELSE NULL END AS DG02
        ,CASE WHEN SUM(Q2.DG03_CNT)>0 THEN ROUND(SUM(Q2.DG03_DT)/SUM(Q2.DG03_CNT),1) ELSE NULL END AS DG03	    
	    ,CASE WHEN 
	     (	
			NVL(SUM(Q2.CA01_CNT),0)+NVL(SUM(Q2.CA02_CNT),0)+NVL(SUM(Q2.CA03_CNT),0)+NVL(SUM(Q2.CB01_CNT),0)+NVL(SUM(Q2.CB02_CNT),0)+NVL(SUM(Q2.CB03_CNT),0)+NVL(SUM(Q2.CB04_CNT),0)+NVL(SUM(Q2.CB05_CNT),0)+NVL(SUM(Q2.CB06_CNT),0)+
			NVL(SUM(Q2.CB07_CNT),0)+NVL(SUM(Q2.CB08_CNT),0)+NVL(SUM(Q2.CB09_CNT),0)+NVL(SUM(Q2.CB10_CNT),0)+NVL(SUM(Q2.CC01_CNT),0)+NVL(SUM(Q2.CC02_CNT),0)+NVL(SUM(Q2.CC03_CNT),0)+NVL(SUM(Q2.CC04_CNT),0)+NVL(SUM(Q2.CD01_CNT),0)+
			NVL(SUM(Q2.CE01_CNT),0)+NVL(SUM(Q2.CE02_CNT),0)+NVL(SUM(Q2.CE03_CNT),0)+NVL(SUM(Q2.CF01_CNT),0)+NVL(SUM(Q2.CG01_CNT),0)+NVL(SUM(Q2.CH01_CNT),0)+NVL(SUM(Q2.CI01_CNT),0)+NVL(SUM(Q2.CJ01_CNT),0)+NVL(SUM(Q2.CK01_CNT),0)+
			NVL(SUM(Q2.CL01_CNT),0)+NVL(SUM(Q2.CM01_CNT),0)+NVL(SUM(Q2.CM02_CNT),0)+NVL(SUM(Q2.CM03_CNT),0)+NVL(SUM(Q2.CM04_CNT),0)+NVL(SUM(Q2.CM05_CNT),0)+NVL(SUM(Q2.CN01_CNT),0)+NVL(SUM(Q2.CN02_CNT),0)+NVL(SUM(Q2.CN03_CNT),0)+
			NVL(SUM(Q2.CO01_CNT),0)+NVL(SUM(Q2.CO02_CNT),0)+NVL(SUM(Q2.CO03_CNT),0)+NVL(SUM(Q2.CO04_CNT),0)+NVL(SUM(Q2.CO05_CNT),0)+NVL(SUM(Q2.CP01_CNT),0)+NVL(SUM(Q2.CP02_CNT),0)+NVL(SUM(Q2.CP03_CNT),0)+NVL(SUM(Q2.CQ01_CNT),0)+
			NVL(SUM(Q2.CQ02_CNT),0)+NVL(SUM(Q2.CQ03_CNT),0)+NVL(SUM(Q2.CQ04_CNT),0)+NVL(SUM(Q2.CR01_CNT),0)+NVL(SUM(Q2.DA01_CNT),0)+NVL(SUM(Q2.DA02_CNT),0)+NVL(SUM(Q2.DA03_CNT),0)+NVL(SUM(Q2.DA04_CNT),0)+NVL(SUM(Q2.DA05_CNT),0)+
			NVL(SUM(Q2.DA06_CNT),0)+NVL(SUM(Q2.DA07_CNT),0)+NVL(SUM(Q2.DB01_CNT),0)+NVL(SUM(Q2.DB02_CNT),0)+NVL(SUM(Q2.DB03_CNT),0)+NVL(SUM(Q2.DB04_CNT),0)+NVL(SUM(Q2.DB05_CNT),0)+NVL(SUM(Q2.DB06_CNT),0)+NVL(SUM(Q2.DC01_CNT),0)+
			NVL(SUM(Q2.DC02_CNT),0)+NVL(SUM(Q2.DC03_CNT),0)+NVL(SUM(Q2.DD01_CNT),0)+NVL(SUM(Q2.DD02_CNT),0)+NVL(SUM(Q2.DD03_CNT),0)+NVL(SUM(Q2.DD04_CNT),0)+NVL(SUM(Q2.DD05_CNT),0)+NVL(SUM(Q2.DD06_CNT),0)+NVL(SUM(Q2.DE01_CNT),0)+
			NVL(SUM(Q2.DE02_CNT),0)+NVL(SUM(Q2.DE03_CNT),0)+NVL(SUM(Q2.DF01_CNT),0)+NVL(SUM(Q2.DF02_CNT),0)+NVL(SUM(Q2.DF03_CNT),0)+NVL(SUM(Q2.DF04_CNT),0)+NVL(SUM(Q2.DG01_CNT),0)+NVL(SUM(Q2.DG02_CNT),0)+NVL(SUM(Q2.DG03_CNT),0)
	      ) > 0 THEN ROUND(
	      (
			NVL(SUM(Q2.CA01_DT),0)+NVL(SUM(Q2.CA02_DT),0)+NVL(SUM(Q2.CA03_DT),0)+NVL(SUM(Q2.CB01_DT),0)+NVL(SUM(Q2.CB02_DT),0)+NVL(SUM(Q2.CB03_DT),0)+NVL(SUM(Q2.CB04_DT),0)+NVL(SUM(Q2.CB05_DT),0)+NVL(SUM(Q2.CB06_DT),0)+
			NVL(SUM(Q2.CB07_DT),0)+NVL(SUM(Q2.CB08_DT),0)+NVL(SUM(Q2.CB09_DT),0)+NVL(SUM(Q2.CB10_DT),0)+NVL(SUM(Q2.CC01_DT),0)+NVL(SUM(Q2.CC02_DT),0)+NVL(SUM(Q2.CC03_DT),0)+NVL(SUM(Q2.CC04_DT),0)+NVL(SUM(Q2.CD01_DT),0)+
			NVL(SUM(Q2.CE01_DT),0)+NVL(SUM(Q2.CE02_DT),0)+NVL(SUM(Q2.CE03_DT),0)+NVL(SUM(Q2.CF01_DT),0)+NVL(SUM(Q2.CG01_DT),0)+NVL(SUM(Q2.CH01_DT),0)+NVL(SUM(Q2.CI01_DT),0)+NVL(SUM(Q2.CJ01_DT),0)+NVL(SUM(Q2.CK01_DT),0)+
			NVL(SUM(Q2.CL01_DT),0)+NVL(SUM(Q2.CM01_DT),0)+NVL(SUM(Q2.CM02_DT),0)+NVL(SUM(Q2.CM03_DT),0)+NVL(SUM(Q2.CM04_DT),0)+NVL(SUM(Q2.CM05_DT),0)+NVL(SUM(Q2.CN01_DT),0)+NVL(SUM(Q2.CN02_DT),0)+NVL(SUM(Q2.CN03_DT),0)+
			NVL(SUM(Q2.CO01_DT),0)+NVL(SUM(Q2.CO02_DT),0)+NVL(SUM(Q2.CO03_DT),0)+NVL(SUM(Q2.CO04_DT),0)+NVL(SUM(Q2.CO05_DT),0)+NVL(SUM(Q2.CP01_DT),0)+NVL(SUM(Q2.CP02_DT),0)+NVL(SUM(Q2.CP03_DT),0)+NVL(SUM(Q2.CQ01_DT),0)+
			NVL(SUM(Q2.CQ02_DT),0)+NVL(SUM(Q2.CQ03_DT),0)+NVL(SUM(Q2.CQ04_DT),0)+NVL(SUM(Q2.CR01_DT),0)+NVL(SUM(Q2.DA01_DT),0)+NVL(SUM(Q2.DA02_DT),0)+NVL(SUM(Q2.DA03_DT),0)+NVL(SUM(Q2.DA04_DT),0)+NVL(SUM(Q2.DA05_DT),0)+
			NVL(SUM(Q2.DA06_DT),0)+NVL(SUM(Q2.DA07_DT),0)+NVL(SUM(Q2.DB01_DT),0)+NVL(SUM(Q2.DB02_DT),0)+NVL(SUM(Q2.DB03_DT),0)+NVL(SUM(Q2.DB04_DT),0)+NVL(SUM(Q2.DB05_DT),0)+NVL(SUM(Q2.DB06_DT),0)+NVL(SUM(Q2.DC01_DT),0)+
			NVL(SUM(Q2.DC02_DT),0)+NVL(SUM(Q2.DC03_DT),0)+NVL(SUM(Q2.DD01_DT),0)+NVL(SUM(Q2.DD02_DT),0)+NVL(SUM(Q2.DD03_DT),0)+NVL(SUM(Q2.DD04_DT),0)+NVL(SUM(Q2.DD05_DT),0)+NVL(SUM(Q2.DD06_DT),0)+NVL(SUM(Q2.DE01_DT),0)+
			NVL(SUM(Q2.DE02_DT),0)+NVL(SUM(Q2.DE03_DT),0)+NVL(SUM(Q2.DF01_DT),0)+NVL(SUM(Q2.DF02_DT),0)+NVL(SUM(Q2.DF03_DT),0)+NVL(SUM(Q2.DF04_DT),0)+NVL(SUM(Q2.DG01_DT),0)+NVL(SUM(Q2.DG02_DT),0)+NVL(SUM(Q2.DG03_DT),0)
          )/
	      (	
			NVL(SUM(Q2.CA01_CNT),0)+NVL(SUM(Q2.CA02_CNT),0)+NVL(SUM(Q2.CA03_CNT),0)+NVL(SUM(Q2.CB01_CNT),0)+NVL(SUM(Q2.CB02_CNT),0)+NVL(SUM(Q2.CB03_CNT),0)+NVL(SUM(Q2.CB04_CNT),0)+NVL(SUM(Q2.CB05_CNT),0)+NVL(SUM(Q2.CB06_CNT),0)+
			NVL(SUM(Q2.CB07_CNT),0)+NVL(SUM(Q2.CB08_CNT),0)+NVL(SUM(Q2.CB09_CNT),0)+NVL(SUM(Q2.CB10_CNT),0)+NVL(SUM(Q2.CC01_CNT),0)+NVL(SUM(Q2.CC02_CNT),0)+NVL(SUM(Q2.CC03_CNT),0)+NVL(SUM(Q2.CC04_CNT),0)+NVL(SUM(Q2.CD01_CNT),0)+
			NVL(SUM(Q2.CE01_CNT),0)+NVL(SUM(Q2.CE02_CNT),0)+NVL(SUM(Q2.CE03_CNT),0)+NVL(SUM(Q2.CF01_CNT),0)+NVL(SUM(Q2.CG01_CNT),0)+NVL(SUM(Q2.CH01_CNT),0)+NVL(SUM(Q2.CI01_CNT),0)+NVL(SUM(Q2.CJ01_CNT),0)+NVL(SUM(Q2.CK01_CNT),0)+
			NVL(SUM(Q2.CL01_CNT),0)+NVL(SUM(Q2.CM01_CNT),0)+NVL(SUM(Q2.CM02_CNT),0)+NVL(SUM(Q2.CM03_CNT),0)+NVL(SUM(Q2.CM04_CNT),0)+NVL(SUM(Q2.CM05_CNT),0)+NVL(SUM(Q2.CN01_CNT),0)+NVL(SUM(Q2.CN02_CNT),0)+NVL(SUM(Q2.CN03_CNT),0)+
			NVL(SUM(Q2.CO01_CNT),0)+NVL(SUM(Q2.CO02_CNT),0)+NVL(SUM(Q2.CO03_CNT),0)+NVL(SUM(Q2.CO04_CNT),0)+NVL(SUM(Q2.CO05_CNT),0)+NVL(SUM(Q2.CP01_CNT),0)+NVL(SUM(Q2.CP02_CNT),0)+NVL(SUM(Q2.CP03_CNT),0)+NVL(SUM(Q2.CQ01_CNT),0)+
			NVL(SUM(Q2.CQ02_CNT),0)+NVL(SUM(Q2.CQ03_CNT),0)+NVL(SUM(Q2.CQ04_CNT),0)+NVL(SUM(Q2.CR01_CNT),0)+NVL(SUM(Q2.DA01_CNT),0)+NVL(SUM(Q2.DA02_CNT),0)+NVL(SUM(Q2.DA03_CNT),0)+NVL(SUM(Q2.DA04_CNT),0)+NVL(SUM(Q2.DA05_CNT),0)+
			NVL(SUM(Q2.DA06_CNT),0)+NVL(SUM(Q2.DA07_CNT),0)+NVL(SUM(Q2.DB01_CNT),0)+NVL(SUM(Q2.DB02_CNT),0)+NVL(SUM(Q2.DB03_CNT),0)+NVL(SUM(Q2.DB04_CNT),0)+NVL(SUM(Q2.DB05_CNT),0)+NVL(SUM(Q2.DB06_CNT),0)+NVL(SUM(Q2.DC01_CNT),0)+
			NVL(SUM(Q2.DC02_CNT),0)+NVL(SUM(Q2.DC03_CNT),0)+NVL(SUM(Q2.DD01_CNT),0)+NVL(SUM(Q2.DD02_CNT),0)+NVL(SUM(Q2.DD03_CNT),0)+NVL(SUM(Q2.DD04_CNT),0)+NVL(SUM(Q2.DD05_CNT),0)+NVL(SUM(Q2.DD06_CNT),0)+NVL(SUM(Q2.DE01_CNT),0)+
			NVL(SUM(Q2.DE02_CNT),0)+NVL(SUM(Q2.DE03_CNT),0)+NVL(SUM(Q2.DF01_CNT),0)+NVL(SUM(Q2.DF02_CNT),0)+NVL(SUM(Q2.DF03_CNT),0)+NVL(SUM(Q2.DF04_CNT),0)+NVL(SUM(Q2.DG01_CNT),0)+NVL(SUM(Q2.DG02_CNT),0)+NVL(SUM(Q2.DG03_CNT),0)
	      ),1) ELSE NULL END AS RSUM
	    
	FROM 	
	    (   
	        SELECT 	HGRK_DEPT_CD,HGRK_DEPT_CDNM,DEPT_CD,DEPT_CDNM
	        FROM 	TBL_HR_DEPT_CD       
	        WHERE 	1=1
	       		<dynamic>
	       			<isEmpty prepend="AND" property="hgrk_dept_cd">
						HGRK_DEPT_CD IN ('E00054','E00056','T21000','E00053','E00042','E00044','JD1000','E00048')	       				
	       			</isEmpty>
				  	<isNotEmpty prepend="AND" property="hgrk_dept_cd">				<!-- 부문/본부 -->
					    HGRK_DEPT_CD = #hgrk_dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dept_cd">					<!-- 처리팀 -->
					    DEPT_CD = #dept_cd#
				  	</isNotEmpty>	       		
				</dynamic>       		
	        
	       		<dynamic>
	       			<isEmpty property="hgrk_dept_cd">	        
				        UNION ALL
				        
				        SELECT 
				             'ZZZZZ'    	AS HGRK_DEPT_CD  
				            ,'기타부문' 		AS HGRK_DEPT_CDNM
				            ,'ZZZZZ'    	AS DEPT_CD
				            ,'기타'     		AS DEPT_CDNM
				        FROM DUAL
	       			</isEmpty>				        
				</dynamic>	        
					            
	    ) Q1
	    
	    LEFT JOIN
	    
	    ( 	
			SELECT 	 
	   			 G.HGRK_DEPT_CDNM as HGRK_DEPT_CDNM
	   			,G.DEPT_CDNM as DSPSR_CHRG_DEPT
	   			,G.DEPT_CD as DEPT_CD
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CA01' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CA01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CA01' THEN 1 ELSE 0 END) AS CA01_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CA02' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CA02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CA02' THEN 1 ELSE 0 END) AS CA02_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CA03' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CA03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CA03' THEN 1 ELSE 0 END) AS CA03_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB01' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CB01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB01' THEN 1 ELSE 0 END) AS CB01_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB02' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CB02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB02' THEN 1 ELSE 0 END) AS CB02_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB03' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CB03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB03' THEN 1 ELSE 0 END) AS CB03_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB04' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CB04_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB04' THEN 1 ELSE 0 END) AS CB04_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB05' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CB05_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB05' THEN 1 ELSE 0 END) AS CB05_CNT                
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB06' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CB06_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB06' THEN 1 ELSE 0 END) AS CB06_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB07' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CB07_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB07' THEN 1 ELSE 0 END) AS CB07_CNT                 	
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB08' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CB08_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB08' THEN 1 ELSE 0 END) AS CB08_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB09' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CB09_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB09' THEN 1 ELSE 0 END) AS CB09_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB10' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CB10_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB10' THEN 1 ELSE 0 END) AS CB10_CNT                
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CC01' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CC01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CC01' THEN 1 ELSE 0 END) AS CC01_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CC02' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CC02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CC02' THEN 1 ELSE 0 END) AS CC02_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CC03' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CC03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CC03' THEN 1 ELSE 0 END) AS CC03_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CC04' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CC04_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CC04' THEN 1 ELSE 0 END) AS CC04_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CD01' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CD01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CD01' THEN 1 ELSE 0 END) AS CD01_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CE01' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CE01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CE01' THEN 1 ELSE 0 END) AS CE01_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CE02' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CE02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CE02' THEN 1 ELSE 0 END) AS CE02_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CE03' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CE03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CE03' THEN 1 ELSE 0 END) AS CE03_CNT		     
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CF01' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CF01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CF01' THEN 1 ELSE 0 END) AS CF01_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CG01' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CG01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CG01' THEN 1 ELSE 0 END) AS CG01_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CH01' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CH01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CH01' THEN 1 ELSE 0 END) AS CH01_CNT                 
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CI01' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CI01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CI01' THEN 1 ELSE 0 END) AS CI01_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CJ01' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CJ01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CJ01' THEN 1 ELSE 0 END) AS CJ01_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CK01' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CK01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CK01' THEN 1 ELSE 0 END) AS CK01_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CL01' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CL01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CL01' THEN 1 ELSE 0 END) AS CL01_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CM01' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CM01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CM01' THEN 1 ELSE 0 END) AS CM01_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CM02' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CM02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CM02' THEN 1 ELSE 0 END) AS CM02_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CM03' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CM03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CM03' THEN 1 ELSE 0 END) AS CM03_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CM04' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CM04_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CM04' THEN 1 ELSE 0 END) AS CM04_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CM05' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CM05_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CM05' THEN 1 ELSE 0 END) AS CM05_CNT                
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CN01' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CN01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CN01' THEN 1 ELSE 0 END) AS CN01_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CN02' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CN02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CN02' THEN 1 ELSE 0 END) AS CN02_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CN03' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CN03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CN03' THEN 1 ELSE 0 END) AS CN03_CNT		        
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CO01' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CO01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CO01' THEN 1 ELSE 0 END) AS CO01_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CO02' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CO02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CO02' THEN 1 ELSE 0 END) AS CO02_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CO03' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CO03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CO03' THEN 1 ELSE 0 END) AS CO03_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CO04' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CO04_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CO04' THEN 1 ELSE 0 END) AS CO04_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CO05' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CO05_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CO05' THEN 1 ELSE 0 END) AS CO05_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CP01' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CP01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CP01' THEN 1 ELSE 0 END) AS CP01_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CP02' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CP02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CP02' THEN 1 ELSE 0 END) AS CP02_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CP03' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CP03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CP03' THEN 1 ELSE 0 END) AS CP03_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CQ01' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CQ01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CQ01' THEN 1 ELSE 0 END) AS CQ01_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CQ02' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CQ02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CQ02' THEN 1 ELSE 0 END) AS CQ02_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CQ03' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CQ03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CQ03' THEN 1 ELSE 0 END) AS CQ03_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CQ04' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CQ04_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CQ04' THEN 1 ELSE 0 END) AS CQ04_CNT                 
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CR01' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CR01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CR01' THEN 1 ELSE 0 END) AS CR01_CNT                 
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA01' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DA01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA01' THEN 1 ELSE 0 END) AS DA01_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA02' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DA02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA02' THEN 1 ELSE 0 END) AS DA02_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA03' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DA03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA03' THEN 1 ELSE 0 END) AS DA03_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA04' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DA04_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA04' THEN 1 ELSE 0 END) AS DA04_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA05' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DA05_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA05' THEN 1 ELSE 0 END) AS DA05_CNT                
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA06' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DA06_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA06' THEN 1 ELSE 0 END) AS DA06_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA07' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DA07_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA07' THEN 1 ELSE 0 END) AS DA07_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DB01' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DB01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DB01' THEN 1 ELSE 0 END) AS DB01_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DB02' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DB02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DB02' THEN 1 ELSE 0 END) AS DB02_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DB03' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DB03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DB03' THEN 1 ELSE 0 END) AS DB03_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DB04' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DB04_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DB04' THEN 1 ELSE 0 END) AS DB04_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DB05' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DB05_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DB05' THEN 1 ELSE 0 END) AS DB05_CNT                
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DB06' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DB06_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DB06' THEN 1 ELSE 0 END) AS DB06_CNT                
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DC01' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DC01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DC01' THEN 1 ELSE 0 END) AS DC01_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DC02' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DC02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DC02' THEN 1 ELSE 0 END) AS DC02_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DC03' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DC03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DC03' THEN 1 ELSE 0 END) AS DC03_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DD01' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DD01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DD01' THEN 1 ELSE 0 END) AS DD01_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DD02' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DD02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DD02' THEN 1 ELSE 0 END) AS DD02_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DD03' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DD03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DD03' THEN 1 ELSE 0 END) AS DD03_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DD04' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DD04_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DD04' THEN 1 ELSE 0 END) AS DD04_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DD05' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DD05_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DD05' THEN 1 ELSE 0 END) AS DD05_CNT                
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DD06' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DD06_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DD06' THEN 1 ELSE 0 END) AS DD06_CNT		       
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DE01' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DE01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DE01' THEN 1 ELSE 0 END) AS DE01_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DE02' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DE02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DE02' THEN 1 ELSE 0 END) AS DE02_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DE03' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DE03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DE03' THEN 1 ELSE 0 END) AS DE03_CNT                 
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DF01' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DF01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DF01' THEN 1 ELSE 0 END) AS DF01_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DF02' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DF02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DF02' THEN 1 ELSE 0 END) AS DF02_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DF03' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DF03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DF03' THEN 1 ELSE 0 END) AS DF03_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DF04' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DF04_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DF04' THEN 1 ELSE 0 END) AS DF04_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DG01' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DG01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DG01' THEN 1 ELSE 0 END) AS DG01_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DG02' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DG02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DG02' THEN 1 ELSE 0 END) AS DG02_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DG03' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DG03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DG03' THEN 1 ELSE 0 END) AS DG03_CNT
		        
	
	        FROM TBL_DSFT_ACPN_PROC A						<!-- 불만 접수 처리 -->	       		   
			        LEFT JOIN TBL_HC_HIST C
			               ON A.DSFT_ACPN_SEQ_NO = C.DSFT_ACPN_SEQ_NO		  
			        LEFT JOIN TBL_CRPN_CUST_BASE D
			       		   ON A.ORGN_PTR_ST_CD = D.CUST_ID        	    	  
			        LEFT JOIN TBL_USR B
			       		   ON A.DSPSR_ID = B.USR_ID 
			        LEFT JOIN TBL_HR_EMP_CD F
			       		   ON A.DSPSR_ID = F.EMP_NO
			        LEFT JOIN TBL_HR_DEPT_CD G 
			       		   ON F.BLNG_DEPT_CD = G.DEPT_CD
			        LEFT JOIN TBL_SAP_CD H	
			       		   ON (A.ORGN_ENTR_DV_CD = H.CD_ID AND H.CD_CLAS_CD = '1')	
			        LEFT JOIN TBL_DSFT_TAXN_TYP_CD I
			       		   ON A.DSFT_TAXN_TYP_CD = I.DSFT_TAXN_TYP_CD
			       		   
			WHERE G.HGRK_DEPT_CD IN ('E00054','E00056','T21000','E00053','E00042','E00044','JD1000','E00048')
					AND A.PROC_DTM IS NOT NULL			
		   			AND (A.DEL_YN = 'N' OR A.DEL_YN IS NULL)			
	       		<dynamic>
	       			<!-- 년도별 -->   				    	
		    	    <isEqual property="cmb_gubun" compareValue="1">              
		                and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'                                                                  
		            </isEqual>
		            <!--  -->
		            <isEqual property="cmb_gubun" compareValue="2">
		            	<isEmpty property="cmb_half">
		            		and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'
		            	</isEmpty>              
		                <isEqual property="cmb_half" compareValue="1">
		                	and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0632000000'                                                                  
						</isEqual>	 
						<isEqual property="cmb_half" compareValue="2">
							and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '1232000000'
						</isEqual>	 
		            </isEqual>	 
		            <isEqual property="cmb_gubun" compareValue="3"> 
		            	<isEmpty>
							and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'	            	
		            	</isEmpty>    
		           		<isEqual property="cmb_qua" compareValue="1">
		           			and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0332000000'   
		           	  	</isEqual>
		           	  	<isEqual property="cmb_qua" compareValue="2">
		           	   		and A.ACPN_DTM between #time_key# || '0400000000' and #time_key# || '0632000000'   
		           	  	</isEqual>	 
		           	  	<isEqual property="cmb_qua" compareValue="3">
		           	   		and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '0932000000'   
		           	  	</isEqual>	 
	           	  		<isEqual property="cmb_qua" compareValue="4">
		           	   		and A.ACPN_DTM between #time_key# || '1000000000' and #time_key# || '1232000000'   
		           	  	</isEqual>	 	 
	            	</isEqual>	 				            
		    	 	<isEqual property="cmb_gubun" compareValue="4">              
		            	and A.ACPN_DTM between #time_key# || '00000000' and #time_key# || '32000000'                                                                  
		         	</isEqual>	
		    	 	<isEqual property="cmb_gubun" compareValue="5">              
		                and A.ACPN_DTM between #time_key# || '000000' and #time_key# || '240000'                                                                  
		         	</isEqual>
				
					<!-- 불만유형이 전체일 때는 두가지 경우 존재(전체, 품질&혼유)		-->				
					<isEmpty property="dsft_typ_cd">
						<isEqual property="dsft_typ_tot_gbn" compareValue="2">
							AND A.DSFT_TYP_CD IN ('CA','CK')
						</isEqual>
					</isEmpty>					
				  	<isNotEmpty prepend="AND" property="dsft_typ_cd">				<!-- 불만유형		-->
				    	A.DSFT_TYP_CD = #dsft_typ_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dsft_taxn_typ_cd">			<!-- 불만세부유형		-->
				    	A.DSFT_TAXN_TYP_CD = #dsft_taxn_typ_cd#
				  	</isNotEmpty>
			  		<isNotEmpty prepend="AND" property="orgn_ptr_st_cd">			<!-- 불만발생업체코드(가맹점SAP코드) -->
					    A.ORGN_PTR_ST_CD = #orgn_ptr_st_cd#
				  	</isNotEmpty>
				    <isNotEmpty prepend="AND" property="conn_chnl_kind_cd">			<!-- 접촉채널	-->
					    A.CONN_CHNL_KIND_CD = #conn_chnl_kind_cd#
				    </isNotEmpty>			  	
				  	<isNotEmpty prepend="AND" property="hgrk_dept_cd">				<!-- 부문/본부 -->
					    G.HGRK_DEPT_CD = #hgrk_dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dept_cd">					<!-- 처리팀 -->
					    G.DEPT_CD = #dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dspsr_id_nm">				<!-- 처리자명 		-->
					    (B.USR_NM LIKE '%'|| #dspsr_id_nm# ||'%' OR F.EMP_NM LIKE '%'|| #dspsr_id_nm# ||'%')
				  	</isNotEmpty>
			 		<isEqual property="hc_yn" compareValue="Y"> 					<!-- 해피콜여부  -->
			 			AND A.HC_YN = 'Y'
			 		</isEqual>
				 	<isEqual property="hc_yn" compareValue="N"> 					<!-- 해피콜여부  -->
				 		AND (A.HC_YN = 'N' OR A.HC_YN IS NULL)
				 	</isEqual>
				  	<isNotEmpty prepend="AND" property="attd_sft_cd">				<!-- 태도만족도 		-->
				  		(A.HC_YN = 'Y' AND C.ATTD_SFT_CD = #attd_sft_cd#)
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="rslt_sft_cd">				<!-- 결과만족도 		-->
				  		(A.HC_YN = 'Y' AND C.RSLT_SFT_CD = #rslt_sft_cd#)
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="hc_uabl_rsn_cd">			<!-- 해피콜불가사유		-->
				  		A.HC_UABL_RSN_CD = #hc_uabl_rsn_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="prdct_cd">					<!-- 불만제품 		-->
					    A.PRDCT_CD = #prdct_cd#
				  	</isNotEmpty>			  				 	
				  	<isNotEmpty prepend="AND" property="prblm_penom_cd">			<!-- 현상 		-->
					    A.PRBLM_PENOM_CD = #prblm_penom_cd#
				  	</isNotEmpty>
			 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="1">  	<!-- 시료품질 점검결과		-->
			 			AND	A.VHCL_QLIT_DSFT_CAUS_CD_CUST IS NOT NULL
			 	  	</isEqual>
			 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="2">   	<!-- 시료품질 점검결과		-->
			 	  		AND	A.VHCL_QLIT_DSFT_CAUS_CD_PTR_ST IS NOT NULL
			 	  	</isEqual>
				  	<isNotEmpty prepend="AND" property="vhcl_biztr_qlit_dsft_typ_cd">			<!-- 품질불만유형 		-->
					    A.VHCL_BIZTR_QLIT_DSFT_TYP_CD = #vhcl_biztr_qlit_dsft_typ_cd#
				  	</isNotEmpty>
				 	<isEqual property="vhcl_biztr_yn" compareValue="Y"> 			<!-- Kixx 품질서비스차량 출동 -->
				 		AND A.VHCL_BIZTR_YN = 'Y'
				 	</isEqual>
				 	<isEqual property="vhcl_biztr_yn" compareValue="N"> 			<!-- Kixx 품질서비스차량 출동 -->
				 		AND (A.VHCL_BIZTR_YN = 'N' OR A.VHCL_BIZTR_YN IS NULL)
				 	</isEqual>		 	  	
				 	<isEqual property="rwrd_yn" compareValue="Y"> 					<!-- 보상여부 -->
				 		AND A.RWRD_YN = 'Y'
				 	</isEqual>
				 	<isEqual property="rwrd_yn" compareValue="N"> 					<!-- 보상여부 -->
				 		AND (A.RWRD_YN = 'N' OR A.RWRD_YN IS NULL)
				 	</isEqual>
				 	
				 	<isEqual property="cps_amt_gbn" compareValue="1"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 주유소 보상금 1만원 미만-->
				 			AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 주유소 보상금 1만원 ~ 10만원-->
				 			AND (A.PTR_ST_CPS_AMT <![CDATA[>=]]> 10000 AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 주유소 보상금 10만원 초과-->
				 			AND A.PTR_ST_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	<isEqual property="cps_amt_gbn" compareValue="2"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 회사 보상금 1만원 미만-->
				 			AND A.CO_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 회사 보상금 1만원 ~ 10만원-->
				 			AND (A.CO_CPS_AMT <![CDATA[>=]]> 10000 AND A.CO_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 회사 보상금 10만원 초과-->
				 			AND A.CO_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	<isEqual property="cps_amt_gbn" compareValue="3"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 총 보상금 1만원 미만-->
				 			AND A.TOT_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 총 보상금 1만원 ~ 10만원-->
				 			AND (A.TOT_CPS_AMT <![CDATA[>=]]> 10000 AND A.TOT_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 총 보상금 10만원 초과-->
				 			AND A.TOT_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	
					<!--처리자구분에 체크항목이 하나도 없는 경우, 전체데이터가 조회된다.-->
				 	<isEqual property="cmp_handler" compareValue="1">   
				 		AND	A.DSPSR_YN_CNSLR = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="2">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="3">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="4">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="5">   
				 		AND	A.DSPSR_YN_DSFT_CHRG = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="6">   
				 		AND	A.DSPSR_YN_PART_HD = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="7">   
				 		AND	(A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
	       		</dynamic>  
		
			GROUP BY G.HGRK_DEPT_CDNM,G.HGRK_DEPT_CD, G.DEPT_CD,G.DEPT_CDNM
			
			UNION ALL
			
	        SELECT 	 
				 '기타부문' 		AS HGRK_DEPT_CDNM
				,'기타' 			AS DSPSR_CHRG_DEPT
				,'ZZZZZ' 		AS DEPT_CD	
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CA01' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CA01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CA01' THEN 1 ELSE 0 END) AS CA01_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CA02' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CA02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CA02' THEN 1 ELSE 0 END) AS CA02_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CA03' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CA03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CA03' THEN 1 ELSE 0 END) AS CA03_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB01' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CB01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB01' THEN 1 ELSE 0 END) AS CB01_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB02' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CB02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB02' THEN 1 ELSE 0 END) AS CB02_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB03' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CB03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB03' THEN 1 ELSE 0 END) AS CB03_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB04' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CB04_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB04' THEN 1 ELSE 0 END) AS CB04_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB05' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CB05_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB05' THEN 1 ELSE 0 END) AS CB05_CNT                
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB06' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CB06_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB06' THEN 1 ELSE 0 END) AS CB06_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB07' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CB07_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB07' THEN 1 ELSE 0 END) AS CB07_CNT                 	
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB08' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CB08_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB08' THEN 1 ELSE 0 END) AS CB08_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB09' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CB09_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB09' THEN 1 ELSE 0 END) AS CB09_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB10' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CB10_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CB10' THEN 1 ELSE 0 END) AS CB10_CNT                
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CC01' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CC01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CC01' THEN 1 ELSE 0 END) AS CC01_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CC02' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CC02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CC02' THEN 1 ELSE 0 END) AS CC02_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CC03' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CC03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CC03' THEN 1 ELSE 0 END) AS CC03_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CC04' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CC04_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CC04' THEN 1 ELSE 0 END) AS CC04_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CD01' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CD01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CD01' THEN 1 ELSE 0 END) AS CD01_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CE01' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CE01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CE01' THEN 1 ELSE 0 END) AS CE01_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CE02' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CE02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CE02' THEN 1 ELSE 0 END) AS CE02_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CE03' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CE03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CE03' THEN 1 ELSE 0 END) AS CE03_CNT		     
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CF01' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CF01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CF01' THEN 1 ELSE 0 END) AS CF01_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CG01' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CG01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CG01' THEN 1 ELSE 0 END) AS CG01_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CH01' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CH01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CH01' THEN 1 ELSE 0 END) AS CH01_CNT                 
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CI01' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CI01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CI01' THEN 1 ELSE 0 END) AS CI01_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CJ01' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CJ01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CJ01' THEN 1 ELSE 0 END) AS CJ01_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CK01' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CK01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CK01' THEN 1 ELSE 0 END) AS CK01_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CL01' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CL01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CL01' THEN 1 ELSE 0 END) AS CL01_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CM01' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CM01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CM01' THEN 1 ELSE 0 END) AS CM01_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CM02' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CM02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CM02' THEN 1 ELSE 0 END) AS CM02_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CM03' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CM03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CM03' THEN 1 ELSE 0 END) AS CM03_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CM04' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CM04_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CM04' THEN 1 ELSE 0 END) AS CM04_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CM05' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CM05_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CM05' THEN 1 ELSE 0 END) AS CM05_CNT                
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CN01' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CN01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CN01' THEN 1 ELSE 0 END) AS CN01_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CN02' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CN02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CN02' THEN 1 ELSE 0 END) AS CN02_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CN03' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CN03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CN03' THEN 1 ELSE 0 END) AS CN03_CNT		        
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CO01' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CO01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CO01' THEN 1 ELSE 0 END) AS CO01_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CO02' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CO02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CO02' THEN 1 ELSE 0 END) AS CO02_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CO03' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CO03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CO03' THEN 1 ELSE 0 END) AS CO03_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CO04' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CO04_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CO04' THEN 1 ELSE 0 END) AS CO04_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CO05' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CO05_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CO05' THEN 1 ELSE 0 END) AS CO05_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CP01' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CP01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CP01' THEN 1 ELSE 0 END) AS CP01_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CP02' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CP02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CP02' THEN 1 ELSE 0 END) AS CP02_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CP03' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CP03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CP03' THEN 1 ELSE 0 END) AS CP03_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CQ01' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CQ01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CQ01' THEN 1 ELSE 0 END) AS CQ01_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CQ02' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CQ02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CQ02' THEN 1 ELSE 0 END) AS CQ02_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CQ03' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CQ03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CQ03' THEN 1 ELSE 0 END) AS CQ03_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CQ04' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CQ04_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CQ04' THEN 1 ELSE 0 END) AS CQ04_CNT                 
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CR01' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CR01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='CR01' THEN 1 ELSE 0 END) AS CR01_CNT                 
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA01' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DA01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA01' THEN 1 ELSE 0 END) AS DA01_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA02' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DA02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA02' THEN 1 ELSE 0 END) AS DA02_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA03' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DA03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA03' THEN 1 ELSE 0 END) AS DA03_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA04' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DA04_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA04' THEN 1 ELSE 0 END) AS DA04_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA05' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DA05_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA05' THEN 1 ELSE 0 END) AS DA05_CNT                
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA06' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DA06_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA06' THEN 1 ELSE 0 END) AS DA06_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA07' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DA07_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DA07' THEN 1 ELSE 0 END) AS DA07_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DB01' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DB01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DB01' THEN 1 ELSE 0 END) AS DB01_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DB02' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DB02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DB02' THEN 1 ELSE 0 END) AS DB02_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DB03' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DB03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DB03' THEN 1 ELSE 0 END) AS DB03_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DB04' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DB04_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DB04' THEN 1 ELSE 0 END) AS DB04_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DB05' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DB05_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DB05' THEN 1 ELSE 0 END) AS DB05_CNT                
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DB06' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DB06_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DB06' THEN 1 ELSE 0 END) AS DB06_CNT                
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DC01' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DC01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DC01' THEN 1 ELSE 0 END) AS DC01_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DC02' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DC02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DC02' THEN 1 ELSE 0 END) AS DC02_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DC03' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DC03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DC03' THEN 1 ELSE 0 END) AS DC03_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DD01' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DD01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DD01' THEN 1 ELSE 0 END) AS DD01_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DD02' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DD02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DD02' THEN 1 ELSE 0 END) AS DD02_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DD03' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DD03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DD03' THEN 1 ELSE 0 END) AS DD03_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DD04' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DD04_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DD04' THEN 1 ELSE 0 END) AS DD04_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DD05' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DD05_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DD05' THEN 1 ELSE 0 END) AS DD05_CNT                
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DD06' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DD06_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DD06' THEN 1 ELSE 0 END) AS DD06_CNT		       
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DE01' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DE01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DE01' THEN 1 ELSE 0 END) AS DE01_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DE02' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DE02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DE02' THEN 1 ELSE 0 END) AS DE02_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DE03' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DE03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DE03' THEN 1 ELSE 0 END) AS DE03_CNT                 
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DF01' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DF01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DF01' THEN 1 ELSE 0 END) AS DF01_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DF02' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DF02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DF02' THEN 1 ELSE 0 END) AS DF02_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DF03' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DF03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DF03' THEN 1 ELSE 0 END) AS DF03_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DF04' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DF04_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DF04' THEN 1 ELSE 0 END) AS DF04_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DG01' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DG01_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DG01' THEN 1 ELSE 0 END) AS DG01_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DG02' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DG02_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DG02' THEN 1 ELSE 0 END) AS DG02_CNT
		        ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DG03' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS DG03_DT
                ,SUM(CASE WHEN I.DSFT_TAXN_TYP_CD='DG03' THEN 1 ELSE 0 END) AS DG03_CNT
	
	        FROM TBL_DSFT_ACPN_PROC A						<!-- 불만 접수 처리 -->	       		   
			        LEFT JOIN TBL_HC_HIST C
			               ON A.DSFT_ACPN_SEQ_NO = C.DSFT_ACPN_SEQ_NO		  
			        LEFT JOIN TBL_CRPN_CUST_BASE D
			       		   ON A.ORGN_PTR_ST_CD = D.CUST_ID        	    	  
			        LEFT JOIN TBL_USR B
			       		   ON A.DSPSR_ID = B.USR_ID 
			        LEFT JOIN TBL_HR_EMP_CD F
			       		   ON A.DSPSR_ID = F.EMP_NO
			        LEFT JOIN TBL_HR_DEPT_CD G 
			       		   ON F.BLNG_DEPT_CD = G.DEPT_CD
			        LEFT JOIN TBL_SAP_CD H	
			       		   ON (A.ORGN_ENTR_DV_CD = H.CD_ID AND H.CD_CLAS_CD = '1')	
			        LEFT JOIN TBL_DSFT_TAXN_TYP_CD I
			       		   ON A.DSFT_TAXN_TYP_CD = I.DSFT_TAXN_TYP_CD
			       		   
			WHERE (G.HGRK_DEPT_CD IS NULL OR G.HGRK_DEPT_CD NOT IN ('E00054','E00056','T21000','E00053','E00042','E00044','JD1000','E00048'))
					AND A.PROC_DTM IS NOT NULL			
					AND (A.DEL_YN = 'N' OR A.DEL_YN IS NULL)
	       		<dynamic>
	       			<!-- 년도별 -->   				    	
		    	    <isEqual property="cmb_gubun" compareValue="1">              
		                and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'                                                                  
		            </isEqual>
		            <!--  -->
		            <isEqual property="cmb_gubun" compareValue="2">
		            	<isEmpty property="cmb_half">
		            		and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'
		            	</isEmpty>              
		                <isEqual property="cmb_half" compareValue="1">
		                	and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0632000000'                                                                  
						</isEqual>	 
						<isEqual property="cmb_half" compareValue="2">
							and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '1232000000'
						</isEqual>	 
		            </isEqual>	 
		            <isEqual property="cmb_gubun" compareValue="3"> 
		            	<isEmpty>
							and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'	            	
		            	</isEmpty>    
		           		<isEqual property="cmb_qua" compareValue="1">
		           			and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0332000000'   
		           	  	</isEqual>
		           	  	<isEqual property="cmb_qua" compareValue="2">
		           	   		and A.ACPN_DTM between #time_key# || '0400000000' and #time_key# || '0632000000'   
		           	  	</isEqual>	 
		           	  	<isEqual property="cmb_qua" compareValue="3">
		           	   		and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '0932000000'   
		           	  	</isEqual>	 
	           	  		<isEqual property="cmb_qua" compareValue="4">
		           	   		and A.ACPN_DTM between #time_key# || '1000000000' and #time_key# || '1232000000'   
		           	  	</isEqual>	 	 
	            	</isEqual>	 				            
		    	 	<isEqual property="cmb_gubun" compareValue="4">              
		            	and A.ACPN_DTM between #time_key# || '00000000' and #time_key# || '32000000'                                                                  
		         	</isEqual>	
		    	 	<isEqual property="cmb_gubun" compareValue="5">              
		                and A.ACPN_DTM between #time_key# || '000000' and #time_key# || '240000'                                                                  
		         	</isEqual>
				
					<!-- 불만유형이 전체일 때는 두가지 경우 존재(전체, 품질&혼유)		-->				
					<isEmpty property="dsft_typ_cd">
						<isEqual property="dsft_typ_tot_gbn" compareValue="2">
							AND A.DSFT_TYP_CD IN ('CA','CK')
						</isEqual>
					</isEmpty>					
				  	<isNotEmpty prepend="AND" property="dsft_typ_cd">				<!-- 불만유형		-->
				    	A.DSFT_TYP_CD = #dsft_typ_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dsft_taxn_typ_cd">			<!-- 불만세부유형		-->
				    	A.DSFT_TAXN_TYP_CD = #dsft_taxn_typ_cd#
				  	</isNotEmpty>
			  		<isNotEmpty prepend="AND" property="orgn_ptr_st_cd">			<!-- 불만발생업체코드(가맹점SAP코드) -->
					    A.ORGN_PTR_ST_CD = #orgn_ptr_st_cd#
				  	</isNotEmpty>
				    <isNotEmpty prepend="AND" property="conn_chnl_kind_cd">			<!-- 접촉채널	-->
					    A.CONN_CHNL_KIND_CD = #conn_chnl_kind_cd#
				    </isNotEmpty>			  	
				  	<isNotEmpty prepend="AND" property="hgrk_dept_cd">				<!-- 부문/본부 -->
					    G.HGRK_DEPT_CD = #hgrk_dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dept_cd">					<!-- 처리팀 -->
					    G.DEPT_CD = #dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dspsr_id_nm">				<!-- 처리자명 		-->
					    (B.USR_NM LIKE '%'|| #dspsr_id_nm# ||'%' OR F.EMP_NM LIKE '%'|| #dspsr_id_nm# ||'%')
				  	</isNotEmpty>
			 		<isEqual property="hc_yn" compareValue="Y"> 					<!-- 해피콜여부  -->
			 			AND A.HC_YN = 'Y'
			 		</isEqual>
				 	<isEqual property="hc_yn" compareValue="N"> 					<!-- 해피콜여부  -->
				 		AND (A.HC_YN = 'N' OR A.HC_YN IS NULL)
				 	</isEqual>
				  	<isNotEmpty prepend="AND" property="attd_sft_cd">				<!-- 태도만족도 		-->
				  		(A.HC_YN = 'Y' AND C.ATTD_SFT_CD = #attd_sft_cd#)
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="rslt_sft_cd">				<!-- 결과만족도 		-->
				  		(A.HC_YN = 'Y' AND C.RSLT_SFT_CD = #rslt_sft_cd#)
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="hc_uabl_rsn_cd">			<!-- 해피콜불가사유		-->
				  		A.HC_UABL_RSN_CD = #hc_uabl_rsn_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="prdct_cd">					<!-- 불만제품 		-->
					    A.PRDCT_CD = #prdct_cd#
				  	</isNotEmpty>			  				 	
				  	<isNotEmpty prepend="AND" property="prblm_penom_cd">			<!-- 현상 		-->
					    A.PRBLM_PENOM_CD = #prblm_penom_cd#
				  	</isNotEmpty>
			 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="1">  	<!-- 시료품질 점검결과		-->
			 			AND	A.VHCL_QLIT_DSFT_CAUS_CD_CUST IS NOT NULL
			 	  	</isEqual>
			 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="2">   	<!-- 시료품질 점검결과		-->
			 	  		AND	A.VHCL_QLIT_DSFT_CAUS_CD_PTR_ST IS NOT NULL
			 	  	</isEqual>
				  	<isNotEmpty prepend="AND" property="vhcl_biztr_qlit_dsft_typ_cd">			<!-- 품질불만유형 		-->
					    A.VHCL_BIZTR_QLIT_DSFT_TYP_CD = #vhcl_biztr_qlit_dsft_typ_cd#
				  	</isNotEmpty>
				 	<isEqual property="vhcl_biztr_yn" compareValue="Y"> 			<!-- Kixx 품질서비스차량 출동 -->
				 		AND A.VHCL_BIZTR_YN = 'Y'
				 	</isEqual>
				 	<isEqual property="vhcl_biztr_yn" compareValue="N"> 			<!-- Kixx 품질서비스차량 출동 -->
				 		AND (A.VHCL_BIZTR_YN = 'N' OR A.VHCL_BIZTR_YN IS NULL)
				 	</isEqual>		 	  	
				 	<isEqual property="rwrd_yn" compareValue="Y"> 					<!-- 보상여부 -->
				 		AND A.RWRD_YN = 'Y'
				 	</isEqual>
				 	<isEqual property="rwrd_yn" compareValue="N"> 					<!-- 보상여부 -->
				 		AND (A.RWRD_YN = 'N' OR A.RWRD_YN IS NULL)
				 	</isEqual>
				 	
				 	<isEqual property="cps_amt_gbn" compareValue="1"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 주유소 보상금 1만원 미만-->
				 			AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 주유소 보상금 1만원 ~ 10만원-->
				 			AND (A.PTR_ST_CPS_AMT <![CDATA[>=]]> 10000 AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 주유소 보상금 10만원 초과-->
				 			AND A.PTR_ST_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	<isEqual property="cps_amt_gbn" compareValue="2"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 회사 보상금 1만원 미만-->
				 			AND A.CO_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 회사 보상금 1만원 ~ 10만원-->
				 			AND (A.CO_CPS_AMT <![CDATA[>=]]> 10000 AND A.CO_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 회사 보상금 10만원 초과-->
				 			AND A.CO_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	<isEqual property="cps_amt_gbn" compareValue="3"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 총 보상금 1만원 미만-->
				 			AND A.TOT_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 총 보상금 1만원 ~ 10만원-->
				 			AND (A.TOT_CPS_AMT <![CDATA[>=]]> 10000 AND A.TOT_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 총 보상금 10만원 초과-->
				 			AND A.TOT_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	
					<!--처리자구분에 체크항목이 하나도 없는 경우, 전체데이터가 조회된다.-->
				 	<isEqual property="cmp_handler" compareValue="1">   
				 		AND	A.DSPSR_YN_CNSLR = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="2">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="3">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="4">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="5">   
				 		AND	A.DSPSR_YN_DSFT_CHRG = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="6">   
				 		AND	A.DSPSR_YN_PART_HD = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="7">   
				 		AND	(A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
	       		</dynamic> 
	
		) Q2
	
	ON Q1.DEPT_CD = Q2.DEPT_CD
	
	GROUP BY ROLLUP(Q1.HGRK_DEPT_CD,Q1.DEPT_CD)
	ORDER BY Q1.HGRK_DEPT_CD, MAX(Q1.DEPT_CDNM), Q1.HGRK_DEPT_CD,Q1.DEPT_CD	
 	</select> 	
 	
	<!-- 불만조회 - 조직별(문제현상)-->
 	<select id="Get_CMP_STT5_SELECT" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
	SELECT
	     Q1.HGRK_DEPT_CD        						AS HGRK_DEPT_CD
	    ,CASE WHEN Q1.HGRK_DEPT_CD IS NULL THEN '전체' 
	    	ELSE MAX(Q1.HGRK_DEPT_CDNM) END 			AS HGRK_DEPT_CDNM
	    ,Q1.DEPT_CD             						AS DEPT_CD
	    ,CASE WHEN Q1.HGRK_DEPT_CD IS NULL THEN '평균' 
	          WHEN Q1.DEPT_CD IS NULL THEN '소계' 
	        ELSE MAX(Q1.DEPT_CDNM) END  				AS DSPSR_CHRG_DEPT
	    
        ,CASE WHEN SUM(Q2.CA_NO_CNT)>0 THEN ROUND(SUM(Q2.CA_NO_DT)/SUM(Q2.CA_NO_CNT),1) ELSE NULL END AS CA_NO	    
        ,CASE WHEN SUM(Q2.CA_CA_CNT)>0 THEN ROUND(SUM(Q2.CA_CA_DT)/SUM(Q2.CA_CA_CNT),1) ELSE NULL END AS CA_CA
        ,CASE WHEN SUM(Q2.CA_CB_CNT)>0 THEN ROUND(SUM(Q2.CA_CB_DT)/SUM(Q2.CA_CB_CNT),1) ELSE NULL END AS CA_CB
        ,CASE WHEN SUM(Q2.CA_CC_CNT)>0 THEN ROUND(SUM(Q2.CA_CC_DT)/SUM(Q2.CA_CC_CNT),1) ELSE NULL END AS CA_CC
        ,CASE WHEN SUM(Q2.CA_CD_CNT)>0 THEN ROUND(SUM(Q2.CA_CD_DT)/SUM(Q2.CA_CD_CNT),1) ELSE NULL END AS CA_CD        
        ,CASE WHEN SUM(Q2.CA_CE_CNT)>0 THEN ROUND(SUM(Q2.CA_CE_DT)/SUM(Q2.CA_CE_CNT),1) ELSE NULL END AS CA_CE
        ,CASE WHEN SUM(Q2.CA_CF_CNT)>0 THEN ROUND(SUM(Q2.CA_CF_DT)/SUM(Q2.CA_CF_CNT),1) ELSE NULL END AS CA_CF
        ,CASE WHEN SUM(Q2.CA_CG_CNT)>0 THEN ROUND(SUM(Q2.CA_CG_DT)/SUM(Q2.CA_CG_CNT),1) ELSE NULL END AS CA_CG        
        ,CASE WHEN SUM(Q2.CA_CH_CNT)>0 THEN ROUND(SUM(Q2.CA_CH_DT)/SUM(Q2.CA_CH_CNT),1) ELSE NULL END AS CA_CH
        ,CASE WHEN SUM(Q2.CA_CI_CNT)>0 THEN ROUND(SUM(Q2.CA_CI_DT)/SUM(Q2.CA_CI_CNT),1) ELSE NULL END AS CA_CI
        ,CASE WHEN SUM(Q2.CA_CJ_CNT)>0 THEN ROUND(SUM(Q2.CA_CJ_DT)/SUM(Q2.CA_CJ_CNT),1) ELSE NULL END AS CA_CJ
        ,CASE WHEN SUM(Q2.CA_CK_CNT)>0 THEN ROUND(SUM(Q2.CA_CK_DT)/SUM(Q2.CA_CK_CNT),1) ELSE NULL END AS CA_CK
        ,CASE WHEN SUM(Q2.CA_CL_CNT)>0 THEN ROUND(SUM(Q2.CA_CL_DT)/SUM(Q2.CA_CL_CNT),1) ELSE NULL END AS CA_CL
        ,CASE WHEN SUM(Q2.CA_CM_CNT)>0 THEN ROUND(SUM(Q2.CA_CM_DT)/SUM(Q2.CA_CM_CNT),1) ELSE NULL END AS CA_CM
        ,CASE WHEN SUM(Q2.CA_CN_CNT)>0 THEN ROUND(SUM(Q2.CA_CN_DT)/SUM(Q2.CA_CN_CNT),1) ELSE NULL END AS CA_CN
        ,CASE WHEN SUM(Q2.CA_CO_CNT)>0 THEN ROUND(SUM(Q2.CA_CO_DT)/SUM(Q2.CA_CO_CNT),1) ELSE NULL END AS CA_CO
        ,CASE WHEN SUM(Q2.CA_CR_CNT)>0 THEN ROUND(SUM(Q2.CA_CR_DT)/SUM(Q2.CA_CR_CNT),1) ELSE NULL END AS CA_CR
        ,CASE WHEN SUM(Q2.CA_CT_CNT)>0 THEN ROUND(SUM(Q2.CA_CT_DT)/SUM(Q2.CA_CT_CNT),1) ELSE NULL END AS CA_CT
        ,CASE WHEN SUM(Q2.CA_CU_CNT)>0 THEN ROUND(SUM(Q2.CA_CU_DT)/SUM(Q2.CA_CU_CNT),1) ELSE NULL END AS CA_CU
        ,CASE WHEN SUM(Q2.CA_CV_CNT)>0 THEN ROUND(SUM(Q2.CA_CV_DT)/SUM(Q2.CA_CV_CNT),1) ELSE NULL END AS CA_CV
        ,CASE WHEN SUM(Q2.CA_CW_CNT)>0 THEN ROUND(SUM(Q2.CA_CW_DT)/SUM(Q2.CA_CW_CNT),1) ELSE NULL END AS CA_CW                
        ,CASE WHEN SUM(Q2.CA_CX_CNT)>0 THEN ROUND(SUM(Q2.CA_CX_DT)/SUM(Q2.CA_CX_CNT),1) ELSE NULL END AS CA_CX
        ,CASE WHEN SUM(Q2.CA_CY_CNT)>0 THEN ROUND(SUM(Q2.CA_CY_DT)/SUM(Q2.CA_CY_CNT),1) ELSE NULL END AS CA_CY

        ,CASE WHEN 
        (
         NVL(SUM(Q2.CA_NO_CNT),0)+NVL(SUM(Q2.CA_CA_CNT),0)+NVL(SUM(Q2.CA_CB_CNT),0)+NVL(SUM(Q2.CA_CC_CNT),0)+NVL(SUM(Q2.CA_CD_CNT),0)+NVL(SUM(Q2.CA_CE_CNT),0)+
	     NVL(SUM(Q2.CA_CF_CNT),0)+NVL(SUM(Q2.CA_CG_CNT),0)+NVL(SUM(Q2.CA_CH_CNT),0)+NVL(SUM(Q2.CA_CI_CNT),0)+NVL(SUM(Q2.CA_CJ_CNT),0)+NVL(SUM(Q2.CA_CK_CNT),0)+
	     NVL(SUM(Q2.CA_CL_CNT),0)+NVL(SUM(Q2.CA_CM_CNT),0)+NVL(SUM(Q2.CA_CN_CNT),0)+NVL(SUM(Q2.CA_CO_CNT),0)+NVL(SUM(Q2.CA_CR_CNT),0)+NVL(SUM(Q2.CA_CT_CNT),0)+
	     NVL(SUM(Q2.CA_CU_CNT),0)+NVL(SUM(Q2.CA_CV_CNT),0)+NVL(SUM(Q2.CA_CW_CNT),0)+NVL(SUM(Q2.CA_CX_CNT),0)+NVL(SUM(Q2.CA_CY_CNT),0)
	    ) > 0 THEN ROUND(
	    (
	     NVL(SUM(Q2.CA_NO_DT),0)+NVL(SUM(Q2.CA_CA_DT),0)+NVL(SUM(Q2.CA_CB_DT),0)+NVL(SUM(Q2.CA_CC_DT),0)+NVL(SUM(Q2.CA_CD_DT),0)+NVL(SUM(Q2.CA_CE_DT),0)+
	     NVL(SUM(Q2.CA_CF_DT),0)+NVL(SUM(Q2.CA_CG_DT),0)+NVL(SUM(Q2.CA_CH_DT),0)+NVL(SUM(Q2.CA_CI_DT),0)+NVL(SUM(Q2.CA_CJ_DT),0)+NVL(SUM(Q2.CA_CK_DT),0)+
	     NVL(SUM(Q2.CA_CL_DT),0)+NVL(SUM(Q2.CA_CM_DT),0)+NVL(SUM(Q2.CA_CN_DT),0)+NVL(SUM(Q2.CA_CO_DT),0)+NVL(SUM(Q2.CA_CR_DT),0)+NVL(SUM(Q2.CA_CT_DT),0)+
	     NVL(SUM(Q2.CA_CU_DT),0)+NVL(SUM(Q2.CA_CV_DT),0)+NVL(SUM(Q2.CA_CW_DT),0)+NVL(SUM(Q2.CA_CX_DT),0)+NVL(SUM(Q2.CA_CY_DT),0)
	    )/
        (
         NVL(SUM(Q2.CA_NO_CNT),0)+NVL(SUM(Q2.CA_CA_CNT),0)+NVL(SUM(Q2.CA_CB_CNT),0)+NVL(SUM(Q2.CA_CC_CNT),0)+NVL(SUM(Q2.CA_CD_CNT),0)+NVL(SUM(Q2.CA_CE_CNT),0)+
	     NVL(SUM(Q2.CA_CF_CNT),0)+NVL(SUM(Q2.CA_CG_CNT),0)+NVL(SUM(Q2.CA_CH_CNT),0)+NVL(SUM(Q2.CA_CI_CNT),0)+NVL(SUM(Q2.CA_CJ_CNT),0)+NVL(SUM(Q2.CA_CK_CNT),0)+
	     NVL(SUM(Q2.CA_CL_CNT),0)+NVL(SUM(Q2.CA_CM_CNT),0)+NVL(SUM(Q2.CA_CN_CNT),0)+NVL(SUM(Q2.CA_CO_CNT),0)+NVL(SUM(Q2.CA_CR_CNT),0)+NVL(SUM(Q2.CA_CT_CNT),0)+
	     NVL(SUM(Q2.CA_CU_CNT),0)+NVL(SUM(Q2.CA_CV_CNT),0)+NVL(SUM(Q2.CA_CW_CNT),0)+NVL(SUM(Q2.CA_CX_CNT),0)+NVL(SUM(Q2.CA_CY_CNT),0)
	    ),1) ELSE NULL END AS CA_SUM 	    
	    
        ,CASE WHEN SUM(Q2.CK_NO_CNT)>0 THEN ROUND(SUM(Q2.CK_NO_DT)/SUM(Q2.CK_NO_CNT),1) ELSE NULL END AS CK_NO	    
        ,CASE WHEN SUM(Q2.CK_CK_CNT)>0 THEN ROUND(SUM(Q2.CK_CK_DT)/SUM(Q2.CK_CK_CNT),1) ELSE NULL END AS CK_CA
        ,CASE WHEN SUM(Q2.CK_CB_CNT)>0 THEN ROUND(SUM(Q2.CK_CB_DT)/SUM(Q2.CK_CB_CNT),1) ELSE NULL END AS CK_CB
        ,CASE WHEN SUM(Q2.CK_CC_CNT)>0 THEN ROUND(SUM(Q2.CK_CC_DT)/SUM(Q2.CK_CC_CNT),1) ELSE NULL END AS CK_CC
        ,CASE WHEN SUM(Q2.CK_CD_CNT)>0 THEN ROUND(SUM(Q2.CK_CD_DT)/SUM(Q2.CK_CD_CNT),1) ELSE NULL END AS CK_CD        
        ,CASE WHEN SUM(Q2.CK_CE_CNT)>0 THEN ROUND(SUM(Q2.CK_CE_DT)/SUM(Q2.CK_CE_CNT),1) ELSE NULL END AS CK_CE
        ,CASE WHEN SUM(Q2.CK_CF_CNT)>0 THEN ROUND(SUM(Q2.CK_CF_DT)/SUM(Q2.CK_CF_CNT),1) ELSE NULL END AS CK_CF
        ,CASE WHEN SUM(Q2.CK_CG_CNT)>0 THEN ROUND(SUM(Q2.CK_CG_DT)/SUM(Q2.CK_CG_CNT),1) ELSE NULL END AS CK_CG        
        ,CASE WHEN SUM(Q2.CK_CH_CNT)>0 THEN ROUND(SUM(Q2.CK_CH_DT)/SUM(Q2.CK_CH_CNT),1) ELSE NULL END AS CK_CH
        ,CASE WHEN SUM(Q2.CK_CI_CNT)>0 THEN ROUND(SUM(Q2.CK_CI_DT)/SUM(Q2.CK_CI_CNT),1) ELSE NULL END AS CK_CI
        ,CASE WHEN SUM(Q2.CK_CJ_CNT)>0 THEN ROUND(SUM(Q2.CK_CJ_DT)/SUM(Q2.CK_CJ_CNT),1) ELSE NULL END AS CK_CJ
        ,CASE WHEN SUM(Q2.CK_CK_CNT)>0 THEN ROUND(SUM(Q2.CK_CK_DT)/SUM(Q2.CK_CK_CNT),1) ELSE NULL END AS CK_CK
        ,CASE WHEN SUM(Q2.CK_CL_CNT)>0 THEN ROUND(SUM(Q2.CK_CL_DT)/SUM(Q2.CK_CL_CNT),1) ELSE NULL END AS CK_CL
        ,CASE WHEN SUM(Q2.CK_CM_CNT)>0 THEN ROUND(SUM(Q2.CK_CM_DT)/SUM(Q2.CK_CM_CNT),1) ELSE NULL END AS CK_CM
        ,CASE WHEN SUM(Q2.CK_CN_CNT)>0 THEN ROUND(SUM(Q2.CK_CN_DT)/SUM(Q2.CK_CN_CNT),1) ELSE NULL END AS CK_CN
        ,CASE WHEN SUM(Q2.CK_CO_CNT)>0 THEN ROUND(SUM(Q2.CK_CO_DT)/SUM(Q2.CK_CO_CNT),1) ELSE NULL END AS CK_CO
        ,CASE WHEN SUM(Q2.CK_CR_CNT)>0 THEN ROUND(SUM(Q2.CK_CR_DT)/SUM(Q2.CK_CR_CNT),1) ELSE NULL END AS CK_CR
        ,CASE WHEN SUM(Q2.CK_CT_CNT)>0 THEN ROUND(SUM(Q2.CK_CT_DT)/SUM(Q2.CK_CT_CNT),1) ELSE NULL END AS CK_CT
        ,CASE WHEN SUM(Q2.CK_CU_CNT)>0 THEN ROUND(SUM(Q2.CK_CU_DT)/SUM(Q2.CK_CU_CNT),1) ELSE NULL END AS CK_CU
        ,CASE WHEN SUM(Q2.CK_CV_CNT)>0 THEN ROUND(SUM(Q2.CK_CV_DT)/SUM(Q2.CK_CV_CNT),1) ELSE NULL END AS CK_CV
        ,CASE WHEN SUM(Q2.CK_CW_CNT)>0 THEN ROUND(SUM(Q2.CK_CW_DT)/SUM(Q2.CK_CW_CNT),1) ELSE NULL END AS CK_CW                
        ,CASE WHEN SUM(Q2.CK_CX_CNT)>0 THEN ROUND(SUM(Q2.CK_CX_DT)/SUM(Q2.CK_CX_CNT),1) ELSE NULL END AS CK_CX
        ,CASE WHEN SUM(Q2.CK_CY_CNT)>0 THEN ROUND(SUM(Q2.CK_CY_DT)/SUM(Q2.CK_CY_CNT),1) ELSE NULL END AS CK_CY
        ,CASE WHEN 
        (
         NVL(SUM(Q2.CK_NO_CNT),0)+NVL(SUM(Q2.CK_CK_CNT),0)+NVL(SUM(Q2.CK_CB_CNT),0)+NVL(SUM(Q2.CK_CC_CNT),0)+NVL(SUM(Q2.CK_CD_CNT),0)+NVL(SUM(Q2.CK_CE_CNT),0)+
	     NVL(SUM(Q2.CK_CF_CNT),0)+NVL(SUM(Q2.CK_CG_CNT),0)+NVL(SUM(Q2.CK_CH_CNT),0)+NVL(SUM(Q2.CK_CI_CNT),0)+NVL(SUM(Q2.CK_CJ_CNT),0)+NVL(SUM(Q2.CK_CK_CNT),0)+
	     NVL(SUM(Q2.CK_CL_CNT),0)+NVL(SUM(Q2.CK_CM_CNT),0)+NVL(SUM(Q2.CK_CN_CNT),0)+NVL(SUM(Q2.CK_CO_CNT),0)+NVL(SUM(Q2.CK_CR_CNT),0)+NVL(SUM(Q2.CK_CT_CNT),0)+
	     NVL(SUM(Q2.CK_CU_CNT),0)+NVL(SUM(Q2.CK_CV_CNT),0)+NVL(SUM(Q2.CK_CW_CNT),0)+NVL(SUM(Q2.CK_CX_CNT),0)+NVL(SUM(Q2.CK_CY_CNT),0)
	    ) > 0 THEN ROUND(
	    (
	     NVL(SUM(Q2.CK_NO_DT),0)+NVL(SUM(Q2.CK_CK_DT),0)+NVL(SUM(Q2.CK_CB_DT),0)+NVL(SUM(Q2.CK_CC_DT),0)+NVL(SUM(Q2.CK_CD_DT),0)+NVL(SUM(Q2.CK_CE_DT),0)+
	     NVL(SUM(Q2.CK_CF_DT),0)+NVL(SUM(Q2.CK_CG_DT),0)+NVL(SUM(Q2.CK_CH_DT),0)+NVL(SUM(Q2.CK_CI_DT),0)+NVL(SUM(Q2.CK_CJ_DT),0)+NVL(SUM(Q2.CK_CK_DT),0)+
	     NVL(SUM(Q2.CK_CL_DT),0)+NVL(SUM(Q2.CK_CM_DT),0)+NVL(SUM(Q2.CK_CN_DT),0)+NVL(SUM(Q2.CK_CO_DT),0)+NVL(SUM(Q2.CK_CR_DT),0)+NVL(SUM(Q2.CK_CT_DT),0)+
	     NVL(SUM(Q2.CK_CU_DT),0)+NVL(SUM(Q2.CK_CV_DT),0)+NVL(SUM(Q2.CK_CW_DT),0)+NVL(SUM(Q2.CK_CX_DT),0)+NVL(SUM(Q2.CK_CY_DT),0)
	    )/
        (
         NVL(SUM(Q2.CK_NO_CNT),0)+NVL(SUM(Q2.CK_CK_CNT),0)+NVL(SUM(Q2.CK_CB_CNT),0)+NVL(SUM(Q2.CK_CC_CNT),0)+NVL(SUM(Q2.CK_CD_CNT),0)+NVL(SUM(Q2.CK_CE_CNT),0)+
	     NVL(SUM(Q2.CK_CF_CNT),0)+NVL(SUM(Q2.CK_CG_CNT),0)+NVL(SUM(Q2.CK_CH_CNT),0)+NVL(SUM(Q2.CK_CI_CNT),0)+NVL(SUM(Q2.CK_CJ_CNT),0)+NVL(SUM(Q2.CK_CK_CNT),0)+
	     NVL(SUM(Q2.CK_CL_CNT),0)+NVL(SUM(Q2.CK_CM_CNT),0)+NVL(SUM(Q2.CK_CN_CNT),0)+NVL(SUM(Q2.CK_CO_CNT),0)+NVL(SUM(Q2.CK_CR_CNT),0)+NVL(SUM(Q2.CK_CT_CNT),0)+
	     NVL(SUM(Q2.CK_CU_CNT),0)+NVL(SUM(Q2.CK_CV_CNT),0)+NVL(SUM(Q2.CK_CW_CNT),0)+NVL(SUM(Q2.CK_CX_CNT),0)+NVL(SUM(Q2.CK_CY_CNT),0)
	    ),1) ELSE NULL END AS CK_SUM
	    
        ,CASE WHEN 
        (
         NVL(SUM(Q2.CA_NO_CNT),0)+NVL(SUM(Q2.CA_CA_CNT),0)+NVL(SUM(Q2.CA_CB_CNT),0)+NVL(SUM(Q2.CA_CC_CNT),0)+NVL(SUM(Q2.CA_CD_CNT),0)+NVL(SUM(Q2.CA_CE_CNT),0)+
	     NVL(SUM(Q2.CA_CF_CNT),0)+NVL(SUM(Q2.CA_CG_CNT),0)+NVL(SUM(Q2.CA_CH_CNT),0)+NVL(SUM(Q2.CA_CI_CNT),0)+NVL(SUM(Q2.CA_CJ_CNT),0)+NVL(SUM(Q2.CA_CK_CNT),0)+
	     NVL(SUM(Q2.CA_CL_CNT),0)+NVL(SUM(Q2.CA_CM_CNT),0)+NVL(SUM(Q2.CA_CN_CNT),0)+NVL(SUM(Q2.CA_CO_CNT),0)+NVL(SUM(Q2.CA_CR_CNT),0)+NVL(SUM(Q2.CA_CT_CNT),0)+
	     NVL(SUM(Q2.CA_CU_CNT),0)+NVL(SUM(Q2.CA_CV_CNT),0)+NVL(SUM(Q2.CA_CW_CNT),0)+NVL(SUM(Q2.CA_CX_CNT),0)+NVL(SUM(Q2.CA_CY_CNT),0)+
         NVL(SUM(Q2.CK_NO_CNT),0)+NVL(SUM(Q2.CK_CK_CNT),0)+NVL(SUM(Q2.CK_CB_CNT),0)+NVL(SUM(Q2.CK_CC_CNT),0)+NVL(SUM(Q2.CK_CD_CNT),0)+NVL(SUM(Q2.CK_CE_CNT),0)+
	     NVL(SUM(Q2.CK_CF_CNT),0)+NVL(SUM(Q2.CK_CG_CNT),0)+NVL(SUM(Q2.CK_CH_CNT),0)+NVL(SUM(Q2.CK_CI_CNT),0)+NVL(SUM(Q2.CK_CJ_CNT),0)+NVL(SUM(Q2.CK_CK_CNT),0)+
	     NVL(SUM(Q2.CK_CL_CNT),0)+NVL(SUM(Q2.CK_CM_CNT),0)+NVL(SUM(Q2.CK_CN_CNT),0)+NVL(SUM(Q2.CK_CO_CNT),0)+NVL(SUM(Q2.CK_CR_CNT),0)+NVL(SUM(Q2.CK_CT_CNT),0)+
	     NVL(SUM(Q2.CK_CU_CNT),0)+NVL(SUM(Q2.CK_CV_CNT),0)+NVL(SUM(Q2.CK_CW_CNT),0)+NVL(SUM(Q2.CK_CX_CNT),0)+NVL(SUM(Q2.CK_CY_CNT),0)
	    ) > 0 THEN ROUND(
	    (
	     NVL(SUM(Q2.CA_NO_DT),0)+NVL(SUM(Q2.CA_CA_DT),0)+NVL(SUM(Q2.CA_CB_DT),0)+NVL(SUM(Q2.CA_CC_DT),0)+NVL(SUM(Q2.CA_CD_DT),0)+NVL(SUM(Q2.CA_CE_DT),0)+
	     NVL(SUM(Q2.CA_CF_DT),0)+NVL(SUM(Q2.CA_CG_DT),0)+NVL(SUM(Q2.CA_CH_DT),0)+NVL(SUM(Q2.CA_CI_DT),0)+NVL(SUM(Q2.CA_CJ_DT),0)+NVL(SUM(Q2.CA_CK_DT),0)+
	     NVL(SUM(Q2.CA_CL_DT),0)+NVL(SUM(Q2.CA_CM_DT),0)+NVL(SUM(Q2.CA_CN_DT),0)+NVL(SUM(Q2.CA_CO_DT),0)+NVL(SUM(Q2.CA_CR_DT),0)+NVL(SUM(Q2.CA_CT_DT),0)+
	     NVL(SUM(Q2.CA_CU_DT),0)+NVL(SUM(Q2.CA_CV_DT),0)+NVL(SUM(Q2.CA_CW_DT),0)+NVL(SUM(Q2.CA_CX_DT),0)+NVL(SUM(Q2.CA_CY_DT),0)+	    
	     NVL(SUM(Q2.CK_NO_DT),0)+NVL(SUM(Q2.CK_CK_DT),0)+NVL(SUM(Q2.CK_CB_DT),0)+NVL(SUM(Q2.CK_CC_DT),0)+NVL(SUM(Q2.CK_CD_DT),0)+NVL(SUM(Q2.CK_CE_DT),0)+
	     NVL(SUM(Q2.CK_CF_DT),0)+NVL(SUM(Q2.CK_CG_DT),0)+NVL(SUM(Q2.CK_CH_DT),0)+NVL(SUM(Q2.CK_CI_DT),0)+NVL(SUM(Q2.CK_CJ_DT),0)+NVL(SUM(Q2.CK_CK_DT),0)+
	     NVL(SUM(Q2.CK_CL_DT),0)+NVL(SUM(Q2.CK_CM_DT),0)+NVL(SUM(Q2.CK_CN_DT),0)+NVL(SUM(Q2.CK_CO_DT),0)+NVL(SUM(Q2.CK_CR_DT),0)+NVL(SUM(Q2.CK_CT_DT),0)+
	     NVL(SUM(Q2.CK_CU_DT),0)+NVL(SUM(Q2.CK_CV_DT),0)+NVL(SUM(Q2.CK_CW_DT),0)+NVL(SUM(Q2.CK_CX_DT),0)+NVL(SUM(Q2.CK_CY_DT),0)
	    )/
        (
         NVL(SUM(Q2.CA_NO_CNT),0)+NVL(SUM(Q2.CA_CA_CNT),0)+NVL(SUM(Q2.CA_CB_CNT),0)+NVL(SUM(Q2.CA_CC_CNT),0)+NVL(SUM(Q2.CA_CD_CNT),0)+NVL(SUM(Q2.CA_CE_CNT),0)+
	     NVL(SUM(Q2.CA_CF_CNT),0)+NVL(SUM(Q2.CA_CG_CNT),0)+NVL(SUM(Q2.CA_CH_CNT),0)+NVL(SUM(Q2.CA_CI_CNT),0)+NVL(SUM(Q2.CA_CJ_CNT),0)+NVL(SUM(Q2.CA_CK_CNT),0)+
	     NVL(SUM(Q2.CA_CL_CNT),0)+NVL(SUM(Q2.CA_CM_CNT),0)+NVL(SUM(Q2.CA_CN_CNT),0)+NVL(SUM(Q2.CA_CO_CNT),0)+NVL(SUM(Q2.CA_CR_CNT),0)+NVL(SUM(Q2.CA_CT_CNT),0)+
	     NVL(SUM(Q2.CA_CU_CNT),0)+NVL(SUM(Q2.CA_CV_CNT),0)+NVL(SUM(Q2.CA_CW_CNT),0)+NVL(SUM(Q2.CA_CX_CNT),0)+NVL(SUM(Q2.CA_CY_CNT),0)+        
         NVL(SUM(Q2.CK_NO_CNT),0)+NVL(SUM(Q2.CK_CK_CNT),0)+NVL(SUM(Q2.CK_CB_CNT),0)+NVL(SUM(Q2.CK_CC_CNT),0)+NVL(SUM(Q2.CK_CD_CNT),0)+NVL(SUM(Q2.CK_CE_CNT),0)+
	     NVL(SUM(Q2.CK_CF_CNT),0)+NVL(SUM(Q2.CK_CG_CNT),0)+NVL(SUM(Q2.CK_CH_CNT),0)+NVL(SUM(Q2.CK_CI_CNT),0)+NVL(SUM(Q2.CK_CJ_CNT),0)+NVL(SUM(Q2.CK_CK_CNT),0)+
	     NVL(SUM(Q2.CK_CL_CNT),0)+NVL(SUM(Q2.CK_CM_CNT),0)+NVL(SUM(Q2.CK_CN_CNT),0)+NVL(SUM(Q2.CK_CO_CNT),0)+NVL(SUM(Q2.CK_CR_CNT),0)+NVL(SUM(Q2.CK_CT_CNT),0)+
	     NVL(SUM(Q2.CK_CU_CNT),0)+NVL(SUM(Q2.CK_CV_CNT),0)+NVL(SUM(Q2.CK_CW_CNT),0)+NVL(SUM(Q2.CK_CX_CNT),0)+NVL(SUM(Q2.CK_CY_CNT),0)
	    ),1) ELSE NULL END AS TOT	     	     	    	    	    
	    
	    
	FROM 	
	    (   
	        SELECT 	HGRK_DEPT_CD,HGRK_DEPT_CDNM,DEPT_CD,DEPT_CDNM
	        FROM 	TBL_HR_DEPT_CD       
	        WHERE 	1=1
	       		<dynamic>
	       			<isEmpty prepend="AND" property="hgrk_dept_cd">
						HGRK_DEPT_CD IN ('E00054','E00056','T21000','E00053','E00042','E00044','JD1000','E00048')	       				
	       			</isEmpty>
				  	<isNotEmpty prepend="AND" property="hgrk_dept_cd">				<!-- 부문/본부 -->
					    HGRK_DEPT_CD = #hgrk_dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dept_cd">					<!-- 처리팀 -->
					    DEPT_CD = #dept_cd#
				  	</isNotEmpty>	       		
				</dynamic>       		
	        
	       		<dynamic>
	       			<isEmpty property="hgrk_dept_cd">	        
				        UNION ALL
				        
				        SELECT 
				             'ZZZZZ'    	AS HGRK_DEPT_CD  
				            ,'기타부문' 		AS HGRK_DEPT_CDNM
				            ,'ZZZZZ'    	AS DEPT_CD
				            ,'기타'     		AS DEPT_CDNM
				        FROM DUAL
	       			</isEmpty>				        
				</dynamic>	        
					            
	    ) Q1
	    
	    LEFT JOIN
	    
	    ( 	
			SELECT 	 
	   			 G.HGRK_DEPT_CDNM as HGRK_DEPT_CDNM
	   			,G.DEPT_CDNM as DSPSR_CHRG_DEPT
	   			,G.DEPT_CD as DEPT_CD
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD IS NULL THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CA_NO_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD IS NULL THEN 1 ELSE 0 END)	AS CA_NO_CNT                 
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CA' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CA_CA_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CA' THEN 1 ELSE 0 END) AS CA_CA_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CB' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CA_CB_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CB' THEN 1 ELSE 0 END) AS CA_CB_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CC' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CA_CC_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CC' THEN 1 ELSE 0 END) AS CA_CC_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CD' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CA_CD_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CD' THEN 1 ELSE 0 END) AS CA_CD_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CE' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CA_CE_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CE' THEN 1 ELSE 0 END) AS CA_CE_CNT                
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CF' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CA_CF_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CF' THEN 1 ELSE 0 END) AS CA_CF_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CG' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CA_CG_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CG' THEN 1 ELSE 0 END) AS CA_CG_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CH' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CA_CH_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CH' THEN 1 ELSE 0 END) AS CA_CH_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CI' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CA_CI_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CI' THEN 1 ELSE 0 END) AS CA_CI_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CJ' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CA_CJ_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CJ' THEN 1 ELSE 0 END) AS CA_CJ_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CK' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CA_CK_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CK' THEN 1 ELSE 0 END) AS CA_CK_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CL' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CA_CL_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CL' THEN 1 ELSE 0 END) AS CA_CL_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CM' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CA_CM_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CM' THEN 1 ELSE 0 END) AS CA_CM_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CN' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CA_CN_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CN' THEN 1 ELSE 0 END) AS CA_CN_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CO' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CA_CO_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CO' THEN 1 ELSE 0 END) AS CA_CO_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CR' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CA_CR_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CR' THEN 1 ELSE 0 END) AS CA_CR_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CT' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CA_CT_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CT' THEN 1 ELSE 0 END) AS CA_CT_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CU' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CA_CU_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CU' THEN 1 ELSE 0 END) AS CA_CU_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CV' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CA_CV_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CV' THEN 1 ELSE 0 END) AS CA_CV_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CW' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CA_CW_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CW' THEN 1 ELSE 0 END) AS CA_CW_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CX' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CA_CX_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CX' THEN 1 ELSE 0 END) AS CA_CX_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CY' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CA_CY_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CY' THEN 1 ELSE 0 END) AS CA_CY_CNT                
                
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD IS NULL THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CK_NO_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD IS NULL THEN 1 ELSE 0 END)	AS CK_NO_CNT                 
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CA' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CK_CA_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CA' THEN 1 ELSE 0 END) AS CK_CA_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CB' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CK_CB_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CB' THEN 1 ELSE 0 END) AS CK_CB_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CC' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CK_CC_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CC' THEN 1 ELSE 0 END) AS CK_CC_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CD' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CK_CD_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CD' THEN 1 ELSE 0 END) AS CK_CD_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CE' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CK_CE_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CE' THEN 1 ELSE 0 END) AS CK_CE_CNT                
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CF' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CK_CF_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CF' THEN 1 ELSE 0 END) AS CK_CF_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CG' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CK_CG_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CG' THEN 1 ELSE 0 END) AS CK_CG_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CH' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CK_CH_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CH' THEN 1 ELSE 0 END) AS CK_CH_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CI' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CK_CI_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CI' THEN 1 ELSE 0 END) AS CK_CI_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CJ' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CK_CJ_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CJ' THEN 1 ELSE 0 END) AS CK_CJ_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CK' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CK_CK_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CK' THEN 1 ELSE 0 END) AS CK_CK_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CL' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CK_CL_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CL' THEN 1 ELSE 0 END) AS CK_CL_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CM' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CK_CM_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CM' THEN 1 ELSE 0 END) AS CK_CM_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CN' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CK_CN_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CN' THEN 1 ELSE 0 END) AS CK_CN_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CO' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CK_CO_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CO' THEN 1 ELSE 0 END) AS CK_CO_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CR' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CK_CR_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CR' THEN 1 ELSE 0 END) AS CK_CR_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CT' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CK_CT_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CT' THEN 1 ELSE 0 END) AS CK_CT_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CU' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CK_CU_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CU' THEN 1 ELSE 0 END) AS CK_CU_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CV' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CK_CV_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CV' THEN 1 ELSE 0 END) AS CK_CV_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CW' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CK_CW_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CW' THEN 1 ELSE 0 END) AS CK_CW_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CX' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CK_CX_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CX' THEN 1 ELSE 0 END) AS CK_CX_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CY' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CK_CY_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CY' THEN 1 ELSE 0 END) AS CK_CY_CNT
	
	        FROM TBL_DSFT_ACPN_PROC A						<!-- 불만 접수 처리 -->	       		   
			        LEFT JOIN TBL_HC_HIST C
			               ON A.DSFT_ACPN_SEQ_NO = C.DSFT_ACPN_SEQ_NO		  
			        LEFT JOIN TBL_CRPN_CUST_BASE D
			       		   ON A.ORGN_PTR_ST_CD = D.CUST_ID        	    	  
			        LEFT JOIN TBL_USR B
			       		   ON A.DSPSR_ID = B.USR_ID 
			        LEFT JOIN TBL_HR_EMP_CD F
			       		   ON A.DSPSR_ID = F.EMP_NO
			        LEFT JOIN TBL_HR_DEPT_CD G 
			       		   ON F.BLNG_DEPT_CD = G.DEPT_CD
			        LEFT JOIN TBL_SAP_CD H	
			       		   ON (A.ORGN_ENTR_DV_CD = H.CD_ID AND H.CD_CLAS_CD = '1')	
			        LEFT JOIN TBL_DSFT_TAXN_TYP_CD I
			       		   ON A.DSFT_TAXN_TYP_CD = I.DSFT_TAXN_TYP_CD
			       		   
			WHERE G.HGRK_DEPT_CD IN ('E00054','E00056','T21000','E00053','E00042','E00044','JD1000','E00048')
					AND A.PROC_DTM IS NOT NULL			
		   			AND (A.DEL_YN = 'N' OR A.DEL_YN IS NULL)
					AND A.DSFT_TYP_CD IN ('CA','CK')		   						
	       		<dynamic>
	       			<!-- 년도별 -->   				    	
		    	    <isEqual property="cmb_gubun" compareValue="1">              
		                and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'
		            </isEqual>
		            <!--  -->
		            <isEqual property="cmb_gubun" compareValue="2">
		            	<isEmpty property="cmb_half">
		            		and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'
		            	</isEmpty>              
		                <isEqual property="cmb_half" compareValue="1">
		                	and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0632000000'                                                                  
						</isEqual>	 
						<isEqual property="cmb_half" compareValue="2">
							and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '1232000000'
						</isEqual>	 
		            </isEqual>	 
		            <isEqual property="cmb_gubun" compareValue="3"> 
		            	<isEmpty>
							and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'	            	
		            	</isEmpty>    
		           		<isEqual property="cmb_qua" compareValue="1">
		           			and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0332000000'   
		           	  	</isEqual>
		           	  	<isEqual property="cmb_qua" compareValue="2">
		           	   		and A.ACPN_DTM between #time_key# || '0400000000' and #time_key# || '0632000000'   
		           	  	</isEqual>	 
		           	  	<isEqual property="cmb_qua" compareValue="3">
		           	   		and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '0932000000'   
		           	  	</isEqual>	 
	           	  		<isEqual property="cmb_qua" compareValue="4">
		           	   		and A.ACPN_DTM between #time_key# || '1000000000' and #time_key# || '1232000000'   
		           	  	</isEqual>	 	 
	            	</isEqual>	 				            
		    	 	<isEqual property="cmb_gubun" compareValue="4">              
		            	and A.ACPN_DTM between #time_key# || '00000000' and #time_key# || '32000000'                                                                  
		         	</isEqual>	
		    	 	<isEqual property="cmb_gubun" compareValue="5">              
		                and A.ACPN_DTM between #time_key# || '000000' and #time_key# || '240000'                                                                  
		         	</isEqual>
				
					
				  	<isNotEmpty prepend="AND" property="dsft_typ_cd">				<!-- 불만유형		-->
				    	A.DSFT_TYP_CD = #dsft_typ_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dsft_taxn_typ_cd">			<!-- 불만세부유형		-->
				    	A.DSFT_TAXN_TYP_CD = #dsft_taxn_typ_cd#
				  	</isNotEmpty>
			  		<isNotEmpty prepend="AND" property="orgn_ptr_st_cd">			<!-- 불만발생업체코드(가맹점SAP코드) -->
					    A.ORGN_PTR_ST_CD = #orgn_ptr_st_cd#
				  	</isNotEmpty>
				    <isNotEmpty prepend="AND" property="conn_chnl_kind_cd">			<!-- 접촉채널	-->
					    A.CONN_CHNL_KIND_CD = #conn_chnl_kind_cd#
				    </isNotEmpty>			  	
				  	<isNotEmpty prepend="AND" property="hgrk_dept_cd">				<!-- 부문/본부 -->
					    G.HGRK_DEPT_CD = #hgrk_dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dept_cd">					<!-- 처리팀 -->
					    G.DEPT_CD = #dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dspsr_id_nm">				<!-- 처리자명 		-->
					    (B.USR_NM LIKE '%'|| #dspsr_id_nm# ||'%' OR F.EMP_NM LIKE '%'|| #dspsr_id_nm# ||'%')
				  	</isNotEmpty>
			 		<isEqual property="hc_yn" compareValue="Y"> 					<!-- 해피콜여부  -->
			 			AND A.HC_YN = 'Y'
			 		</isEqual>
				 	<isEqual property="hc_yn" compareValue="N"> 					<!-- 해피콜여부  -->
				 		AND (A.HC_YN = 'N' OR A.HC_YN IS NULL)
				 	</isEqual>
				  	<isNotEmpty prepend="AND" property="attd_sft_cd">				<!-- 태도만족도 		-->
				  		(A.HC_YN = 'Y' AND C.ATTD_SFT_CD = #attd_sft_cd#)
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="rslt_sft_cd">				<!-- 결과만족도 		-->
				  		(A.HC_YN = 'Y' AND C.RSLT_SFT_CD = #rslt_sft_cd#)
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="hc_uabl_rsn_cd">			<!-- 해피콜불가사유		-->
				  		A.HC_UABL_RSN_CD = #hc_uabl_rsn_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="prdct_cd">					<!-- 불만제품 		-->
					    A.PRDCT_CD = #prdct_cd#
				  	</isNotEmpty>			  				 	
				  	<isNotEmpty prepend="AND" property="prblm_penom_cd">			<!-- 현상 		-->
					    A.PRBLM_PENOM_CD = #prblm_penom_cd#
				  	</isNotEmpty>
			 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="1">  	<!-- 시료품질 점검결과		-->
			 			AND	A.VHCL_QLIT_DSFT_CAUS_CD_CUST IS NOT NULL
			 	  	</isEqual>
			 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="2">   	<!-- 시료품질 점검결과		-->
			 	  		AND	A.VHCL_QLIT_DSFT_CAUS_CD_PTR_ST IS NOT NULL
			 	  	</isEqual>
				  	<isNotEmpty prepend="AND" property="vhcl_biztr_qlit_dsft_typ_cd">			<!-- 품질불만유형 		-->
					    A.VHCL_BIZTR_QLIT_DSFT_TYP_CD = #vhcl_biztr_qlit_dsft_typ_cd#
				  	</isNotEmpty>
				 	<isEqual property="vhcl_biztr_yn" compareValue="Y"> 			<!-- Kixx 품질서비스차량 출동 -->
				 		AND A.VHCL_BIZTR_YN = 'Y'
				 	</isEqual>
				 	<isEqual property="vhcl_biztr_yn" compareValue="N"> 			<!-- Kixx 품질서비스차량 출동 -->
				 		AND (A.VHCL_BIZTR_YN = 'N' OR A.VHCL_BIZTR_YN IS NULL)
				 	</isEqual>		 	  	
				 	<isEqual property="rwrd_yn" compareValue="Y"> 					<!-- 보상여부 -->
				 		AND A.RWRD_YN = 'Y'
				 	</isEqual>
				 	<isEqual property="rwrd_yn" compareValue="N"> 					<!-- 보상여부 -->
				 		AND (A.RWRD_YN = 'N' OR A.RWRD_YN IS NULL)
				 	</isEqual>
				 	
				 	<isEqual property="cps_amt_gbn" compareValue="1"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 주유소 보상금 1만원 미만-->
				 			AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 주유소 보상금 1만원 ~ 10만원-->
				 			AND (A.PTR_ST_CPS_AMT <![CDATA[>=]]> 10000 AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 주유소 보상금 10만원 초과-->
				 			AND A.PTR_ST_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	<isEqual property="cps_amt_gbn" compareValue="2"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 회사 보상금 1만원 미만-->
				 			AND A.CO_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 회사 보상금 1만원 ~ 10만원-->
				 			AND (A.CO_CPS_AMT <![CDATA[>=]]> 10000 AND A.CO_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 회사 보상금 10만원 초과-->
				 			AND A.CO_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	<isEqual property="cps_amt_gbn" compareValue="3"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 총 보상금 1만원 미만-->
				 			AND A.TOT_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 총 보상금 1만원 ~ 10만원-->
				 			AND (A.TOT_CPS_AMT <![CDATA[>=]]> 10000 AND A.TOT_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 총 보상금 10만원 초과-->
				 			AND A.TOT_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	
					<!--처리자구분에 체크항목이 하나도 없는 경우, 전체데이터가 조회된다.-->
				 	<isEqual property="cmp_handler" compareValue="1">   
				 		AND	A.DSPSR_YN_CNSLR = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="2">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="3">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="4">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="5">   
				 		AND	A.DSPSR_YN_DSFT_CHRG = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="6">   
				 		AND	A.DSPSR_YN_PART_HD = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="7">   
				 		AND	(A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
	       		</dynamic>  
		
			GROUP BY G.HGRK_DEPT_CDNM,G.HGRK_DEPT_CD, G.DEPT_CD,G.DEPT_CDNM
			
			UNION ALL
			
	        SELECT 	 
				 '기타부문' 		AS HGRK_DEPT_CDNM
				,'기타' 			AS DSPSR_CHRG_DEPT
				,'ZZZZZ' 		AS DEPT_CD	
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD IS NULL THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CA_NO_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD IS NULL THEN 1 ELSE 0 END)	AS CA_NO_CNT                 
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CA' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CA_CA_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CA' THEN 1 ELSE 0 END) AS CA_CA_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CB' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CA_CB_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CB' THEN 1 ELSE 0 END) AS CA_CB_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CC' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CA_CC_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CC' THEN 1 ELSE 0 END) AS CA_CC_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CD' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CA_CD_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CD' THEN 1 ELSE 0 END) AS CA_CD_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CE' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CA_CE_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CE' THEN 1 ELSE 0 END) AS CA_CE_CNT                
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CF' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CA_CF_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CF' THEN 1 ELSE 0 END) AS CA_CF_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CG' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CA_CG_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CG' THEN 1 ELSE 0 END) AS CA_CG_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CH' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CA_CH_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CH' THEN 1 ELSE 0 END) AS CA_CH_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CI' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CA_CI_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CI' THEN 1 ELSE 0 END) AS CA_CI_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CJ' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CA_CJ_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CJ' THEN 1 ELSE 0 END) AS CA_CJ_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CK' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CA_CK_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CK' THEN 1 ELSE 0 END) AS CA_CK_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CL' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CA_CL_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CL' THEN 1 ELSE 0 END) AS CA_CL_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CM' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CA_CM_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CM' THEN 1 ELSE 0 END) AS CA_CM_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CN' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CA_CN_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CN' THEN 1 ELSE 0 END) AS CA_CN_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CO' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CA_CO_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CO' THEN 1 ELSE 0 END) AS CA_CO_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CR' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CA_CR_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CR' THEN 1 ELSE 0 END) AS CA_CR_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CT' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CA_CT_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CT' THEN 1 ELSE 0 END) AS CA_CT_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CU' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CA_CU_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CU' THEN 1 ELSE 0 END) AS CA_CU_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CV' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CA_CV_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CV' THEN 1 ELSE 0 END) AS CA_CV_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CW' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CA_CW_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CW' THEN 1 ELSE 0 END) AS CA_CW_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CX' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CA_CX_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CX' THEN 1 ELSE 0 END) AS CA_CX_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CY' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CA_CY_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CA' AND A.PRBLM_PENOM_CD='CY' THEN 1 ELSE 0 END) AS CA_CY_CNT                
                
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD IS NULL THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CK_NO_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD IS NULL THEN 1 ELSE 0 END)	AS CK_NO_CNT                 
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CA' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CK_CA_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CA' THEN 1 ELSE 0 END) AS CK_CA_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CB' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CK_CB_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CB' THEN 1 ELSE 0 END) AS CK_CB_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CC' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CK_CC_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CC' THEN 1 ELSE 0 END) AS CK_CC_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CD' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CK_CD_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CD' THEN 1 ELSE 0 END) AS CK_CD_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CE' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CK_CE_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CE' THEN 1 ELSE 0 END) AS CK_CE_CNT                
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CF' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CK_CF_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CF' THEN 1 ELSE 0 END) AS CK_CF_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CG' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CK_CG_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CG' THEN 1 ELSE 0 END) AS CK_CG_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CH' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CK_CH_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CH' THEN 1 ELSE 0 END) AS CK_CH_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CI' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CK_CI_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CI' THEN 1 ELSE 0 END) AS CK_CI_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CJ' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CK_CJ_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CJ' THEN 1 ELSE 0 END) AS CK_CJ_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CK' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CK_CK_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CK' THEN 1 ELSE 0 END) AS CK_CK_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CL' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CK_CL_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CL' THEN 1 ELSE 0 END) AS CK_CL_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CM' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CK_CM_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CM' THEN 1 ELSE 0 END) AS CK_CM_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CN' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CK_CN_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CN' THEN 1 ELSE 0 END) AS CK_CN_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CO' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CK_CO_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CO' THEN 1 ELSE 0 END) AS CK_CO_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CR' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CK_CR_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CR' THEN 1 ELSE 0 END) AS CK_CR_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CT' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CK_CT_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CT' THEN 1 ELSE 0 END) AS CK_CT_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CU' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CK_CU_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CU' THEN 1 ELSE 0 END) AS CK_CU_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CV' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CK_CV_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CV' THEN 1 ELSE 0 END) AS CK_CV_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CW' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CK_CW_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CW' THEN 1 ELSE 0 END) AS CK_CW_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CX' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CK_CX_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CX' THEN 1 ELSE 0 END) AS CK_CX_CNT
		        ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CY' THEN TRUNC( TO_DATE(SUBSTR(A.PROC_DTM, 0, 8), 'YYYYMMDD') - TO_DATE(SUBSTR(A.ACPN_DTM, 0, 8), 'YYYYMMDD')) ELSE 0 END) AS CK_CY_DT
                ,SUM(CASE WHEN A.DSFT_TYP_CD = 'CK' AND A.PRBLM_PENOM_CD='CY' THEN 1 ELSE 0 END) AS CK_CY_CNT
	
	        FROM TBL_DSFT_ACPN_PROC A						<!-- 불만 접수 처리 -->	       		   
			        LEFT JOIN TBL_HC_HIST C
			               ON A.DSFT_ACPN_SEQ_NO = C.DSFT_ACPN_SEQ_NO		  
			        LEFT JOIN TBL_CRPN_CUST_BASE D
			       		   ON A.ORGN_PTR_ST_CD = D.CUST_ID        	    	  
			        LEFT JOIN TBL_USR B
			       		   ON A.DSPSR_ID = B.USR_ID 
			        LEFT JOIN TBL_HR_EMP_CD F
			       		   ON A.DSPSR_ID = F.EMP_NO
			        LEFT JOIN TBL_HR_DEPT_CD G 
			       		   ON F.BLNG_DEPT_CD = G.DEPT_CD
			        LEFT JOIN TBL_SAP_CD H	
			       		   ON (A.ORGN_ENTR_DV_CD = H.CD_ID AND H.CD_CLAS_CD = '1')	
			        LEFT JOIN TBL_DSFT_TAXN_TYP_CD I
			       		   ON A.DSFT_TAXN_TYP_CD = I.DSFT_TAXN_TYP_CD
			       		   
			WHERE (G.HGRK_DEPT_CD IS NULL OR G.HGRK_DEPT_CD NOT IN ('E00054','E00056','T21000','E00053','E00042','E00044','JD1000','E00048'))
					AND A.PROC_DTM IS NOT NULL			
					AND (A.DEL_YN = 'N' OR A.DEL_YN IS NULL)
					AND A.DSFT_TYP_CD IN ('CA','CK')					
	       		<dynamic>
	       			<!-- 년도별 -->   				    	
		    	    <isEqual property="cmb_gubun" compareValue="1">              
		                and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'                                                                  
		            </isEqual>
		            <!--  -->
		            <isEqual property="cmb_gubun" compareValue="2">
		            	<isEmpty property="cmb_half">
		            		and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'
		            	</isEmpty>              
		                <isEqual property="cmb_half" compareValue="1">
		                	and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0632000000'                                                                  
						</isEqual>	 
						<isEqual property="cmb_half" compareValue="2">
							and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '1232000000'
						</isEqual>	 
		            </isEqual>	 
		            <isEqual property="cmb_gubun" compareValue="3"> 
		            	<isEmpty>
							and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '1232000000'	            	
		            	</isEmpty>    
		           		<isEqual property="cmb_qua" compareValue="1">
		           			and A.ACPN_DTM between #time_key# || '0000000000' and #time_key# || '0332000000'   
		           	  	</isEqual>
		           	  	<isEqual property="cmb_qua" compareValue="2">
		           	   		and A.ACPN_DTM between #time_key# || '0400000000' and #time_key# || '0632000000'   
		           	  	</isEqual>	 
		           	  	<isEqual property="cmb_qua" compareValue="3">
		           	   		and A.ACPN_DTM between #time_key# || '0700000000' and #time_key# || '0932000000'   
		           	  	</isEqual>	 
	           	  		<isEqual property="cmb_qua" compareValue="4">
		           	   		and A.ACPN_DTM between #time_key# || '1000000000' and #time_key# || '1232000000'   
		           	  	</isEqual>	 	 
	            	</isEqual>	 				            
		    	 	<isEqual property="cmb_gubun" compareValue="4">              
		            	and A.ACPN_DTM between #time_key# || '00000000' and #time_key# || '32000000'                                                                  
		         	</isEqual>	
		    	 	<isEqual property="cmb_gubun" compareValue="5">              
		                and A.ACPN_DTM between #time_key# || '000000' and #time_key# || '240000'                                                                  
		         	</isEqual>
				
					
				  	<isNotEmpty prepend="AND" property="dsft_typ_cd">				<!-- 불만유형		-->
				    	A.DSFT_TYP_CD = #dsft_typ_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dsft_taxn_typ_cd">			<!-- 불만세부유형		-->
				    	A.DSFT_TAXN_TYP_CD = #dsft_taxn_typ_cd#
				  	</isNotEmpty>
			  		<isNotEmpty prepend="AND" property="orgn_ptr_st_cd">			<!-- 불만발생업체코드(가맹점SAP코드) -->
					    A.ORGN_PTR_ST_CD = #orgn_ptr_st_cd#
				  	</isNotEmpty>
				    <isNotEmpty prepend="AND" property="conn_chnl_kind_cd">			<!-- 접촉채널	-->
					    A.CONN_CHNL_KIND_CD = #conn_chnl_kind_cd#
				    </isNotEmpty>			  	
				  	<isNotEmpty prepend="AND" property="hgrk_dept_cd">				<!-- 부문/본부 -->
					    G.HGRK_DEPT_CD = #hgrk_dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dept_cd">					<!-- 처리팀 -->
					    G.DEPT_CD = #dept_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="dspsr_id_nm">				<!-- 처리자명 		-->
					    (B.USR_NM LIKE '%'|| #dspsr_id_nm# ||'%' OR F.EMP_NM LIKE '%'|| #dspsr_id_nm# ||'%')
				  	</isNotEmpty>
			 		<isEqual property="hc_yn" compareValue="Y"> 					<!-- 해피콜여부  -->
			 			AND A.HC_YN = 'Y'
			 		</isEqual>
				 	<isEqual property="hc_yn" compareValue="N"> 					<!-- 해피콜여부  -->
				 		AND (A.HC_YN = 'N' OR A.HC_YN IS NULL)
				 	</isEqual>
				  	<isNotEmpty prepend="AND" property="attd_sft_cd">				<!-- 태도만족도 		-->
				  		(A.HC_YN = 'Y' AND C.ATTD_SFT_CD = #attd_sft_cd#)
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="rslt_sft_cd">				<!-- 결과만족도 		-->
				  		(A.HC_YN = 'Y' AND C.RSLT_SFT_CD = #rslt_sft_cd#)
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="hc_uabl_rsn_cd">			<!-- 해피콜불가사유		-->
				  		A.HC_UABL_RSN_CD = #hc_uabl_rsn_cd#
				  	</isNotEmpty>
				  	<isNotEmpty prepend="AND" property="prdct_cd">					<!-- 불만제품 		-->
					    A.PRDCT_CD = #prdct_cd#
				  	</isNotEmpty>			  				 	
				  	<isNotEmpty prepend="AND" property="prblm_penom_cd">			<!-- 현상 		-->
					    A.PRBLM_PENOM_CD = #prblm_penom_cd#
				  	</isNotEmpty>
			 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="1">  	<!-- 시료품질 점검결과		-->
			 			AND	A.VHCL_QLIT_DSFT_CAUS_CD_CUST IS NOT NULL
			 	  	</isEqual>
			 	  	<isEqual property="vhcl_qlit_dsft_caus_cd" compareValue="2">   	<!-- 시료품질 점검결과		-->
			 	  		AND	A.VHCL_QLIT_DSFT_CAUS_CD_PTR_ST IS NOT NULL
			 	  	</isEqual>
				  	<isNotEmpty prepend="AND" property="vhcl_biztr_qlit_dsft_typ_cd">			<!-- 품질불만유형 		-->
					    A.VHCL_BIZTR_QLIT_DSFT_TYP_CD = #vhcl_biztr_qlit_dsft_typ_cd#
				  	</isNotEmpty>
				 	<isEqual property="vhcl_biztr_yn" compareValue="Y"> 			<!-- Kixx 품질서비스차량 출동 -->
				 		AND A.VHCL_BIZTR_YN = 'Y'
				 	</isEqual>
				 	<isEqual property="vhcl_biztr_yn" compareValue="N"> 			<!-- Kixx 품질서비스차량 출동 -->
				 		AND (A.VHCL_BIZTR_YN = 'N' OR A.VHCL_BIZTR_YN IS NULL)
				 	</isEqual>		 	  	
				 	<isEqual property="rwrd_yn" compareValue="Y"> 					<!-- 보상여부 -->
				 		AND A.RWRD_YN = 'Y'
				 	</isEqual>
				 	<isEqual property="rwrd_yn" compareValue="N"> 					<!-- 보상여부 -->
				 		AND (A.RWRD_YN = 'N' OR A.RWRD_YN IS NULL)
				 	</isEqual>
				 	
				 	<isEqual property="cps_amt_gbn" compareValue="1"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 주유소 보상금 1만원 미만-->
				 			AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 주유소 보상금 1만원 ~ 10만원-->
				 			AND (A.PTR_ST_CPS_AMT <![CDATA[>=]]> 10000 AND A.PTR_ST_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 주유소 보상금 10만원 초과-->
				 			AND A.PTR_ST_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	<isEqual property="cps_amt_gbn" compareValue="2"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 회사 보상금 1만원 미만-->
				 			AND A.CO_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 회사 보상금 1만원 ~ 10만원-->
				 			AND (A.CO_CPS_AMT <![CDATA[>=]]> 10000 AND A.CO_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 회사 보상금 10만원 초과-->
				 			AND A.CO_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	<isEqual property="cps_amt_gbn" compareValue="3"> 				
				 		<isEqual property="cps_amt" compareValue="1">				<!-- 총 보상금 1만원 미만-->
				 			AND A.TOT_CPS_AMT <![CDATA[<]]> 10000
				 		</isEqual>
				 		<isEqual property="cps_amt" compareValue="2">				<!-- 총 보상금 1만원 ~ 10만원-->
				 			AND (A.TOT_CPS_AMT <![CDATA[>=]]> 10000 AND A.TOT_CPS_AMT <![CDATA[<]]> 100000)
				 		</isEqual>
						<isEqual property="cps_amt" compareValue="3">				<!-- 총 보상금 10만원 초과-->
				 			AND A.TOT_CPS_AMT <![CDATA[>]]> 100000
				 		</isEqual>
				 	</isEqual>
				 	
					<!--처리자구분에 체크항목이 하나도 없는 경우, 전체데이터가 조회된다.-->
				 	<isEqual property="cmp_handler" compareValue="1">   
				 		AND	A.DSPSR_YN_CNSLR = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="2">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="3">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="4">   
				 		AND	(A.DSPSR_YN_CNSLR = 'Y' OR A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="5">   
				 		AND	A.DSPSR_YN_DSFT_CHRG = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="6">   
				 		AND	A.DSPSR_YN_PART_HD = 'Y'
				 	</isEqual>
				 	<isEqual property="cmp_handler" compareValue="7">   
				 		AND	(A.DSPSR_YN_DSFT_CHRG = 'Y' OR A.DSPSR_YN_PART_HD = 'Y')
				 	</isEqual>
	       		</dynamic> 
	
		) Q2
	
	ON Q1.DEPT_CD = Q2.DEPT_CD
	
	GROUP BY ROLLUP(Q1.HGRK_DEPT_CD,Q1.DEPT_CD)
	ORDER BY Q1.HGRK_DEPT_CD, MAX(Q1.DEPT_CDNM), Q1.HGRK_DEPT_CD,Q1.DEPT_CD	 	
 	
 	</select>

 </sqlMap>
