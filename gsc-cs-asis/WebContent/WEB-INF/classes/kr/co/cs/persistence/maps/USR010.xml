<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="USR010">
	
<!-- 
******************************************
**************사용자관리 콤보
******************************************
 -->	
 	<select id="Get_usr_partCmb_list_SELECT" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
 		SELECT GRP_CD
 			 , PART_CD
 			 , PART_CDNM 
 		  FROM TBL_PART_CD 
 		 WHERE 1=1 
 		 <dynamic>
 		 	<isNotEmpty prepend="AND" property="grp_cd">
 		 		GRP_CD = #grp_cd#
 		 	</isNotEmpty>
 		 </dynamic>
	</select>	
<!-- 
******************************************
**************사용자중복체크용조회
******************************************
 -->	
 	<select id="Get_chk_usr_list_SELECT" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
 		SELECT 	  USR_ID
 				, CTI_ID
         		, EXT_NO 
 		  FROM TBL_USR
	</select>
	
	
<!-- 
******************************************
**************사용자관리 조회
******************************************
 -->
	<select id="Get_usr_List_SELECT" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
		SELECT 
			 '0'	 AS CHK 
		     , LPAD(ROWNUM, 3, '0') NO
             , USR_NM
             , USR_ID
             , GRP_CD
             , PART_CD
             , FUN_GET_CDNM('OLE11', USR_GRD_CD) AS USR_GRD_CDNM
             , USR_GRD_CD
             , ETCO_DD
             , LVCO_DD
             , EXT_NO
             , GISU
             , (  
	             	CASE 
			        WHEN ADD_MONTHS(TO_DATE(NVL(QUAL_ACQS_DD,'1990-01-01'),'YYYY-MM-DD'),3)-1 > SYSDATE
			        THEN 'N'
			        WHEN QUAL_ACQS_DD IS NULL
			        THEN 'N'
			        ELSE 'Y'
			        END
			    ) EVALUTION
             , QUAL_ACQS_DD
             , QUAL_LOSS_DD
             , MBPH_NO
             , BTDY
             , OWHM_TEL_NO
             , EML_ADDR
             , OWHM_ZIP_NO
             , OWHM_ADDR
             , OWHM_DTLS_ADDR
             , GSC_ID
             , GSC_OFLV
             , GSC_TEAMNM
             , GSC_BIZNM
             , CTI_USE_YN
             , CTI_ID
             , USE_YN
             , FUN_GET_GRPNM(GRP_CD) AS GRP_NM
             , FUN_GET_PARTNM(GRP_CD, PART_CD) PART_NM
             , HLDS_DD_CNT 
             , 'N' AS ADDROW_YN
             , GNDR_DV_CD
             , PRICHAT_USE_YN
             , RMK
             , USR_DV_CD
             , REG_IP
             , IP_CHK_YN
          FROM TBL_USR
         WHERE GRP_CD			= #grp_cd#         
         <dynamic>
         	<isNotEmpty prepend="AND" property="part_cd">
         		PART_CD			= #part_cd#
         	</isNotEmpty>
         	<isNotEmpty prepend="AND" property="usr_id">
         		USR_ID			= #usr_id#
         	</isNotEmpty>
         	<isNotEmpty prepend="AND" property="usr_nm">
         		USR_NM			= #usr_nm#
         	</isNotEmpty>
         	<isNotEmpty prepend="AND" property="usr_nm_t">
         		USR_NM			= #usr_nm_t#
         	</isNotEmpty>
         	<isNotEmpty prepend="AND" property="qual_acqs_dd">
         		QUAL_ACQS_DD	= #qual_acqs_dd#
         	</isNotEmpty>
         	<isNotEmpty prepend="AND" property="qual_loss_dd">
         		QUAL_LOSS_DD	= #qual_loss_dd#
         	</isNotEmpty>
         	<isNotEmpty prepend="AND" property="usr_grd_cd">
         		USR_GRD_CD		= #usr_grd_cd#
         	</isNotEmpty>
         	<isNotEmpty prepend="AND" property="use_yn">
         		USE_YN			= #use_yn#
         	</isNotEmpty>
         	<isNotEmpty prepend="AND" property="mbph_no">
         		MBPH_NO 		= #mbph_no#
         	</isNotEmpty>
         	<isNotEmpty prepend="AND" property="cti_id">
         		CTI_ID 		= #cti_id#
         	</isNotEmpty>
         </dynamic> 
         ORDER BY USR_NM
	</select>
	
	
		
<!-- 
******************************************
**************사용자관리 조회 IP체크용
******************************************
 -->
	<select id="Get_usr_List_SELECT_IP" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
		SELECT 
			 '0'	 AS CHK 
		     , LPAD(ROWNUM, 3, '0') NO
             , USR_NM
             , USR_ID
             , GRP_CD
             , PART_CD
             , FUN_GET_CDNM('OLE11', USR_GRD_CD) AS USR_GRD_CDNM
             , USR_GRD_CD
             , ETCO_DD
             , LVCO_DD
             , EXT_NO
             , GISU
             , (  
	             	CASE 
			        WHEN ADD_MONTHS(TO_DATE(NVL(QUAL_ACQS_DD,'1990-01-01'),'YYYY-MM-DD'),3)-1 > SYSDATE
			        THEN 'N'
			        WHEN QUAL_ACQS_DD IS NULL
			        THEN 'N'
			        ELSE 'Y'
			        END
			    ) EVALUTION
             , QUAL_ACQS_DD
             , QUAL_LOSS_DD
             , MBPH_NO
             , BTDY
             , OWHM_TEL_NO
             , EML_ADDR
             , OWHM_ZIP_NO
             , OWHM_ADDR
             , OWHM_DTLS_ADDR
             , GSC_ID
             , GSC_OFLV
             , GSC_TEAMNM
             , GSC_BIZNM
             , CTI_USE_YN
             , CTI_ID
             , USE_YN
             , FUN_GET_GRPNM(GRP_CD) AS GRP_NM
             , FUN_GET_PARTNM(GRP_CD, PART_CD) PART_NM
             , HLDS_DD_CNT 
             , 'N' AS ADDROW_YN
             , GNDR_DV_CD
             , PRICHAT_USE_YN
             , RMK
             , USR_DV_CD
             , IP_CHK_YN
          FROM TBL_USR
         WHERE GRP_CD			= #grp_cd#         
         AND (IP_CHK_YN = 'N' OR IP_CHK_YN IS NULL)
         <dynamic>
         	<isNotEmpty prepend="AND" property="part_cd">
         		PART_CD			= #part_cd#
         	</isNotEmpty>
         	<isNotEmpty prepend="AND" property="usr_id">
         		USR_ID			= #usr_id#
         	</isNotEmpty>
         	<isNotEmpty prepend="AND" property="usr_nm">
         		USR_NM			= #usr_nm#
         	</isNotEmpty>
         	<isNotEmpty prepend="AND" property="usr_nm_t">
         		USR_NM			= #usr_nm_t#
         	</isNotEmpty>
         	<isNotEmpty prepend="AND" property="usr_grd_cd">
         		USR_GRD_CD		= #usr_grd_cd#
         	</isNotEmpty>
         	<isNotEmpty prepend="AND" property="use_yn">
         		USE_YN			= #use_yn#
         	</isNotEmpty>
         </dynamic> 
         ORDER BY USR_NM
	</select>
	
	<!-- IP체크 사용자 조회 -->
	
	<select id="Get_usr_List_SELECT_IP_after" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
		SELECT 
			 '0'	 AS CHK 
		     , LPAD(ROWNUM, 3, '0') NO
             , USR_NM
             , USR_ID
             , GRP_CD
             , PART_CD
             , FUN_GET_CDNM('OLE11', USR_GRD_CD) AS USR_GRD_CDNM
             , USR_GRD_CD
             , ETCO_DD
             , LVCO_DD
             , EXT_NO
             , GISU
             , (  
	             	CASE 
			        WHEN ADD_MONTHS(TO_DATE(NVL(QUAL_ACQS_DD,'1990-01-01'),'YYYY-MM-DD'),3)-1 > SYSDATE
			        THEN 'N'
			        WHEN QUAL_ACQS_DD IS NULL
			        THEN 'N'
			        ELSE 'Y'
			        END
			    ) EVALUTION
             , QUAL_ACQS_DD
             , QUAL_LOSS_DD
             , MBPH_NO
             , BTDY
             , OWHM_TEL_NO
             , EML_ADDR
             , OWHM_ZIP_NO
             , OWHM_ADDR
             , OWHM_DTLS_ADDR
             , GSC_ID
             , GSC_OFLV
             , GSC_TEAMNM
             , GSC_BIZNM
             , CTI_USE_YN
             , CTI_ID
             , USE_YN
             , FUN_GET_GRPNM(GRP_CD) AS GRP_NM
             , FUN_GET_PARTNM(GRP_CD, PART_CD) PART_NM
             , HLDS_DD_CNT 
             , 'N' AS ADDROW_YN
             , GNDR_DV_CD
             , PRICHAT_USE_YN
             , RMK
             , USR_DV_CD
             , IP_CHK_YN
          FROM TBL_USR
         WHERE 1=1
         AND IP_CHK_YN = 'Y'
         ORDER BY USR_NM
	</select>



	<select id="Get_usr_List_trans_SELECT" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
		SELECT 
             USR_NM
             , USR_ID
             , EXT_NO
             , CTI_ID
             , FUN_GET_GRPNM(GRP_CD) AS GRP_NM
             , FUN_GET_PARTNM(GRP_CD, PART_CD) PART_NM
          FROM TBL_USR
         WHERE 1=1
         <dynamic>
         	<isNotEmpty prepend="AND" property="cti_id">
         		CTI_ID 		= #cti_id#
         	</isNotEmpty>
         </dynamic> 
	</select>


<!-- 
******************************************
**************사용자 수정
******************************************
 -->	
	<update id="Get_usr_List_UPDATE" parameterClass="java.util.HashMap">
		UPDATE TBL_USR
		   SET USR_NM			= #usr_nm#
             , USR_ID			= #usr_id#
             , GRP_CD			= #grp_cd#
             , PART_CD			= CASE WHEN #part_cd# IS NULL THEN ' ' 
			  	   				  ELSE #part_cd# END 	
             , USR_GRD_CD		= #usr_grd_cd#
             , ETCO_DD			= #etco_dd#
             , LVCO_DD			= #lvco_dd#
             , EXT_NO			= #ext_no#
             , GISU				= #gisu#
             , QUAL_ACQS_DD		= #qual_acqs_dd#
             , QUAL_LOSS_DD		= #qual_loss_dd#
             , MBPH_NO			= REPLACE(#mbph_no#,'-','')
             , BTDY				= #btdy#
             , OWHM_TEL_NO		= REPLACE(#owhm_tel_no#,'-','')
             , EML_ADDR			= #eml_addr#
             , OWHM_ZIP_NO		= #owhm_zip_no#
             , OWHM_ADDR		= #owhm_addr#
             , OWHM_DTLS_ADDR	= #owhm_dtls_addr#             
             , GSC_ID			= #gsc_id#
             , GSC_OFLV			= #gsc_oflv#
             , GSC_TEAMNM		= #gsc_teamnm#
             , GSC_BIZNM		= #gsc_biznm#
             , CTI_USE_YN		= #cti_use_yn#
             , CTI_ID			= #cti_id#
             , USE_YN			= #use_yn#
             , LST_CORC_ID		= #gbl_usr_id#
             , LST_CORC_DTM		= TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')
             , HLDS_DD_CNT 		= #hlds_dd_cnt#
             , GNDR_DV_CD		= #gndr_dv_cd#
             , PRICHAT_USE_YN   = #prichat_use_yn#
             , RMK   			= #rmk#
             , USR_DV_CD = #usr_dv_cd#
             , REG_IP = #reg_ip#
             , IP_CHK_YN = #ip_chk_yn#
         WHERE USR_ID 			= #usr_id#
	</update>
	
	
<!-- 
************************************************
**************사용자 수정 (퇴사자용) 2015.07.15 추가
************************************************
 -->	
	<update id="Get_usr_List_Resign_UPDATE" parameterClass="java.util.HashMap">
		UPDATE TBL_USR
		   SET USR_NM			= #usr_nm#
             , USR_ID			= #usr_id#
             , GRP_CD			= #grp_cd#
             , PART_CD			= CASE WHEN #part_cd# IS NULL THEN ' ' 
			  	   				  ELSE #part_cd# END 	
             , USR_GRD_CD		= #usr_grd_cd#
             , ETCO_DD			= #etco_dd#
             , LVCO_DD			= #lvco_dd#
             , EXT_NO			= #ext_no#
             , GISU				= #gisu#
             , QUAL_ACQS_DD		= #qual_acqs_dd#
             , QUAL_LOSS_DD		= #qual_loss_dd#
             , MBPH_NO			= ''
             , BTDY				= ''
             , OWHM_TEL_NO		= ''
             , EML_ADDR			= ''
             , OWHM_ZIP_NO		= ''
             , OWHM_ADDR		= ''
             , OWHM_DTLS_ADDR	= ''             
             , GSC_ID			= #gsc_id#
             , GSC_OFLV			= #gsc_oflv#
             , GSC_TEAMNM		= #gsc_teamnm#
             , GSC_BIZNM		= #gsc_biznm#
             , CTI_USE_YN		= #cti_use_yn#
             , CTI_ID			= #cti_id#
             , USE_YN			= #use_yn#
             , LST_CORC_ID		= #gbl_usr_id#
             , LST_CORC_DTM		= TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')
             , HLDS_DD_CNT 		= #hlds_dd_cnt#
             , GNDR_DV_CD		= #gndr_dv_cd#
             , PRICHAT_USE_YN   = #prichat_use_yn#
             , RMK   			= #rmk#
         WHERE USR_ID 			= #usr_id#
	</update>
	
<!-- 
******************************************
**************사용자 비밀번호 초기화
******************************************

	<update id="Get_usr_pass_UPDATE" parameterClass="java.util.HashMap">
		UPDATE TBL_USR
		   SET    
               PW				= FUN_SHA1_HASH('00000000')               
             , LGIN_ST_CD		= '2'
             , LGIN_TRY_TCNT    = '0'
             , LST_PW_UPD_DTM   = TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')
             , LST_CORC_ID		= #gbl_usr_id#
             , LST_CORC_DTM		= TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')
         WHERE USR_ID 			= #usr_id#
	</update>	
	 -->	
	<!-- 
******************************************
**************사용자 비밀번호 초기화 00000000=>gsmbiz0519
******************************************
 -->	
	<update id="Get_usr_pass_UPDATE" parameterClass="java.util.HashMap">
		UPDATE TBL_USR
		   SET           
               PW				= FUN_SHA1_HASH('gsmbiz0519')
             , PW_1				= FUN_SHA1_HASH('gsmbiz0519')                       
             , LGIN_ST_CD		= '2'
             , LGIN_TRY_TCNT    = '0'
             , LST_PW_UPD_DTM   = TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')
             , LST_CORC_ID		= #gbl_usr_id#
             , LST_CORC_DTM		= TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')
         WHERE USR_ID 			= #usr_id#
	</update>	
<!-- 
******************************************
**************사용자 로그인 초기화
******************************************
 -->	
	<update id="Get_usr_lgin_rtycnt_UPDATE" parameterClass="java.util.HashMap">
		UPDATE TBL_USR
		   SET 
		   	   LGIN_ST_CD		= '2'	
             , LGIN_TRY_TCNT    = '0'
             , LST_PW_UPD_DTM   = TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')
             , LST_CORC_ID		= #gbl_usr_id#
             , LST_CORC_DTM		= TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')
         WHERE USR_ID 			= #usr_id#
	</update>	

<!-- 
******************************************
**************사용자 등록
******************************************
 -->	
	<insert id="Get_usr_List_INSERT" parameterClass="java.util.HashMap">
		INSERT INTO TBL_USR
		(
			 USR_NM			
           , USR_ID			
           , GRP_CD			
           , PART_CD		
           , USR_GRD_CD		
           , ETCO_DD		
           , LVCO_DD		
           , EXT_NO			
           , GISU			
           , QUAL_ACQS_DD	
           , QUAL_LOSS_DD	
           , MBPH_NO			
           , BTDY				
           , OWHM_TEL_NO		
           , EML_ADDR			
           , OWHM_ZIP_NO		
           , OWHM_ADDR		
           , OWHM_DTLS_ADDR
           , PW				
           , GSC_ID			
           , GSC_OFLV		
           , GSC_TEAMNM		
           , GSC_BIZNM		
           , CTI_USE_YN		
           , CTI_ID		
           , USE_YN			
           , REG_ID
           , REG_DTM
           , LST_CORC_ID		
           , LST_CORC_DTM	
           , HLDS_DD_CNT
           , GNDR_DV_CD
           , PRICHAT_USE_YN
           , RMK
           , USR_DV_CD
           , PW_1
           , IP_CHK_YN
		)
		VALUES
		(
			 #usr_nm#			<!-- USR_NM -->
           , #usr_id#			<!-- USR_ID -->
           , #grp_cd#			<!-- GRP_CD -->
           , #part_cd#			<!-- PART_CD -->
           , #usr_grd_cd#		<!-- USR_GRD_CD -->
           , #etco_dd#			<!-- ETCO_DD -->
           , #lvco_dd#			<!-- LVCO_DD -->
           , #ext_no#			<!-- EXT_NO -->
           , #gisu#				<!-- GISU -->
           , #qual_acqs_dd#		<!-- QUAL_ACQS_DD -->
           , #qual_loss_dd#		<!-- QUAL_LOSS_DD -->
           , REPLACE(#mbph_no#,'-','')	<!-- MBPH_NO -->
           , #btdy#				<!-- BTDY -->
           , REPLACE(#owhm_tel_no#,'-','')		<!-- OWHM_TEL_NO -->
           , #eml_addr#			<!-- EML_ADDR -->
           , #owhm_zip_no#		<!-- OWHM_ZIP_NO -->
           , #owhm_addr#		<!-- OWHM_ADDR -->
           , #owhm_dtls_addr#	<!-- OWHM_DTLS_ADDR -->
           , FUN_SHA1_HASH('gsmbiz0519')			<!-- PW -->
           , #gsc_id#			<!-- GSC_ID -->
           , #gsc_oflv#			<!-- GSC_OFLV -->
           , #gsc_teamnm#		<!-- GSC_TEAMNM -->
           , #gsc_biznm#		<!-- GSC_BIZNM -->
           , #cti_use_yn#		<!-- CTI_USE_YN -->
           , #cti_id#			<!-- CTI_ID -->
           , #use_yn#			<!-- USE_YN -->
           , #gbl_usr_id#		<!-- REG_ID -->
           , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')			<!-- REG_DTM -->
           , #gbl_usr_id#		<!-- GBL_USR_ID -->
           , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')			<!-- getToday -->
           , #hlds_dd_cnt#		<!--  휴가일수 -->
           , #gndr_dv_cd#
           , #prichat_use_yn#
           , #rmk#
           ,#usr_dv_cd#
           , FUN_SHA1_HASH('gsmbiz0519')			<!-- PW -->
           , #ip_chk_yn#
		)
	</insert>
		
<!-- 사용자 정보 변경이력 채번 -->		
	<select id="Set_usr_Seq_SEL" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
	 SELECT TBL_USR_HIST_SEQ.NEXTVAL AS SEQ 
	 FROM DUAL
</select>	
	
	<!-- 
******************************************
**************사용자 정보 변경 이력 등록
******************************************
 -->	
	<insert id="Get_usr_Hist_INSERT" parameterClass="java.util.HashMap">
		INSERT INTO TBL_USR_HIST
		(
		    SEQ
		   , USR_NM			
           , USR_ID			
           , GRP_CD			
           , PART_CD		
           , USR_GRD_CD		
           , ETCO_DD		
           , LVCO_DD			
           , QUAL_ACQS_DD	
           , QUAL_LOSS_DD		
           , CTI_USE_YN			
           , USE_YN			
           , REG_ID
           , REG_DTM
		   , RMK
           , USR_DV_CD
           , CREATE_YN
           , REG_IP           
		)
		VALUES
		(
		    #seq#
		   , #usr_nm#			<!-- USR_NM -->
           , #usr_id#			<!-- USR_ID -->
           , #grp_cd#			<!-- GRP_CD -->
           , #part_cd#			<!-- PART_CD -->
           , #usr_grd_cd#		<!-- USR_GRD_CD -->
           , #etco_dd#			<!-- ETCO_DD -->
           , #lvco_dd#			<!-- LVCO_DD -->
           , #qual_acqs_dd#		<!-- QUAL_ACQS_DD -->
           , #qual_loss_dd#		<!-- QUAL_LOSS_DD -->
           , #cti_use_yn#		<!-- CTI_USE_YN -->
           , #use_yn#			<!-- USE_YN -->
           , #gbl_usr_id#		<!-- REG_ID -->
           , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')			<!-- REG_DTM -->
           , #rmk#           <!-- 비고 -->
		   ,#usr_dv_cd#		
		   ,#create_yn#
		   ,#reg_ip#
		)
	</insert>

<!-- 
******************************************
**************사용자관리 삭제
******************************************
 -->
	<update id="Get_usr_List_DELETE" parameterClass="java.util.HashMap">
		UPDATE TBL_USR
		   SET USE_YN = 'N'
		 WHERE USR_ID = #usr_id#  
	</update>

<!-- 
******************************************
**************휴가일수 통계
******************************************
 -->	
	<select id="Get_usr_year_List" resultClass="java.util.HashMap" parameterClass="java.util.HashMap">
	SELECT	  K.USR_ID, NVL(K.HLDS_DD_CNT,0) AS HLDS_DD_CNT, K.USR_NM, K.JAN, K.FEB, K.MAR, K.APR, K.MAY, K.JUN, K.JUL, K.AUG, K.SEPT, K.OCT, K.NOV, K.DEC
				, NVL(K.HLDS_DD_CNT,0) - NVL((K.JAN+ K.FEB+ K.MAR+ K.APR+ K.MAY+ K.JUN+ K.JUL+ K.AUG+ K.SEPT+ K.OCT+ K.NOV+ K.DEC),0) HLDS_CNT
		  FROM 
				(SELECT   A.USR_ID
					, B.HLDS_DD_CNT 
					, FUN_GET_USRNM(A.USR_ID) AS USR_NM
				    , SUM(
						CASE 
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'01'						
						AND (WKG_TYP_CD IN 'C')
						THEN 1
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'01'						
						AND (WKG_TYP_CD IN 'B')
						THEN 0.5
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'01'						
						AND (WKG_TYP_CD IN 'G')
						THEN 1
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'01'						
						AND (WKG_TYP_CD IN 'H')
						THEN 1
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'01'						
						AND (WKG_TYP_CD IN 'L')
						THEN 1
						END
					) AS JAN
				       , SUM(
						CASE 
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'02'						
						AND (WKG_TYP_CD IN 'C')
						THEN 1
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'02'						
						AND (WKG_TYP_CD IN 'B')
						THEN 0.5
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'02'						
						AND (WKG_TYP_CD IN 'G')
						THEN 1
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'02'						
						AND (WKG_TYP_CD IN 'H')
						THEN 1
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'02'						
						AND (WKG_TYP_CD IN 'L')
						THEN 1
						END
					) AS FEB
				       , SUM(
						CASE 
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'03'						
						AND (WKG_TYP_CD IN 'C')
						THEN 1
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'03'						
						AND (WKG_TYP_CD IN 'B')
						THEN 0.5
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'03'						
						AND (WKG_TYP_CD IN 'G')
						THEN 1
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'03'						
						AND (WKG_TYP_CD IN 'H')
						THEN 1
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'03'						
						AND (WKG_TYP_CD IN 'L')
						THEN 1
						END
					) AS MAR
				       , SUM(
						CASE 
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'04'						
						AND (WKG_TYP_CD IN 'C')
						THEN 1
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'04'						
						AND (WKG_TYP_CD IN 'B')
						THEN 0.5
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'04'						
						AND (WKG_TYP_CD IN 'G')
						THEN 1
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'04'						
						AND (WKG_TYP_CD IN 'H')
						THEN 1
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'04'						
						AND (WKG_TYP_CD IN 'L')
						THEN 1
						END
					) AS APR
				       , SUM(
						CASE 
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'05'						
						AND (WKG_TYP_CD IN 'C')
						THEN 1
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'05'						
						AND (WKG_TYP_CD IN 'B')
						THEN 0.5
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'05'						
						AND (WKG_TYP_CD IN 'G')
						THEN 1
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'05'						
						AND (WKG_TYP_CD IN 'H')
						THEN 1
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'05'						
						AND (WKG_TYP_CD IN 'L')
						THEN 1
						END
					) AS MAY
				       , SUM(
						CASE 
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'06'						
						AND (WKG_TYP_CD IN 'C')
						THEN 1
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'06'						
						AND (WKG_TYP_CD IN 'B')
						THEN 0.5
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'06'						
						AND (WKG_TYP_CD IN 'G')
						THEN 1
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'06'						
						AND (WKG_TYP_CD IN 'H')
						THEN 1
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'06'						
						AND (WKG_TYP_CD IN 'L')
						THEN 1
						END
					) AS JUN
				       , SUM(
						CASE 
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'07'						
						AND (WKG_TYP_CD IN 'C')
						THEN 1
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'07'						
						AND (WKG_TYP_CD IN 'B')
						THEN 0.5
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'07'						
						AND (WKG_TYP_CD IN 'G')
						THEN 1
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'07'						
						AND (WKG_TYP_CD IN 'H')
						THEN 1
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'07'						
						AND (WKG_TYP_CD IN 'L')
						THEN 1
						END
					) AS JUL
				       , SUM(
						CASE 
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'08'						
						AND (WKG_TYP_CD IN 'C')
						THEN 1
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'08'						
						AND (WKG_TYP_CD IN 'B')
						THEN 0.5
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'08'						
						AND (WKG_TYP_CD IN 'G')
						THEN 1
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'08'						
						AND (WKG_TYP_CD IN 'H')
						THEN 1
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'08'						
						AND (WKG_TYP_CD IN 'L')
						THEN 1
						END
					) AS AUG
				       , SUM(
						CASE 
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'09'						
						AND (WKG_TYP_CD IN 'C')
						THEN 1
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'09'						
						AND (WKG_TYP_CD IN 'B')
						THEN 0.5
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'09'						
						AND (WKG_TYP_CD IN 'G')
						THEN 1
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'09'						
						AND (WKG_TYP_CD IN 'H')
						THEN 1
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'09'						
						AND (WKG_TYP_CD IN 'L')
						THEN 1
						END
					) AS SEPT
				       , SUM(
						CASE 
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'10'						
						AND (WKG_TYP_CD IN 'C')
						THEN 1
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'10'						
						AND (WKG_TYP_CD IN 'B')
						THEN 0.5
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'10'						
						AND (WKG_TYP_CD IN 'G')
						THEN 1
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'10'						
						AND (WKG_TYP_CD IN 'H')
						THEN 1
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'10'						
						AND (WKG_TYP_CD IN 'L')
						THEN 1
						END
					) AS OCT
				       , SUM(
						CASE 
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'11'						
						AND (WKG_TYP_CD IN 'C')
						THEN 1
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'11'						
						AND (WKG_TYP_CD IN 'B')
						THEN 0.5
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'11'						
						AND (WKG_TYP_CD IN 'G')
						THEN 1
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'11'						
						AND (WKG_TYP_CD IN 'H')
						THEN 1
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'11'						
						AND (WKG_TYP_CD IN 'L')
						THEN 1
						END
					) AS NOV
				       , SUM(
						CASE 
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'12'						
						AND (WKG_TYP_CD IN 'C')
						THEN 1
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'12'						
						AND (WKG_TYP_CD IN 'B')
						THEN 0.5
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'12'						
						AND (WKG_TYP_CD IN 'G')
						THEN 1
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'12'						
						AND (WKG_TYP_CD IN 'H')
						THEN 1
						WHEN SUBSTR(WKG_DT, 0,6) 
						IN 
						#usr_year#||'12'						
						AND (WKG_TYP_CD IN 'L')
						THEN 1
						END
					) AS DEC
				FROM	TBL_USR_WKG_TYP A
				INNER
				JOIN TBL_USR B
					ON (A.USR_ID = B.USR_ID)
				    WHERE A.WKG_DT BETWEEN #usr_year# ||'0101' AND  #usr_year# ||'1231'
					<dynamic>
						<isNotEmpty prepend="AND" property="grp_cd">
							B.GRP_CD = #grp_cd#
						</isNotEmpty>
						<isNotEmpty prepend="AND" property="part_cd">
							B.PART_CD = #part_cd#
						</isNotEmpty>
						<isNotEmpty prepend="AND" property="usr_id">
							A.USR_ID = #usr_id#
						</isNotEmpty>
						<isNotEmpty prepend="AND" property="usr_nm">
							B.USR_NM  = #usr_nm#
						</isNotEmpty>						
					 </dynamic> 
				 GROUP BY A.USR_ID, HLDS_DD_CNT
			) K	
			ORDER BY USR_NM			 
	</select>

<!-- 
******************************************
**************사용자 이력조회
******************************************
 -->	
	<select id="Get_usr_career_List_SELECT" resultClass="java.util.HashMap" parameterClass="java.util.HashMap">
		SELECT LPAD(ROWNUM, 3, '0') NO
			 , HIST_DV_CD
			 , FUN_GET_CDNM('NW078', HIST_DV_CD) AS HIST_DV_NM 
			 , INPUT_DTM
             , STR_DT
             , END_DT
             , HIST_DTLS_CTT
             , CNNT_INST_NM
             , FUN_GET_USRNM(REG_ID) AS REG_NM
             , REG_ID
             , REG_DTM
             , FUN_GET_USRNM(USR_ID) AS USR_NM
             , USR_ID
             , 'N' AS ADDROW_YN
		  FROM TBL_USR_HIST_INFO
		 WHERE USR_ID 	= #usr_id#
		   AND STR_DT 	BETWEEN #str_dt# AND #end_dt#
		   AND (DEL_YN	= 'N' OR DEL_YN IS NULL)
		 <dynamic>
		 	<isNotEmpty prepend="AND" property="hist_dv_cd">
		 		HIST_DV_CD 	= #hist_dv_cd#
		 	</isNotEmpty>
		 	<isNotEmpty prepend="AND" property="hist_dtls_ctt">
		 		HIST_DTLS_CTT 	LIKE '%' || #hist_dtls_ctt# || '%'
		 	</isNotEmpty>		 	 
		 </dynamic>
		ORDER BY REG_DTM DESC
	</select>
	


<!-- 
******************************************
**************사용자 이력 등록
******************************************
 -->	
	<insert id="Set_usr_career_List_INSERT" parameterClass="java.util.HashMap">
		INSERT INTO TBL_USR_HIST_INFO
		(
			  USR_ID
		    , INPUT_DTM
		    , HIST_DV_CD
		    , STR_DT
		    , END_DT
		    , HIST_DTLS_CTT
		    , CNNT_INST_NM
		    , REG_ID
		    , REG_DTM
		    , LST_CORC_ID
		    , LST_CORC_DTM
		    , DEL_YN
		)
		VALUES
		(
			  #usr_id#
		    , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')
		    , #hist_dv_cd#
		    , #str_dt#
		    , #end_dt#
		    , #hist_dtls_ctt#
		    , #cnnt_inst_nm#
		    , #gbl_usr_id#
		    , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')
		    , #gbl_usr_id#
		    , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')
		    , 'N'
		)
	</insert>

<!-- 
******************************************
**************CTI MAXNUM+1
******************************************
 -->		
	<select id="Get_cti_maxNum_SELECT" resultClass="java.util.HashMap" parameterClass="java.util.HashMap">
		SELECT (MAX(CTI_ID)+1)AS CTI_NUM 
		FROM TBL_USR
	</select>

<!-- 
******************************************
**************cti스킬그룹 조회
******************************************
 -->	
 	<select id="Get_BASE_CTI_SKIL_SELECT" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
 		SELECT    '0' AS CHK
 				, SMLCLAS_CD
		        , SMLCLAS_CDNM
		        , CASE WHEN LENGTH(SRT_SEQ) = 1 THEN '0' || SRT_SEQ ELSE SRT_SEQ END SRT_SEQ
		        , REFN_CD_VLU1
		  FROM TBL_UNFYCD_SMLCLAS 
		 WHERE LRGCLAS_CD = 'NW096'
		 ORDER BY SRT_SEQ
	</select>
	
<!-- 
******************************************
**************cti 스킬그룹 등록
******************************************
 -->	
	<insert id="Set_cti_skil_List_INSERT" parameterClass="java.util.HashMap">
		INSERT INTO TBL_USR_CTI_SKIL_CD(
				USR_ID
			,   SEQ
			,   SKIL_CDNM
			,   REG_ID
			,   REG_DTM
			,   LST_CORC_ID
			,   LST_CORC_DTM
		)VALUES(
				#usr_id#
			,   #seq#
			,   #skil_cdnm#
			, 	#gbl_usr_id#
			, 	TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')
			, 	#gbl_usr_id#
			, 	TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')
		)
	</insert>

<!-- 
******************************************
**************cti 스킬그룹 삭제
******************************************
 -->	
	<delete id="Set_cti_skil_List_DELETE" parameterClass="java.util.HashMap">
		DELETE FROM TBL_USR_CTI_SKIL_CD
		 WHERE USR_ID = #usr_id#
	</delete>

<!-- 
******************************************
**************등록된 cit skil조회
******************************************
 -->		
	<select id="Get_cti_skil_SELECT" resultClass="java.util.HashMap" parameterClass="java.util.HashMap">
		SELECT 	  SEQ 
				, SKIL_CDNM
				, USR_ID
		  FROM TBL_USR_CTI_SKIL_CD
		 WHERE USR_ID = #usr_id#
	</select>

<!-- 
******************************************
**************사용자 이력 수정
******************************************
 -->	
	<update id="Set_usr_career_List_UPDATE" parameterClass="java.util.HashMap">
		UPDATE TBL_USR_HIST_INFO
		   SET HIST_DV_CD		= #hist_dv_cd#
		     , STR_DT			= #str_dt#
		     , END_DT			= #end_dt#
		     , HIST_DTLS_CTT	= #hist_dtls_ctt#
		     , CNNT_INST_NM		= #cnnt_inst_nm#
		     , LST_CORC_ID		= #gbl_usr_id#
		     , LST_CORC_DTM		= TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')
		 WHERE USR_ID 		= #usr_id#
		   AND INPUT_DTM	= #input_dtm#
	</update>

<!-- 
******************************************
**************사용자 이력 삭제
******************************************
 -->
	<update id="Set_usr_career_List_DELETE" parameterClass="java.util.HashMap">
		UPDATE TBL_USR_HIST_INFO
		   SET DEL_YN 			= 'Y'
		     , LST_CORC_ID		= #gbl_usr_id#
		     , LST_CORC_DTM		= TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')
		 WHERE USR_ID 		= #usr_id#
		   AND INPUT_DTM	= #input_dtm#
	</update>

<!-- 
******************************************
**************근태관리 조회
******************************************
 -->	
	<select id="Get_usr_work_List_SELECT" resultClass="java.util.HashMap" parameterClass="java.util.HashMap">
		SELECT B.USR_ID       
		     , #wkg_st_dt# AS WKG_DT        
		     , A.WKG_TYP_CD       
		     , FUN_GET_CDNM('OLE13', A.WKG_TYP_CD) AS WKG_TYP_NM            
		     , A.WKG_STR_TM             
		     , A.WKG_END_TM             
		     , A.DTLS_CTT             
		     , A.REG_ID            
		     , A.REG_DTM             
		     , A.LST_CORC_ID         
		     , A.LST_CORC_DTM             
		     , FUN_GET_USRNM(B.USR_ID) AS USR_NM
		     , FUN_GET_GRPNM(B.GRP_CD) AS GRP_CDNM
		     , FUN_GET_PARTNM(B.GRP_CD, B.PART_CD) AS PART_CDNM     
		FROM TBL_USR B LEFT JOIN TBL_USR_WKG_TYP A 
	      ON B.USR_ID = A.USR_ID 
	     AND A.WKG_DT = #wkg_st_dt#
	   WHERE 1=1
	   and B.USE_YN='Y'
	   <dynamic>
	   	<isNotEmpty prepend="AND" property="grp_cd">
		   		B.GRP_CD =  #grp_cd# 
		   	</isNotEmpty>	
		   	<isEqual  prepend="AND" property="grp_sum" compareValue="BTO">         
		   		B.GRP_CD in('BNS','OIL','ORD')  
		   	</isEqual>		   
		   	<isNotEmpty prepend="AND" property="part_cd">
		   		B.PART_CD IN #part_cd#
		   	</isNotEmpty>
		   	<isNotEmpty prepend="AND" property="usr_id">
		   		B.USR_ID = #usr_id#
		   	</isNotEmpty>			   
	   </dynamic>
	   ORDER BY WKG_DT DESC, B.USR_ID
	</select>

<!-- 
******************************************
**************근태관리 코드
******************************************
 -->		
	<select id="Get_usr_work_Cmb_SELECT" resultClass="java.util.HashMap" parameterClass="java.util.HashMap">
		SELECT SMLCLAS_CD
			 , SMLCLAS_CDNM 
		  FROM TBL_UNFYCD_SMLCLAS 
		 WHERE LRGCLAS_CD = 'OLE13' 
		 AND USE_YN = 'Y'
		  order by SRT_SEQ 
	</select>

<!-- 
******************************************
**************근태관리 수정
******************************************
 -->		
	<update id="Set_usr_work_UPDATE" parameterClass="java.util.HashMap">
			<!--  	 UPDATE TBL_USR_WKG_TYP
		   SET WKG_TYP_CD	= #wkg_typ_cd#
		     , DTLS_CTT 	= #dtls_ctt#
		     , LST_CORC_ID	= #gbl_usr_id#
		     , LST_CORC_DTM	= TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')
		 WHERE USR_ID		= #usr_id#
		   AND WKG_DT		= #wkg_dt#
		   AND WKG_STR_TM	= #wkg_str_tm#
-->
		MERGE INTO TBL_USR_WKG_TYP A
		    USING (SELECT #usr_id# AS USR_ID
	                 FROM DUAL 
	        ) B
	        ON (A.USR_ID = B.USR_ID AND A.WKG_DT = #wkg_dt#)
	        WHEN MATCHED THEN
	        UPDATE SET
	        	  WKG_TYP_CD	= #wkg_typ_cd#
			     , DTLS_CTT 	= #dtls_ctt#
			     , LST_CORC_ID	= #gbl_usr_id#
			     , LST_CORC_DTM	= TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')		 
	        WHEN NOT MATCHED THEN
	        INSERT (
			          USR_ID			<!--  사용자 ID -->		
			        , WKG_DT			<!--  근무 일자-->	
			        , WKG_TYP_CD		<!--  근무 형태 코드-->	
			        , REG_ID			 <!--  등록 ID			-->
			        , REG_DTM			 <!--  등록 일시		-->
			        , LST_CORC_ID		<!--  최종 수정 ID	-->	
			        , LST_CORC_DTM		<!--  최종 수정 일시-->	
			        , DTLS_CTT 
	          )VALUES(
	                  #usr_id#
	                 ,#wkg_dt#
	                 ,#wkg_typ_cd#
	                 ,#usr_id#
	                 ,TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
	                 ,#usr_id#
	                 ,TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
	                 ,#dtls_ctt#                 
	          )
	           
	</update>

<!-- 
******************************************
**************평가리스트
******************************************
 -->		
	<select id="Get_ases_List_SELECT" resultClass="java.util.HashMap" parameterClass="java.util.HashMap">
		SELECT  K.ASES_YR
			  , '평가점수 ' AS ASES
		      , NVL(TO_CHAR(MAX(CASE WHEN K.ASES_MM = '01' THEN K.MM END)), 0) AS M01
		      , NVL(TO_CHAR(MAX(CASE WHEN K.ASES_MM = '02' THEN K.MM END)), 0) AS M02
		      , NVL(TO_CHAR(MAX(CASE WHEN K.ASES_MM = '03' THEN K.MM END)), 0) AS M03
		      , NVL(TO_CHAR(MAX(CASE WHEN K.ASES_MM = '04' THEN K.MM END)), 0) AS M04
		      , NVL(TO_CHAR(MAX(CASE WHEN K.ASES_MM = '05' THEN K.MM END)), 0) AS M05
		      , NVL(TO_CHAR(MAX(CASE WHEN K.ASES_MM = '06' THEN K.MM END)), 0) AS M06
		      , NVL(TO_CHAR(MAX(CASE WHEN K.ASES_MM = '07' THEN K.MM END)), 0) AS M07
		      , NVL(TO_CHAR(MAX(CASE WHEN K.ASES_MM = '08' THEN K.MM END)), 0) AS M08
		      , NVL(TO_CHAR(MAX(CASE WHEN K.ASES_MM = '09' THEN K.MM END)), 0) AS M09
		      , NVL(TO_CHAR(MAX(CASE WHEN K.ASES_MM = '10' THEN K.MM END)), 0) AS M10
		      , NVL(TO_CHAR(MAX(CASE WHEN K.ASES_MM = '11' THEN K.MM END)), 0) AS M11
		      , NVL(TO_CHAR(MAX(CASE WHEN K.ASES_MM = '12' THEN K.MM END)), 0) AS M12
		      , TO_CHAR(ROUND((SUM(K.MM) / COUNT(DISTINCT K.ASES_MM )), 2), '9,999.00') AS TOTAL
		FROM ( SELECT ASES_YR ,ASES_MM
		             ,SUM(NVL(RECV_RT, 0) + NVL(JOB_DRTM, 0) + NVL(REST_DRTM, 0) 
		               + NVL(OFDY_QUIZ, 0) + NVL(BIZ_ERR, 0) + NVL(BIZ_ATTD, 0) + NVL(QA, 0) 
		               + NVL(TOT_WKG_DRTM, 0) + NVL(DGIND_SCOR, 0) + NVL(DGIND_PNST_SCOR, 0) 
		               + NVL(ADD_SCOR, 0) + NVL(ETC_SCOR1, 0) + NVL(ETC_SCOR2, 0) + NVL(ETC_SCOR3, 0) 
		               + NVL(ETC_SCOR4, 0) + NVL(ETC_SCOR5, 0) + NVL(ETC_SCOR6, 0) + NVL(ETC_SCOR7, 0) 
		               + NVL(ETC_SCOR8, 0) + NVL(ETC_SCOR9, 0) + NVL(ETC_SCOR10, 0)
		              ) AS MM
		        FROM  TBL_MM_ASES_CNSLR
		      WHERE CNSLR_ID = #cnslr_id#
			<dynamic>
			   	<isNotEmpty prepend="AND" property="ases_yr">
			   		ASES_YR = #ases_yr#
			   	</isNotEmpty>
		    </dynamic>
		      GROUP BY ASES_YR, ASES_MM
		    ) K
		GROUP BY K.ASES_YR	
		
		UNION ALL
		
		SELECT ASES_YR
			  , '등급' AS ASES
        	  , NVL(MAX(CASE WHEN ASES_MM = '01' THEN INCENTV_GRD END), '')
        	  , NVL(MAX(CASE WHEN ASES_MM = '02' THEN INCENTV_GRD END), '')
        	  , NVL(MAX(CASE WHEN ASES_MM = '03' THEN INCENTV_GRD END), '')
        	  , NVL(MAX(CASE WHEN ASES_MM = '04' THEN INCENTV_GRD END), '')
        	  , NVL(MAX(CASE WHEN ASES_MM = '05' THEN INCENTV_GRD END), '')
        	  , NVL(MAX(CASE WHEN ASES_MM = '06' THEN INCENTV_GRD END), '')
        	  , NVL(MAX(CASE WHEN ASES_MM = '07' THEN INCENTV_GRD END), '')
        	  , NVL(MAX(CASE WHEN ASES_MM = '08' THEN INCENTV_GRD END), '')
        	  , NVL(MAX(CASE WHEN ASES_MM = '09' THEN INCENTV_GRD END), '')
        	  , NVL(MAX(CASE WHEN ASES_MM = '10' THEN INCENTV_GRD END), '')
        	  , NVL(MAX(CASE WHEN ASES_MM = '11' THEN INCENTV_GRD END), '')
        	  , NVL(MAX(CASE WHEN ASES_MM = '12' THEN INCENTV_GRD END), '')
        	  , '' 
          FROM TBL_MM_ASES_CNSLR
         WHERE CNSLR_ID = #cnslr_id#
			<dynamic>
			   	<isNotEmpty prepend="AND" property="ases_yr">
			   		ASES_YR = #ases_yr#
			   	</isNotEmpty>
		    </dynamic>
         GROUP BY ASES_YR
         ORDER BY ASES_YR DESC, ASES DESC
	</select>	
	
	

<!-- 
******************************************
**************평가리스트
******************************************
 -->		
	<select id="Get_ases_List_SELECT2" resultClass="java.util.HashMap" parameterClass="java.util.HashMap">
	
	select SUBSTR(TIME_KEY, 0, 4) as ASES_YR,
          MAX(case when SUBSTR(TIME_KEY, 5, 6)='01' then MAP_DATA end) as M01 ,
          MAX(case when SUBSTR(TIME_KEY, 5, 6)='01' then MAP_GRADE end) as G01 ,
          MAX(case when SUBSTR(TIME_KEY, 5, 6)='02' then MAP_DATA end) as M02 ,
          MAX(case when SUBSTR(TIME_KEY, 5, 6)='02' then MAP_GRADE end) as G02 ,
          MAX(case when SUBSTR(TIME_KEY, 5, 6)='03' then MAP_DATA end) as M03 ,
          MAX(case when SUBSTR(TIME_KEY, 5, 6)='03' then MAP_GRADE end) as G03 ,
          MAX(case when SUBSTR(TIME_KEY, 5, 6)='04' then MAP_DATA end) as M04 ,
          MAX(case when SUBSTR(TIME_KEY, 5, 6)='04' then MAP_GRADE end) as G04 ,
          MAX(case when SUBSTR(TIME_KEY, 5, 6)='05' then MAP_DATA end) as M05 ,
          MAX(case when SUBSTR(TIME_KEY, 5, 6)='05' then MAP_GRADE end) as G05 ,
          MAX(case when SUBSTR(TIME_KEY, 5, 6)='06' then MAP_DATA end) as M06 ,
          MAX(case when SUBSTR(TIME_KEY, 5, 6)='06' then MAP_GRADE end) as G06 ,
          MAX(case when SUBSTR(TIME_KEY, 5, 6)='07' then MAP_DATA end) as M07 ,
          MAX(case when SUBSTR(TIME_KEY, 5, 6)='07' then MAP_GRADE end) as G07 ,
          MAX(case when SUBSTR(TIME_KEY, 5, 6)='08' then MAP_DATA end) as M08 ,
          MAX(case when SUBSTR(TIME_KEY, 5, 6)='08' then MAP_GRADE end) as G08 ,
          MAX(case when SUBSTR(TIME_KEY, 5, 6)='09' then MAP_DATA end) as M09 ,
          MAX(case when SUBSTR(TIME_KEY, 5, 6)='09' then MAP_GRADE end) as G09 ,
          MAX(case when SUBSTR(TIME_KEY, 5, 6)='10' then MAP_DATA end) as M10 ,
          MAX(case when SUBSTR(TIME_KEY, 5, 6)='10' then MAP_GRADE end) as G10 ,
          MAX(case when SUBSTR(TIME_KEY, 5, 6)='11' then MAP_DATA end) as M11 ,
          MAX(case when SUBSTR(TIME_KEY, 5, 6)='11' then MAP_GRADE end) as G11 ,
          MAX(case when SUBSTR(TIME_KEY, 5, 6)='12' then MAP_DATA end) as M12 ,
          MAX(case when SUBSTR(TIME_KEY, 5, 6)='12' then MAP_GRADE end) as G12 ,
              ROUND(  (select 
                  SUM(MAP_DATA)                   
                from TBL_MAP_DATA
                where usr_id=#usr_id# and  SUBSTR(TIME_KEY,0,4)=#ases_yr# ) /
                ( select 
                  count(TIME_KEY)                   
                from TBL_MAP_DATA
                where usr_id=#usr_id# and  SUBSTR(TIME_KEY,0,4)=#ases_yr# ) ,2 )  as TOTAL
             
            from (
                select TIME_KEY,
                  MAP_DATA ,
                  MAP_GRADE
                from TBL_MAP_DATA
                where usr_id=#usr_id# and  SUBSTR(TIME_KEY,0,4)=#ases_yr# ) YearData
                
                 group by SUBSTR(TIME_KEY, 0, 4)
	</select>	
	
	
	<!-- 
	******************************************
	**************상담사가 속해있는 파트정보 조회
	******************************************
	-->	
 	<select id="Get_part_list_SELECT" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
	 	select 
	 		distinct part_cd,
			(select part_cdnm from tbl_part_cd where part_cd = a.part_cd) as part_nm
		from tbl_usr a 
		where grp_cd <![CDATA[<>]]> 'GSC' 
		  and grp_cd in('ORD','BNS')
		  and use_yn ='Y' 		 
	</select>	

<!-- IP체크 대상자 등록 -->
<update id="Get_IP_Y_UPDATE" parameterClass="java.util.HashMap">
		UPDATE TBL_USR
		   SET IP_CHK_YN			= 'Y' 
         WHERE USR_ID 			= #usr_id#
	</update>

<!-- IP체크 대상자 삭제 -->
<update id="Get_IP_N_UPDATE" parameterClass="java.util.HashMap">
		UPDATE TBL_USR
		   SET IP_CHK_YN			= 'N' 
         WHERE USR_ID 			= #usr_id#
	</update>
		
</sqlMap>
