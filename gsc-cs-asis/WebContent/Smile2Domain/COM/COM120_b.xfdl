<?xml version="1.0" encoding="utf-8"?>
<FDL version="1.2">
  <TypeDefinition url="..\default_typedef.xml"/>
  <Form id="COM120" classname="COM120" inheritanceid="" cachelevel="" position="absolute 0 0 645 21" version="" titletext="New Form" onload="COM120_onload">
    <Script type="xscript4.0"><![CDATA[include "LIB::CommonLib.xjs"
include "CTI::cbPhone.xjs"

/*
	사용함수정의 - 시작
*/
objPHNBNS.setMakeCall = makecall;
objPHNORD.setMakeCall = makecall;
objPHNCMP.setMakeCall = makecall;
objPHNLPS.setMakeCall = makecall;
objPHNDTMF_BNS010.setMakeCall = makecall;
objPHNDTMF_BNS080.setMakeCall = makecall;
objPHNDTMF_BNS090.setMakeCall = makecall;
objPHNDTMF_BNS260.setMakeCall = makecall;
objPHNDTMF_BNS302.setMakeCall = makecall;
objPHNDTMF_BNS570.setMakeCall = makecall;
objPHNDTMF_BNS580.setMakeCall = makecall;
objPHNDTMF_CST110.setMakeCall = makecall;

objPHNTOP.setMakeCall = makecall;

objPHNBNS.setCallDT   = setCallDT;
objPHNORD.setCallDT   = setCallDT;
objPHNCMP.setCallDT   = setCallDT;
objPHNLPS.setCallDT   = setCallDT;

// GET 녹취키
objPHNBNS.getCallID   = getCallID;
objPHNORD.getCallID   = getCallID;
objPHNCMP.getCallID   = getCallID;
objPHNLPS.getCallID   = getCallID;

// GET 콜상태 
objPHNBNS.getCallStatus = getCallStatus;
objPHNORD.getCallStatus = getCallStatus;
objPHNCMP.getCallStatus = getCallStatus;
objPHNLPS.getCallStatus = getCallStatus;
objPHNDTMF_BNS010.getCallStatus = getCallStatus;
objPHNDTMF_BNS080.getCallStatus = getCallStatus;
objPHNDTMF_BNS090.getCallStatus = getCallStatus;
objPHNDTMF_BNS260.getCallStatus = getCallStatus;
objPHNDTMF_BNS302.getCallStatus = getCallStatus;
objPHNDTMF_BNS570.getCallStatus = getCallStatus;
objPHNDTMF_BNS580.getCallStatus = getCallStatus;
objPHNDTMF_CST110.getCallStatus = getCallStatus;

// SET 상담저장여부 YN 
objPHNBNS.setConSaveYn  = setConSaveYn;
objPHNORD.setConSaveYn  = setConSaveYn;
objPHNCMP.setConSaveYn  = setConSaveYn;
objPHNLPS.setConSaveYn  = setConSaveYn;

objPHNBNS.setCustId  = setCustId;
objPHNORD.setCustId  = setCustId;

objPHNBNS.setKeygubun  = setKeygubun;
objPHNORD.setKeygubun  = setKeygubun;

// GET 상담저장여부 YN
objPHNBNS.getConSaveYn  = getConSaveYn;
objPHNORD.getConSaveYn  = getConSaveYn;
objPHNCMP.getConSaveYn  = getConSaveYn;
objPHNLPS.getConSaveYn  = getConSaveYn;

// OUT BOUND콜 여부 True / False
objPHNBNS.getBlnOutbound  = getBlnOutbound;
objPHNORD.getBlnOutbound  = getBlnOutbound;
objPHNCMP.getBlnOutbound  = getBlnOutbound;
objPHNLPS.getBlnOutbound  = getBlnOutbound;
objPHNDTMF_BNS010.getBlnOutbound = getBlnOutbound;
objPHNDTMF_BNS080.getBlnOutbound = getBlnOutbound;
objPHNDTMF_BNS090.getBlnOutbound = getBlnOutbound;
objPHNDTMF_BNS260.getBlnOutbound = getBlnOutbound;
objPHNDTMF_BNS302.getBlnOutbound = getBlnOutbound;
objPHNDTMF_BNS570.getBlnOutbound = getBlnOutbound;
objPHNDTMF_BNS580.getBlnOutbound = getBlnOutbound;
objPHNDTMF_CST110.getBlnOutbound = getBlnOutbound;

// SET 전화끊기 후 상담저장여부 YN (보너스 상담)
objPHNBNS.setHangUpSaveYn  = setHangUpSaveYn;
objPHNORD.setHangUpSaveYn  = setHangUpSaveYn;

// GET 전화끊기 후 상담저장여부 YN (보너스 상담)
objPHNBNS.getHangUpSaveYn  = getHangUpSaveYn;
objPHNORD.getHangUpSaveYn  = getHangUpSaveYn;

// 이벤트발생 업무구분 세팅
objPHNBNS.setEventProcGbn  = setEventProcGbn;
objPHNORD.setEventProcGbn  = setEventProcGbn;
objPHNCMP.setEventProcGbn  = setEventProcGbn;
objPHNLPS.setEventProcGbn  = setEventProcGbn;
objPHNTOP.setEventProcGbn  = setEventProcGbn;

// 녹취정보 초기화 - 화면에서도 초기화 사용하기 위해 추가
objPHNBNS.setPhoneInitProc  = setPhoneInitProc;


objPHNBNS.COM120      = this;
objPHNORD.COM120      = this;
objPHNCMP.COM120      = this;
objPHNLPS.COM120      = this;
objPHNTOP.COM120      = this;
objPHNDTMF_BNS010.COM120	= this;
objPHNDTMF_BNS080.COM120	= this;
objPHNDTMF_BNS090.COM120	= this;
objPHNDTMF_BNS260.COM120	= this;
objPHNDTMF_BNS302.COM120	= this;
objPHNDTMF_BNS570.COM120	= this;
objPHNDTMF_BNS580.COM120	= this;
objPHNDTMF_CST110.COM120	= this;

/*
	사용함수정의 - 끝
*/

//-----------------------------------------------------------------------------------------------------------------------

var objTComX;
var UNKNOW  	 = "tslUnknown";
var RING      	 = "tslRinging";	
var DIAL  	 	 = "tslDialing";
var ES  		 = "tslEstablished";
var HELD  	 	 = "tslHeld";

var phoneType	   			= null;
var conSaveYn     			= "Y";   //상담이력저장여부- 처음로그인시 후처리상태임으로 기본값 Y로세팅한다.
var hangUpSaveYn			= "Y";	 //보너스카드 전화끊기 후 상담저장여부_ 처음로그인시 후처리상태임으로 기본값 Y로세팅한다.
var callStatus    			= null;  //EDU : 교육, LUN : 식사 등등
var callMakeTime  			= null;  //전화건시간
var callRecvTime  			= null;  //전화받은시간
var callClearTime 			= null;  //전화끊은시간
var CONNID 					= null;  //녹취넘겨줄정보 : CONNID

var TODAY 					= null;  //녹취넘겨줄정보 : 일자
var EXT_NO 					= null;  //녹취넘겨줄정보 : 내선번호
var CTI_ID 					= null;  //녹취넘겨줄정보 : CTI_ID

var ANI						= null;  //상담화면 : 전화번호
var IVR_HISTORY				= null;  //상담화면 : ivr 히스토리 내역
var CUST_ID					= null;  //상담화면 : 고객번호
var key_gubun				= null;  //상담화면 : 인입된 DNS전화번호
var DTMF_NO					= null;  //상담화면 : 입력된DTMF_NO
var DTMF_NO_INIT			= null;  //상담화면 : 입력된DTMF_NO
var RESULT_YN				= null;  //상담화면 : 정상여부
var TYPE					= "";    //DTMF 동작시 1: 약관, 2:주민번호
var outboundHP				= "";    //아웃바운드전화번호

var CALL_TRANSFER_YN		= null;  //트랜스퍼 완료되었을경우
var TRAN_GRP_CDNM			= null;  //호전환된 그룹명
var TRAN_USR_NM				= null;  //호전환된 그룹명
var USR_NM					= null;  //상담사명

var blnOutbound				= false; //outbound
var DTMF_YN					= null;
var reconnect_yn			= "N";
var cti_timestamp			= null;  //고객대기시간

var service_gubun			= null;  //10 :주민번호, 20 : 보너스카드 등록실패분기, 31: 약관동시동의, 32 : 약관따로동의
var new_jumin_no			= null;
var yak_yn					= null;
var info_yn					= null;


var COM121 					= null;  //전화받기[팝업]	
var COM122 					= null;  //호전환리스트[팝업]
var CST111 					= null;  //감청
var BNS010 					= null;  //보너스상담[메인]
var ORD010 					= null;  //주문상담[메인]


var objTConn 	= getTopFrame().objTConn;
var objTExtn 	= getTopFrame().objTExtn;
var objTExtnQ 	= getTopFrame().objTExtnQ;
var objTLine 	= getTopFrame().objTLine;
var objTLineQ 	= getTopFrame().objTLineQ;

var DTMF_PGM_ID				= null;  //DTMF 화면이름
var evntProcGbn				= null;  // 이벤트업무구분(objPHNBNS, objPHNORD, objPHNCMP, objPHNLPS, objPHNTOP)

function COM120_onload(obj:Form, e:LoadEventInfo)
{	
	//cti_login();
	//로드시에 로그인 하지 말자..
	setScreenLayout(99);  //로그오프
	objTExtn.TLogout();  //로그오프
	
	//공통 데이터 담는 그릇 생성 - 시작
	objTComX = new ActiveX("objTComX",0,0,0,0);
	objTComX.progid = "{159A44C0-DC34-11D0-A0D9-0000E81009EE}";
	getTopFrame().addChild("objTComX", objTComX);
	objTComX.show();
	//공통 데이터 담는 그릇 생성 - 끝	
}


function cti_login(){
	trace("#############로그인 PROCESS ############");
	var result = ctiConnct();  //서버로그인
	trace("결과 -1 정상, 0 비정상 result ::" + result);
	
	if (result != 0){
		ctiRegister();  //레지스터
		logon();  //로그인
	}
}


function onExtnEvent(obj, ev){
	
	//trace("전화건시간 ::" + this.callMakeTime );
	//trace("전화받은시간 ::" + this.callRecvTime );
	//trace("전화끊은시간 ::" + this.callClearTime );

	//trace("userData 확인" );	
	//trace("objTExtn_TEvent e.EventInfo.USERDATA=>" + ev.EventInfo.USERDATA);
	//trace("objTExtn_TEvent e.EventInfo.USERDATA.GetCount()=>" + ev.EventInfo.USERDATA.GetCount());			
	//trace("userData 확인끝" );

	trace("onExtnEvent=>" +ev.EventInfo.Event);
	
	var e_code = ev.EventInfo.Event;
	
	switch(e_code){
	
		//EventError
		case 52:
			
			trace("EventError CODE ::" + ev.EventInfo.ErrorCode+" MESSAGE :: "+ ev.EventInfo.ErrorMessage);
			
			switch(ev.EventInfo.ErrorCode){
				case 620 :								
					cf_Alert("COME0026",ev.EventInfo.ErrorCode); //CTI 로그인에 실패하였습니다.상단 [CTI Login]버튼을 클릭하여 재로그인 해주세요. 오류코드 !@
					//btn_cti.visible = true;
					//btn_cti.enable = true;
					setScreenLayout(99);  //로그오프
					objTExtn.TLogout();  //로그오프
					break;				
				default :
					if(getTopFrame().g_LogOffYn == "Y") {
						getTopFrame().setLogOff("U1");
					}
					break;
			}
		break;
			
			
		//전화가 끊어진경우 - TEventAbandoned
        case 59:
			
			trace("TEventAbandoned");   	 
			    
			trace("CALL TYPE :: " + ev.EventInfo.CallType);

			switch (ev.EventInfo.CallType){
				case 0 :            // CallTypeUnknown
				break ;
				case 1 :            // CallTypeInternal
				case 2 :            // CallTypeInbound
					/*
					 * 전화가 연결되었을때 전화받기 화면 제거한다
					 * 수동으로 받았을경우를 대비하기위함 
					 */
					trace("전화받기 HANDLE ID:: " + COM121);
					agentReady();
					
					if(COM121){
						trace("전화받기창 끔 대기상태변경");
						COM121.close();
					}					
				break ;
				
				case 3 :            // CallTypeOutbound					
					agentNotReady("","");	
				break ;
				case 4 :            // CallTypeConsult
					trace("협의자가 전화끊음");
					trace("전화받기 HANDLE ID:: " + COM121);
					agentReady();	
										
					if(COM121){
						trace("전화받기창 끔 대기상태변경");
						COM121.close();
					}
				break ;
			}

		break;			
		
		//전화연결 - EventEstablished
		case 64:

			trace("전화연결(ES)...");	

			if(COM121){
				trace("전화받기창 끔 대기상태변경");
				COM121.close();
			}	
			
			/*
			var size = ev.EventInfo.USERDATA.GetCount();
			trace("전화연결(ES) 녹취 세팅값확인 ::" + size);			
			var userData 		= "";
			var userDataKey 	= "";			
			for(var i=0;i<size;i++){

				userData = ev.EventInfo.USERDATA;
				userDataKey = userData.Get(i).Key;
				
				//녹취키확인
				if(userDataKey == "EXT_NO"){
					trace("EXT_NO :: " + userData.Get(i).StringValue);									
				}								
			}
			*/

			//trace("녹취아이디 :: " + ev.EventInfo.CONNID.GetConnIDAsStr);
			//trace("녹취채널 :: " + ev.EventInfo.CallID);			
			//trace("CALL TYPE :: " + ev.EventInfo.CallType);
			if(this.DTMF_YN != "Y"){
				trace("objTLineQ.TStatus :" + objTLineQ.TStatus + "::" + "objTLine.TStatus :"  + objTLine.TStatus);
				if (objTLineQ.TStatus == UNKNOW || objTLine.TStatus == UNKNOW){
					this.callRecvTime  			= getDBToday();  //전화받은시간
					trace("COM120 전화받은시간 :: " + this.callRecvTime);
					this.callClearTime 			= "";  //전화끊은시간
					
					// COM123에서 전화를 걸었을 경우 이벤트 주지 않음.
					trace("이벤트구분 ::" + this.evntProcGbn);
					if(ev.EventInfo.CallType != 3 && this.evntProcGbn != "objPHNTOP"){
						// COM120받기 이벤트
						var grp_cd 		= GetUserInfo("gGRP_CD");					
						if (grp_cd =="ORD"){
							get_Data("ORD010");
						}else{
							get_Data("BNS010");			
						}
					}
				}								
			}
			switch (ev.EventInfo.CallType){
				case 0 :            // CallTypeUnknown
					break ;
				case 1 :            // CallTypeInternal
				case 2 :            // CallTypeInbound	
				case 3 :            // CallTypeOutbound	
					
					this.callStatus = "ES";
					
					trace("상담이력저장 펑션호출");
					//actionCnslInsertProcess(eventInfo.CallType);
								
					setScreenLayout(12);
					
				default :
					break;
			}
			
			//DTMF할경우 자동으로 COMPLEATE 한다.
			if(this.DTMF_YN == "Y"){
				trace("DTMF_YN일경우 자동으로 compleate한다.");
				conferenceComplete();
			}			
						
			break;
		
		 //전화끊어진 이벤트 -  EventReleased
		case 65:
			trace("CALL TYPE :: " + ev.EventInfo.CallType);
			
			if(ev.EventInfo.CallType != 4){
				this.callClearTime 			= getDBToday();  //전화끊은시간	
			}
						
			switch (ev.EventInfo.CallType){
				case 1 :            // CallTypeInternal
				case 2 :            // CallTypeInbound
				
					trace("전화끊기 라인상태0:: " + objTLine.TStatus);
					trace("전화끊기 라인상태1:: " + objTLineQ.TStatus);
					trace("CALL_TRANSFER_YN :: " + CALL_TRANSFER_YN);
					
					/*
						전화끊겼을경우 후처리한다. - 시작
					*/					
					if(objTLine.TStatus == UNKNOW ){
						if((CALL_TRANSFER_YN != "Y") && (objTLineQ.TStatus == ES || objTLineQ.TStatus == DIAL) ){	
							trace("협의중 고객이 끊음...");
							objTLineQ.THangUp();
							cf_Alert("COME0025");  //협의중 고객이 전화를 끊었습니다.																				
						}
					}	
					if(objTLineQ.TStatus == UNKNOW ){
						if((CALL_TRANSFER_YN != "Y") && (objTLine.TStatus == ES || objTLine.TStatus == DIAL) ){	
							
							trace("협의중 고객이 끊음...");
							objTLine.THangUp();
							cf_Alert("COME0025");  //협의중 고객이 전화를 끊었습니다.																				
						}
					}
					
					afterCallWorkAgent();

					/*
						전화끊겼을경우 후처리한다. - 끝
					*/							
				
					
					break;
				case 3 :            // CallTypeOutbound
					
					trace("전화끊기 라인상태0:: " + objTLine.TStatus);
					trace("전화끊기 라인상태1:: " + objTLineQ.TStatus);
					trace("CALL_TRANSFER_YN :: " + CALL_TRANSFER_YN);
					
					/*
						전화끊겼을경우 후처리한다. - 시작
					*/
					if( objTLine.TStatus == UNKNOW ){
						if((CALL_TRANSFER_YN != "Y") && (objTLineQ.TStatus == ES || objTLineQ.TStatus == DIAL) ){							
							trace("협의중 고객이 끊음...");
							objTLineQ.THangUp();
							cf_Alert("COME0025");  //협의중 고객이 전화를 끊었습니다.																				
						}
					}
					if( objTLineQ.TStatus == UNKNOW ){
						if((CALL_TRANSFER_YN != "Y") && (objTLine.TStatus == ES || objTLine.TStatus == DIAL) ){							
							trace("협의중 고객이 끊음...");
							objTLine.THangUp();
							cf_Alert("COME0025");  //협의중 고객이 전화를 끊었습니다.																				
						}
					}					
					afterCallWorkAgent();					
					/*
						전화끊겼을경우 후처리한다. - 끝
					*/
					
					break;
					
					case 4 :            // CallTypeConsult
					
						trace("=======================CallTypeConsult=======================");
						trace("this.DTMF_NO_INIT :: " 		+ this.DTMF_NO_INIT);						
						trace("this.DTMF_YN :: " 			+ this.DTMF_YN)
						trace("this.CALL_TRANSFER_YN ::" 	+ this.CALL_TRANSFER_YN);
						trace("this.reconnect_yn ::" 		+ this.reconnect_yn);
						trace("전화끊기 라인상태0:: " 	+ objTLine.TStatus);
						trace("전화끊기 라인상태1:: " 	+ objTLineQ.TStatus);	
						trace("ev.EventInfo.ThisDNRole:: " 	+ ev.EventInfo.ThisDNRole);	
						
						if (this.DTMF_NO_INIT) {
							this.DTMF_NO_INIT = false;
							break;
						}
						
						if ((this.DTMF_YN != "Y") && this.CALL_TRANSFER_YN == "Y"){
							trace("전환된콜의 전화끊김이벤트 후처리로 보낸다");
							this.callClearTime 			= getDBToday();  //전화끊은시간							
							afterCallWorkAgent();
												
						//D1과 D2의 협의호가 맹글어 진후 D1이 회수한경우, 현재 나는 D2이다
						}else if(ev.EventInfo.ThisDNRole == 2){

							trace("협의후 해제 대기로 보낸다");
							agentReady();
						}
						
						if (this.reconnect_yn != "Y"){
							//1 : A상담사, 2: B상담사
							if (ev.EventInfo.ThisDNRole == 1){	
												
								if( objTLine.TStatus == UNKNOW ){
									if(objTLineQ.TStatus == HELD){							
										trace("B상담사가 끊었을경우 보류해제만 한다.");
										retrieve();
									}
								}
								if( objTLineQ.TStatus == UNKNOW ){
									if(objTLine.TStatus == HELD){							
										trace("B상담사가 끊었을경우 보류해제만 한다.");
										retrieve();
									}
								}						
							}else {						
								if( objTLine.TStatus == UNKNOW ){
									if(objTLineQ.TStatus == HELD){							
										trace("상담사가 끊고 고객이 보류가 있을경우 전화끊기한다.");
										this.callClearTime 			= getDBToday();  //전화끊은시간										
										retrieve();
										objTLineQ.THangUp();
									}
								}
								if( objTLineQ.TStatus == UNKNOW ){
									if(objTLine.TStatus == HELD){							
										trace("상담사가 끊고 고객이 보류가 있을경우 전화끊기한다.");
										this.callClearTime 			= getDBToday();  //전화끊은시간										
										retrieve();
										objTLine.THangUp();
									}
								}
							}
						}else{
							this.reconnect_yn = "N";
						}
					break;
					
				default :
					break;
			}
			
			// COM123전화걸기로 끊어진 경우  이벤트 발생하지 않음
			if(this.evntProcGbn != "objPHNTOP"){					
				var objParam = new Object();
				objParam.frmPgmId 	= "COM121_HANGUP";
				objPHNBNS.getPhnEvent(objParam);
				objPHNORD.getPhnEvent(objParam);
				objPHNLPS.getPhnEvent(objParam);
				objPHNCMP.getPhnEvent(objParam);		
			}
			
			// 구분값 null 처리
			trace("COM120 :: 이벤트구분초기화");			
			this.evntProcGbn = null;
			
			break;	
			
	    //전화온 이벤트 - EventRinging
		case 60:

			trace("전화옴...");
			trace("CALL TYPE :: " + ev.EventInfo.CallType);	

			/*
				user data부분
			*/

			var size = ev.EventInfo.USERDATA.GetCount();
			trace("전화왔을때 세팅값확인 ::" + size);
			
			var userData 		= "";
			var userDataKey 	= "";
			var service_name1 = "";
			var service_name2 = "";
			var service_name3 = "";
			var service_name4 = "";
			var service_name5 = "";
			var service_name6 = "";
			var service_name7 = "";
			var service_name8 = "";
			var service_name9 = "";
			var service_name10 = "";
			var service_name11 = "";
			var service_name12 = "";
			var service_name13 = "";
			var service_name14 = "";
			var service_name15 = "";
			var service_name16 = "";
			var service_name17 = "";
			var service_name18 = "";
			this.CUST_ID = "";
			this.IVR_HISTORY = "";
			this.ANI = "";
			this.CONNID = "";
			this.TODAY = "";
			this.EXT_NO = "";
			this.CTI_ID = "";
			this.key_gubun = "";
			this.TRAN_GRP_CDNM = "";
			this.TRAN_USR_NM = "";
			this.USR_NM = "";
			this.reconnect_yn = "N";
			this.cti_timestamp = "";
			this.outboundHP = "";
			g_dtmf_no = "";

			// 전화
			this.callMakeTime  			= getDBToday();  //전화건시간
			for(var i=0;i<size;i++){

				userData = ev.EventInfo.USERDATA;
				userDataKey = userData.Get(i).Key;

				//넘어온 주민번호
				if(userDataKey == "cust_id"){
					trace("cust_id :: " + userData.Get(i).StringValue);					
					this.CUST_ID = userData.Get(i).StringValue;
				}

				//선택한 서비스 번호  == 시작

				//서비스명1
				if(userDataKey == "service_name1"){
					trace("service_name1 :: " + userData.Get(i).StringValue);
					service_name1 = userData.Get(i).StringValue;
				}
				//서비스명2
				if(userDataKey == "service_name2"){
					trace("service_name2 :: " + userData.Get(i).StringValue);
					service_name2 = userData.Get(i).StringValue;
				}
				//서비스명3
				if(userDataKey == "service_name3"){
					trace("service_name3 :: " + userData.Get(i).StringValue);
					service_name3 = userData.Get(i).StringValue;
				}			
				//서비스명4
				if(userDataKey == "service_name4"){
					trace("service_name4 :: " + userData.Get(i).StringValue);
					service_name4 = userData.Get(i).StringValue;
				}
                //서비스명5
				if(userDataKey == "service_name5"){
					trace("service_name5 :: " + userData.Get(i).StringValue);
					service_name5 = userData.Get(i).StringValue;
				}
				//서비스명6
				if(userDataKey == "service_name6"){
					trace("service_name6 :: " + userData.Get(i).StringValue);
					service_name6 = userData.Get(i).StringValue;
				}
				//서비스명7
				if(userDataKey == "service_name7"){
					trace("service_name7 :: " + userData.Get(i).StringValue);
					service_name7 = userData.Get(i).StringValue;
				}
				//서비스명8
				if(userDataKey == "service_name8"){
					trace("service_name8 :: " + userData.Get(i).StringValue);
					service_name8 = userData.Get(i).StringValue;
				}
				//서비스명9
				if(userDataKey == "service_name9"){
					trace("service_name9 :: " + userData.Get(i).StringValue);
					service_name9 = userData.Get(i).StringValue;
				}
				//서비스명10
				if(userDataKey == "service_name10"){
					trace("service_name10 :: " + userData.Get(i).StringValue);
					service_name10 = userData.Get(i).StringValue;
				}
				//서비스명11
				if(userDataKey == "service_name11"){
					trace("service_name11 :: " + userData.Get(i).StringValue);
					service_name11 = userData.Get(i).StringValue;
				}
				//서비스명12
				if(userDataKey == "service_name12"){
					trace("service_name12 :: " + userData.Get(i).StringValue);
					service_name12 = userData.Get(i).StringValue;
				}
				//서비스명13
				if(userDataKey == "service_name13"){
					trace("service_name13 :: " + userData.Get(i).StringValue);
					service_name13 = userData.Get(i).StringValue;
				}
				//서비스명14
				if(userDataKey == "service_name14"){
					trace("service_name14 :: " + userData.Get(i).StringValue);
					service_name14 = userData.Get(i).StringValue;
				}
				//서비스명15
				if(userDataKey == "service_name15"){
					trace("service_name15 :: " + userData.Get(i).StringValue);
					service_name15 = userData.Get(i).StringValue;
				}
				//서비스명16
				if(userDataKey == "service_name16"){
					trace("service_name16 :: " + userData.Get(i).StringValue);
					service_name16 = userData.Get(i).StringValue;
				}
				//서비스명17
				if(userDataKey == "service_name17"){
					trace("service_name17 :: " + userData.Get(i).StringValue);
					service_name17 = userData.Get(i).StringValue;
				}
				//서비스명18
				if(userDataKey == "service_name18"){
					trace("service_name18 :: " + userData.Get(i).StringValue);
					service_name18 = userData.Get(i).StringValue;
				}				
				
				//인입된 DNS전화번호
				if(userDataKey == "key_gubun"){
					trace("key_gubun :: " + userData.Get(i).StringValue);
					this.key_gubun = userData.Get(i).StringValue;					
				}

				//인입된전화번호
				if(userDataKey == "ANI"){
					trace("ANI :: " + userData.Get(i).StringValue);
					this.ANI = userData.Get(i).StringValue;					
				}	
											
				//호전환 그룹명
				if(userDataKey == "TRAN_GRP_CDNM"){
					trace("TRAN_GRP_CDNM :: " + userData.Get(i).StringValue);
					this.TRAN_GRP_CDNM = userData.Get(i).StringValue;					
				}
								
				//호전환 그룹명
				if(userDataKey == "TRAN_USR_NM"){
					trace("TRAN_USR_NM :: " + userData.Get(i).StringValue);
					this.TRAN_USR_NM = userData.Get(i).StringValue;					
				}									
				
				//사용자명
				if(userDataKey == "USR_NM"){
					trace("USR_NM :: " + userData.Get(i).StringValue);
					this.USR_NM = userData.Get(i).StringValue;					
				}
									
				//고객대기시간
				if(userDataKey == "cti_timestamp"){
					trace("cti_timestamp :: " + userData.Get(i).StringValue);
					trace("ev.EventInfo.TTimeStamp.Secondsg b :: " + ev.EventInfo.TTimeStamp.Seconds);					
					this.cti_timestamp = userData.Get(i).StringValue;
					this.cti_timestamp = fun_ready_time(this.cti_timestamp , ev.EventInfo.TTimeStamp.Seconds );					
				}
				
				//주민번호
				if(userDataKey == "jumin_no"){
					g_dtmf_no = userData.Get(i).StringValue;					
				}				
													
									
			}
			
			var ivr_arr = new Array();
			for (var j=0; j < 18 ; j ++){					
				var key = eval("service_name" + (j + 1) );				
				if (key != ""){
					ivr_arr.push(key);
				}			
			}
			this.IVR_HISTORY = ivr_arr.join("=>");								
			//선택한 서비스 번호  == 끝			
			
			btn_ivr_histroy();  //전화번호가 인입됬을때 IVR 히스토리를 등록한다.
			
			if (!getTrim(this.GRP_CDNM)){				
				trace("전화온 ANI :: " + ev.EventInfo.ANI);
				var p_ani = getTrim(ev.EventInfo.ANI);			
				if(p_ani){
					var str = p_ani.substr(0,1);
					if (str != "0") p_ani = "0" + p_ani;
					trace("넘어온 전화번호 :: " + p_ani);
					this.ANI = p_ani;			
				}
			}
			
			/*
				녹취서버 => user data setting - start
			*/
			trace("녹취서버 userData 세팅");
			this.CONNID = ev.EventInfo.CONNID.GetConnIDAsStr;						
//			this.TODAY 	= GetUserInfo("gTODAY");
			this.TODAY 	= this.CUST_ID;
			this.EXT_NO = GetUserInfo("gEXT_NO");															
			this.CTI_ID = GetUserInfo("gCTI_ID");
			
			var tkvListData = objTComX.createObject("TCommObj.CTKVList");
			var tkvPairData = objTComX.createObject("TCommObj.CTKVPair");	
			tkvListData.Clear();
			tkvPairData.Key = "CONNID";
			tkvPairData.Type = 0;
			tkvPairData.StringValue = this.CONNID;					
			tkvListData.AddTail(tkvPairData); 
			tkvPairData.Key = "TODAY";
			tkvPairData.Type = 0;
			tkvPairData.StringValue = this.TODAY;					
			tkvListData.AddTail(tkvPairData); 
			tkvPairData.Key = "EXT_NO";
			tkvPairData.Type = 0;
			tkvPairData.StringValue = this.EXT_NO;					
			tkvListData.AddTail(tkvPairData); 					
			tkvPairData.Key = "USR_NM";
			tkvPairData.Type = 0;
			tkvPairData.StringValue = GetUserInfo("gUSR_NM");					
			tkvListData.AddTail(tkvPairData); 		
			tkvPairData.Key = "CTI_ID";
			tkvPairData.Type = 0;
			tkvPairData.StringValue = this.CTI_ID;					
			tkvListData.AddTail(tkvPairData); 	
			tkvPairData.Key = "ANI";
			tkvPairData.Type = 0;
			tkvPairData.StringValue = this.ANI;					
			tkvListData.AddTail(tkvPairData);
		
			trace("상태확인1 :: " + objTLine.TStatus);
			trace("상태확인2 :: " + objTLineQ.TStatus);
			
			if(objTLine.TStatus == RING){
				objTLine.TAttachData(tkvListData, false);				
			}else if(objTLineQ.TStatus == RING){
				objTLineQ.TAttachData(tkvListData, false);	
			}	

			trace("녹취서버 userData 세팅 끝");
			/*
				녹취서버 끝 => user data setting - start
			*/
			
			setScreenLayout(12);
			blnOutbound = false;
			// 구분값 null 처리
			trace("COM120 :: 이벤트구분초기화");
			this.evntProcGbn = null;
			
			//전화받기 화면팝업
			trace("전화받기 객체확인> " + COM121);			
			PopupDialog("COM121", "COM::COM121.xfdl", 1024, 768, 1024, 768 , false, 'absolute', null , true);
			break;			
			
		case 61:
		
			//녹취장비에서 전화걸때 달라고함.
			trace("전화걸고 있는 중...");	
			trace("녹취아이디 :: " + ev.EventInfo.CONNID.GetConnIDAsStr);
			trace("녹취채널 :: " + ev.EventInfo.CallID);			
			trace("CALL TYPE :: " + ev.EventInfo.CallType);			
			
			if(this.DTMF_YN != "Y"){
				if(ev.EventInfo.CallType != 4){
					this.callMakeTime  			= getDBToday();  //전화건시간		
					this.callRecvTime  			= "";  //전화받은시간
					this.callClearTime 			= "";  //전화끊은시간
				}
			}
			
			switch (ev.EventInfo.CallType){
				case 0 :            // CallTypeUnknown
				case 1 :            // CallTypeInternal
				case 2 :            // CallTypeInbound 
				case 3 :            // CallTypeOutbound
				
					trace("상태확인1 :: " + objTLine.TStatus);
					trace("상태확인2 :: " + objTLineQ.TStatus);

					/*
						녹취서버 => user data setting - start
					*/
					trace("녹취서버 userData 세팅");
					this.CONNID = ev.EventInfo.CONNID.GetConnIDAsStr;
//					this.TODAY 	= GetUserInfo("gTODAY");
					this.TODAY 	= this.CUST_ID;					
					this.EXT_NO = GetUserInfo("gEXT_NO");															
					this.CTI_ID = GetUserInfo("gCTI_ID");
					var tkvListData = objTComX.createObject("TCommObj.CTKVList");
					var tkvPairData = objTComX.createObject("TCommObj.CTKVPair");	
					tkvListData.Clear();
					tkvPairData.Key = "CONNID";
					tkvPairData.Type = 0;
					tkvPairData.StringValue = this.CONNID;					
					tkvListData.AddTail(tkvPairData); 
					tkvPairData.Key = "TODAY";
					tkvPairData.Type = 0;
					tkvPairData.StringValue = this.TODAY;					
					tkvListData.AddTail(tkvPairData); 
					tkvPairData.Key = "EXT_NO";
					tkvPairData.Type = 0;
					tkvPairData.StringValue = this.EXT_NO;					
					tkvListData.AddTail(tkvPairData); 					
					tkvPairData.Key = "USR_NM";
					tkvPairData.Type = 0;
					tkvPairData.StringValue = GetUserInfo("gUSR_NM");					
					tkvListData.AddTail(tkvPairData); 		
					tkvPairData.Key = "CTI_ID";
					tkvPairData.Type = 0;
					tkvPairData.StringValue = this.CTI_ID;					
					tkvListData.AddTail(tkvPairData);
					tkvPairData.Key = "GRP_CDNM";
					tkvPairData.Type = 0;
					tkvPairData.StringValue = GetUserInfo("gGRP_CDNM");					
					tkvListData.AddTail(tkvPairData); 
					objTLine.TAttachData(tkvListData, false);
					
					if(objTLine.TStatus == RING){
						objTLine.TAttachData(tkvListData, false);				
					}else if(objTLineQ.TStatus == RING){
						objTLineQ.TAttachData(tkvListData, false);	
					}						
					trace("녹취서버 userData 세팅 끝");
					/*
						녹취서버 끝 => user data setting - start
					*/

					setScreenLayout(12);
					
					trace("상담이력저장 펑션호출");
					//CallTypeOutbound - 확인필요
					if(ev.EventInfo.CallType == 3){
						//ob시 전화걸때 전화번호를 던져준다.
						trace("ob시 전화걸때 전화번호를 던져준다.");
						trace("this.DTMF_YN :: " + this.DTMF_YN);
						trace("ev.EventInfo.ANI :: " + ev.EventInfo.ANI);
						
						if(!getTrim(ev.EventInfo.ANI) && (this.DTMF_YN != "Y") ){
							//전화번호				
							trace("넘어온 전화번호 :: " + ev.EventInfo.OtherDN);
							this.outboundHP = ev.EventInfo.OtherDN;
							var objParam = new Object();
							objParam.frmPgmId 	= "COM121_CALLNO";
							objParam.callNo 	= ev.EventInfo.OtherDN;
							
							// 이벤트구분에 따라 호출(objPHNBNS, objPHNORD, objPHNCMP, objPHNLPS)
							trace("이벤트구분(COM121_CALLNO) :: " + this.evntProcGbn);							
							switch(this.evntProcGbn)
							{							
								case "objPHNBNS" : 
									objPHNBNS.getPhnEvent(objParam);
									blnOutbound = true;
									break;
								case "objPHNORD" :
									objPHNORD.getPhnEvent(objParam);
									blnOutbound = true;
									break;
								case "objPHNCMP" :															
									objPHNCMP.getPhnEvent(objParam);
									blnOutbound = true;
									break;
								case "objPHNLPS" :
									objPHNLPS.getPhnEvent(objParam);
									blnOutbound = true;
									break;									
								default :
									blnOutbound = true;								
									break;
							}
						}					
					}
				
					break;
					
				case 4 :            // CallTypeConsult

					setScreenLayout(14);	//협의중	
					break;			
			}
			
			break;
			
	    //보류중 - EventHeld
		case 66:
			trace("보류중...");
			setScreenLayout(5);				
			break;

	    //보류해제 - EventRetrieved
		case 67:
			trace("보류해제...");
			setScreenLayout(6);	
			break;
					
		case 75 :
			geTStatusText("대기");
			setScreenLayout(1);
			break;	
		case 76 :

			trace("휴식 WorkMode :: " + ev.EventInfo.WorkMode);
			
			var reason = ev.EventInfo.WorkMode;

			//후처리
			if(reason == 3){

				objTExtn.TAgentWorkMode = 3;				
				trace("후처리상태... :: " + ev.EventInfo.WorkMode);
				setScreenLayout(13);					
				//통화종료시간저장
											
			}else{
					
				trace("사유코드 사이즈:: " + 	ev.EventInfo.Reasons.GetCount());					
				trace("사유코드 Type:: " + 	ev.EventInfo.Reasons.Get(0).Type);
				trace("사유코드 key:: " + 		ev.EventInfo.Reasons.Get(0).Key);
				trace("사유코드 Type:: " + 	ev.EventInfo.Reasons.Get(0).StringValue);
				
				var val = ev.EventInfo.Reasons.Get(0).StringValue;
				
				/*
					BREAK   : 100 : 휴식
					LUNCH   : 200 : 식사
					EDU     : 300 : 교육
					COACH   : 400 : 코칭
					WORK    : 500 : 불만
					MAIL    : 600 : 메일				
				*/
				switch(val){
					case "100" :
						setScreenLayout(4);					
						break;
					case "200" :
						setScreenLayout(9);
						break;
					case "300" :
						setScreenLayout(8);
						break;
					case "400" :
						setScreenLayout(10);
						break;
					case "500" :
						setScreenLayout(2);
						break;
					case "600" :
						setScreenLayout(3);
						break;					
					default :					
						break;
				}
				// Call관련 초기화
				setPhoneInit();
				
				// 후처리외의 상태변경시				
				trace("COM120 이벤트발생  :: " + "COM121_CHANGE");				
				var objParam = new Object();
				objParam.frmPgmId 	= "COM121_CHANGE";
				objPHNBNS.getPhnEvent(objParam);
				objPHNORD.getPhnEvent(objParam);
				objPHNLPS.getPhnEvent(objParam);
				objPHNCMP.getPhnEvent(objParam);									
			}
			
			break;
			
        //상담원 로그인 이벤트 - Event AgentLogin
		case 73:
			
			trace("로그인...휴식상태로변경");
			agentNotReady("BREAK",100);	
			//setScreenLayout(13);	

		break;
					
        //상담원 로그아웃 이벤트 - EventAgentLogout
        case 74:
			trace("logout...");			
			setScreenLayout(99);
			ctiUnregister();
			ctiDisconnect();
			//btn_cti.visible = true;
			//btn_cti.enable = true;			
		//EventUnregistered
		case 54:
			trace("g_LogOffYn ::" + getTopFrame().g_LogOffYn);
			if(getTopFrame().g_LogOffYn == "Y") {				
				getTopFrame().setLogOff("U1");
			}			
		break;

		//Consult통화를 받아서 1번호가 나에게 전환되었음 - EventPartyChanged
		case 68:
			trace("호전환후 전환되었을때 상담이력생성한다.");
			var objParam = new Object();
			objParam.frmPgmId 	= "COM121_PICK";
			objPHNBNS.getPhnEvent(objParam);
			objPHNORD.getPhnEvent(objParam);
//			objPHNLPS.getPhnEvent(objParam);
//			objPHNCMP.getPhnEvent(objParam);						
		break;
		
		//EventPartyAdded
		case 69:	
		
			trace("EventPartyAdded.... :: ");
			trace("전화받기 라인상태 0 :: " + objTLine.TStatus);	
			trace("전화받기 라인상태 1 :: " + objTLineQ.TStatus);	
					
			this.CONNID = ev.EventInfo.CONNID.GetConnIDAsStr;
			this.EXT_NO = GetUserInfo("gEXT_NO");	
					
			trace("this.EXT_NO... :: " + this.EXT_NO);
			trace("this.CONNID... :: " + this.CONNID);					
			
			if(objTLine.TStatus == ES){
				trace("objTLine connect");					
				//objTLine.TListenDisconnect(this.EXT_NO,this.EXT_NO, this.CONNID, "", "");
				objTLine.THold();	
			}
			
			if(objTLineQ.TStatus == ES){
				trace("objTLineQ connect");					
				//objTLineQ.TListenDisconnect(this.EXT_NO,this.EXT_NO, this.CONNID, "", "");
				objTLineQ.THold();
			}

			//objTLine.TListenDisconnect(this.EXT_NO,this.EXT_NO, this.CONNID, "", "");
			//objTLineQ.TListenDisconnect(this.EXT_NO,this.EXT_NO, this.CONNID, "", "");
			
		break;
        
        //EventPartyDeleted
		case 70:
		
			trace("EventPartyDeleted :: "); 
			trace("전화받기 라인상태 0 :: " + objTLine.TStatus);	
			trace("전화받기 라인상태 1 :: " + objTLineQ.TStatus);		
				
			trace("EventPartyDeleted... DTMF_YN :: "+ this.DTMF_YN); 
			trace("EventPartyDeleted... EXT_NO :: "+ this.EXT_NO); 
			trace("EventPartyDeleted... CONNID  :: "+ this.CONNID); 
			
			if (this.DTMF_YN == "Y"){
				
				this.CONNID = ev.EventInfo.CONNID.GetConnIDAsStr;
				this.EXT_NO = GetUserInfo("gEXT_NO");	
				
				trace("ev.EventInfo.OtherDN... :: " + ev.EventInfo.OtherDN);
				trace("ev.EventInfo.OtherDN length... :: " + (ev.EventInfo.OtherDN).length);
				
				var OtherDN_Len = (ev.EventInfo.OtherDN).length;
				
				
						
				trace("this.EXT_NO... :: " + this.EXT_NO);
				trace("this.CONNID... :: " + this.CONNID);			
					
				if(objTLine.TStatus == HELD){
					trace("objTLine connect");			
					objTLine.TRetrieve();
					//objTLine.TListenReconnect(this.EXT_NO,this.EXT_NO, this.CONNID, "", "");
					if(application.all("COM290")){
						application.all("COM290").form.close();
					}					
				}
				
				if(objTLineQ.TStatus == HELD){
					trace("objTLineQ connect");					
					objTLineQ.TRetrieve();
					//objTLineQ.TListenReconnect(this.EXT_NO,this.EXT_NO, this.CONNID, "", "");
					if(application.all("COM290")){
						application.all("COM290").form.close();
					}					
				}	
							
				if (OtherDN_Len < 7){
					setScreenLayout(12);
				}else{
					releaseCall();
				}
				
				//DTMF완료후 데이터세팅부분 - 시작
				/*
				var size = ev.EventInfo.USERDATA.GetCount();
				//trace("DTMF완료후 응답사이즈... :: " + size);	
				var userData 		= "";
				var userDataKey 	= "";

				for(var i=0;i<size;i++){

					userData = ev.EventInfo.USERDATA;
					userDataKey = userData.Get(i).Key;

					//넘어온 주민번호
					if(userDataKey == "cust_id"){
						trace("cust_id ::" + userData.Get(i).StringValue);					
						this.CUST_ID = userData.Get(i).StringValue;
					}

					//새주민번호
					if(userDataKey == "new_jumin_no"){
						trace("new_jumin_no ::" + userData.Get(i).StringValue);
						this.new_jumin_no = userData.Get(i).StringValue;					
					}
					
					//서비스약관 동의여부
					if(userDataKey == "yak_yn"){
						trace("yak_yn ::" + userData.Get(i).StringValue);
						this.yak_yn = userData.Get(i).StringValue;					
					}
					
					//제3자동의여부
					if(userDataKey == "info_yn"){
						trace("info_yn ::" +  userData.Get(i).StringValue);
						this.info_yn = userData.Get(i).StringValue;					
					}						
				}
				*/
				//DTMF완료후 데이터세팅부분 - 끝
				
			}	
			
			return;
		break;
		
		default :		
			break;
	}	
}


function onExtnQEvent(obj, ev){

	trace("onExtnQEvent=>" +ev.EventInfo.Event);	
	var e_code = ev.EventInfo.Event;
	
	switch(e_code){
		case 92 :
			trace("EventAddressInfo");
			trace("InfoType :: " + ev.EventInfo.InfoType);
			trace("InfoStatus :: " + ev.EventInfo.InfoStatus);	
			var agentStatus = 0;
			var status      = 0;
			
			if(ev.EventInfo.InfoType == 17){

				var size = ev.EventInfo.Extensions.GetCount();
				var extnData 		= "";
				var extnDataKey 	= "";

				trace("Extensions size :: " + size);

				for(var i=0;i<size;i++){

					extnData = ev.EventInfo.Extensions;
					extnDataKey = extnData.Get(i).Key;

					trace("EXTENSIONS :: " + extnDataKey + "["+extnData.Get(i).NumValue+"]");

					if(extnDataKey == "AgentStatus"){					
						agentStatus = extnData.Get(i).NumValue;
					}else if(extnDataKey == "status"){						
						status = extnData.Get(i).NumValue;
					}
				}
	
				
				var statusYn = "";
				var realStatusYn = "";
				if(status == 1){
					trace("통화상태");
					statusYn = "N";
					realStatusYn = "Y";
				}else{
					switch(agentStatus){
						case 2:
							statusYn =  "Y";
							break;
						default:
							statusYn =  "N";
						break;
					}
					realStatusYn = "N";
				}						
							
				//상담원상태세팅해야한다.
				if(this.COM122){
					this.COM122.getAgentSatusYn(statusYn);
				}
				
				if(this.CST111){
					this.CST111.getAgentSatusYn(realStatusYn);
				}
			}			
			break; 
		default :
			break;
	}	
}

function ctiConnct(){
	var CTI_IP 			= GetConfig("CTI_1");
	var CTI_PORT 		= GetConfig("CTI_2");
	var CTI2_IP 		= GetConfig("CTI_5");
	var CTI2_PORT 		= GetConfig("CTI_6");
	
	var CTI_QUEUE 		= GetConfig("CTI_3");
	var READY_ALERT_SEC = GetConfig("CTI_4");	
	var tDn				= GetUserInfo("gEXT_NO");	//내선번호
	var agentid 		= GetUserInfo("gCTI_ID");	//아이디
	
	var result = objTExtn.TLogout();
	trace("로그오프성공여부 :: "+ result);
	
	objTConn.TAppName 			= "Smile2";			
	objTConn.THost 				= CTI_IP;
	objTConn.TPort 				= CTI_PORT;	
	objTExtn.TDN 				= tDn;
	objTExtn.TAgentID 			= agentid;
	objTExtn.ConnectionName 	= "objTConn";
	objTExtnQ.ConnectionName 	= "objTConn";	
	objTLine.ExtensionName		= "objTExtn";	
	objTLineQ.ExtensionName		= "objTExtn";	
	objTExtn.TQueue 			= "";
	
	var result = objTConn.TConnect();
	trace("result 1 ::" + result);
	
	if (result == 0){
		setScreenLayout(99);
		
		trace("############CTI2_IP 2번장비시도############");
		trace("CTI2_IP  ::" + CTI2_IP);
		trace("CTI2_PORT  ::" + CTI2_PORT);		

		objTConn.TAppName 			= "Smile2";			
		objTConn.THost 				= CTI2_IP;
		objTConn.TPort 				= CTI2_PORT;	
		objTExtn.TDN 				= tDn;
		objTExtn.TAgentID 			= agentid;
		objTExtn.ConnectionName 	= "objTConn";
		objTExtnQ.ConnectionName 	= "objTConn";	
		objTLine.ExtensionName		= "objTExtn";	
		objTLineQ.ExtensionName		= "objTExtn";	
		objTExtn.TQueue 			= "";
				
		result = objTConn.TConnect();		
		trace("result 2 ::" + result);
		
		if (result == 0){
			setScreenLayout(99);
		}
	}else{		
		setScreenLayout(98);
	}
	
	return result;	
}

function ctiDisconnect(){
	objTConn.TDisconnect();
}

function ctiRegister(){

	var result = objTExtn.TRegister();
	
	trace("#####CTI 레지스터 result ::" + result);
	geTStatusText("CTI 레지스터 등록");
}

function ctiUnregister(){
	objTExtn.TUnregister();	
}


function geTStatusText(str){
	getTopFrame().Edt_Cti_Status.value = str;
}

function logon(){
	objTExtn.TAgentWorkMode = 4;  //AuxWork
	objTExtn.TLogin();
	//geTStatusText("CTI 로그인");
}


function logout(){
	
	trace("APP에서 로그아웃버튼 클릭시 상태==>" + this.callStatus);
	
	if (this.callStatus == "LOGOFF"){
		if(getTopFrame().g_LogOffYn == "Y") {
			getTopFrame().setLogOff("U1");
		}		
	}else{
		try{
			trace("objTExtn.TLogout() 한다.");
			trace("objTExtn.TStatusLogin :: " + objTExtn.TStatusLogin);	
			if (objTExtn.TStatusLogin == "tslgLogout"){
				getTopFrame().setLogOff("U1");
			}else{
				objTExtn.TLogout();
			}
		}catch(e){
			trace("objTExtn TLogout error" + e);
			getTopFrame().setLogOff("U1");
		}		
	}
		
	/*
	trace("cti logoff를 한다.");

	//cti로그인버튼이 없을경우는 cti로그인 안되있는상태이다.
	if(btn_cti.enable){
		if(getTopFrame().g_LogOffYn == "Y") {
			getTopFrame().setLogOff("U1");
		}
	}else{
		try{
			trace("objTExtn.TLogout() 한다.");
			trace("objTExtn.TStatusLogin :: " + objTExtn.TStatusLogin);	
			if (objTExtn.TStatusLogin == "tslgLogout"){
				getTopFrame().setLogOff("U1");
			}else{
				objTExtn.TLogout();
			}
		}catch(e){
			trace("objTExtn TLogout error" + e);
			getTopFrame().setLogOff("U1");
		}
	}
	*/
}

function setScreenLayout (code){

	trace("setScreenLayout code=>" + code)
	switch (code) {
		
		//1 대기중
		case 1:
			trace("setScreenLayout 대기중");
			geTStatusText("대기");			
			btn_ready.enable 		= false;        //대기    
			btn_complaint.enable 	= true;         //불만
			btn_email.enable 		= true;         //메일    
			btn_notReady.enable 	= true;         //휴식    
			btn_hold.enable 		= false;        //보류    
			btn_retrieve.enable 	= false;        //보류해제      
			btn_transfer.enable 	= false;        //호전환  
			btn_edu.enable 			= true;         //교육    
			btn_lunch.enable 		= true;         //식사    
			btn_coach.enable 		= true;         //코칭
			btn_clearCall.enable 	= false;        //끊기			
			btn_awc.enable 			= true;         //후처리
			btn_cti.enable 			= true;         //CTI로그인버튼
			btn_makeCall.enable 	= true;        //걸기
			this.callStatus = "READY";
			
			setUserStat(code);
			
			break;
			
		//2 불만
		case 2:			
			trace("setScreenLayout 불만");
			geTStatusText("불만");
			btn_ready.enable 		= true;         //대기    
			btn_complaint.enable 	= false;        //불만
			btn_email.enable 		= true;         //메일    
			btn_notReady.enable 	= true;         //휴식    
			btn_hold.enable 		= false;        //보류    
			btn_retrieve.enable 	= false;        //보류해제      
			btn_transfer.enable 	= false;        //호전환  
			btn_edu.enable 			= true;         //교육    
			btn_lunch.enable 		= true;         //식사    
			btn_coach.enable 		= true;         //코칭
			btn_clearCall.enable 	= false;        //끊기
			btn_awc.enable 			= true;         //후처리
			btn_cti.enable 			= true;         //CTI로그인버튼
			btn_makeCall.enable 	= true;        //걸기
			this.callStatus = "COMPLAINT";
			
			setUserStat(code);
			
			break;
		//3 메일
		case 3:			
			trace("setScreenLayout 메일");
			geTStatusText("메일");
			btn_ready.enable 		= true;         //대기    
			btn_complaint.enable 	= true;         //불만
			btn_email.enable 		= false;        //메일    
			btn_notReady.enable 	= true;         //휴식    
			btn_hold.enable 		= false;        //보류    
			btn_retrieve.enable 	= false;        //보류해제      
			btn_transfer.enable 	= false;        //호전환  
			btn_edu.enable 			= true;         //교육    
			btn_lunch.enable 		= true;         //식사    
			btn_coach.enable 		= true;         //코칭
			btn_clearCall.enable 	= false;        //끊기
			btn_awc.enable 			= true;         //후처리
			btn_cti.enable 			= true;         //CTI로그인버튼
			btn_makeCall.enable 	= true;        //걸기
			this.callStatus = "MAIL";
			
			setUserStat(code);
			
			break;
		//4 휴식
		case 4:			
			trace("setScreenLayout 휴식");
			geTStatusText("휴식");
			btn_ready.enable 		= true;         //대기    
			btn_complaint.enable 	= true;         //불만
			btn_email.enable 		= true;         //메일    
			btn_notReady.enable 	= false;        //휴식    
			btn_hold.enable 		= false;        //보류    
			btn_retrieve.enable 	= false;        //보류해제      
			btn_transfer.enable 	= false;        //호전환  
			btn_edu.enable 			= true;         //교육    
			btn_lunch.enable 		= true;         //식사    
			btn_coach.enable 		= true;         //코칭
			btn_clearCall.enable 	= false;        //끊기
			btn_awc.enable 			= true;         //후처리
			btn_cti.enable 			= true;         //CTI로그인버튼
			btn_makeCall.enable 	= true;        //걸기
			this.callStatus = "BREAK";
			
			setUserStat(code);
			
			break;
		//5 보류
		case 5:			
			trace("setScreenLayout 보류");
			geTStatusText("보류");
			btn_ready.enable 		= false;         //대기    
			btn_complaint.enable 	= false;         //불만
			btn_email.enable 		= false;         //메일    
			btn_notReady.enable 	= false;        //휴식    
			btn_hold.enable 		= false;        //보류    
			btn_retrieve.enable 	= true;         //보류해제      
			btn_transfer.enable 	= false;        //호전환  
			btn_edu.enable 			= false;        //교육    
			btn_lunch.enable 		= false;        //식사    
			btn_coach.enable 		= false;        //코칭
			btn_clearCall.enable 	= false;        //끊기
			btn_awc.enable 			= false;         //후처리
			btn_cti.enable   		= false;        //CTI로그인버튼
			btn_makeCall.enable 	= false;        //걸기
			break;	
		//6 보류해제
		case 6:			
			trace("setScreenLayout 보류해제");
			geTStatusText("상담중");
			btn_ready.enable 		= false;        //대기    
			btn_complaint.enable 	= false;        //불만
			btn_email.enable 		= false;        //메일    
			btn_notReady.enable 	= false;        //휴식    
			btn_hold.enable 		= true;         //보류    
			btn_retrieve.enable 	= false;        //보류해제      
			btn_transfer.enable 	= true;         //호전환  
			btn_edu.enable 			= false;        //교육    
			btn_lunch.enable 		= false;        //식사    
			btn_coach.enable 		= false;        //코칭
			btn_clearCall.enable 	= true;         //끊기
			btn_awc.enable 			= false;         //후처리
			btn_cti.enable   		= false;        //CTI로그인버튼		
			btn_makeCall.enable 	= false;        //걸기
			break;
		//7 호전환
		case 7:			
			trace("setScreenLayout 호전환");
			break;
		//8 교육
		case 8:			
			trace("setScreenLayout 교육");
			geTStatusText("교육");
			btn_ready.enable 		= true;         //대기    
			btn_complaint.enable 	= true;         //불만
			btn_email.enable 		= true;         //메일    
			btn_notReady.enable 	= true;         //휴식    
			btn_hold.enable 		= false;        //보류    
			btn_retrieve.enable 	= false;        //보류해제      
			btn_transfer.enable 	= false;        //호전환  
			btn_edu.enable 			= false;        //교육    
			btn_lunch.enable 		= true;         //식사    
			btn_coach.enable 		= true;         //코칭
			btn_clearCall.enable 	= false;        //끊기
			btn_awc.enable 			= true;         //후처리
			btn_cti.enable 			= true;         //CTI로그인버튼
			btn_makeCall.enable 	= true;        //걸기
			this.callStatus = "EDU";
			
			setUserStat(code);
			
			break;
		//9 식사
		case 9:			
			trace("setScreenLayout 식사");
			geTStatusText("식사");
			btn_ready.enable 		= true;         //대기    
			btn_complaint.enable 	= true;         //불만
			btn_email.enable 		= true;         //메일    
			btn_notReady.enable 	= true;         //휴식    
			btn_hold.enable 		= false;        //보류    
			btn_retrieve.enable 	= false;        //보류해제      
			btn_transfer.enable 	= false;        //호전환  
			btn_edu.enable 			= true;         //교육    
			btn_lunch.enable 		= false;        //식사    
			btn_coach.enable 		= true;         //코칭
			btn_clearCall.enable 	= false;        //끊기
			btn_awc.enable 			= true;         //후처리			
			btn_cti.enable 			= true;         //CTI로그인버튼
			btn_makeCall.enable 	= true;        //걸기
			this.callStatus = "LUNCH";
			
			setUserStat(code);
			
			break;	
		//10 코칭
		case 10:			
			trace("setScreenLayout 코칭");
			geTStatusText("코칭");
			btn_ready.enable 		= true;         //대기    
			btn_complaint.enable 	= true;         //불만
			btn_email.enable 		= true;         //메일    
			btn_notReady.enable 	= true;         //휴식    
			btn_hold.enable 		= false;        //보류    
			btn_retrieve.enable 	= false;        //보류해제      
			btn_transfer.enable 	= false;        //호전환  
			btn_edu.enable 			= true;         //교육    
			btn_lunch.enable 		= true;         //식사    
			btn_coach.enable 		= false;        //코칭
			btn_clearCall.enable 	= false;        //끊기
			btn_awc.enable 			= true;         //후처리			
			btn_cti.enable 			= true;         //CTI로그인버튼
			btn_makeCall.enable 	= true;        //걸기
			this.callStatus = "COACH";
			
			setUserStat(code);
			
			break;
		//11 끊기
		case 11:			
			trace("setScreenLayout 끊기");
			geTStatusText("끊기");
			btn_ready.enable 		= true;         //대기    
			btn_complaint.enable 	= true;         //불만
			btn_email.enable 		= true;         //메일    
			btn_notReady.enable 	= true;         //휴식    
			btn_hold.enable 		= false;        //보류    
			btn_retrieve.enable 	= false;        //보류해제      
			btn_transfer.enable 	= false;        //호전환  
			btn_edu.enable 			= true;         //교육    
			btn_lunch.enable 		= true;         //식사    
			btn_coach.enable 		= true;         //코칭
			btn_clearCall.enable 	= false;        //끊기
			btn_awc.enable 			= true;         //후처리			
			btn_cti.enable 			= true;         //CTI로그인버튼
			btn_makeCall.enable 	= true;        //걸기
			break;
			
		//12 상담중
		case 12:			
			trace("setScreenLayout 상담중");
			geTStatusText("상담중");
			btn_ready.enable 		= false;         //대기    
			btn_complaint.enable 	= false;         //불만
			btn_email.enable 		= false;         //메일    
			btn_notReady.enable 	= false;         //휴식    
			btn_hold.enable 		= true;          //보류    
			btn_retrieve.enable 	= false;         //보류해제      
			btn_transfer.enable 	= true;          //호전환  
			btn_edu.enable 			= false;         //교육    
			btn_lunch.enable 		= false;         //식사    
			btn_coach.enable 		= false;         //코칭
			btn_clearCall.enable 	= true;          //끊기
			btn_awc.enable 			= false;         //후처리
			btn_cti.enable   		= false;        //CTI로그인버튼
			btn_makeCall.enable 	= false;        //걸기
			
			setUserStat(code);
			
			break;
			
		//13 후처리중
		case 13:			
			trace("setScreenLayout 후처리중");
			geTStatusText("후처리중");
			btn_ready.enable 		= true;         //대기    
			btn_complaint.enable 	= true;         //불만
			btn_email.enable 		= true;         //메일    
			btn_notReady.enable 	= true;         //휴식    
			btn_hold.enable 		= false;        //보류    
			btn_retrieve.enable 	= false;        //보류해제      
			btn_transfer.enable 	= false;        //호전환  
			btn_edu.enable 			= true;         //교육    
			btn_lunch.enable 		= true;         //식사    
			btn_coach.enable 		= true;         //코칭
			btn_clearCall.enable 	= false;        //끊기
			btn_awc.enable 			= false;        //후처리
			btn_cti.enable 			= true;         //CTI로그인버튼
			btn_makeCall.enable 	= true;        //걸기
			this.callStatus = "AWC";
			
			setUserStat(code);
			
			break;	
									
		//14 협의중
		case 14:			
			trace("setScreenLayout 협의중");
			geTStatusText("협의중");
			btn_ready.enable 		= false;         //대기    
			btn_complaint.enable 	= false;         //불만
			btn_email.enable 		= false;         //메일    
			btn_notReady.enable 	= false;         //휴식    
			btn_hold.enable 		= false;        //보류    
			btn_retrieve.enable 	= false;        //보류해제      
			btn_transfer.enable 	= false;        //호전환  
			btn_edu.enable 			= false;         //교육    
			btn_lunch.enable 		= false;         //식사    
			btn_coach.enable 		= false;         //코칭
			btn_clearCall.enable 	= false;        //끊기
			btn_awc.enable 			= false;         //후처리
			btn_cti.enable   		= false;        //CTI로그인버튼
			btn_makeCall.enable 	= false;        //걸기
			break;	
			
		//99 로그인
		case 98:	
			geTStatusText("로그인");
			this.callStatus = "LOGIN";
			break;
		//99 로그아웃
		case 99:			
			trace("setScreenLayout 로그아웃");
			geTStatusText("로그아웃");
			btn_ready.enable 		= false;         //대기    
			btn_complaint.enable 	= false;         //불만
			btn_email.enable 		= false;         //메일    
			btn_notReady.enable 	= false;         //휴식    
			btn_hold.enable 		= false;        //보류    
			btn_retrieve.enable 	= false;        //보류해제      
			btn_transfer.enable 	= false;        //호전환  
			btn_edu.enable 			= false;         //교육    
			btn_lunch.enable 		= false;         //식사    
			btn_coach.enable 		= false;         //코칭
			btn_clearCall.enable 	= false;        //끊기
			btn_awc.enable 			= false;         //후처리
			btn_cti.enable 			= true;         //CTI로그인버튼
			btn_makeCall.enable 	= false;        //걸기
			this.callStatus = "LOGOFF";
			
			setUserStat(code);
			
			break;	
		//100 모두활성화
		case 100:			
			trace("setScreenLayout 모두활성화");
			btn_ready.enable 		= true;         //대기    
			btn_complaint.enable 	= true;         //불만
			btn_email.enable 		= true;         //메일    
			btn_notReady.enable 	= true;         //휴식    
			btn_hold.enable 		= true;        //보류    
			btn_retrieve.enable 	= true;        //보류해제      
			btn_transfer.enable 	= true;        //호전환  
			btn_edu.enable 			= true;         //교육    
			btn_lunch.enable 		= true;         //식사    
			btn_coach.enable 		= true;         //코칭
			btn_clearCall.enable 	= true;         //끊기
			btn_awc.enable 			= true;         //후처리			
			btn_cti.enable 			= true;         //CTI로그인버튼
			btn_makeCall.enable 	= true;        //걸기
			break;
	}	
 }
 
 
function answer(){
	var result = -1;
	trace("전화받기 라인상태 0 :: " + objTLine.TStatus);	
	trace("전화받기 라인상태 1 :: " + objTLineQ.TStatus);

	// objTLine의 전화를 끊으려고 시도한 경우
	if(objTLineQ.TStatus == UNKNOW || objTLineQ.TStatus == RING|| objTLineQ.TStatus == HELD){	
		if (objTLine.TStatus == RING) {
			result = objTLine.TAnswer();				
		}else{
			switch (objTLine.TStatus) {
				case DIAL:	    
						cf_Alert("COME0023"); //현재 전화걸기 중입니다.
						break;
				case ES:		
						cf_Alert("COME0024"); //현재 전화가 연결되어 있습니다.
						break;
				case HELD:	    
						cf_Alert("COME0022"); //현재 전화가 보류 상태입니다. 재연결 후 전화를 끊을 수 있습니다.
						break;
			}
		}
	}
	
	// objTLineQ의 전화를 끊으려고 시도한 경우
	if(objTLine.TStatus == UNKNOW || objTLine.TStatus == RING|| objTLine.TStatus == HELD){
		if (objTLineQ.TStatus == RING) {
			result = objTLineQ.TAnswer();
		}else{
			switch (objTLineQ.TStatus) { 
				case DIAL:	    
						cf_Alert("COME0023"); //현재 전화걸기 중입니다.
						break;
				case ES:		
						cf_Alert("COME0024"); //현재 전화가 연결되어 있습니다.
						break;
				case HELD:	    
						cf_Alert("COME0022"); //현재 전화가 보류 상태입니다. 재연결 후 전화를 끊을 수 있습니다.
						break;
			}
		}
	}
	
	trace("전화받기 명령수행결과 :: " + result);	
	trace("전화받기 라인상태 0:: " + objTLine.TStatus);			
	trace("전화받기 라인상태 1:: " + objTLineQ.TStatus);			
	
	return result;	
}

 function agentReady(){
 	trace("callStatus=>" + this.callStatus);
	
	/*
	if(this.callStatus == "AWC" || this.callStatus == "WORK"){
		if(this.conSaveYn != "Y") {
			cf_Alert("COME0017"); //상담이력을 저장하지 않았습니다. 상담이력을 저장해주십시요		
			return;		
		}
	}
	*/
	
	objTExtn.TAgentWorkMode = "1";			// Malual
	objTExtn.TReady();	
 }
 
 
function agentNotReady(key, value){
	trace("key [" + key + "] value [" + value + "]");	

	if(key == "" && value ==""){
		
		objTExtn.TSetReason(""); 
		objTExtn.TAgentWorkMode = 4; 		//AuxWork
		var tkvListData = objTComX.createObject("TCommObj.CTKVList");
		var tkvPairData = objTComX.createObject("TCommObj.CTKVPair");		
		tkvListData.Clear();
		tkvPairData.Key = "reasonCode";
		tkvPairData.Type = 0;
		tkvPairData.StringValue = "100";   //휴식코드
		tkvListData.AddTail(tkvPairData); 
		objTExtn.TSetReason(tkvListData);
		
		var result = objTExtn.TNotReady();		
		trace("로그인시 휴식 :: " + result);	
		
		return;
	}else{	

		/*
			사유 등록하는 객체를 만든다.- 시작
		*/
		objTExtn.TSetReason(""); 
		var tkvListData = objTComX.createObject("TCommObj.CTKVList");
		var tkvPairData = objTComX.createObject("TCommObj.CTKVPair");	
		tkvListData.Clear();
		tkvPairData.Key = "reasonCode";
		tkvPairData.Type = 0;
		tkvPairData.StringValue = value;
		tkvListData.AddTail(tkvPairData); 
		objTExtn.TSetReason(tkvListData); 		
		/*
			사유 등록하는 객체를 만든다. - 끝
		*/		
		objTExtn.TAgentWorkMode = 4;  //AuxWork
		objTExtn.TNotReady();
	}	
}


function makecall(callNo, flag){
	
	trace("전화걸기전 라인상태0 :: " + objTLine.TStatus);
	trace("전화걸기전 라인상태1 :: " + objTLineQ.TStatus);
	trace("전화번호 :: " + callNo);
	trace("현재상태 :: " + objTExtn.TAgentWorkMode);
	
	trace("현재콜상태 :: " + COM120.callStatus);
	 
	if(flag != "ORD")  //주문은 대기상태에서도 아웃바운드 가능해야함.
	{
		if (COM120.callStatus == "READY"){
			cf_Alert("COME0030");  //대기중일경우 OB전화할수 없습니다.
			return;
		}
	}
    //line1이 전화연결이 되어있지 않음
    if(objTLine.TStatus == UNKNOW){
	    result = objTLine.TDial(callNo);	    
    //line2이 전화연결이 되어있지 않음	    
    }else if(objTLineQ.TStatus == UNKNOW){
	    result = objTLineQ.TDial(callNo);
    }
    
    trace("전화걸기 명령수행결과 :: " + result);
	trace("전화걸기후 라인상태0  :: " + objTLine.TStatus);
	trace("전화걸기후 라인상태1  :: " + objTLineQ.TStatus);
};

function releaseCall(){

	trace("전화끊기 라인상태0 :: " + objTLine.TStatus);
	trace("전화끊기 라인상태1 :: " + objTLineQ.TStatus);	
	
	// objTLine의 전화를 끊으려고 시도한 경우
	if(objTLineQ.TStatus == UNKNOW || objTLineQ.TStatus == RING|| objTLineQ.TStatus == HELD){	
		if ((objTLine.TStatus == DIAL) || (objTLine.TStatus == ES)) {
			result = objTLine.THangUp();		
			if (result == -1) {alert("Release Fail!");}
		}else{
			switch (objTLine.TStatus) {
				case UNKNOW:
						cf_Alert("COME0020"); //전화가 연결되어 있지 않습니다.
				break;
				case RING:	
						cf_Alert("COME0021"); //전화가 왔습니다. 먼저 전화를 받아야 합니다.
				break;
				case HELD:
						cf_Alert("COME0022"); //현재 전화가 보류 상태입니다. 재연결 후 전화를 끊을 수 있습니다.
				break;
			}
		}
	}
	
	// objTLineQ의 전화를 끊으려고 시도한 경우
	if(objTLine.TStatus == UNKNOW || objTLine.TStatus == RING|| objTLine.TStatus == HELD){
		if ((objTLineQ.TStatus == DIAL) || (objTLineQ.TStatus == ES)) {
			result = objTLineQ.THangUp();		
			if (result == -1) {alert("Release Fail!");}
		}else{
			switch (objTLineQ.TStatus) { 
				case UNKNOW:
						cf_Alert("COME0020"); //전화가 연결되어 있지 않습니다.
				break;
				case RING:	
						cf_Alert("COME0021"); //전화가 왔습니다. 먼저 전화를 받아야 합니다.
				break;
				case HELD:
						cf_Alert("COME0022"); //현재 전화가 보류 상태입니다. 재연결 후 전화를 끊을 수 있습니다.
				break;
			}
		}
	}		
	
	trace("전화끊기후 라인상태0 :: " + objTLine.TStatus);	
	trace("전화끊기후 라인상태1 :: " + objTLineQ.TStatus);
};

function hold(){

	trace("보류 라인상태0 :: " + objTLine.TStatus);	
	trace("보류 라인상태1 :: " + objTLineQ.TStatus);		
	
	if(objTLineQ.TStatus == UNKNOW || objTLineQ.TStatus == RING|| objTLineQ.TStatus == HELD){
		if ((objTLine.TStatus == DIAL) || (objTLine.TStatus == ES)) {
			result = objTLine.THold();		
			if (result == -1) {alert("THold() Fail!");}
		}else{
			switch (objTLine.TStatus) {
				case UNKNOW:
						cf_Alert("COME0020"); //전화가 연결되어 있지 않습니다.
				break;
				case RING:	
						cf_Alert("COME0021"); //전화가 왔습니다. 먼저 전화를 받아야 합니다.
				break;
				case HELD:
						cf_Alert("COME0022"); //현재 전화가 보류 상태입니다. 재연결 후 전화를 끊을 수 있습니다.
				break;
			}
		}
	}
	
	if(objTLine.TStatus == UNKNOW || objTLine.TStatus == RING|| objTLine.TStatus == HELD){
		if ((objTLineQ.TStatus == DIAL) || (objTLineQ.TStatus == ES)) {
			result = objTLineQ.THold();		
			if (result == -1) {alert("THold() Fail!");}
		}else{
			switch (objTLineQ.TStatus) {
				case UNKNOW:
						cf_Alert("COME0020"); //전화가 연결되어 있지 않습니다.
				break;
				case RING:	
						cf_Alert("COME0021"); //전화가 왔습니다. 먼저 전화를 받아야 합니다.
				break;
				case HELD:
						cf_Alert("COME0022"); //현재 전화가 보류 상태입니다. 재연결 후 전화를 끊을 수 있습니다.
				break;
			}
		}
	}	
		
	
	trace("보류 라인상태0 :: " + objTLine.TStatus);
	trace("보류 라인상태1 :: " + objTLineQ.TStatus);
}

function retrieve(){
	trace("보류해제 라인상태0 :: " + objTLine.TStatus);
	trace("보류해제 라인상태1 :: " + objTLineQ.TStatus);

	if(objTLine.TStatus == HELD){
	    
		result = objTLine.TRetrieve();
		if (result == -1){	cf_Alert("COTE0106"); } //전화 재연결에 실패했습니다. 
		
	}else if(objTLineQ.TStatus == HELD){
	    
		result = objTLineQ.TRetrieve();
		if (result == -1){	cf_Alert("COTE0106"); } //전화 재연결에 실패했습니다.
	}
		

	trace("보류해제 라인상태0 :: " + objTLine.TStatus);
	trace("보류해제 라인상태0 :: " + objTLineQ.TStatus);
}


function transferMute(callNo, service_gubun){

	/*
		IVR 주민번호입력 - START
	*/		
	trace("dtmf- ivr 재인입");	
	this.service_gubun = service_gubun;
	trace("service_gubun :: " + this.service_gubun);
	trace("cust_id  ::" + this.CUST_ID);
	var port = getTrim(GetConfig("SOCKET_PORT"));		
	var tkvListData = objTComX.createObject("TCommObj.CTKVList");
	var tkvPairData = objTComX.createObject("TCommObj.CTKVPair");	
	tkvListData.Clear();
	
	tkvPairData.Key = "service_gubun";
	tkvPairData.Type = 0;
	tkvPairData.StringValue = this.service_gubun;
	tkvListData.AddTail(tkvPairData); 
	
	tkvPairData.Key = "cust_id";
	tkvPairData.Type = 0;
	tkvPairData.StringValue = this.CUST_ID;					
	tkvListData.AddTail(tkvPairData);
	
	tkvPairData.Key = "agent_ip";
	tkvPairData.Type = 0;
	tkvPairData.StringValue = GetUserInfo("gLGIN_IP");  //사용자 로그인IP
	tkvListData.AddTail(tkvPairData);
		
	tkvPairData.Key = "agent_port";
	tkvPairData.Type = 0;
	tkvPairData.StringValue = port;	//소켓서버포트
	tkvListData.AddTail(tkvPairData);
	
	var result = -1;
	trace("그룹호전환 라인상태 :: " + objTLine.TStatus);	
	trace("그룹호전환 라인상태Q :: " + objTLineQ.TStatus);	
	this.CALL_TRANSFER_YN = "Y";
	
	if (objTLine.TStatus == ES) {
		result = objTLine.TTransferMute(callNo);
		
		objTLine.TAttachData(tkvListData, false);
		
	}else if (objTLineQ.TStatus == ES) {
		result = objTLineQ.TTransferMute(callNo);
		
		objTLineQ.TAttachData(tkvListData, false);
		
	}else{
        switch (objTLine.TStatus) {
    			case UNKNOW:	
						cf_Alert("COME0020"); //전화가 연결되어 있지 않습니다.
				break;
    			case RING:	    
						cf_Alert("COME0021"); //전화가 왔습니다. 먼저 전화를 받아야 합니다.
				break;
    			case DIAL:	    
						cf_Alert("COME0023"); //현재 전화걸기 중입니다.
				break;
    			case HELD:	    
						cf_Alert("COME0022"); //현재 전화가 보류 상태입니다. 재연결 후 전화를 끊을 수 있습니다.
				break;
        }
	}
	
	trace("그룹호전환 명령수행결과 :: " + result);
	trace("그룹호전환 라인상태0:: " + objTLine.TStatus);		
	trace("그룹호전환 라인상태1:: " + objTLineQ.TStatus);
}


function transferInit(callNo){

	
	/*
		호전환 데이터 - START
	*/		
	trace("호전환 데이터");	
	
	var tkvListData = objTComX.createObject("TCommObj.CTKVList");
	var tkvPairData = objTComX.createObject("TCommObj.CTKVPair");	
	tkvListData.Clear();

	tkvPairData.Key = "TRAN_GRP_CDNM";
	tkvPairData.Type = 0;
	tkvPairData.StringValue = GetUserInfo("gGRP_CDNM");					
	tkvListData.AddTail(tkvPairData);
	
	tkvPairData.Key = "TRAN_USR_NM";
	tkvPairData.Type = 0;
	tkvPairData.StringValue = GetUserInfo("gUSR_NM");
	tkvListData.AddTail(tkvPairData);

	//아웃바운드시 전화번호 및 고객ID세팅
	if (blnOutbound){
		trace("아웃바운드시 전화번호 및 고객ID세팅");	
		tkvPairData.Key = "cust_id";
		tkvPairData.Type = 0;
		tkvPairData.StringValue = this.CUST_ID;					
		tkvListData.AddTail(tkvPairData);

		tkvPairData.Key = "ANI";
		tkvPairData.Type = 0;
		tkvPairData.StringValue = this.outboundHP;					
		tkvListData.AddTail(tkvPairData);

		tkvPairData.Key = "key_gubun";
		tkvPairData.Type = 0;
		tkvPairData.StringValue = this.key_gubun;					
		tkvListData.AddTail(tkvPairData);
	}
	/*
		호전환 데이터 - END
	*/
	
	var result = -1;
	trace("호전환 협의 라인상태0:: " + objTLine.TStatus);
	trace("호전환 협의 라인상태1:: " + objTLineQ.TStatus);
	
	//호전환 물어보는 전화	
	if(objTLineQ.TStatus == UNKNOW || objTLineQ.TStatus == RING|| objTLineQ.TStatus == HELD){	
		if (objTLine.TStatus == ES){		// Established 상태일 경우					
			result = objTLine.TTransferInit(callNo);
			objTLine.TAttachData(tkvListData, false);
		}else{
			switch (objTLine.TStatus) {
					case UNKNOW:	
							cf_Alert("COME0020"); //전화가 연결되어 있지 않습니다.
					break;
					case RING:	    
							cf_Alert("COME0021"); //전화가 왔습니다. 먼저 전화를 받아야 합니다.
					break;
					case DIAL:	    
							cf_Alert("COME0023"); //현재 전화걸기 중입니다.
					break;
					case HELD:	    
							cf_Alert("COME0022"); //현재 전화가 보류 상태입니다. 재연결 후 전화를 끊을 수 있습니다.
					break;
			}
		}
	}
	
	if(objTLine.TStatus == UNKNOW || objTLine.TStatus == RING|| objTLine.TStatus == HELD){	
		if (objTLineQ.TStatus == ES){		// Established 상태일 경우				
			result = objTLineQ.TTransferInit(callNo);		
			objTLineQ.TAttachData(tkvListData, false);
		}else{
			switch (objTLineQ.TStatus) {
					case UNKNOW:	
							cf_Alert("COME0020"); //전화가 연결되어 있지 않습니다.
					break;
					case RING:	    
							cf_Alert("COME0021"); //전화가 왔습니다. 먼저 전화를 받아야 합니다.
					break;
					case DIAL:	    
							cf_Alert("COME0023"); //현재 전화걸기 중입니다.
					break;
					case HELD:	    
							cf_Alert("COME0022"); //현재 전화가 보류 상태입니다. 재연결 후 전화를 끊을 수 있습니다.
					break;
			}
		}
	}	

	trace("호전환협의 명령수행결과 :: " + result);
	trace("호전환 협의 라인상태0:: " + objTLine.TStatus);	
	trace("호전환 협의 라인상태1:: " + objTLineQ.TStatus);	
}

function transferComplete(){
	trace(" 호전환 라인상태0 :: " + objTLine.TStatus);
	trace(" 호전환 라인상태1 :: " + objTLineQ.TStatus);
	var result = -1;
	
	//ES => HELD
	if (objTLine.TStatus == HELD){
		result = objTLine.TTransferComplete();
		if (result == 0 ) this.CALL_TRANSFER_YN = "Y";	
	}else if(objTLineQ.TStatus == HELD){
		result = objTLineQ.TTransferComplete();
		if (result == 0 ) this.CALL_TRANSFER_YN = "Y";	
	}	
	
	trace("호전환 명령수행결과 :: " + result);
	trace(" 호전환후 라인상태0 :: " + objTLine.TStatus);
	trace(" 호전환후 라인상태1 :: " + objTLineQ.TStatus);
}

function reconnect(){

	trace("호전환/3자통화 취소 라인상태 0 :: " + objTLine.TStatus);	
	trace("호전환/3자통화 취소 라인상태 1 :: " + objTLineQ.TStatus);
	var result = -1;
	
	if (objTLine.TStatus == HELD){
		result = objTLine.TReconnect();
		this.reconnect_yn = "Y";
	}else if(objTLineQ.TStatus == HELD){
		result = objTLineQ.TReconnect();
		this.reconnect_yn = "Y";
	}
	
	trace("호전환/3자통화 취소 수행결과 :: " + result);
	trace("호전환/3자통화 취소 라인상태 0:: " + objTLine.TStatus);	
	trace("호전환/3자통화 취소 라인상태 1:: " + objTLineQ.TStatus);	
	
}



/*=================================================================
  * 3자통화 협의 
===================================================================*/
function conferenceInit(callNo, service_gubun){

	/*
		IVR 주민번호입력 - START
	*/		
	trace("dtmf");	
	this.service_gubun = service_gubun;
	this.DTMF_NO_INIT = true;  //dtmf처음 들어왔을때 true로 둔다음 이벤트에서 false로줘서 이벤트처리한다.
	trace("service_gubun :: " 	+ this.service_gubun);
	trace("cust_id  ::" 		+ this.CUST_ID);
	trace("gLGIN_IP  ::" 		+ GetUserInfo("gLGIN_IP"));
	
	var port = getTrim(GetConfig("SOCKET_PORT"));
	var tkvListData = objTComX.createObject("TCommObj.CTKVList");
	var tkvPairData = objTComX.createObject("TCommObj.CTKVPair");	
	tkvListData.Clear();
	tkvPairData.Key = "service_gubun";
	tkvPairData.Type = 0;
	tkvPairData.StringValue = this.service_gubun;
	tkvListData.AddTail(tkvPairData); 
	tkvPairData.Key = "cust_id";
	tkvPairData.Type = 0;
	tkvPairData.StringValue = this.CUST_ID;				
	tkvListData.AddTail(tkvPairData); 

	tkvPairData.Key = "agent_ip";
	tkvPairData.Type = 0;
	tkvPairData.StringValue = GetUserInfo("gLGIN_IP");  //사용자 로그인IP
	tkvListData.AddTail(tkvPairData);
		
	tkvPairData.Key = "agent_port";
	tkvPairData.Type = 0;
	tkvPairData.StringValue = port;	//소켓서버포트
	tkvListData.AddTail(tkvPairData);
	
	/*
		IVR 주민번호입력 - END
	*/					

	this.service_gubun = service_gubun;
	
	var result = 0;

	trace("3자통화협의 라인상태0 :: " + objTLine.TStatus);
	trace("3자통화협의 라인상태1 :: " + objTLineQ.TStatus);	

	//호전환 물어보는 전화
	if(objTLineQ.TStatus != ES ){
		if (objTLine.TStatus == ES) {		// Established 상태일 경우
			
			var result = objTLine.TConferenceInit(callNo);		
			if (result == -1) {	
				cf_Alert("COME0036");  //전화전환에 실패했습니다. 
			}else{
				this.DTMF_YN = "Y";
			}
			
			objTLine.TAttachData(tkvListData, false);	
			
		}else {	    
			
			switch (objTLine.TStatus) {
					case UNKNOW:
							result = 9999;
							cf_Alert("COME0020"); //전화가 연결되어 있지 않습니다.
					break;
					case RING:	    
							cf_Alert("COME0021"); //전화가 왔습니다. 먼저 전화를 받아야 합니다.
					break;
					case DIAL:
							result = 9999;						    
							cf_Alert("COME0023"); //현재 전화걸기 중입니다.
					break;
					case HELD:	    
							cf_Alert("COME0022"); //현재 전화가 보류 상태입니다. 재연결 후 전화를 끊을 수 있습니다.
					break;
			}        
		}
	}else{
		if (objTLineQ.TStatus == ES) {		// Established 상태일 경우
			var result = objTLineQ.TConferenceInit(callNo);		
			if (result == -1) {	
				cf_Alert("COME0036");  //전화전환에 실패했습니다. 
			}else{
				this.DTMF_YN = "Y";
			}
			
			objTLineQ.TAttachData(tkvListData, false);	
			
		}else {	 
			switch (objTLineQ.TStatus) {
					case UNKNOW:
							result = 9999;						
							cf_Alert("COME0020"); //전화가 연결되어 있지 않습니다.
					break;
					case RING:	    
							cf_Alert("COME0021"); //전화가 왔습니다. 먼저 전화를 받아야 합니다.
					break;
					case DIAL:
							result = 9999;						    
							cf_Alert("COME0023"); //현재 전화걸기 중입니다.
					break;
					case HELD:	    
							cf_Alert("COME0022"); //현재 전화가 보류 상태입니다. 재연결 후 전화를 끊을 수 있습니다.
					break;
			}        
		}	
	}
	
	trace("3자통화협의 명령수행결과 :: " + result);
	trace("3자통화협의 라인상태0 :: " + objTLine.TStatus);
	trace("3자통화협의 라인상태1 :: " + objTLineQ.TStatus);	
	
	if(service_gubun == "10"){
		trace("COM120 :: dtmf 초기화");
		g_dtmf_no = "";
	}
	return result;		
}


/*=================================================================
  * 3자통화 
===================================================================*/
function conferenceComplete(){

	trace("3자통화 라인상태0 :: " + objTLine.TStatus);
	trace("3자통화 라인상태1 :: " + objTLineQ.TStatus);

	if(objTLine.TStatus == HELD){
		var result = objTLine.TConferenceComplete();
	}else if(objTLineQ.TStatus == HELD){
		var result = objTLineQ.TConferenceComplete();
	}
	
	trace("3자통화 명령수행결과 :: " + result);
	trace("3자통화후 라인상태0 :: " + objTLine.TStatus);
	trace("3자통화후 라인상태1 :: " + objTLineQ.TStatus);	
	
	if(result == 0){
		this.CALL_TRANSFER_YN = "Y";
	}

	return result;	
}

function getAgentStatus(dnNum){
	
	objTExtnQ.TDN = dnNum;

	trace("objTExtnQ.TDN :: " + objTExtnQ.TDN);

	objTExtnQ.TExtensionType = 4 ;
	objTExtnQ.TRegister();

	objTExtnQ.TQueryAddress(17);
	objTExtnQ.TUnregister();
	objTExtnQ.TDN = "";
}

/*
	함수명 : setCallDT
	callMakeTime 전화건시간
	callRecvTime 전화받은시간
	callClearTime 전화끊은시간
*/

function setCallDT(flag){
	if (flag == "callMakeTime"){
		return COM120.callMakeTime;  //전화건시간
	}else if (flag == "callRecvTime"){
		return COM120.callRecvTime;  //전화받은시간
	}else if (flag == "callClearTime"){
		return COM120.callClearTime;  //전화끊은시간
	}	
}

function getCallID(){
	return COM120.CONNID;
}

function getCallStatus(){
	return COM120.callStatus;
}

function setConSaveYn(conSaveYn){
	COM120.conSaveYn = conSaveYn;
}

function getConSaveYn(){
	return COM120.conSaveYn;
}

function setCustId(cust_id){
	COM120.CUST_ID = cust_id;
}

function setKeygubun(key_gubun){
	COM120.key_gubun = key_gubun;
}

function setHangUpSaveYn(hangUpSaveYn){
	COM120.hangUpSaveYn = hangUpSaveYn;
}

function getHangUpSaveYn(){
	return COM120.hangUpSaveYn;
}

function getBlnOutbound(){
	return COM120.blnOutbound;
}

function setEventProcGbn(proc_gubun){
	trace("setEventProcGbn :: " + proc_gubun);
	COM120.evntProcGbn = proc_gubun;
}
 
/*=================================================================
  * 후처리
===================================================================*/
function afterCallWorkAgent(){

	objTExtn.TAgentWorkMode = 3;
	var result = objTExtn.TNotReady();
	trace("후처리 명령수행결과 :: " + result);
	setScreenLayout(13);
	return result;
} 
 
/**********************************************************************************
	버튼작동 - 시작
**********************************************************************************/
//대기클릭시 상담화면을 열어준다.
function get_popup(pgm_id){
	if (!getTopFrame().getFormOpenYn(pgm_id)) {
		getTopFrame().formOpen(pgm_id); 		
	}
	getTabFocus(pgm_id);
}


//대기클릭시
function btn_ready_onclick(obj:Button,  e:ClickEventInfo)
{
	if(this.conSaveYn != "Y") {
		cf_Alert("COME0017");
		return;
	}
	
	if(this.hangUpSaveYn != "Y") {
		cf_Alert("COME0032");	
		return;
	}

	agentReady();  //대기
	
	var grp_cd = GetUserInfo("gGRP_CD");
	if (grp_cd =="ORD"){
		get_popup("ORD010");
	}else{
		get_popup("BNS010");
	}
	
	// 초기화
	setPhoneInit();
	
	//대기명령어
	var objParam = new Object();
	objParam.frmPgmId 	= "COM121_READY";
	objPHNBNS.getPhnEvent(objParam);
	objPHNORD.getPhnEvent(objParam);
	objPHNLPS.getPhnEvent(objParam);
	objPHNCMP.getPhnEvent(objParam);	
}


//불만클릭시
function btn_complaint_onclick(obj:Button,  e:ClickEventInfo)
{
	if(this.conSaveYn != "Y") {
		cf_Alert("COME0017");
		return;
	}
	
	if(this.hangUpSaveYn != "Y") {
		cf_Alert("COME0032");	
		return;
	}	
	
	agentNotReady("COMPLAINT",500);	
}

//E-MAIL 중클릭시
function btn_email_onclick(obj:Button,  e:ClickEventInfo)
{
	if(this.conSaveYn != "Y") {
		cf_Alert("COME0017");
		return;
	}
	
	if(this.hangUpSaveYn != "Y") {
		cf_Alert("COME0032");	
		return;
	}
		
	agentNotReady("MAIL",600);		
}


//휴식클릭시
function btn_notReady_onclick(obj:Button,  e:ClickEventInfo)
{
	if(this.conSaveYn != "Y") {
		cf_Alert("COME0017");
		return;
	}
	
	if(this.hangUpSaveYn != "Y") {
		cf_Alert("COME0032");	
		return;
	}
		
	agentNotReady("BREAK",100);	

/*
	var objParam = new Object();
	objParam.frmPgmId 	= "COM121_NOTREADY";
	objPHNBNS.getPhnEvent(objParam);
	objPHNORD.getPhnEvent(objParam);
	objPHNLPS.getPhnEvent(objParam);
	objPHNCMP.getPhnEvent(objParam);
*/					
}

//식사클릭시
function btn_lunch_onclick(obj:Button,  e:ClickEventInfo)
{
	if(this.conSaveYn != "Y") {
		cf_Alert("COME0017");
		return;
	}
	
	if(this.hangUpSaveYn != "Y") {
		cf_Alert("COME0032");	
		return;
	}
		
	agentNotReady("LUNCH",200);		
}

//교육클릭시
function btn_edu_onclick(obj:Button,  e:ClickEventInfo)
{
	if(this.conSaveYn != "Y") {
		cf_Alert("COME0017");
		return;
	}
	
	if(this.hangUpSaveYn != "Y") {
		cf_Alert("COME0032");	
		return;
	}
	
	agentNotReady("EDU",300);	
}

//코칭클릭시
function btn_coach_onclick(obj:Button,  e:ClickEventInfo)
{
	if(this.conSaveYn != "Y") {
		cf_Alert("COME0017");
		return;
	}
	
	if(this.hangUpSaveYn != "Y") {
		cf_Alert("COME0032");	
		return;
	}
		
	agentNotReady("COACH",400);	
}

//전화걸기

function btn_makeCall_onclick(obj:Button,  e:ClickEventInfo)
{

	if(this.conSaveYn != "Y") {
		cf_Alert("COME0017");
		return;
	}
	
	if(this.hangUpSaveYn != "Y") {
		cf_Alert("COME0032");	
		return;
	}
	
		
	PopupDialog("COM123", "COM::COM123.xfdl", 100, 768, 1024, 768 , false, 'absolute', null , true);
}


//전화끊기
function btn_clearCall_onclick(obj:Button,  e:ClickEventInfo)
{
	releaseCall();
}

//보류
function btn_hold_onclick(obj:Button,  e:ClickEventInfo)
{
	hold();
}

//보류해제
function btn_retrieve_onclick(obj:Button,  e:ClickEventInfo)
{
	retrieve();	
}

//호전환
function btn_transfer_onclick(obj:Button,  e:ClickEventInfo)
{
	PopupDialog("COM122", "COM::COM122.xfdl", -1, -1, 1035, 460, false, -1, null , true);
}

//CTI 로그인 : 임시로 전화걸기코딩
function btn_cti_onclick(obj:Button,  e:ClickEventInfo)
{
	if(this.conSaveYn != "Y") {
		cf_Alert("COME0017");
		return;
	}
	
	if(this.hangUpSaveYn != "Y") {
		cf_Alert("COME0032");	
		return;
	}
	
	trace("CTI 로그인-토글 상태확인 this.callStatus [" + this.callStatus + "]");
	
	if (this.callStatus == "LOGOFF"){
		if (!cf_Confirm("COMI028", "로그인")) return;
		cti_login();
		//ctiConnct();  //서버로그인
		//ctiRegister();  //레지스터
		//logon();  //로그인	
	}else{
		if (!cf_Confirm("COMI028", "로그오프")) return;				
		getTopFrame().g_LogOffYn = "N";
		objTExtn.TLogout();		
	}
}

//후처리
function btn_awc_onclick(obj:Button,  e:ClickEventInfo)
{	
	afterCallWorkAgent();
}


/**********************************************************************************
	버튼작동 - 끝
**********************************************************************************/



//사용자 실시간 상태 변경
function setUserStat(stat)
{

	//IVR HISTORY 등록
	ds_stat_updt.clearData();

	fun_ds_srch(ds_stat_updt, "USR_ID", 	GetUserInfo("gUSR_ID"));
	fun_ds_srch(ds_stat_updt, "CTI_ST_CD", 	stat);
	
	//거래시작	
	var	strSvcID 		= "R2";
	var	strURL 			= SVC_USR_URL;
	var	strInDatasets 	= "UPDATE_0_IDATA=ds_stat_updt:a"; 
	var	strOutDatasets 	= "";
	var	strArgument 	= "UPDATE_0_ID=STA040.Set_Usr_stat_UPDATE";
	var strCallbackFunc = "fn_callBack";
	var strProcessBar 	= false;				
	var strSynce 		= true;				
	var bErrorMsgFlag 	= false;
	
	cf_SVC(strSvcID,strURL,strInDatasets,strOutDatasets,strArgument,strCallbackFunc,strProcessBar,strSynce,bErrorMsgFlag);		
}


//IVR HISTORY 등록
function btn_ivr_histroy(obj:Button,  e:ClickEventInfo)
{
	//IVR HISTORY 등록
	ds_srch.clearData();

	fun_ds_srch(ds_srch, "cust_no", 	this.CUST_ID);
	fun_ds_srch(ds_srch, "scnr_path", 	this.IVR_HISTORY);
	
	//거래시작	
	var	strSvcID 		= "R1";
	var	strURL 			= SVC_USR_URL;
	var	strInDatasets 	= "INSERT_0_IDATA=ds_srch:a"; 
	var	strOutDatasets 	= "";
	var	strArgument 	= "INSERT_0_ID=Common.Set_ivrLog_INSERT";
	var strCallbackFunc = "fn_callBack";
	var strProcessBar 	= false;				
	var strSynce 		= true;				
	var bErrorMsgFlag 	= false;
	
	cf_SVC(strSvcID,strURL,strInDatasets,strOutDatasets,strArgument,strCallbackFunc,strProcessBar,strSynce,bErrorMsgFlag);		
}

function fn_callBack(){
}



function fun_ready_time(in_time, ev_time){
	//var in_time = 60335312;
	//var ev_time = 1294386335;
	trace("in_time ::" + in_time);
	trace("ev_time ::" + ev_time);
	var tmp_time;
	var strTime;
	var strMin;
	var strSec;
	in_time = Math.floor(in_time / 1000);	
	tmp_time = ev_time - ( in_time - (Math.floor(in_time / 3600) * 3600 ) + ( Math.floor(ev_time / 3600) * 3600));
	trace("tmp_time ::" + tmp_time);	
	
	strTime = Math.floor(tmp_time / 3600);
	strMin = Math.floor((tmp_time - strTime * 3600) / 60);
	strSec = tmp_time  % 60;
	
	trace("strTime ::" + strTime);	
	trace("strMin ::" + strMin);	
	trace("strSec ::" + strSec);	
	
	return strMin + ":" + strSec;
}

// 초기화
function setPhoneInit(){
	trace("COM120 녹취ID초기화 :: ");
	this.CUST_ID 			= "";
	this.IVR_HISTORY 		= "";
	this.ANI 				= "";
	this.CONNID 			= "";
	this.TODAY 				= "";
	this.EXT_NO 			= "";
	this.CTI_ID 			= "";
	this.key_gubun 			= "";
	this.TRAN_GRP_CDNM 		= "";
	this.TRAN_USR_NM 		= "";
	this.USR_NM 			= "";
	this.reconnect_yn 		= "N";
	this.cti_timestamp 		= "";
	this.outboundHP 		= "";	
	this.callMakeTime 		= "";
	this.callRecvTime 		= "";
	this.callClearTime 		= "";
	this.DTMF_YN			= "";
	this.DTMF_NO 			= "";
	this.DTMF_NO_INIT 		= "";
	this.CALL_TRANSFER_YN 	= "";
	this.blnOutbound		= "";
	
	getTopFrame().Stc_ivr_history.text = "";
	getTopFrame().Stc_ivr_history.tooltiptext = "";
	
}

// 초기화 - 화면에서 호출
function setPhoneInitProc(){
	trace("COM120 녹취ID 화면에서 초기화 :: ");
	COM120.CUST_ID 			= "";
	COM120.IVR_HISTORY 		= "";
	COM120.ANI 				= "";
	COM120.CONNID 			= "";
	COM120.TODAY 			= "";
	COM120.EXT_NO 			= "";
	COM120.CTI_ID 			= "";
	COM120.key_gubun 		= "";
	COM120.TRAN_GRP_CDNM 	= "";
	COM120.TRAN_USR_NM 		= "";
	COM120.USR_NM 			= "";
	COM120.reconnect_yn 	= "N";
	COM120.cti_timestamp 	= "";
	COM120.outboundHP 		= "";	
	COM120.callMakeTime 	= "";
	COM120.callRecvTime 	= "";
	COM120.callClearTime 	= "";
	COM120.DTMF_YN			= "";
	COM120.DTMF_NO 			= "";
	COM120.DTMF_NO_INIT 	= "";
	COM120.CALL_TRANSFER_YN = "";
	COM120.blnOutbound		= "";
	
	getTopFrame().Stc_ivr_history.text = "";
	getTopFrame().Stc_ivr_history.tooltiptext = "";	
}

function get_Data(pgm_id){
	
	//호전환이면 상담생성하지 않는다. - 시작
	var objPHN;
	var p_grp_nm = getTrim(this.TRAN_GRP_CDNM);
	if (p_grp_nm) return;
	//호전환이면 상담생성하지 않는다. - 끝
	
	trace("COM120 전화받기 이벤트발생 COM121_PICK :: "+pgm_id)
	var objParam = new Object();
	objParam.frmPgmId 	= "COM121_PICK";
	if (g_div_cti.key_gubun =="01"){
		objPHN = getObjPhnOrd();		
		objPHN.getPhnEvent(objParam);
	}else{
		objPHN = getObjPhnBns();	
		objPHN.getPhnEvent(objParam);	
	}
}

]]></Script>
    <Layout>
      <Button id="btn_ready" taborder="0" text="대기" position="absolute 0 0 40 21" class="btn_TF_cti" onclick="btn_ready_onclick"/>
      <Button id="btn_complaint" taborder="1" text="불만" class="btn_TF_cti" position="absolute 139 0 179 21" onclick="btn_complaint_onclick"/>
      <Button id="btn_email" taborder="2" text="메일" class="btn_TF_cti" position="absolute 97 0 137 21" onclick="btn_email_onclick"/>
      <Button id="btn_notReady" taborder="3" text="휴식" class="btn_TF_cti" position="absolute 317 0 357 21" onclick="btn_notReady_onclick"/>
      <Button id="btn_hold" taborder="4" text="보류" class="btn_TF_cti" position="absolute 361 0 401 21" onclick="btn_hold_onclick"/>
      <Button id="btn_edu" taborder="5" text="교육" class="btn_TF_cti" position="absolute 228 0 268 21" onclick="btn_edu_onclick"/>
      <Button id="btn_lunch" taborder="6" text="식사" class="btn_TF_cti" position="absolute 273 0 313 21" onclick="btn_lunch_onclick"/>
      <Button id="btn_coach" taborder="7" text="면담" class="btn_TF_cti" position="absolute 183 0 223 21" onclick="btn_coach_onclick"/>
      <Button id="btn_cti" taborder="8" text="CTI" class="btn_TF_cti" position="absolute 598 0 638 21" onclick="btn_cti_onclick"/>
      <Button id="btn_clearCall" taborder="9" text="끊기" class="btn_TF_cti" position="absolute 459 0 499 21" onclick="btn_clearCall_onclick"/>
      <Button id="btn_retrieve" taborder="10" text="재연결" class="btn_TF_cti" position="absolute 406 0 456 21" onclick="btn_retrieve_onclick"/>
      <Button id="btn_transfer" taborder="11" text="호전환" class="btn_TF_cti" position="absolute 545 0 595 21" onclick="btn_transfer_onclick"/>
      <Button id="btn_awc" taborder="12" text="후처리" class="btn_TF_cti" position="absolute 44 0 94 21" onclick="btn_awc_onclick"/>
      <Button id="btn_makeCall" taborder="13" text="걸기" class="btn_TF_cti" position="absolute 502 0 542 21" onclick="btn_makeCall_onclick"/>
    </Layout>
    <Objects>
      <Dataset id="ds_srch" firefirstcount="0" firenextcount="0" useclientlayout="false" updatecontrol="true" enableevent="true" loadkeymode="keep" loadfiltermode="keep" reversesubsum="false"/>
      <Dataset id="ds_stat_updt" firefirstcount="0" firenextcount="0" useclientlayout="false" updatecontrol="true" enableevent="true" loadkeymode="keep" loadfiltermode="keep" reversesubsum="false"/>
    </Objects>
  </Form>
</FDL>
