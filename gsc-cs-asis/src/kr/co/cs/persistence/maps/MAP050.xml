<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="MAP050">

	 <parameterMap id="ASES_LST" class="java.util.HashMap">
	 	<parameter property="kind_cd" 		jdbcType="VARCHAR" 		javaType="java.lang.String" mode="IN"/>
	 	<parameter property="ases_month" 	jdbcType="VARCHAR" 		javaType="java.lang.String" mode="IN"/>
	 	<parameter property="reg_id" 		jdbcType="VARCHAR" 		javaType="java.lang.String" mode="IN"/>	 	
	 	<parameter property="result0" 		jdbcType="ORACLECURSOR" javaType="java.sql.ResultSet" mode="OUT"/>	 	
	</parameterMap>

	<!-- 회수대상건수조회 -->   		
	<procedure id="Prc_ASES_LST_SELECT" parameterMap="ASES_LST" resultClass="java.util.HashMap" >
		{ CALL SP_BT_MM_ASES_CNSLR(?,?,?,?) }
	</procedure>


	<!-- 
		평가지를 조회한다.
	 -->
  	<select id="Get_MMAsesGrpCombo_SELECT" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
		 SELECT GRP_SEQ_NO			AS CODE			<!-- 토드 -->
		      , TITE				AS CODE_NM		<!-- 이름 --> 
		   FROM TBL_MM_ASES_GRP
		  WHERE GRP_CD = #grp_cd# 
		    AND (DEL_YN IS NULL OR DEL_YN = 'N')
		    AND (USE_YN IS NULL OR USE_YN = 'Y')			    	
		  ORDER BY REG_DTM DESC
 	</select>
 	

	<!-- 
		월평가 타이틀을 조회한다.
	 -->
  	<select id="Get_MMAsesCnslrTitleList_SELECT" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
		SELECT (SELECT REFN_CD_VLU3
			      FROM TBL_UNFYCD_SMLCLAS 
			     WHERE LRGCLAS_CD = 'NW055' 
			       AND SMLCLAS_CD = C.FMUL_ITEM_CD
			   ) AS COL_ITEM
		     , B.TITE || '[' || B.WEGHT || ']' DISP_HEAD1
		     , C.TITE || '[' || C.WEGHT || ']' DISP_HEAD2
		     , CASE WHEN C.MM_ASES_FMUL_SEQ_NO IS NULL THEN 'Y' ELSE 'N' END FMUL_YN
		  FROM TBL_MM_ASES_GRP A
		       INNER JOIN TBL_MM_ASES_LRGCLAS B
		               ON ( A.GRP_SEQ_NO = B.GRP_SEQ_NO)
		       INNER JOIN TBL_MM_ASES_MEDCLAS C
		               ON (    B.GRP_SEQ_NO = C.GRP_SEQ_NO
		                   AND B.LRGCLAS_SEQ = C.LRGCLAS_SEQ)
		 WHERE A.DEL_YN = 'N'
		   AND A.USE_YN = 'Y'
		   AND A.GRP_SEQ_NO = #grp_seq_no#   
		   AND B.DEL_YN = 'N'
		   AND C.DEL_YN = 'N'
		ORDER BY B.SEQ	
 	</select> 	
 	
 	
	<!-- 
		월평가내용 조회한다.
	 -->
  	<select id="Get_MMAsesCnslrList_SELECT" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
		SELECT ASES_YM                  <!-- 평가 년월       -->
		     , CNSLR_ID                 <!-- 상담원 ID       -->
		     , FUN_GET_USRNM(CNSLR_ID) AS CNSLR_NM  <!-- 상담원명       -->
		     , GRP_SEQ_NO               <!-- 그룹 일련번호   -->
		     , RECV_RT                  <!-- 수신 율         -->
		     , JOB_DRTM                 <!-- 작업 시간       -->
		     , REST_DRTM                <!-- 휴식 시간       -->
		     , OFDY_QUIZ                <!-- 직무 퀴즈       -->
		     , BIZ_ERR                  <!-- 업무 오류       -->
		     , BIZ_ATTD                 <!-- 업무 태도       -->
		     , QA                       <!-- QA              -->
		     , TOT_WKG_DRTM             <!-- 총 근무 시간    -->
		     , DGIND_SCOR               <!-- 근태 점수       -->
		     , DGIND_PNST_SCOR          <!-- 근태 벌 점수    -->
		     , ADD_SCOR                 <!-- 추가 점수       -->
		     , ETC_SCOR1                <!-- 기타 점수1      -->
		     , ETC_SCOR2                <!-- 기타 점수2      -->
		     , ETC_SCOR3                <!-- 기타 점수3      -->
		     , ETC_SCOR4                <!-- 기타 점수4      -->
		     , ETC_SCOR5                <!-- 기타 점수5      -->
		     , ETC_SCOR6                <!-- 기타 점수6      -->
		     , ETC_SCOR7                <!-- 기타 점수7      -->
		     , ETC_SCOR8                <!-- 기타 점수8      -->
		     , ETC_SCOR9                <!-- 기타 점수9      -->
		     , ETC_SCOR10               <!-- 기타 점수10     -->
		     , INCENTV_GRD				<!-- 인센티브등급 	-->
		     , RECV_RT+JOB_DRTM+REST_DRTM+OFDY_QUIZ+BIZ_ERR+BIZ_ATTD+QA+TOT_WKG_DRTM+DGIND_SCOR
		       +ADD_SCOR+ETC_SCOR1+ETC_SCOR2+ETC_SCOR3+ETC_SCOR4+ETC_SCOR5+ETC_SCOR6+ETC_SCOR7+ETC_SCOR8+ETC_SCOR9+ETC_SCOR10 AS FROM_SUM
		     , TOT_SCOR					<!-- 총계 -->  
		     , REG_ID                   <!-- 등록 ID         -->
		     , REG_DTM                  <!-- 등록 일시       -->
		     , LST_CORC_ID              <!-- 최종 수정 ID    -->
		     , LST_CORC_DTM             <!-- 최종 수정 일시  -->
		  FROM TBL_MM_ASES_CNSLR
		 WHERE ASES_YM = #ases_ym#		
 	</select>
 	
	<!-- 
		월평가내용 등록
	 -->
	<update id="Set_MMAsesCnslr_UPDATE" parameterClass="java.util.HashMap">
		MERGE INTO TBL_MM_ASES_CNSLR A
		    USING (SELECT #ases_ym#     AS ASES_YM
		                , #cnslr_id#    AS CNSLR_ID
		    		 FROM DUAL) B
	           ON (    A.ASES_YM  = B.ASES_YM
	               AND A.CNSLR_ID = B.CNSLR_ID  )
	         WHEN MATCHED THEN
		 	      UPDATE SET
	        		      GRP_SEQ_NO            = #grp_seq_no#       <!-- 그룹 일련번호   -->
	        		    , RECV_RT               = #recv_rt#          <!-- 수신 율         -->
	        		    , JOB_DRTM              = #job_drtm#         <!-- 작업 시간       -->
	        		    , REST_DRTM             = #rest_drtm#        <!-- 휴식 시간       -->
	        		    , OFDY_QUIZ             = #ofdy_quiz#        <!-- 직무 퀴즈       -->
	        		    , BIZ_ERR               = #biz_err#          <!-- 업무 오류       -->
	        		    , BIZ_ATTD              = #biz_attd#         <!-- 업무 태도       -->
	        		    , QA                    = #qa#               <!-- QA              -->
	        		    , TOT_WKG_DRTM          = #tot_wkg_drtm#     <!-- 총 근무 시간    -->
	        		    , DGIND_PNST_SCOR       = #dgind_pnst_scor#  <!-- 근태 벌 점수    -->
	        		    , ADD_SCOR              = #add_scor#         <!-- 추가 점수       -->
	        		    , ETC_SCOR1             = #etc_scor1#        <!-- 기타 점수1      -->
	        		    , ETC_SCOR2             = #etc_scor2#        <!-- 기타 점수2      -->
	        		    , ETC_SCOR3             = #etc_scor3#        <!-- 기타 점수3      -->
	        		    , ETC_SCOR4             = #etc_scor4#        <!-- 기타 점수4      -->
	        		    , ETC_SCOR5             = #etc_scor5#        <!-- 기타 점수5      -->
	        		    , ETC_SCOR6             = #etc_scor6#        <!-- 기타 점수6      -->
	        		    , ETC_SCOR7             = #etc_scor7#        <!-- 기타 점수7      -->
	        		    , ETC_SCOR8             = #etc_scor8#        <!-- 기타 점수8      -->
	        		    , ETC_SCOR9             = #etc_scor9#        <!-- 기타 점수9      -->
	        		    , ETC_SCOR10            = #etc_scor10#       <!-- 기타 점수10     -->
	        		    , FROM_SUM				= #from_sum#		 <!-- 변경후점수 -->
	        		    , TOT_SCOR				= #tot_scor#		 <!-- 총점수 -->
	        		    , INCENTV_GRD			= #incentv_grd#		 <!-- 인센티브등급 -->
	        		    , LST_CORC_ID           = #gbl_usr_id#
	        		    , LST_CORC_DTM          = TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')  <!-- 최종 수정 일시  -->
	         WHEN NOT MATCHED THEN
        		INSERT (
        		      ASES_YM               <!-- 평가 년월       -->
        		    , CNSLR_ID              <!-- 상담원 ID       -->
        		    , GRP_SEQ_NO            <!-- 그룹 일련번호   -->
        		    , RECV_RT               <!-- 수신 율         -->
        		    , JOB_DRTM              <!-- 작업 시간       -->
        		    , REST_DRTM             <!-- 휴식 시간       -->
        		    , OFDY_QUIZ             <!-- 직무 퀴즈       -->
        		    , BIZ_ERR               <!-- 업무 오류       -->
        		    , BIZ_ATTD              <!-- 업무 태도       -->
        		    , QA                    <!-- QA              -->
        		    , TOT_WKG_DRTM          <!-- 총 근무 시간    -->
        		    , DGIND_PNST_SCOR       <!-- 근태 벌 점수    -->
        		    , ADD_SCOR              <!-- 추가 점수       -->
        		    , ETC_SCOR1             <!-- 기타 점수1      -->
        		    , ETC_SCOR2             <!-- 기타 점수2      -->
        		    , ETC_SCOR3             <!-- 기타 점수3      -->
        		    , ETC_SCOR4             <!-- 기타 점수4      -->
        		    , ETC_SCOR5             <!-- 기타 점수5      -->
        		    , ETC_SCOR6             <!-- 기타 점수6      -->
        		    , ETC_SCOR7             <!-- 기타 점수7      -->
        		    , ETC_SCOR8             <!-- 기타 점수8      -->
        		    , ETC_SCOR9             <!-- 기타 점수9      -->
        		    , ETC_SCOR10            <!-- 기타 점수10     -->
        		    , FROM_SUM				<!-- 변경후총계    		 -->
        		    , TOT_SCOR				<!-- 총점수		     -->
        		    , INCENTV_GRD			<!-- 인센티브등급	-->
        		    , REG_ID                <!-- 등록 ID         -->
        		    , REG_DTM               <!-- 등록 일시       -->
        		    , LST_CORC_ID           <!-- 최종 수정 ID    -->
        		    , LST_CORC_DTM          <!-- 최종 수정 일시  -->
        		) VALUES (
        		      #ases_ym#
        		    , #cnslr_id#
        		    , #grp_seq_no#
        		    , #recv_rt#
        		    , #job_drtm#
        		    , #rest_drtm#
        		    , #ofdy_quiz#
        		    , #biz_err#
        		    , #biz_attd#
        		    , #qa#
        		    , #tot_wkg_drtm#
        		    , #dgind_pnst_scor#
        		    , #add_scor#
        		    , #etc_scor1#
        		    , #etc_scor2#
        		    , #etc_scor3#
        		    , #etc_scor4#
        		    , #etc_scor5#
        		    , #etc_scor6#
        		    , #etc_scor7#
        		    , #etc_scor8#
        		    , #etc_scor9#        		    
        		    , #etc_scor10#
        		    , #from_sum#
        		    , #tot_scor#
        		    , #incentv_grd#
        		    , #gbl_usr_id#
        		    , TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
        		    , #gbl_usr_id#
        		    , TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
        		)          	  
	</update>	 	
	
	
	<!-- 
		월평가하기
	 -->
	
		<select id="Get_MM_List_F" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
 	
 SELECT

     MMM.TIME_KEY           AS TIME_KEY
    ,MMM.USR_ID             AS USR_ID
    ,MMM.USR_NM             AS USR_NM
    ,MMM.INBND_HOUSE        AS INBND_HOUSE
    ,MMM.OTBND_HOUSE        AS OTBND_HOUSE
    ,MMM.TM_CNT             AS TM_CNT
    ,MMM.BASE_SUM           AS BASE_SUM
    ,MMM.BASE_RESULT        AS BASE_RESULT
    ,MMM.QA_JUMSUT          AS QA_JUMSUT
    ,NVL(MMM.ULP,0)         AS ULP
    ,MMM.DDAY               AS DDAY
    ,MMM.EMAIL              AS EMAIL
    ,MMM.QUIZ               AS QUIZ
    ,NVL(QA_JUMSU.QA_TOT,0) AS QA_TOT
    ,MMM.DDDATA             AS DDDATA
    ,MMM.GGDATA             AS GGDATA
    ,MMM.DDDATA_B           AS DDDATA_B
    ,MMM.GGDATA_B           AS GGDATA_B
    ,NVL(MMM.ERROR_DATA,0) AS ERROR_DATA
    ,NVL(MMM.STAND_DATA, 0) AS STAND_DATA
    ,MMM.BEGIN_SUM          AS BEGIN_SUM
    ,MMM.AFTER_SUM          AS AFTER_SUM
    ,MMM.FINAL_SUM          AS FINAL_SUM
    ,MMM.AMINUS             AS AMINUS
    ,MMM.AGRADE             AS AGRADE
    ,MMM.CALLBACK           AS CALLBACK  <!-- 2017.06.20 콜백 추가  -->        
FROM

 (select  A.TIME_KEY as TIME_KEY
        ,B.USR_ID
        ,B.USR_NM as USR_NM
        ,A.INBND_HOUSE as INBND_HOUSE
        ,A.OTBND_HOUSE as OTBND_HOUSE
        
        ,'0' as BASE_SUM
        ,'0' as BASE_RESULT
        ,'0' as QA_JUMSUT
         ,'0' as FINAL_SUM
        ,(select 
                (100-SUM(CASE WHEN WKG_TYP_CD = 'K' THEN 5
                WHEN WKG_TYP_CD = 'G' THEN 30
                WHEN WKG_TYP_CD = 'H' THEN 50
                WHEN WKG_TYP_CD = 'L' THEN 50
             ELSE 0 END))*0.1 AS ULP
     from TBL_USR_WKG_TYP where substr(WKG_DT,1,6)=#time_key# and usr_id=B.USR_ID) AS ULP
        ,	( SELECT        
               SUM( CASE WHEN WKG_TYP_CD = 'A' THEN 1
                WHEN WKG_TYP_CD = 'K' THEN 1
                WHEN WKG_TYP_CD = 'B' THEN 0.5
                WHEN WKG_TYP_CD = 'B' THEN 0.5
                WHEN WKG_TYP_CD = 'M' THEN 1
                WHEN WKG_TYP_CD = 'D' THEN 1
                WHEN WKG_TYP_CD = 'E' THEN 1       
                
                WHEN WKG_TYP_CD = 'J' THEN 1
                
                ELSE 0 END) as WKG_TYP_CD
      FROM TBL_USR C INNER JOIN TBL_USR_WKG_TYP D 
       ON C.USR_ID = D.USR_ID 
      AND D.WKG_DT between #time_key# || '00' and #time_key# || '31'
    WHERE C.USR_ID=A.USR_ID and WKG_DT is not null) as DDAY 
    
    ,NVL((SELECT SUM(CASE WHEN A.QUST_RSPS_YN = 'Y' THEN 1 ELSE 0 END) AS TM_CNT FROM TBL_CMP_END_HIST A WHERE A.ASGN_CNSLR_ID=B.USR_ID AND SUBSTR(A.REG_DTM,1,6) =#time_key#),0) AS TM_CNT
    
        ,(select count(*) from TBL_EML_SNDG where REG_ID != 'DBA' and tite!='보너스카드 주유내역서(구매이력)' and REG_ID=B.USR_ID and BIZ_DV_CD = '4' and 
        SNDG_DTM between #time_key# || '00000000' and #time_key# || '32000000') as EMAIL
        
      ,NVL((select MRKNG_SCOR FROM (select * from tbl_ofdy_QUIZ_MRKNG order by TST_STR_DTM ) WHERE CNSLR_ID=B.USR_ID and substr(TST_STR_DTM,1,6) like TIME_KEY and rownum=1),0)*0.1 as QUIZ
        
       ,(select
    	FUN_GET_HHMMSS_CHANGE(SUM(AF_PROC_DRTM)) as DDATA       	
		from tbl_bt_cti_rpt_dt AX LEFT OUTER JOIN tbl_usr BX ON AX.USR_ID=BX.USR_ID where TIME_KEY like #time_key# || '%' and AX.USR_ID=B.USR_ID	
		) as DDDATA 
         
         ,(select
    	FUN_GET_HHMMSS_CHANGE(SUM(CLE_SEAT_DRTM_REST)+SUM(CLE_SEAT_DRTM_MEAL)) AS GDATA       	
		from tbl_bt_cti_rpt_dt AX LEFT OUTER JOIN tbl_usr BX ON AX.USR_ID=BX.USR_ID where TIME_KEY like #time_key# || '%' and AX.USR_ID=B.USR_ID	
		) as GGDATA  
		,'0' as DDDATA_B
        ,'0' as GGDATA_B
        ,'0' as BEGIN_SUM
        ,'0' as AFTER_SUM
        ,(select
    	SUM(ERROR_POINT) as ERROR_DATA
		from TBL_WORK_ERROR  where TIME_KEY like #time_key# || '%' and USR_ID=B.USR_ID) as ERROR_DATA
		,(SELECT SUM(STAND_POINT) AS STAND_DATA
		    FROM TBL_WORK_STAND  
		   WHERE TIME_KEY LIKE #time_key# || '%' 
		     AND USR_ID=B.USR_ID) AS STAND_DATA
		,(select
    	MIN_POINT as AMINUS
		from tbl_MAP_FINAL  where MAP_SEQ_NO = #time_key# || B.USR_ID) as AMINUS
		,(select
    	MAP_GRADE as AGRADE
		from tbl_MAP_FINAL  where MAP_SEQ_NO = #time_key# || B.USR_ID) as AGRADE	
		,(select count(*) from TBL_CALLBACK A INNER JOIN tbl_cnsl_hist B ON A.CNSL_SEQ_NO=B.CNSL_SEQ_NO  and B.CUR_TYP_CD = '01' 
          where A.REG_ID=B.USR_ID and (A.cnsl_seq_no != '' or A.cnsl_seq_no != 'null') and A.PROC_YN = 'Y'        
          AND B.CNSL_DTM BETWEEN #time_key#||'000000' AND #time_key#||'240000') as CALLBACK		  		           
  from tbl_bt_cti_rpt_ym A LEFT OUTER JOIN tbl_usr B ON A.USR_ID=B.USR_ID
  where A.time_key=#time_key# 
  <!-- 퇴사한 상담원도 조회되게 하기 위하여 수정 2012.09  -->
  <!-- and B.USE_YN='Y' -->
  and (QUAL_LOSS_DD is null or QUAL_LOSS_DD > #time_key#) <!-- 추가 -->

  <dynamic>
				<isNotEmpty prepend="AND" property="grp_cd">
				 B.GRP_CD=#grp_cd# 
	   		 </isNotEmpty>
	   		 	<isNotEmpty prepend="AND" property="part_cd">
		  		B.PART_CD=#part_cd#		   
 			</isNotEmpty>
 	</dynamic>	
  ) MMM
  
  
LEFT OUTER JOIN 
  
        (    
            SELECT 
                      AA.CNSLR_ID
                    , FUN_GET_USRNM(AA.CNSLR_ID) AS USR_NM
     , TRUNC(ROUND(AA.COL_A1 + AA.COL_A2 + AA.COL_A3 + AA.COL_A4 + AA.COL_A5 + AA.COL_A6 + AA.COL_A7 + AA.COL_A8 + AA.COL_A9 + AA.COL_A10 + AA.COL_B1 + AA.COL_B2 + AA.COL_B3 + AA.COL_B4 + AA.COL_B5 + AA.COL_B6 + AA.COL_B7 + AA.COL_B8 + AA.COL_B9 + AA.COL_B10 + AA.COL_C1 + AA.COL_C2 + AA.COL_C3 + AA.COL_C4 + AA.COL_C5 + AA.COL_C6 + AA.COL_C7 + AA.COL_C8 + AA.COL_C9 + AA.COL_C10,1),1) AS QA_TOT
    FROM (  
      SELECT 
         AA.CNSLR_ID
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'A1' THEN AA.ASCR/AA.SQN END),0)    AS COL_A1  
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'A2' THEN AA.ASCR/AA.SQN END),0)    AS COL_A2  
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'A3' THEN AA.ASCR/AA.SQN END),0)    AS COL_A3  
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'A4' THEN AA.ASCR/AA.SQN END),0)    AS COL_A4  
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'A5' THEN AA.ASCR/AA.SQN END),0)    AS COL_A5  
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'A6' THEN AA.ASCR/AA.SQN END),0)    AS COL_A6     
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'A7' THEN AA.ASCR/AA.SQN END),0)    AS COL_A7     
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'A8' THEN AA.ASCR/AA.SQN END),0)    AS COL_A8     
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'A9' THEN AA.ASCR/AA.SQN END),0)    AS COL_A9     
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'A10' THEN AA.ASCR/AA.SQN END),0)    AS COL_A10   
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'B1' THEN AA.ASCR/AA.SQN  END),0)    AS COL_B1  
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'B2' THEN AA.ASCR/AA.SQN  END),0)    AS COL_B2  
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'B3' THEN AA.ASCR/AA.SQN  END),0)    AS COL_B3  
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'B4' THEN AA.ASCR/AA.SQN  END),0)    AS COL_B4  
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'B5' THEN AA.ASCR/AA.SQN  END),0)    AS COL_B5  
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'B6' THEN AA.ASCR/AA.SQN  END),0)    AS COL_B6     
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'B7' THEN AA.ASCR/AA.SQN  END),0)    AS COL_B7     
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'B8' THEN AA.ASCR/AA.SQN  END),0)    AS COL_B8     
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'B9' THEN AA.ASCR/AA.SQN  END),0)    AS COL_B9     
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'B10' THEN AA.ASCR/AA.SQN  END),0)    AS COL_B10 
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'C1' THEN AA.ASCR/AA.SQN  END),0)    AS COL_C1  
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'C2' THEN AA.ASCR/AA.SQN  END),0)    AS COL_C2  
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'C3' THEN AA.ASCR/AA.SQN  END),0)    AS COL_C3  
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'C4' THEN AA.ASCR/AA.SQN  END),0)    AS COL_C4  
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'C5' THEN AA.ASCR/AA.SQN  END),0)    AS COL_C5  
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'C6' THEN AA.ASCR/AA.SQN  END),0)    AS COL_C6     
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'C7' THEN AA.ASCR/AA.SQN  END),0)    AS COL_C7     
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'C8' THEN AA.ASCR/AA.SQN  END),0)    AS COL_C8     
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'C9' THEN AA.ASCR/AA.SQN  END),0)    AS COL_C9     
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'C10' THEN AA.ASCR/AA.SQN END),0)    AS COL_C10
      FROM(
                             SELECT 
                                       AA.CNSLR_ID
                                     , AA.FIXD_COL 
                                     , AA.ASCR
                                     , AA.SQN
                                     
                                     , AA.ASGN_SCOR1
                                 FROM(
                                     SELECT AA.GRP_CD
                                         , AA.SEQ_NO
                                         , BB.CNSLR_ID 
                                         , GSIB.FUN_GET_USRNM(BB.CNSLR_ID) AS CNSLR_NM
                                         , BB.LRGCLAS_CD
                                         , BB.MEDCLAS_CD
                                         , BB.SMLCLAS_CD
                                         , AA.FIXD_COL
                                         , SUM(BB.ASCR) OVER(PARTITION BY AA.FIXD_COL,BB.CNSLR_ID) AS ASCR
                                         , COUNT(BB.SQN) OVER(PARTITION BY AA.FIXD_COL,BB.CNSLR_ID) AS SQN
                                         
                                         , AA.ASGN_SCOR1
                                     FROM TBL_QA_ASES_INFO_SMLCLAS AA 
                                       INNER JOIN TBL_QA_ASES_DTLS BB
                                              ON (AA.GRP_CD = BB.GRP_CD
                                                  AND AA.BIZ_BASC_CD = BB.BIZ_BASC_CD
                                                  AND AA.SEQ_NO = BB.SEQ_NO
                                                  AND AA.LRGCLAS_CD = BB.LRGCLAS_CD                       
                                                  AND AA.MEDCLAS_CD = BB.MEDCLAS_CD
                                                  AND AA.SMLCLAS_CD = BB.SMLCLAS_CD) 
                                       INNER JOIN TBL_QA_ASES CC 
                                              ON (BB.GRP_CD = CC.GRP_CD 
                                                   AND BB.BIZ_BASC_CD = CC.BIZ_BASC_CD 
                                                   AND BB.SEQ_NO = CC.SEQ_NO 
                                                   AND BB.ASES_DTM = CC.ASES_DTM 
                                                   AND BB.SQN = CC.SQN 
                                                   AND BB.CNSLR_ID = CC.CNSLR_ID)

                                     WHERE 
                                     		<!-- 
                                     		NVL(CC.SELF_CHCK_YN,'N') = 'N'
                                     		-->
                                     	 NVL(CC.DEL_YN,'N') = 'N'
                                     AND NVL(BB.DEL_YN,'N') = 'N' 
                                     AND BB.ASCR IS NOT NULL
                                     AND CC.CNSLR_ID != CC.ASES_ID                 
                                                                          
                                     
                                        AND CC.ASES_YM = #time_key#
                                        
                                        <dynamic>
				<isNotEmpty prepend="AND" property="grp_cd">
				 CC.GRP_CD=#grp_cd# 
	   		 </isNotEmpty>
	   		 
            	</dynamic>	

                                 )AA  
      )AA         
      GROUP BY AA.CNSLR_ID
    )AA   
   ) QA_JUMSU 
    
ON MMM.USR_ID = QA_JUMSU.CNSLR_ID  
 	
 	</select>
 	
	<select id="Get_MM_List_F_After" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
 	
 SELECT

     MMM.TIME_KEY           AS TIME_KEY
    ,MMM.USR_ID             AS USR_ID
    ,MMM.USR_NM             AS USR_NM
    ,MMM.INBND_HOUSE        AS INBND_HOUSE
    ,MMM.OTBND_HOUSE        AS OTBND_HOUSE
    ,MMM.TM_CNT             AS TM_CNT
    ,MMM.BASE_SUM           AS BASE_SUM
    ,MMM.BASE_RESULT        AS BASE_RESULT
    ,MMM.QA_JUMSUT          AS QA_JUMSUT
    ,NVL(MMM.ULP,0)         AS ULP
    ,MMM.DDAY               AS DDAY
    ,MMM.EMAIL              AS EMAIL
    ,MMM.QUIZ               AS QUIZ
    ,NVL(QA_JUMSU.QA_TOT,0) AS QA_TOT
    ,MMM.DDDATA             AS DDDATA
    ,MMM.GGDATA             AS GGDATA
    ,MMM.DDDATA_B           AS DDDATA_B
    ,MMM.GGDATA_B           AS GGDATA_B
    ,NVL(MMM.ERROR_DATA,0) AS ERROR_DATA
    ,NVL(MMM.STAND_DATA, 0) AS STAND_DATA
    ,MMM.BEGIN_SUM          AS BEGIN_SUM
    ,MMM.AFTER_SUM          AS AFTER_SUM
    ,MMM.FINAL_SUM          AS FINAL_SUM
    ,MMM.AMINUS             AS AMINUS
    ,MMM.AGRADE             AS AGRADE
    ,MMM.CALLBACK           AS CALLBACK <!-- 2017.06.20 콜백 추가 -->           
FROM

 (select  A.TIME_KEY as TIME_KEY
        ,B.USR_ID
        ,B.USR_NM as USR_NM
        ,A.INBND_HOUSE as INBND_HOUSE
        ,A.OTBND_HOUSE as OTBND_HOUSE
        
        ,'0' as BASE_SUM
        ,'0' as BASE_RESULT
        ,'0' as QA_JUMSUT
         ,'0' as FINAL_SUM
        ,(select 
                (100-SUM(CASE WHEN WKG_TYP_CD = 'K' THEN 2
                WHEN WKG_TYP_CD = 'N' THEN 5
                WHEN WKG_TYP_CD = 'G' THEN 10
                WHEN WKG_TYP_CD = 'H' THEN 30
                WHEN WKG_TYP_CD = 'L' THEN 30
                WHEN WKG_TYP_CD = 'M' THEN 2
                WHEN WKG_TYP_CD = 'O' THEN 5
             ELSE 0 END))*0.1 AS ULP
     from TBL_USR_WKG_TYP where substr(WKG_DT,1,6)=#time_key# and usr_id=B.USR_ID) AS ULP
        ,	( SELECT        
               SUM( CASE WHEN WKG_TYP_CD = 'A' THEN 1
                WHEN WKG_TYP_CD = 'K' THEN 1
                WHEN WKG_TYP_CD = 'N' THEN 1
                WHEN WKG_TYP_CD = 'B' THEN 0.5         
                WHEN WKG_TYP_CD = 'M' THEN 0.5
                WHEN WKG_TYP_CD = 'D' THEN 1
                WHEN WKG_TYP_CD = 'E' THEN 1    
                WHEN WKG_TYP_CD = 'J' THEN 1
                
                ELSE 0 END) as WKG_TYP_CD
      FROM TBL_USR C INNER JOIN TBL_USR_WKG_TYP D 
       ON C.USR_ID = D.USR_ID 
      AND D.WKG_DT between #time_key# || '00' and #time_key# || '31'
    WHERE C.USR_ID=A.USR_ID and WKG_DT is not null) as DDAY 
    
    ,NVL((SELECT SUM(CASE WHEN A.QUST_RSPS_YN = 'Y' THEN 1 ELSE 0 END) AS TM_CNT FROM TBL_CMP_END_HIST A WHERE A.ASGN_CNSLR_ID=B.USR_ID AND SUBSTR(A.REG_DTM,1,6) =#time_key#),0) AS TM_CNT
    
     ,(SELECT COUNT(*) FROM TBL_EML_ASGN_LOG  WHERE ASGN_CNSLR_ID = B.USR_ID  AND PROC_ST_CD = 'Y' AND PROC_DTM BETWEEN #time_key# || '00000000' and #time_key#||'32000000' AND RSV_SEQ_NO LIKE 'CAM080%') as EMAIL
        
      ,NVL((select MRKNG_SCOR FROM (select * from tbl_ofdy_QUIZ_MRKNG order by TST_STR_DTM ) WHERE CNSLR_ID=B.USR_ID and substr(TST_STR_DTM,1,6) like TIME_KEY and rownum=1),0)*0.1 as QUIZ
        
       ,(select
    	FUN_GET_HHMMSS_CHANGE(SUM(AF_PROC_DRTM)) as DDATA       	
		from tbl_bt_cti_rpt_dt AX LEFT OUTER JOIN tbl_usr BX ON AX.USR_ID=BX.USR_ID where TIME_KEY like #time_key# || '%' and AX.USR_ID=B.USR_ID	
		) as DDDATA 
         
         ,(select
    	FUN_GET_HHMMSS_CHANGE(SUM(CLE_SEAT_DRTM_REST)+SUM(CLE_SEAT_DRTM_MEAL)) AS GDATA       	
		from tbl_bt_cti_rpt_dt AX LEFT OUTER JOIN tbl_usr BX ON AX.USR_ID=BX.USR_ID where TIME_KEY like #time_key# || '%' and AX.USR_ID=B.USR_ID	
		) as GGDATA  
		,'0' as DDDATA_B
        ,'0' as GGDATA_B
        ,'0' as BEGIN_SUM
        ,'0' as AFTER_SUM
        ,(select
    	SUM(ERROR_POINT) as ERROR_DATA
		from TBL_WORK_ERROR  where TIME_KEY like #time_key# || '%' and USR_ID=B.USR_ID) as ERROR_DATA
		,(SELECT SUM(STAND_POINT) AS STAND_DATA
		    FROM TBL_WORK_STAND  
		   WHERE TIME_KEY LIKE #time_key# || '%' 
		     AND USR_ID=B.USR_ID) AS STAND_DATA
		,(select
    	MIN_POINT as AMINUS
		from tbl_MAP_FINAL  where MAP_SEQ_NO = #time_key# || B.USR_ID) as AMINUS
		,(select
    	MAP_GRADE as AGRADE
		from tbl_MAP_FINAL  where MAP_SEQ_NO = #time_key# || B.USR_ID) as AGRADE
        ,(SELECT COUNT(*) FROM TBL_CALLBACK_HIST A	WHERE CUR_TYP_CD ='01'		AND A.ASSGN_ID=B.USR_ID	AND A.PROC_DT BETWEEN #time_key#||'00' AND #time_key#||'32') as CALLBACK		                                  
  from tbl_bt_cti_rpt_ym A LEFT OUTER JOIN tbl_usr B ON A.USR_ID=B.USR_ID
  where A.time_key=#time_key# 
  <!-- 퇴사한 상담원도 조회되게 하기 위하여 수정 2012.09  -->
  <!-- and B.USE_YN='Y' -->
  and (QUAL_LOSS_DD is null or QUAL_LOSS_DD > #time_key#) <!-- 추가 -->

  <dynamic>
				<isNotEmpty prepend="AND" property="grp_cd">
				 B.GRP_CD=#grp_cd# 
	   		 </isNotEmpty>
	   		 	<isNotEmpty prepend="AND" property="part_cd">
		  		B.PART_CD=#part_cd#		   
 			</isNotEmpty>
 	</dynamic>	
  ) MMM
  
  
LEFT OUTER JOIN 
  
        (    
            SELECT 
                      AA.CNSLR_ID
                    , FUN_GET_USRNM(AA.CNSLR_ID) AS USR_NM
     , TRUNC(ROUND(AA.COL_A1 + AA.COL_A2 + AA.COL_A3 + AA.COL_A4 + AA.COL_A5 + AA.COL_A6 + AA.COL_A7 + AA.COL_A8 + AA.COL_A9 + AA.COL_A10 + AA.COL_B1 + AA.COL_B2 + AA.COL_B3 + AA.COL_B4 + AA.COL_B5 + AA.COL_B6 + AA.COL_B7 + AA.COL_B8 + AA.COL_B9 + AA.COL_B10 + AA.COL_C1 + AA.COL_C2 + AA.COL_C3 + AA.COL_C4 + AA.COL_C5 + AA.COL_C6 + AA.COL_C7 + AA.COL_C8 + AA.COL_C9 + AA.COL_C10,1),1) AS QA_TOT
    FROM (  
      SELECT 
         AA.CNSLR_ID
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'A1' THEN AA.ASCR/AA.SQN END),0)    AS COL_A1  
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'A2' THEN AA.ASCR/AA.SQN END),0)    AS COL_A2  
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'A3' THEN AA.ASCR/AA.SQN END),0)    AS COL_A3  
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'A4' THEN AA.ASCR/AA.SQN END),0)    AS COL_A4  
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'A5' THEN AA.ASCR/AA.SQN END),0)    AS COL_A5  
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'A6' THEN AA.ASCR/AA.SQN END),0)    AS COL_A6     
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'A7' THEN AA.ASCR/AA.SQN END),0)    AS COL_A7     
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'A8' THEN AA.ASCR/AA.SQN END),0)    AS COL_A8     
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'A9' THEN AA.ASCR/AA.SQN END),0)    AS COL_A9     
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'A10' THEN AA.ASCR/AA.SQN END),0)    AS COL_A10   
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'B1' THEN AA.ASCR/AA.SQN  END),0)    AS COL_B1  
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'B2' THEN AA.ASCR/AA.SQN  END),0)    AS COL_B2  
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'B3' THEN AA.ASCR/AA.SQN  END),0)    AS COL_B3  
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'B4' THEN AA.ASCR/AA.SQN  END),0)    AS COL_B4  
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'B5' THEN AA.ASCR/AA.SQN  END),0)    AS COL_B5  
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'B6' THEN AA.ASCR/AA.SQN  END),0)    AS COL_B6     
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'B7' THEN AA.ASCR/AA.SQN  END),0)    AS COL_B7     
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'B8' THEN AA.ASCR/AA.SQN  END),0)    AS COL_B8     
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'B9' THEN AA.ASCR/AA.SQN  END),0)    AS COL_B9     
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'B10' THEN AA.ASCR/AA.SQN  END),0)    AS COL_B10 
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'C1' THEN AA.ASCR/AA.SQN  END),0)    AS COL_C1  
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'C2' THEN AA.ASCR/AA.SQN  END),0)    AS COL_C2  
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'C3' THEN AA.ASCR/AA.SQN  END),0)    AS COL_C3  
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'C4' THEN AA.ASCR/AA.SQN  END),0)    AS COL_C4  
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'C5' THEN AA.ASCR/AA.SQN  END),0)    AS COL_C5  
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'C6' THEN AA.ASCR/AA.SQN  END),0)    AS COL_C6     
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'C7' THEN AA.ASCR/AA.SQN  END),0)    AS COL_C7     
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'C8' THEN AA.ASCR/AA.SQN  END),0)    AS COL_C8     
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'C9' THEN AA.ASCR/AA.SQN  END),0)    AS COL_C9     
       , NVL(MAX(CASE WHEN AA.FIXD_COL = 'C10' THEN AA.ASCR/AA.SQN END),0)    AS COL_C10
      FROM(
                             SELECT 
                                       AA.CNSLR_ID
                                     , AA.FIXD_COL 
                                     , AA.ASCR
                                     , AA.SQN
                                     
                                     , AA.ASGN_SCOR1
                                 FROM(
                                     SELECT AA.GRP_CD
                                         , AA.SEQ_NO
                                         , BB.CNSLR_ID 
                                         , GSIB.FUN_GET_USRNM(BB.CNSLR_ID) AS CNSLR_NM
                                         , BB.LRGCLAS_CD
                                         , BB.MEDCLAS_CD
                                         , BB.SMLCLAS_CD
                                         , AA.FIXD_COL
                                         , SUM(BB.ASCR) OVER(PARTITION BY AA.FIXD_COL,BB.CNSLR_ID) AS ASCR
                                         , COUNT(BB.SQN) OVER(PARTITION BY AA.FIXD_COL,BB.CNSLR_ID) AS SQN
                                         
                                         , AA.ASGN_SCOR1
                                     FROM TBL_QA_ASES_INFO_SMLCLAS AA 
                                       INNER JOIN TBL_QA_ASES_DTLS BB
                                              ON (AA.GRP_CD = BB.GRP_CD
                                                  AND AA.BIZ_BASC_CD = BB.BIZ_BASC_CD
                                                  AND AA.SEQ_NO = BB.SEQ_NO
                                                  AND AA.LRGCLAS_CD = BB.LRGCLAS_CD                       
                                                  AND AA.MEDCLAS_CD = BB.MEDCLAS_CD
                                                  AND AA.SMLCLAS_CD = BB.SMLCLAS_CD) 
                                       INNER JOIN TBL_QA_ASES CC 
                                              ON (BB.GRP_CD = CC.GRP_CD 
                                                   AND BB.BIZ_BASC_CD = CC.BIZ_BASC_CD 
                                                   AND BB.SEQ_NO = CC.SEQ_NO 
                                                   AND BB.ASES_DTM = CC.ASES_DTM 
                                                   AND BB.SQN = CC.SQN 
                                                   AND BB.CNSLR_ID = CC.CNSLR_ID)

                                     WHERE 
                                     		<!-- 
                                     		NVL(CC.SELF_CHCK_YN,'N') = 'N'
                                     		-->
                                     	 NVL(CC.DEL_YN,'N') = 'N'
                                     AND NVL(BB.DEL_YN,'N') = 'N' 
                                     AND BB.ASCR IS NOT NULL
                                     AND CC.CNSLR_ID != CC.ASES_ID                 
                                                                          
                                     
                                        AND CC.ASES_YM = #time_key#
                                        
                                        <dynamic>
				<isNotEmpty prepend="AND" property="grp_cd">
				 CC.GRP_CD=#grp_cd# 
	   		 </isNotEmpty>
	   		 
            	</dynamic>	

                                 )AA  
      )AA         
      GROUP BY AA.CNSLR_ID
    )AA   
   ) QA_JUMSU 
    
ON MMM.USR_ID = QA_JUMSU.CNSLR_ID  
 	
 	</select>
 	 	
<!-- 
******************************************
월평가 파이날 테이블 저장
******************************************
 -->
<insert id="Set_MAP050_insert_F" parameterClass="java.util.HashMap">
		insert into TBL_MAP_FINAL  (MAP_SEQ_NO,
										TIME_KEY,	
										
										USR_ID,
										
										MIN_POINT,
										MAP_GRADE,
										REG_ID,
										REG_DTM,
										LST_CORC_ID,
										LST_CORC_DTM											
										) 
		   						       values (
		   						       #map_seq_no#,
		   						        #time_key#,		   						       
										#usr_id#,
										
										#min_point#,
										#map_grade#
		   						        , #gbl_usr_id#
                     					, TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
                     					, #gbl_usr_id#
                     					, TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
		   						       )
            
							    	     
 	</insert>

 	

<!-- 
******************************************
업무오류정보삭제
******************************************
 --> 	
<update id="Set_MAP_DELETE" parameterClass="java.util.HashMap">	  
		
		delete TBL_MAP_FINAL   
            where MAP_SEQ_NO=#map_seq_no#
							    	     
 	</update>
 	

<!-- 
******************************************
월평가 집계 확인
******************************************
 --> 	

	<select id="Get_MAP050_STA_FIND" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
		select count(SEQ_NO) as CDATA
		 from TBL_MAP_DATA  
		 where TIME_KEY=#time_key#
		  and PART_CD=#part_cd#
 	</select> 	

	
<!-- 
******************************************
월평가 집계 저장
******************************************
 -->
<insert id="Set_MAP050_STA_INSERT" parameterClass="java.util.HashMap">
		insert into TBL_MAP_DATA  (		SEQ_NO,
										TIME_KEY,
										USR_ID,
										USR_NM,
										GRP_CD,
										PART_CD,
										MAP_DATA,
										MAP_GRADE,
										REG_ID,
										REG_DTM,
										LST_CORC_ID,
										LST_CORC_DTM											
										) 
		   						       values (
		   						         #seq_no#
		   						        , #time_key#
		   						        , #usr_id#
		   						        , #usr_nm#
		   						        , #grp_cd#
		   						        , #part_cd#
		   						        , #map_data#
		   						        , #map_grade#		   						        		   						         
		   						        , #gbl_usr_id#
                     					, TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
                     					, #gbl_usr_id#
                     					, TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
		   						       )
            
							    	     
 	</insert>


<!-- 
******************************************
월평가 집계 조회
******************************************
 --> 	

	<select id="Get_MAP050_STA_SELECT" resultClass="java.util.HashMap"  parameterClass="java.util.HashMap">
		select SEQ_NO,
		FUN_GET_PARTNM('BNS',PART_CD) as PART_CD,		
		USR_ID,USR_NM,MAP_DATA,MAP_GRADE
		 from TBL_MAP_DATA  
		 where TIME_KEY=#time_key#
		 <dynamic>
		 	<isNotEmpty prepend="AND" property="grp_cd">
		 	GRP_CD=#grp_cd#
		 	</isNotEmpty>	
		 	<isNotEmpty prepend="AND" property="part_cd">
		 	PART_CD=#part_cd#
		 	</isNotEmpty>		 
		 </dynamic>
		
 	</select> 	
<update id="Set_MAP050_STA_UPDATE" parameterClass="java.util.HashMap">

update TBL_MAP_DATA set MAP_DATA=#map_data#,MAP_GRADE=#map_grade#  where SEQ_NO=#seq_no#

</update>
 	
</sqlMap>
